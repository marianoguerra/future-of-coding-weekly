[
    {
        "client_msg_id": "7e4f55ef-887a-403a-bdaa-82600e27f360",
        "type": "message",
        "text": "Last night I spent some time documenting an almost-trivial state machine that I keep getting wrong: <https://docs.google.com/document/d/1EbK4AxDCDWonMa8KyGJFX4jllXXLew0qBsGxsmqoYqk>\n\nState machines are _hard_!\n\u2022 We usually have one in our head when we program.\n\u2022 The abstract state in my head is usually made up of multiple concrete variables in the program.\n\u2022 Mutations happen to variables, but it's not obvious at each how the abstract state is changing.\n\u2022 The state machine in my head often evolves, which makes documentation challenging to keep up to date. Which is why I think nobody builds documents like these.\nTell me how immutability or State Charts will solve all my problems :slightly_smiling_face:",
        "user": "UCUSW7WVD",
        "ts": "1691945999.321379",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c/I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Last night I spent some time documenting an almost-trivial state machine that I keep getting wrong: "
                            },
                            {
                                "type": "link",
                                "url": "https://docs.google.com/document/d/1EbK4AxDCDWonMa8KyGJFX4jllXXLew0qBsGxsmqoYqk"
                            },
                            {
                                "type": "text",
                                "text": "\n\nState machines are "
                            },
                            {
                                "type": "text",
                                "text": "hard",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "!\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We usually have one in our head when we program."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The abstract state in my head is usually made up of multiple concrete variables in the program."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Mutations happen to variables, but it's not obvious at each how the abstract state is changing."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The state machine in my head often evolves, which makes documentation challenging to keep up to date. Which is why I think nobody builds documents like these."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nTell me how immutability or State Charts will solve all my problems "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1691949807.000000"
        },
        "thread_ts": "1691945999.321379",
        "reply_count": 62,
        "reply_users_count": 13,
        "latest_reply": "1693150474.578739",
        "reply_users": [
            "UC2A2ARPT",
            "USH01JEDQ",
            "U0123H7JRDM",
            "UCUSW7WVD",
            "UBN9AFS0N",
            "U02U0AS3J49",
            "U013ZLJARC7",
            "UA14TGLTC",
            "UJBAJNFLK",
            "UMV4B97GT",
            "U0378MDUG1Y",
            "UGWUJUZHT",
            "U03R0B9U1GD"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1692109655.971959",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "UMQ6LR9NZ",
                    "UML4ZEKDK",
                    "UJFN50C00"
                ],
                "count": 4
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "CF4CBCEC-99A0-48BC-92D2-94216BB33FE8",
        "type": "message",
        "text": "A visual programming system ... with state charts ... and good control over execution ... will solve all your problems. :magic_wand: :tophat: :rabbit2: ",
        "user": "UC2A2ARPT",
        "ts": "1691947360.742009",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jNwT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A visual programming system ... with state charts ... and good control over execution ... will solve all your problems. "
                            },
                            {
                                "type": "emoji",
                                "name": "magic_wand",
                                "unicode": "1fa84"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "tophat",
                                "unicode": "1f3a9"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "rabbit2",
                                "unicode": "1f407"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "464def52-5f75-433c-81bf-c1017a39ac02",
        "type": "message",
        "text": "What about \"visual programming system only of state charts\" \u2013 (too hard to learn or start something new with?)",
        "user": "USH01JEDQ",
        "ts": "1691949701.254449",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eLXyY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What about \"visual programming system only of state charts\" \u2013 (too hard to learn or start something new with?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "132BDB7B-EE84-4D4C-ACBE-8497A7EB0990",
        "type": "message",
        "text": "Something like xstate? Although it is javascript focused which might not suite everyone. In my own project I want to combine statecharts with more regular nodes and wires, hope to demo something \"soonish\" :blush:",
        "user": "U0123H7JRDM",
        "ts": "1691950057.110489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/OA=D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something like xstate? Although it is javascript focused which might not suite everyone. In my own project I want to combine statecharts with more regular nodes and wires, hope to demo something \"soonish\" "
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c43bb6a4-0d02-4bf9-885f-64caf9603516",
        "type": "message",
        "text": "<@U0123H7JRDM> yeah for this thread I'm willing to try any tools or languages. I'm just curious to see examples of how others might organize the state machine in my doc to be easier to maintain.",
        "user": "UCUSW7WVD",
        "ts": "1691950883.713919",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ckJm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": " yeah for this thread I'm willing to try any tools or languages. I'm just curious to see examples of how others might organize the state machine in my doc to be easier to maintain."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "659d64ab-ba5f-4198-90bd-052d07c9b87e",
        "type": "message",
        "text": "it may be overkill but TLA+/PlusCal? :smile: <https://www.learntla.com/> <https://lamport.azurewebsites.net/tla/tla.html>",
        "user": "UBN9AFS0N",
        "ts": "1691951619.222719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6sH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it may be overkill but TLA+/PlusCal? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://www.learntla.com/"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://lamport.azurewebsites.net/tla/tla.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "0c6a89c2-bbfa-4a74-90ce-e82bc63795e1",
        "type": "message",
        "text": "I'd love to see what the TLA+ solution for this looks like. It wouldn't be directly executable, right? But it's one step more rigorous than the document, is that the right way to think about it?",
        "user": "UCUSW7WVD",
        "ts": "1691951722.721159",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Bd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to see what the TLA+ solution for this looks like. It wouldn't be directly executable, right? But it's one step more rigorous than the document, is that the right way to think about it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "da2df7f9-2e7c-46f6-aa8d-06f773424c4c",
        "type": "message",
        "text": "executing it means proving it's a well formed specification",
        "user": "UBN9AFS0N",
        "ts": "1691951754.212589",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JFvJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "executing it means proving it's a well formed specification"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1c14940d-0b9c-4ca0-b4f2-aeeac76d0a26",
        "type": "message",
        "text": "There's a big list of specifications here: <https://github.com/tlaplus/Examples/tree/master/specifications>",
        "user": "UBN9AFS0N",
        "ts": "1691951779.064439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BSdf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a big list of specifications here: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/tlaplus/Examples/tree/master/specifications"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "668767c6-9646-49cc-82b1-7e40c7117e30",
        "type": "message",
        "text": "Lamport's TLA page has a video course that I found really useful",
        "user": "UBN9AFS0N",
        "ts": "1691951843.040919",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DH=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamport's TLA page has a video course that I found really useful"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "2f482daf-0179-4e0c-a3e6-8b2f3a2a9b4a",
        "type": "message",
        "text": "For me, executing it means when I click on the button I get a plot. And it doesn't hog disk reads too much, it's a good citizen of my computer.\n\nIf the state machine lives outside the program that executes, how can I get an automated alert when I add a state to the state machine but forget to change the code.\n\nThat's basically the problem statement. My sense is that formal methods aren't quite here yet. Which is fine, not a criticism. I just want to focus this thread on the best possible solution for a single example. We like programming by example here, right? For this example and these design goals, what is the best representation we can think of that's \"hard scifi\" (doesn't have to be working code yet, but also doesn't require solving hard unsolved research problems).\n\nAnd I want to see the (pseudo)code :stuck_out_tongue: Around the same level of detail as the 5 10-line versions I wrote in the doc.",
        "user": "UCUSW7WVD",
        "ts": "1691952308.495689",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tzjV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me, executing it means when I click on the button I get a plot. And it doesn't hog disk reads too much, it's a good citizen of my computer.\n\nIf the state machine lives outside the program that executes, how can I get an automated alert when I add a state to the state machine but forget to change the code.\n\nThat's basically the problem statement. My sense is that formal methods aren't quite here yet. Which is fine, not a criticism. I just want to focus this thread on the best possible solution for a single example. We like programming by example here, right? For this example and these design goals, what is the best representation we can think of that's \"hard scifi\" (doesn't have to be working code yet, but also doesn't require solving hard unsolved research problems).\n\nAnd I want to see the (pseudo)code "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": " Around the same level of detail as the 5 10-line versions I wrote in the doc."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1691952408.000000"
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "E66F2640-FEBF-4FF9-B77D-80A0BCD4D861",
        "type": "message",
        "text": "I like programming by hand-waving at things that don't exist yet in the hope that someone else builds them.",
        "user": "UC2A2ARPT",
        "ts": "1691952458.867749",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ABcsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like programming by hand-waving at things that don't exist yet in the hope that someone else builds them"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02U0AS3J49",
                    "UMQ6LR9NZ"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "U0245E9RB2B"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "74ad8efc-ed0c-48dc-999b-15a9b3dc0ca6",
        "type": "message",
        "text": "Go away, Ivan :stuck_out_tongue: &lt;obi wan&gt;This is not the thread you are looking for.&lt;/obi wan&gt;",
        "user": "UCUSW7WVD",
        "ts": "1691952510.113299",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3rTE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Go away, Ivan "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": " <obi wan>This is not the thread you are looking for.</obi wan>"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "ghost",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "UMQ6LR9NZ"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "7d96f223-cd8f-4951-9747-ebd1001adaa5",
        "type": "message",
        "text": "One idea I would love to have time for is a parser for TLA+ that draws it some way and allows to step through the execution of different \"traces\"",
        "user": "UBN9AFS0N",
        "ts": "1691952962.662029",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k3cVq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One idea I would love to have time for is a parser for TLA+ that draws it some way and allows to step through the execution of different \"traces\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "6da83de2-9fcd-4e44-aada-5f202f382c04",
        "type": "message",
        "text": "same for quickcheck style property based testing specifications",
        "user": "UBN9AFS0N",
        "ts": "1691952975.688539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4kNW8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "same for quickcheck style property based testing specifications"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "7a1e5dfd-2392-4c4a-a8da-c02a2d5fba12",
        "type": "message",
        "text": "I have yet to see a trace visualizer for a logical language that was remotely legible, or a way of visualizing the execution of logical code using its source. I'm desperate to use them if they exist, so let me know. The closest I have seen is a system that maintains a set of successful search routes, then turns each into a tree-structured justification where each node of the tree and it's immediate children correspond to a rule clause. There might be things you could do to link those trees to the source code more explicitly in an interface. I've done something similar in Blawx where elements of the tree are linked to source legal text. But that's not execution tracing, it's answer justification.",
        "user": "U02U0AS3J49",
        "ts": "1691958060.376129",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mkQ/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have yet to see a trace visualizer for a logical language that was remotely legible, or a way of visualizing the execution of logical code using its source. I'm desperate to use them if they exist, so let me know. The closest I have seen is a system that maintains a set of successful search routes, then turns each into a tree-structured justification where each node of the tree and it's immediate children correspond to a rule clause. There might be things you could do to link those trees to the source code more explicitly in an interface. I've done something similar in Blawx where elements of the tree are linked to source legal text. But that's not execution tracing, it's answer justification."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "eb6d8d3d-7afe-4698-9425-393fa73421a5",
        "type": "message",
        "text": "I have been obsessed with making logical code easier to use for a few years, now, and I don't even know what I would WANT out of a trace visualizer. The only things I can imagine would work, like a zoomable, color coded, annotated search tree, seem like they would be of limited utility unless what you wanted to know was why your code ran so slowly. And you pretty much don't care about that when you are writing things like TLA+ specs.",
        "user": "U02U0AS3J49",
        "ts": "1691958752.904259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kkA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been obsessed with making logical code easier to use for a few years, now, and I don't even know what I would WANT out of a trace visualizer. The only things I can imagine would work, like a zoomable, color coded, annotated search tree, seem like they would be of limited utility unless what you wanted to know was why your code ran so slowly. And you pretty much don't care about that when you are writing things like TLA+ specs."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "46eada59-5e2e-4c3f-a738-8c39e8cc64db",
        "type": "message",
        "text": "For the record, I haven't actually used TLA+, but I have taken a lot of inspiration from Hillel Wayne's promotion of it, and of formal methods more generally.",
        "user": "U02U0AS3J49",
        "ts": "1691958861.702379",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xKH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the record, I haven't actually used TLA+, but I have taken a lot of inspiration from Hillel Wayne's promotion of it, and of formal methods more generally."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "32af055b-5669-4c7a-97b4-29ef68da84d6",
        "type": "message",
        "text": "Do I understand the state machine correctly in that it starts checking for the file at &lt;interval&gt; when the button is pressed, but never stops if an error occurs in the image generation process?",
        "user": "U013ZLJARC7",
        "ts": "1691993163.416229",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7WDok",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do I understand the state machine correctly in that it starts checking for the file at <interval> when the button is pressed, but never stops if an error occurs in the image generation process?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "6d49f15d-d7df-404d-b1db-9448b0a6abcc",
        "type": "message",
        "text": "Yes indeed! :thinking_face:",
        "user": "UCUSW7WVD",
        "ts": "1691996085.378999",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kPW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes indeed! "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "c361e685-1f19-4232-aad9-809ae10c8015",
        "type": "message",
        "text": "Over the years, I've confronted and reflected on this very sort of problem more times than I'm happy to recount.\n\nIn confrontation, I always hack things together and always have subtle bugs and race conditions.  Likewise, pretty much every GUI I've used glitches or breaks under specially-timed sequences of events.\n\nIn reflection, the difficulty comes from a simple, ideal sequence of events (press button, fill image) running into a messy temporal reality (delay between button press and image being ready) vastly increasing the \"what if\" state-space.  (See also validating input, and dealing with parse errors.)  Half of the \"what if\" could be handled in a principled way, half is more tricky.  How much of the UI should freeze up while waiting?  Is there any reasonable way to cancel the operation?  Added is the simple fact that API/frameworks/tools for building UIs are full of the same kind of glitches.",
        "user": "UA14TGLTC",
        "ts": "1691997630.261459",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xe8vz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Over the years, I've confronted and reflected on this very sort of problem more times than I'm happy to recount.\n\nIn confrontation, I always hack things together and always have subtle bugs and race conditions.  Likewise, pretty much every GUI I've used glitches or breaks under specially-timed sequences of events.\n\nIn reflection, the difficulty comes from a simple, ideal sequence of events (press button, fill image) running into a messy temporal reality (delay between button press and image being ready) vastly increasing the \"what if\" state-space.  (See also validating input, and dealing with parse errors.)  Half of the \"what if\" could be handled in a principled way, half is more tricky.  How much of the UI should freeze up while waiting?  Is there any reasonable way to cancel the operation?  Added is the simple fact that API/frameworks/tools for building UIs are full of the same kind of glitches."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8a940f43-9909-40b3-b9fa-3ebd0a3d68ab",
        "type": "message",
        "text": "Is the use of a state machine a requirement here? Personally, I'd prefer dealing with your situation in terms of events, both for the code and for the documentation. I guess one can always convert event handling into a state machine, with each event becoming a state transition, but states are not my preferred way of thinking about this.",
        "user": "UJBAJNFLK",
        "ts": "1692006470.391889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nz3S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is the use of a state machine a requirement here? Personally, I'd prefer dealing with your situation in terms of events, both for the code and for the documentation. I guess one can always convert event handling into a state machine, with each event becoming a state transition, but states are not my preferred way of thinking about this."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "96b27aa6-20d9-46b4-9c6c-71d821191ffb",
        "type": "message",
        "text": "One common way to make this sort of thing suck less is concurrency. When you hear the Go people making a distinction between concurrency and parallelism, it\u2019s because being able to having multiple threads of execution (which, again, needn\u2019t run in parallel) allows you to write code like this in a more straightforward way. You can, in some sense, think of the state machine you\u2019re writing as something like manual loop unrolling \u2014 you play compiler in your head to maintain the state of multiple tasks, rather than letting the language/runtime do it. Here\u2019s some clojure code to do something like this using `future` to start a second task:\n```(def image (atom nil))\n\n(defn plot [thing]\n  (future\n    (reset! image (if-let [filename (plot-thing-return-filename-or-nil thing)]\n                    (load-image filename)\n                    error-image)))) ; presumably a sad computer face :(\n\n(defn application-loop []\n  ,,,) ; call plot when they push the button```",
        "user": "U013ZLJARC7",
        "ts": "1692010370.266779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D0uh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One common way to make this sort of thing suck less is concurrency. When you hear the Go people making a distinction between concurrency and parallelism, it\u2019s because being able to having multiple threads of execution (which, again, needn\u2019t run in parallel) allows you to write code like this in a more straightforward way. You can, in some sense, think of the state machine you\u2019re writing as something like manual loop unrolling \u2014 you play compiler in your head to maintain the state of multiple tasks, rather than letting the language/runtime do it. Here\u2019s some clojure code to do something like this using "
                            },
                            {
                                "type": "text",
                                "text": "future",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to start a second task:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(def image (atom nil))\n\n(defn plot [thing]\n  (future\n    (reset! image (if-let [filename (plot-thing-return-filename-or-nil thing)]\n                    (load-image filename)\n                    error-image)))) ; presumably a sad computer face :(\n\n(defn application-loop []\n  ,,,) ; call plot when they push the button"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "type": "message",
        "text": "Feeling the urge to do the whole TLA+ course for no reason other than this",
        "files": [
            {
                "id": "F05MMM1STB4",
                "created": 1691997357,
                "timestamp": 1691997357,
                "name": "Screenshot 2023-08-14 at 3.06.18 pm.png",
                "title": "Screenshot 2023-08-14 at 3.06.18 pm.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMV4B97GT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 885561,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05MMM1STB4/screenshot_2023-08-14_at_3.06.18_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05MMM1STB4/download/screenshot_2023-08-14_at_3.06.18_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 203,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 271,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 406,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 451,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 541,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MMM1STB4-99d8c985ea/screenshot_2023-08-14_at_3.06.18_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 577,
                "original_w": 2736,
                "original_h": 1542,
                "thumb_tiny": "AwAbADDSOc0m71paMUgAHNLRRQAUUhYDqaQSIejA0AOooooAKKKKAKt50xnGV61XtCAzDfknBxTtRG6VAc4x0zVNI1DAgd/WmB//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UMV4B97GT/F05MMM1STB4/screenshot_2023-08-14_at_3.06.18_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05MMM1STB4-2f1c439832",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F05N0AJ3LTB",
                "created": 1691997367,
                "timestamp": 1691997367,
                "name": "Screenshot 2023-08-14 at 3.06.44 pm.png",
                "title": "Screenshot 2023-08-14 at 3.06.44 pm.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMV4B97GT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 1853234,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05N0AJ3LTB/screenshot_2023-08-14_at_3.06.44_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05N0AJ3LTB/download/screenshot_2023-08-14_at_3.06.44_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 133,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 178,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 266,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 296,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 355,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N0AJ3LTB-db5a30050a/screenshot_2023-08-14_at_3.06.44_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 379,
                "original_w": 2752,
                "original_h": 1018,
                "thumb_tiny": "AwARADDS5o5pu8en6ik3jH/16QD+aOaZv9v/AB4Ubx6fqKAK167q3yjJI/Kq9q8hO1uR656VdkjErA+3TIpqWu0fex+FMCf+Khuho/ioboaAFpO9LSd6AFHUU6mjqKdSA//Z",
                "permalink": "https://futureofcoding.slack.com/files/UMV4B97GT/F05N0AJ3LTB/screenshot_2023-08-14_at_3.06.44_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05N0AJ3LTB-f5dd5d6735",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F05MJPL7FL5",
                "created": 1691997382,
                "timestamp": 1691997382,
                "name": "Screenshot 2023-08-14 at 2.11.23 pm.png",
                "title": "Screenshot 2023-08-14 at 2.11.23 pm.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMV4B97GT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 2701328,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05MJPL7FL5/screenshot_2023-08-14_at_2.11.23_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05MJPL7FL5/download/screenshot_2023-08-14_at_2.11.23_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 249,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 332,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 499,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 554,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 665,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MJPL7FL5-784cb740be/screenshot_2023-08-14_at_2.11.23_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 709,
                "original_w": 2434,
                "original_h": 1686,
                "thumb_tiny": "AwAhADDQ2dfnb86ULjuT9adRSAY0gU4INMe4RFy2RTZz8/4VnyuXmOQeOlAzRW6jc4Gc+9P80Z6GskE5yDxWgpzg0CLVFFFAFa4+/wDhVZwM5xz0NT3bbW/Cq2eODmmXGNyNNpYAj5c81dQg4wciqmBuPrT4GxKB70DcdDTooopGZBP1/Coh92pZ+v4VEPu0y1sH8RpU+/8AjSfxGlT7/wCNAz//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UMV4B97GT/F05MJPL7FL5/screenshot_2023-08-14_at_2.11.23_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05MJPL7FL5-b345a67173",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UMV4B97GT",
        "ts": "1692064493.276489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7vCp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Feeling the urge to do the whole TLA+ course for no reason other than this"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "bbc7ca65-a5ee-4461-8058-99ebe5ce65a2",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "432c2943-f946-4561-8402-ff5238eaee16",
        "type": "message",
        "text": "As I was reading through your refinements I was reminded of Ian Horrock's description of \"the bottom-up approach to user interfaces\":\n\n&gt; Typically, each event handler starts with a basic sequence of actions that will be executed in response to an event. And because an item may respond to an event in different ways, depending on the context in which it is used, conditional statements are added to determine the context in which the event has occurred and therefore which actions to execute.\n&gt; - Constructing User Interfaces with Statecharts (1999)\nIt seems like the LOVE game engine is is nudging you to reason about the behavior of this UI directly in its event listeners (e.g. `load`/`update`/`render`). Specifically, I don't fully understand why it's necessary to check whether the file exists on every frame (i.e. `update` ) and defensively guard against it? Feels like complexity is creeping in from that.\n\nWhile a statechart is not going to solve all of your problems, I do think there are compelling reasons it could be useful at the very least to reason through the behavior of this UI.\n\n```machine Rplot {\n  on PLOT -&gt; .querying do resetImage\n\n  initial state idle\n\n  state querying {\n    spawn R_query\n\n    from R_query {\n      on IMAGE_READY -&gt; drawing do setImageFromFile\n    }\n  }\n\n  state drawing {\n    on RENDER do drawImage\n  }\n}```\nThis example is of a little language called StateML that I'm currently building out. It enables us reason about behavior higher up the ladder of abstraction and provide \"named holes\" to fill in implementations when we pull it into the host language latter on.\n\n\u2022 The `PLOT` event causes a transition no matter what state the UI is in.\n\u2022 In the `querying` state we defined that an `R_query` activity is spawned. The lifetime of an activity is bound to the state it is spawned in and the statechart can react to events sent directly from that activity. The implementation of `R_query` is left open, the only behaviorally important aspects are that it emits an event that tells us when the image file is ready and has logic to cancel/ignore the query if another PLOT happens. If you want to implement that with polling or some other method it's up to you.\n\u2022 Once the query finishes we enter the `drawing` state and draw the image on each frame.\n\u2022 Even for this simple example there are cases that are not covered like if the image fails to generate or maybe takes too long what should be do. We can easily specify that additional behavior:\n```machine Rplot {\n  on PLOT -&gt; .querying do resetImage\n\n  initial state idle\n\n  state querying {\n    spawn R_query\n\n    from R_query {\n      on IMAGE_READY -&gt; drawing do setImageFromFile\n      on ERROR -&gt; idle do displayError\n    }\n\n    after 30s -&gt; idle do showTimeoutError\n  }\n\n  state drawing {\n    on RENDER do drawImage\n  }\n}```",
        "user": "U0378MDUG1Y",
        "ts": "1692080998.894609",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hrlfs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As I was reading through your refinements I was reminded of Ian Horrock's description of \"the bottom-up approach to user interfaces\":\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Typically, each event handler starts with a basic sequence of actions that will be executed in response to an event. And because an item may respond to an event in different ways, depending on the context in which it is used, conditional statements are added to determine the context in which the event has occurred and therefore which actions to execute.\n- Constructing User Interfaces with Statecharts (1999)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIt seems like the LOVE game engine is is nudging you to reason about the behavior of this UI directly in its event listeners (e.g. "
                            },
                            {
                                "type": "text",
                                "text": "load",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "/"
                            },
                            {
                                "type": "text",
                                "text": "update",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "/"
                            },
                            {
                                "type": "text",
                                "text": "render",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). Specifically, I don't fully understand why it's necessary to check whether the file exists on every frame (i.e. "
                            },
                            {
                                "type": "text",
                                "text": "update",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ) and defensively guard against it? Feels like complexity is creeping in from that.\n\nWhile a statechart is not going to solve all of your problems, I do think there are compelling reasons it could be useful at the very least to reason through the behavior of this UI.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "machine Rplot {\n  on PLOT -> .querying do resetImage\n\n  initial state idle\n\n  state querying {\n    spawn R_query\n\n    from R_query {\n      on IMAGE_READY -> drawing do setImageFromFile\n    }\n  }\n\n  state drawing {\n    on RENDER do drawImage\n  }\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis example is of a little language called StateML that I'm currently building out. It enables us reason about behavior higher up the ladder of abstraction and provide \"named holes\" to fill in implementations when we pull it into the host language latter on.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The "
                                    },
                                    {
                                        "type": "text",
                                        "text": "PLOT",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " event causes a transition no matter what state the UI is in."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "querying",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " state we defined that an "
                                    },
                                    {
                                        "type": "text",
                                        "text": "R_query",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " activity is spawned. The lifetime of an activity is bound to the state it is spawned in and the statechart can react to events sent directly from that activity. The implementation of "
                                    },
                                    {
                                        "type": "text",
                                        "text": "R_query",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is left open, the only behaviorally important aspects are that it emits an event that tells us when the image file is ready and has logic to cancel/ignore the query if another PLOT happens. If you want to implement that with polling or some other method it's up to you."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Once the query finishes we enter the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "drawing",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " state and draw the image on each frame."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Even for this simple example there are cases that are not covered like if the image fails to generate or maybe takes too long what should be do. We can easily specify that additional behavior:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "machine Rplot {\n  on PLOT -> .querying do resetImage\n\n  initial state idle\n\n  state querying {\n    spawn R_query\n\n    from R_query {\n      on IMAGE_READY -> drawing do setImageFromFile\n      on ERROR -> idle do displayError\n    }\n\n    after 30s -> idle do showTimeoutError\n  }\n\n  state drawing {\n    on RENDER do drawImage\n  }\n}"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7ca5b6d4-6327-468d-a189-62b9372472f2",
        "type": "message",
        "text": "Roughly, this is how I would solve the problem, as I understand it.  I\u2019ve created the code for the control flow portion of this and have left hooks for the non-control-flow stuff like image rendering functionality.\n\nI include the way that I would test this, too.\n\n<https://github.com/guitarvydas/kartik/blob/dev/kartik-RPlot-black-box.drawio.svg>\n\nDeep in the bowels of this thing, I draw a State Machine something like\n\n<https://github.com/guitarvydas/kartik/blob/dev/image-cache.svg>\n\n\ncode repo: <https://github.com/guitarvydas/kartik>",
        "user": "UGWUJUZHT",
        "ts": "1692109218.272399",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qOZ1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Roughly, this is how I would solve the problem, as I understand it.  I\u2019ve created the code for the control flow portion of this and have left hooks for the non-control-flow stuff like image rendering functionality.\n\nI include the way that I would test this, too.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/guitarvydas/kartik/blob/dev/kartik-RPlot-black-box.drawio.svg"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDeep in the bowels of this thing, I draw a State Machine something like\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/guitarvydas/kartik/blob/dev/image-cache.svg"
                            },
                            {
                                "type": "text",
                                "text": "\n\n\ncode repo: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/guitarvydas/kartik"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F05MY316B3N",
                "created": 1692109532,
                "timestamp": 1692109532,
                "name": "Screenshot 2023-08-15 at 10.24.57 AM.png",
                "title": "Screenshot 2023-08-15 at 10.24.57 AM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UGWUJUZHT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 250004,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05MY316B3N/screenshot_2023-08-15_at_10.24.57_am.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05MY316B3N/download/screenshot_2023-08-15_at_10.24.57_am.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 280,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 373,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 560,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 622,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 747,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MY316B3N-b41664f01a/screenshot_2023-08-15_at_10.24.57_am_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 797,
                "original_w": 1342,
                "original_h": 1044,
                "thumb_tiny": "AwAlADB9jbwvaozxqWOeSPerP2O3/wCeKflUen/8eUf4/wA6tDpQBB9lg/54JR9kg/54JREZjMd+dnbIFWMim1YCv9kg/wCeCVBf20Mdo7JGoYY5A96v1V1L/jxk/D+dIBNP5so/x/nVodKq6d/x5R/j/OrYoAQ4xxQBxSYyTSgGgBaq6l/x4yfh/OrVVdS/48ZPw/nQBlxXs0UYRCAo9qf/AGlc/wB5f++aqUUAW/7RuP7y/wDfNH9o3P8AeX/vmqlFAFv+0bn+8P8AvmmS3s8sZR2BU9eKr0UAf//Z",
                "permalink": "https://futureofcoding.slack.com/files/UGWUJUZHT/F05MY316B3N/screenshot_2023-08-15_at_10.24.57_am.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05MY316B3N-a12d7ee7d1",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "ts": "1692109537.263859",
        "client_msg_id": "8621218b-0cac-4197-b207-b6ff46d20cfa",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "8693e221-aee4-4586-b11f-f9ce3dde598a",
        "type": "message",
        "text": "essay: <https://github.com/guitarvydas/kartik/blob/dev/README.md>",
        "user": "UGWUJUZHT",
        "ts": "1692109655.971959",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m35xa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "essay: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/guitarvydas/kartik/blob/dev/README.md"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "&gt; I'm just curious to see examples of how others might organize the state machine in my doc to be easier to maintain.\n&gt; \nBy drawing lots of pictures (on paper, post-it notes, napkins, and sometimes tldraw).\n\nHere's the state machine we drew when we were building 'cursor chat':",
        "files": [
            {
                "id": "F05NE1WQAS2",
                "created": 1692513018,
                "timestamp": 1692513018,
                "name": "247091915-847543db-cb79-4b50-874e-f347fe8175d3.png",
                "title": "247091915-847543db-cb79-4b50-874e-f347fe8175d3.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U03R0B9U1GD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 388181,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05NE1WQAS2/247091915-847543db-cb79-4b50-874e-f347fe8175d3.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05NE1WQAS2/download/247091915-847543db-cb79-4b50-874e-f347fe8175d3.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 201,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 268,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 402,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 447,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 536,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NE1WQAS2-e4cdca83fa/247091915-847543db-cb79-4b50-874e-f347fe8175d3_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 572,
                "original_w": 3018,
                "original_h": 1686,
                "thumb_tiny": "AwAaADDRAA7UmPY0uD60jE9M0AKR/nFHGehpM89aO3c0AOFFJz2/Wl59qAAdKQjLdKTNFAC45oHHBpKKAHUUi9KWgD//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U03R0B9U1GD/F05NE1WQAS2/247091915-847543db-cb79-4b50-874e-f347fe8175d3.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05NE1WQAS2-63b24af94f",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U03R0B9U1GD",
        "display_as_bot": false,
        "ts": "1692513046.439219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N2d",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm just curious to see examples of how others might organize the state machine in my doc to be easier to maintain.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBy drawing lots of pictures (on paper, post-it notes, napkins, and sometimes tldraw).\n\nHere's the state machine we drew when we were building 'cursor chat':"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "93014833-bb47-40b7-81ad-34b98d7a69fc",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "A week later, we decided to change the state machine, and I was able to communicate this by adding to the drawing. (spot the extra blue arrow)",
        "files": [
            {
                "id": "F05NLHXJDNF",
                "created": 1692513100,
                "timestamp": 1692513100,
                "name": "248816689-d287050b-c0a5-477b-9c45-b5e47177375d.png",
                "title": "248816689-d287050b-c0a5-477b-9c45-b5e47177375d.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U03R0B9U1GD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 439828,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05NLHXJDNF/248816689-d287050b-c0a5-477b-9c45-b5e47177375d.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05NLHXJDNF/download/248816689-d287050b-c0a5-477b-9c45-b5e47177375d.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 200,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 267,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 401,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 445,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 534,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NLHXJDNF-6ebf77ff4e/248816689-d287050b-c0a5-477b-9c45-b5e47177375d_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 570,
                "original_w": 4382,
                "original_h": 2438,
                "thumb_tiny": "AwAaADDRAHpSfnSjPrSMSOKADt7/AEo4z0NGeaOcdzQA4UUnPb9aXn2oAB0FIRk02loAXHNA44NJRQA71ooHSigD/9k=",
                "permalink": "https://futureofcoding.slack.com/files/U03R0B9U1GD/F05NLHXJDNF/248816689-d287050b-c0a5-477b-9c45-b5e47177375d.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05NLHXJDNF-d7e377a032",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U03R0B9U1GD",
        "display_as_bot": false,
        "ts": "1692513123.612439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KjM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A week later, we decided to change the state machine, and I was able to communicate this by adding to the drawing. (spot the extra blue arrow)"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "3cb14864-3e23-4d42-b88f-dc4980b8ebf0",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "We also found a bug, which we were able to communicate by using the drawing:",
        "files": [
            {
                "id": "F05PAC68C9W",
                "created": 1692513173,
                "timestamp": 1692513173,
                "name": "Screenshot_20230820-064610.png",
                "title": "Screenshot_20230820-064610.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U03R0B9U1GD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 164103,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05PAC68C9W/screenshot_20230820-064610.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05PAC68C9W/download/screenshot_20230820-064610.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_360.png",
                "thumb_360_w": 270,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_480.png",
                "thumb_480_w": 360,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_720.png",
                "thumb_720_w": 540,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 1067,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_960.png",
                "thumb_960_w": 720,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05PAC68C9W-72061848a3/screenshot_20230820-064610_1024.png",
                "thumb_1024_w": 768,
                "thumb_1024_h": 1024,
                "original_w": 864,
                "original_h": 1152,
                "thumb_tiny": "AwAwACTSPX/69J+f50p6005zQAvf/wCvSg8UlLzQAtFFFACEgHqKTI9RSnOeppPxP5UALjuKXFNGc9T+VOzQAUUUUAIetNzg06kx7UAFLz6UYOelFAC0UUUAf//Z",
                "permalink": "https://futureofcoding.slack.com/files/U03R0B9U1GD/F05PAC68C9W/screenshot_20230820-064610.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05PAC68C9W-07a68de3ec",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U03R0B9U1GD",
        "display_as_bot": false,
        "ts": "1692513188.473739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DUYOL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We also found a bug, which we were able to communicate by using the drawing:"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "59679504-9dba-488a-8698-0818d3ba039b",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "b4a8c010-7343-41b8-afa6-680576af8165",
        "type": "message",
        "text": "Doesn't have to be tldraw of course, just any drawing tool, physical or on-screen. But that's how we usually document state machines, and our changes to them :)",
        "user": "U03R0B9U1GD",
        "ts": "1692513319.980229",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HqRjo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Doesn't have to be tldraw of course, just any drawing tool, physical or on-screen. But that's how we usually document state machines, and our changes to them :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "31207e73-e33a-41ef-a660-c3c6b7bfe3f2",
        "type": "message",
        "text": "I got some very nice suggestions, thanks everyone. Keep them coming! Sorry I haven't responded here in a bit. Life has intervened. But I'm not going to forget it.",
        "user": "UCUSW7WVD",
        "ts": "1692514741.331889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DXUV5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I got some very nice suggestions, thanks everyone. Keep them coming! Sorry I haven't responded here in a bit. Life has intervened. But I'm not going to forget it."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD",
                    "U013ZLJARC7",
                    "UGWUJUZHT"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "85f708be-0b38-49a0-8be9-ca4ca0b34284",
        "type": "message",
        "text": "I stumbled on an absolutely golden example (link is cued up) <https://youtu.be/XZuKakxAQ9o?t=848>.",
        "user": "UA14TGLTC",
        "ts": "1692600387.994589",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rE4uu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I stumbled on an absolutely golden example (link is cued up) "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/XZuKakxAQ9o?t=848"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/XZuKakxAQ9o?t=848",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/XZuKakxAQ9o/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/XZuKakxAQ9o?start=848&feature=oembed&start=848&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"How Speedrunners Broke My Game\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/XZuKakxAQ9o?t=848",
                "fallback": "YouTube Video: How Speedrunners Broke My Game",
                "title": "How Speedrunners Broke My Game",
                "title_link": "https://youtu.be/XZuKakxAQ9o?t=848",
                "author_name": "Isto Inc.",
                "author_link": "https://www.youtube.com/@isto_inc",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "pinched_fingers",
                "users": [
                    "USH01JEDQ"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Since we are in game-dev land \u2013 and even if limited to animations/interactions \u2013 I find the way in which <https://rive.app/|Rive> allows users to build state machines to be so explicit my brain doesn't have to hurt thinking about them.\n\nThis is an intro to it:\n<https://www.youtube.com/watch?v=r17OBczdK4c>",
        "files": [
            {
                "id": "F05NREN9W76",
                "created": 1692601492,
                "timestamp": 1692601492,
                "name": "Screenshot 2023-08-21 at 5.04.49 pm.png",
                "title": "Screenshot 2023-08-21 at 5.04.49 pm.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMV4B97GT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 149324,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05NREN9W76/screenshot_2023-08-21_at_5.04.49_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05NREN9W76/download/screenshot_2023-08-21_at_5.04.49_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 58,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 77,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 116,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 128,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 154,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05NREN9W76-948877ebd7/screenshot_2023-08-21_at_5.04.49_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 164,
                "original_w": 2006,
                "original_h": 322,
                "thumb_tiny": "AwAHADCiTSE0UlAC+lFHpQepoAKXtSGlHSgaP//Z",
                "permalink": "https://futureofcoding.slack.com/files/UMV4B97GT/F05NREN9W76/screenshot_2023-08-21_at_5.04.49_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05NREN9W76-ed5c8c3bb0",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UMV4B97GT",
        "display_as_bot": false,
        "ts": "1692601697.335579",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TdQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since we are in game-dev land \u2013 and even if limited to animations/interactions \u2013 I find the way in which "
                            },
                            {
                                "type": "link",
                                "url": "https://rive.app/",
                                "text": "Rive"
                            },
                            {
                                "type": "text",
                                "text": " allows users to build state machines to be so explicit my brain doesn't have to hurt thinking about them.\n\nThis is an intro to it:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=r17OBczdK4c"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "3cf8e8f4-e182-4291-89a9-4dbd64599c8c",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "40750fa9-7cb2-4edf-a094-25c967507f69",
        "type": "message",
        "text": "If two different \"states\" can be active at the same time, then it's not a state machine any more, right? It's a petri net, or a nested state machine, or a process diagram, or something else?",
        "user": "U02U0AS3J49",
        "ts": "1692725798.949719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+i4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If two different \"states\" can be active at the same time, then it's not a state machine any more, right? It's a petri net, or a nested state machine, or a process diagram, or something else?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "7b44f70f-c288-45a0-82da-cde72c7b5cdb",
        "type": "message",
        "text": "If you're referring to the diagrams I posted: A state chart! But really, only one child node can be active at once. We just save ourselves drawing lots and lots of arrows in the diagram, but we could draw each one individually if we wanted to. It's just short-hand.",
        "user": "U03R0B9U1GD",
        "ts": "1692725948.854799",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hJp6d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you're referring to the diagrams I posted: A state chart! But really, only one child node can be active at once. We just save ourselves drawing lots and lots of arrows in the diagram, but we could draw each one individually if we wanted to. It's just short-hand."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "606aa5b0-b416-477a-8220-676aff2eb17f",
        "type": "message",
        "text": "One reason I've been slow to respond is I've been reading <https://www.state-machine.com/doc/PSiCC.pdf>\n\nI didn't really understand state charts at all until now. Particularly the hierarchical aspect. The first few pages of this book have already helped me a lot.",
        "user": "UCUSW7WVD",
        "ts": "1692726215.736729",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+e3K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One reason I've been slow to respond is I've been reading "
                            },
                            {
                                "type": "link",
                                "url": "https://www.state-machine.com/doc/PSiCC.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI didn't really understand state charts at all until now. Particularly the hierarchical aspect. The first few pages of this book have already helped me a lot."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "daef14c9-bac6-416b-b62c-023cc8864493",
        "type": "message",
        "text": "The charts seem straightforward enough. And nested state machines are a thing. But Rive, for example, uses the word \"state\" to refer to the \"currently running animation\". If you want two animations to start at the same time, or overlap, all of which Rive allows, then they aren't \"states\" really, are they? I find there is a correlation between how understandable a state machine diagram is, and how \"not really a state machine diagram\" it is. :slightly_smiling_face:",
        "user": "U02U0AS3J49",
        "ts": "1692726233.541019",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yD+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The charts seem straightforward enough. And nested state machines are a thing. But Rive, for example, uses the word \"state\" to refer to the \"currently running animation\". If you want two animations to start at the same time, or overlap, all of which Rive allows, then they aren't \"states\" really, are they? I find there is a correlation between how understandable a state machine diagram is, and how \"not really a state machine diagram\" it is. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bee03f0f-dbba-4c8d-a363-1cd1919a460f",
        "type": "message",
        "text": "There might be a state machine you could find, at some layer of abstraction. But if your \"states\" have things like \"duration\", then they aren't really states, right? Or am I out to lunch.",
        "user": "U02U0AS3J49",
        "ts": "1692726407.617679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rhs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There might be a state machine you could find, at some layer of abstraction. But if your \"states\" have things like \"duration\", then they aren't really states, right? Or am I out to lunch."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "ffab9f2c-2a61-4d66-9643-53376199af26",
        "type": "message",
        "text": "I ran into this problem just yesterday, with the standard method of conceptualizing and visualizing logic programming traces, which is a \"state machine\" in which each \"state\" is a predicate with two transitions in and two transitions out. byrd boxes, they're called. The conceptualization and visualization is maybe helpful, but describing it as a state machine is violence against human thought.",
        "user": "U02U0AS3J49",
        "ts": "1692726633.395989",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qHQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I ran into this problem just yesterday, with the standard method of conceptualizing and visualizing logic programming traces, which is a \"state machine\" in which each \"state\" is a predicate with two transitions in and two transitions out. byrd boxes, they're called. The conceptualization and visualization is maybe helpful, but describing it as a state machine is violence against human thought."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "3c367509-0939-4dfa-a7d1-0f02099b1a58",
        "type": "message",
        "text": "&gt; if your \"states\" have things like \"duration\", then they aren't really states, right? Or am I out to lunch.\nI tend to think of this as state machines with more or less accidental complexity. But maybe there's some canonical definition of a state machine that I'm missing..",
        "user": "UCUSW7WVD",
        "ts": "1692726840.361199",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ovL=H",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if your \"states\" have things like \"duration\", then they aren't really states, right? Or am I out to lunch."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI tend to think of this as state machines with more or less accidental complexity. But maybe there's some canonical definition of a state machine that I'm missing.."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "f32046d3-b4b1-4cf5-913b-9c8abc9ff79a",
        "type": "message",
        "text": "Ah yeah, I mean \"state\" is a really overloaded word in programming :) At tldraw we have a State class and library, which is an entirely different thing from our State library :sweat_smile:\n\nIn the example you mention, it could be referring to the state of some data, simply. Or it could mean that there are multiple &amp; separate state machines going on at the same time (which I often do).\n\nAnother misunderstanding I often see is people thinking that all state machines need to work the same way. At the end of the day they need to solve a problem that you have. tldraw uses a state chart because it allows us to keep the editor's tools separate (which are just state machines of their own).",
        "user": "U03R0B9U1GD",
        "ts": "1692726863.473889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kbs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah yeah, I mean \"state\" is a really overloaded word in programming :) At tldraw we have a State class and library, which is an entirely different thing from our State library "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn the example you mention, it could be referring to the state of some data, simply. Or it could mean that there are multiple & separate state machines going on at the same time (which I often do).\n\nAnother misunderstanding I often see is people thinking that all state machines need to work the same way. At the end of the day they need to solve a problem that you have. tldraw uses a state chart because it allows us to keep the editor's tools separate (which are just state machines of their own)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "d238a86b-2875-41fe-90a1-9efd091b7542",
        "type": "message",
        "text": "Oh, so tldraw supports state charts? Or is implemented using state charts? I wasn't aware they were available in production somewhere.",
        "user": "UCUSW7WVD",
        "ts": "1692726918.910699",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kJvbg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, so tldraw supports state charts? Or is implemented using state charts? I wasn't aware they were available in production somewhere."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "It's tools are implemented as part of a big state chart. It's structured something like this:",
        "files": [
            {
                "id": "F05P2AF0K60",
                "created": 1692727100,
                "timestamp": 1692727100,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U03R0B9U1GD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 150205,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05P2AF0K60/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05P2AF0K60/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 188,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 251,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 376,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 418,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 502,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05P2AF0K60-e569f66127/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 535,
                "original_w": 2257,
                "original_h": 1180,
                "thumb_tiny": "AwAZADDSPTikGaWkJ5/+vQADPejmlooAKKKKAEpaKKACiiigAooooA//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U03R0B9U1GD/F05P2AF0K60/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05P2AF0K60-96a4465c0d",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U03R0B9U1GD",
        "display_as_bot": false,
        "ts": "1692727104.588639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CYL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's tools are implemented as part of a big state chart. It's structured something like this:"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "4cb7427a-e67a-46df-9014-603fe00ec3f1",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "10485c5e-1854-484c-b961-2515752c39d9",
        "type": "message",
        "text": "There's more info on the canary docs site, but undergoing a lot of changes at the moment (so there's a lot of broken links): <https://canary.tldraw.dev/docs/tools>",
        "user": "U03R0B9U1GD",
        "ts": "1692727181.822779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zcjt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's more info on the canary docs site, but undergoing a lot of changes at the moment (so there's a lot of broken links): "
                            },
                            {
                                "type": "link",
                                "url": "https://canary.tldraw.dev/docs/tools"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03R0B9U1GD",
            "ts": "1692727299.000000"
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1e6039de-a2ba-41f1-9e81-9383aa65d1a7",
        "type": "message",
        "text": "My understanding of a canonical state machine is that nodes represent all the interesting and possible point-in-time conditions of the system, for whatever part of the system you are modeling, and the edges represent the possible transitions between them.It's the temporal mutual exclusivity of the nodes that Rive seems to violate. If you're interested in formally modelling something including the passage of time, you need something more like LTL",
        "user": "U02U0AS3J49",
        "ts": "1692727593.028439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ekOC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My understanding of a canonical state machine is that nodes represent all the interesting and possible point-in-time conditions of the system, for whatever part of the system you are modeling, and the edges represent the possible transitions between them.It's the temporal mutual exclusivity of the nodes that Rive seems to violate. If you're interested in formally modelling something including the passage of time, you need something more like LTL"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "2958b0af-c282-4dea-9252-4ed71458b9d1",
        "type": "message",
        "text": "Arguably, \"each state is an animation\" is marketing speak, and you can justify calling it a state diagram by saying \"each state is the animation or animations that are currently running and what will happen next, and when and why.\" So the node and the details on the outgoing edge would be the actual \"state.\" But that wouldn't help anyone understand what will happen. So the more accurate it is as a canonical state machine, the less useful it is as a visualization. QED. :wink:",
        "user": "U02U0AS3J49",
        "ts": "1692727798.772359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gvjj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Arguably, \"each state is an animation\" is marketing speak, and you can justify calling it a state diagram by saying \"each state is the animation or animations that are currently running and what will happen next, and when and why.\" So the node and the details on the outgoing edge would be the actual \"state.\" But that wouldn't help anyone understand what will happen. So the more accurate it is as a canonical state machine, the less useful it is as a visualization. QED. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "3c027d85-5fc2-452f-8c1a-6927bbd32969",
        "type": "message",
        "text": "(Ignore me, I'm cranky.)",
        "user": "U02U0AS3J49",
        "ts": "1692727807.560279",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XEcfo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Ignore me, I'm cranky.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1f5c148e-e43a-4a6a-a21c-6bedfa9388f8",
        "type": "message",
        "text": "Jasons advice in a nutshell: draw helpful pictures, and don't worry about whether or not what you drew is a state machine.",
        "user": "U02U0AS3J49",
        "ts": "1692727871.567119",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lrlQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jasons advice in a nutshell: draw helpful pictures, and don't worry about whether or not what you drew is a state machine."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "69dca9b1-75c9-4ef1-abf2-7e21034064e9",
        "type": "message",
        "text": "\"Sorry to interrupt. I've just realised that this isn't an example of a state machine. It's actually a...\"",
        "user": "U03R0B9U1GD",
        "ts": "1692728060.747029",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GLM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Sorry to interrupt. I've just realised that this isn't an example of a state machine. It's actually a...\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U02U0AS3J49",
                    "UCUSW7WVD",
                    "U013ZLJARC7"
                ],
                "count": 3
            },
            {
                "name": "face_in_clouds",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DE0880C6-2777-493A-A8DF-D7E7D9D258D1",
        "type": "message",
        "text": "Seems like my first comment actually captured where <@U02U0AS3J49> landed. Good stuff. Glad I just hung out on the sidelines and let y'all come around on your own :wink: ",
        "user": "UC2A2ARPT",
        "ts": "1692728201.158919",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/aWau",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems like my first comment actually captured where "
                            },
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " landed"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Good stuff"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Glad I just hung out on the sidelines and let y'all come around on your own "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD",
                    "U02U0AS3J49"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d4efc688-03ca-4eb9-80fb-2e12587c25f9",
        "type": "message",
        "text": "Yes <@UC2A2ARPT>, you are out of the penalty box and now permitted to speak.\n\nI'm not sure I follow who is responding to whom :smile: but I tend to agree with you <@U02U0AS3J49> that multiple active states don't a state machine make. If the set of states is partitioned you could say you have two state machines running independently. If there's overlap the state machine metaphor is a net liability for understanding.\n\nOn the other hand, I think attaching attributes like a duration is fine? And an animation by itself is fine; clock ticks feel like fine events to base state transitions on.\n\nGoing back a bit:\n&gt; The charts seem straightforward enough. And nested state machines are a thing.\nI've been seeing these state chart pictures all my life, and I've even tried reading the papers a few times. But I totally miss (or quickly forget) one key property. In a state chart enclosure is backstopping. If a state encounters an event it can't handle, it passes it up to the enclosing state.\n\nIt seems obvious now that I write it out like that. And it's isomorphic with my previous understanding: that hierarchies are a way to extract common transitions and simplify the state diagram. But it still felt surprising. I think I have some theoretical knowledge but zero \"fingertip feel\" for state charts based on personal experience. Which makes all my opinions on it suspect..",
        "user": "UCUSW7WVD",
        "ts": "1692728316.441879",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vS7mY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ", you are out of the penalty box and now permitted to speak.\n\nI'm not sure I follow who is responding to whom "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " but I tend to agree with you "
                            },
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " that multiple active states don't a state machine make. If the set of states is partitioned you could say you have two state machines running independently. If there's overlap the state machine metaphor is a net liability for understanding.\n\nOn the other hand, I think attaching attributes like a duration is fine? And an animation by itself is fine; clock ticks feel like fine events to base state transitions on.\n\nGoing back a bit:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The charts seem straightforward enough. And nested state machines are a thing."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI've been seeing these state chart pictures all my life, and I've even tried reading the papers a few times. But I totally miss (or quickly forget) one key property. In a state chart enclosure is backstopping. If a state encounters an event it can't handle, it passes it up to the enclosing state.\n\nIt seems obvious now that I write it out like that. And it's isomorphic with my previous understanding: that hierarchies are a way to extract common transitions and simplify the state diagram. But it still felt surprising. I think I have some theoretical knowledge but zero \"fingertip feel\" for state charts based on personal experience. Which makes all my opinions on it suspect.."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03R0B9U1GD",
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "20c58838-4045-4b3c-83ea-f3e03f3b946c",
        "type": "message",
        "text": "Going back a bit, <@UJBAJNFLK> I want to probe at your position in support for events. It seems to be the opposite of <@U013ZLJARC7>'s suggestion of using concurrency, which I'm more sympathetic to, and which has a long line of recommendations from Unix pipes, Avi Bryant's use of closures in Seaside to Javascript callbacks and async/await syntax, Erlang, Golang, etc.. Simon Tatham made <https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html|a compelling case long ago> that code tends to be simpler if you can write it as the caller, in a top-down, outside-in manner, rather than as the callee. Events seem to go against that recommendation. So I'm curious to hear more about why/when you find events simpler.\n\nWith hindsight, I'm inclined to blame some of the complexity of my original document on L\u00d6VE's event-driven model. Yes, events can sometimes obviate the need for reasoning in terms of a state machine, when the problem goes with the grain of the events available to you. But the set of events you have available to you is not typically in your control.",
        "user": "UCUSW7WVD",
        "ts": "1692767556.707719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5EZWt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Going back a bit, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I want to probe at your position in support for events. It seems to be the opposite of "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": "'s suggestion of using concurrency, which I'm more sympathetic to, and which has a long line of recommendations from Unix pipes, Avi Bryant's use of closures in Seaside to Javascript callbacks and async/await syntax, Erlang, Golang, etc.. Simon Tatham made "
                            },
                            {
                                "type": "link",
                                "url": "https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html",
                                "text": "a compelling case long ago"
                            },
                            {
                                "type": "text",
                                "text": " that code tends to be simpler if you can write it as the caller, in a top-down, outside-in manner, rather than as the callee. Events seem to go against that recommendation. So I'm curious to hear more about why/when you find events simpler.\n\nWith hindsight, I'm inclined to blame some of the complexity of my original document on L\u00d6VE's event-driven model. Yes, events can sometimes obviate the need for reasoning in terms of a state machine, when the problem goes with the grain of the events available to you. But the set of events you have available to you is not typically in your control."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "5e42d0d8-437f-44e6-a99b-628df0a9be9b",
        "type": "message",
        "text": "Note that \u201cseveral state machines operating in parallel that can send each other messages that cause state changes\u201d is both how much of biology works _and_ Kay\u2019s original vision for OO.",
        "user": "U013ZLJARC7",
        "ts": "1692777229.267059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W+/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Note that \u201cseveral state machines operating in parallel that can send each other messages that cause state changes\u201d is both how much of biology works "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Kay\u2019s original vision for OO."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "a3a5522d-dbcc-4d44-b2b1-c361dc97765d",
        "type": "message",
        "text": "<@U013ZLJARC7> I really liked this talk by Rich Feldman which asks, \"how is it helpful to turn every program into a distributed program?\" <https://www.youtube.com/watch?v=6YbK8o9rZfI>",
        "user": "UCUSW7WVD",
        "ts": "1692801852.932269",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vixs2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " I really liked this talk by Rich Feldman which asks, \"how is it helpful to turn every program into a distributed program?\" "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=6YbK8o9rZfI"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1692801910.000000"
        },
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=6YbK8o9rZfI",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/6YbK8o9rZfI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/6YbK8o9rZfI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Richard Feldman \u2014 The Next Paradigm Shift in Programming\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=6YbK8o9rZfI",
                "fallback": "YouTube Video: Richard Feldman \u2014 The Next Paradigm Shift in Programming",
                "title": "Richard Feldman \u2014 The Next Paradigm Shift in Programming",
                "title_link": "https://www.youtube.com/watch?v=6YbK8o9rZfI",
                "author_name": "ChariotSolutions",
                "author_link": "https://www.youtube.com/@ChariotSolutions",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "637d60f7-b785-4d30-88e5-f573da555b81",
        "type": "message",
        "text": "Agree that putting an actual network in the loop is seldom a good thing for most purposes, though essential for certain kinds of reliability (e.g. wide-area disaster recovery).",
        "user": "U013ZLJARC7",
        "ts": "1692804727.788829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TE7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agree that putting an actual network in the loop is seldom a good thing for most purposes, though essential for certain kinds of reliability (e.g. wide-area disaster recovery)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "1b47e4fd-1365-4e44-b09f-815219b33b51",
        "type": "message",
        "text": "<@UCUSW7WVD> I see events more as a way to think about and visualize state and state changes. Event handling in the form of frameworks and callbacks is something I have used so little that I don't really have an opinion about it. For implementing an event-based model I'd messages, if necessary with concurrency.",
        "user": "UJBAJNFLK",
        "ts": "1692858200.877649",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zjr8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I see events more as a way to think about and visualize state and state changes. Event handling in the form of frameworks and callbacks is something I have used so little that I don't really have an opinion about it. For implementing an event-based model I'd messages, if necessary with concurrency."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "72185759-62d8-4027-8b3c-ef95efbfdbf0",
        "type": "message",
        "text": "IMO, Events are not bad.  Unstructured use of Events is bad.\n\n\u201cComplexity\u201d is not caused by Events, but, by the unstructured use of Events.\n\nThe Holy Grail of Programming Language design is the encouragement/enforcement of the use of Nesting.\n\nIt is folly to treat, both, control flow composition and data composition in the same way.\n\nPub/Sub, CPS, FP, UNIX pipelines, etc. are unstructured.\n\n... more ... <https://publish.obsidian.md/programmingsimplicity/2023-08-23-Structuring+of+Events>",
        "user": "UGWUJUZHT",
        "ts": "1692865919.994129",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0gho",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IMO, Events are not bad.  Unstructured use of Events is bad.\n\n\u201cComplexity\u201d is not caused by Events, but, by the unstructured use of Events.\n\nThe Holy Grail of Programming Language design is the encouragement/enforcement of the use of Nesting.\n\nIt is folly to treat, both, control flow composition and data composition in the same way.\n\nPub/Sub, CPS, FP, UNIX pipelines, etc. are unstructured.\n\n... more ... "
                            },
                            {
                                "type": "link",
                                "url": "https://publish.obsidian.md/programmingsimplicity/2023-08-23-Structuring+of+Events"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Thanks again, I really appreciate everyone's comments. Here's an extremely abstracted set of notes from this thread that I'm hoping will help me not forget lessons learned: <http://akkartik.name/post/20230826-state-machines>. It may not be obvious (and I'd love to answer questions if anything isn't clear) but everything in there came from all of you in this thread (and <@UGWUJUZHT>'s Discord, where I asked the same question).",
        "user": "UCUSW7WVD",
        "ts": "1693113863.375189",
        "thread_ts": "1691945999.321379",
        "root": {
            "client_msg_id": "7e4f55ef-887a-403a-bdaa-82600e27f360",
            "type": "message",
            "text": "Last night I spent some time documenting an almost-trivial state machine that I keep getting wrong: <https://docs.google.com/document/d/1EbK4AxDCDWonMa8KyGJFX4jllXXLew0qBsGxsmqoYqk>\n\nState machines are _hard_!\n\u2022 We usually have one in our head when we program.\n\u2022 The abstract state in my head is usually made up of multiple concrete variables in the program.\n\u2022 Mutations happen to variables, but it's not obvious at each how the abstract state is changing.\n\u2022 The state machine in my head often evolves, which makes documentation challenging to keep up to date. Which is why I think nobody builds documents like these.\nTell me how immutability or State Charts will solve all my problems :slightly_smiling_face:",
            "user": "UCUSW7WVD",
            "ts": "1691945999.321379",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "c/I",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Last night I spent some time documenting an almost-trivial state machine that I keep getting wrong: "
                                },
                                {
                                    "type": "link",
                                    "url": "https://docs.google.com/document/d/1EbK4AxDCDWonMa8KyGJFX4jllXXLew0qBsGxsmqoYqk"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nState machines are "
                                },
                                {
                                    "type": "text",
                                    "text": "hard",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "!\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "We usually have one in our head when we program."
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "The abstract state in my head is usually made up of multiple concrete variables in the program."
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "Mutations happen to variables, but it's not obvious at each how the abstract state is changing."
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "The state machine in my head often evolves, which makes documentation challenging to keep up to date. Which is why I think nobody builds documents like these."
                                        }
                                    ]
                                }
                            ],
                            "style": "bullet",
                            "indent": 0,
                            "border": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "\nTell me how immutability or State Charts will solve all my problems "
                                },
                                {
                                    "type": "emoji",
                                    "name": "slightly_smiling_face",
                                    "unicode": "1f642"
                                }
                            ]
                        }
                    ]
                }
            ],
            "team": "T5TCAFTA9",
            "edited": {
                "user": "UCUSW7WVD",
                "ts": "1691949807.000000"
            },
            "thread_ts": "1691945999.321379",
            "reply_count": 62,
            "reply_users_count": 13,
            "latest_reply": "1693150474.578739",
            "reply_users": [
                "UC2A2ARPT",
                "USH01JEDQ",
                "U0123H7JRDM",
                "UCUSW7WVD",
                "UBN9AFS0N",
                "U02U0AS3J49",
                "U013ZLJARC7",
                "UA14TGLTC",
                "UJBAJNFLK",
                "UMV4B97GT",
                "U0378MDUG1Y",
                "UGWUJUZHT",
                "U03R0B9U1GD"
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1692109655.971959"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pyI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks again, I really appreciate everyone's comments. Here's an extremely abstracted set of notes from this thread that I'm hoping will help me not forget lessons learned: "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/20230826-state-machines"
                            },
                            {
                                "type": "text",
                                "text": ". It may not be obvious (and I'd love to answer questions if anything isn't clear) but everything in there came from all of you in this thread (and "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": "'s Discord, where I asked the same question)."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "1925c13a-d5c6-4369-b87f-a05c5080ce84",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1693114780.000000"
        },
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            },
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT",
                    "UMQ6LR9NZ"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b6b04498-74e3-4cd6-b3af-ba0a3a7db388",
        "type": "message",
        "text": "This inspired me to <https://elk.zone/universeodon.com/@TodePond/110961152121821795|draw up a couple of my past state machines>!",
        "user": "U03R0B9U1GD",
        "ts": "1693135196.899589",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2ij=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This inspired me to "
                            },
                            {
                                "type": "link",
                                "url": "https://elk.zone/universeodon.com/@TodePond/110961152121821795",
                                "text": "draw up a couple of my past state machines"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "23d5bc72-4d8e-44dc-9070-f94d3992bc8c",
        "type": "message",
        "text": "\u2022 I find that just drawing the diagrams, even using cave-man technologies, makes code \u201cfall off the bone\u201d (i.e. easy-to-write). Is that your conclusion, too?\n\u2022 Every time I feel unsatisfied about code that I\u2019m writing, I scribble a diagram of my intentions.\n\u2022 The {cellpond, coding, drawing} diagram immediately makes me think of Harel\u2019s Statecharts.  Are you aware of StateCharts?  If not, here is my reading of Harel\u2019s original paper <https://guitarvydas.github.io/2020/12/09/StateCharts.html>\n\u2022 Thoughts such as \u201cIt looks quite complicated...\u201d can be tamed in the same way that good PowerPoint presentations are tamed.  What I call The Rule of 7. No more than a few items on any one slide.  Elide, defer, hashtag in a structured manner.  In Programming, I conclude that The Rule of 7 translates into Nesting (goal: Russian Dolls for code (aka Matryoshka dolls)).  If I squint in just the right way, I see Lambdas as being Nesting applied to textual code, and, Structured Programming is Nesting applied to textual code, and, \u201c{...}\u201d is the ASCII Art form of Nesting applied to textual code.  Global variables and free variables are Anti-Nesting. <https://en.wikipedia.org/wiki/Matryoshka_doll>",
        "user": "UGWUJUZHT",
        "ts": "1693142281.081259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZXXw",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I find that just drawing the diagrams, even using cave-man technologies, makes code \u201cfall off the bone\u201d (i.e. easy-to-write). Is that your conclusion, too?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Every time I feel unsatisfied about code that I\u2019m writing, I scribble a diagram of my intentions."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The {cellpond, coding, drawing} diagram immediately makes me think of Harel\u2019s Statecharts.  Are you aware of StateCharts?  If not, here is my reading of Harel\u2019s original paper "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://guitarvydas.github.io/2020/12/09/StateCharts.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Thoughts such as \u201cIt looks quite complicated...\u201d can be tamed in the same way that good PowerPoint presentations are tamed.  What I call The Rule of 7. No more than a few items on any one slide.  Elide, defer, hashtag in a structured manner.  In Programming, I conclude that The Rule of 7 translates into Nesting (goal: Russian Dolls for code (aka Matryoshka dolls)).  If I squint in just the right way, I see Lambdas as being Nesting applied to textual code, and, Structured Programming is Nesting applied to textual code, and, \u201c{...}\u201d is the ASCII Art form of Nesting applied to textual code.  Global variables and free variables are Anti-Nesting. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Matryoshka_doll"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "5b3dd776-0842-40ce-b30c-8fc5f61e1b2a",
        "type": "message",
        "text": "- I like \"fall off the bone\" as an analogy (although I'd love a vegetarian version :smile:). I do find that diagrams like this help with it a lot. Not only state machines - any diagram helps. But usually, instead of drawing first, and coding after, I prefer to do them roughly at the same time, bit by bit. Like breadcrumbs through a maze! Or afterwards, so I can communicate how it works if I'm working with a team.\n\n- I used to be a teacher. We tried to encourage kids: \"If you don't understand a maths problem, draw a picture\". I think it's been drilled in to me as well.\n\n- Yes I'm aware of state charts :) We use it in tldraw. It helps to organise different 'tools' a bit better. Thanks for the link though, I'll check it out! Cellpond would have been much easier to make if I had modelled it as a state chart. I ended up rewriting a lot of code, and it became hard to make changes to it. But for my own personal projects, I've never landed on an abstraction for state charts that feels nice. I like my state machines to be quite loose and easy to mess around with. State charts sometimes feel more complex and ingrained. And I've never seen an implementation that really makes the most of the nesting. I'm sure there's a way of achieving it though. Not enough time!\n\n- The Rule of 7 seems to apply here :)",
        "user": "U03R0B9U1GD",
        "ts": "1693150474.578739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bzz5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- I like \"fall off the bone\" as an analogy (although I'd love a vegetarian version "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "). I do find that diagrams like this help with it a lot. Not only state machines - any diagram helps. But usually, instead of drawing first, and coding after, I prefer to do them roughly at the same time, bit by bit. Like breadcrumbs through a maze! Or afterwards, so I can communicate how it works if I'm working with a team.\n\n- I used to be a teacher. We tried to encourage kids: \"If you don't understand a maths problem, draw a picture\". I think it's been drilled in to me as well.\n\n- Yes I'm aware of state charts :) We use it in tldraw. It helps to organise different 'tools' a bit better. Thanks for the link though, I'll check it out! Cellpond would have been much easier to make if I had modelled it as a state chart. I ended up rewriting a lot of code, and it became hard to make changes to it. But for my own personal projects, I've never landed on an abstraction for state charts that feels nice. I like my state machines to be quite loose and easy to mess around with. State charts sometimes feel more complex and ingrained. And I've never seen an implementation that really makes the most of the nesting. I'm sure there's a way of achieving it though. Not enough time!\n\n- The Rule of 7 seems to apply here :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "carrot",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]