[
    {
        "client_msg_id": "4fd4a9fe-991f-49ad-a84f-69defa24d6a1",
        "type": "message",
        "text": "This was posted here back in March but it didn't get much discussion (at least, that's what the archive says), so I'm reposting: <https://arxiv.org/pdf/2303.06777.pdf>",
        "user": "U03R0B9U1GD",
        "ts": "1691829091.772779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6GOC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was posted here back in March but it didn't get much discussion (at least, that's what the archive says), so I'm reposting: "
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/pdf/2303.06777.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691829091.772779",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1691927291.894719",
        "reply_users": [
            "U03R0B9U1GD",
            "UGWUJUZHT",
            "UBKNXPBAB"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U02028JHX37",
                    "U0123H7JRDM"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "text": "When people ask me what the downside of something like <https://www.youtube.com/watch?v=sQYUQNozljo|CellPond> is, I clumsily try to explain that it has no 'reflection', you can't 'manipulate' the rules, move them around, or get them to work together with other programs (other non-CellPond programs, or even other CellPond programs). To improve on CellPond, you'd want to make it more of a 'hybrid' with other stuff.\n\nIt's not exactly the same, but I think this paper's concept of 'composability' touches on some of that!\n\nI think that combining live+rich editors together often has the 'lego brick problem'. Combining them together often feels like attaching lego bricks. As in - there are predefined places (studs) where you can place them. You're quite restricted with what can go where. It feels plastic, and hard. I use <https://www.blackmagicdesign.com/products/davinciresolve/fusion|Davinci Resolve's Fusion> quite a lot, and it certainly feels like that to me (see attached image).\n\nTextual code doesn't feel plastic. It feels like 'playdough'. You can mold different parts together, so that they become interlaced. There's a lot more freedom. I think a great example for this is <https://legacy.reactjs.org/docs/introducing-jsx.html|JSX>. You can compose HTML and Javascript together in any sort of way you want. It doesn't feel restricted, and you aren't stuck with the hard plastic borders caused by keeping them in different files.\n\nThat being said, the 'plastic-ness' of live editors is often a feature. eg: <https://scratch.mit.edu/about|Scratch> feels restrictive because it wants to stop you from making mistakes. This is great! But how can we do that while maintain some more 'playdoughyness'?\n\nI've spoken a bit with <https://elliot.website/|Elliot Evans> about this, as I think that his <https://youtu.be/r--d5XlUyT4|ideas about carets> tackle this problem really well!! (for <https://elliot.website/editor/|Polytope>)\n\nI'm also interested in <https://ivanish.ca/hest-podcast/|Hest> because of its focus on 'continuous-ness' of data. Sounds less rigid to me.\n\nAnd I'm currently working on a weird thing called Arroost, which aims to be more reflective and intra-composable. Its output is 'more of itself', so it allows a bit more of that. I wouldn't say it's composable, but it's an experimental step towards it.\n\nAnyway, really useful paper! It's given me more of the language and context for exploring this sort of thing!",
        "files": [
            {
                "id": "F05N7VBFVG8",
                "created": 1691830355,
                "timestamp": 1691830355,
                "name": "Screenshot 2023-08-12 at 09.52.31.png",
                "title": "Screenshot 2023-08-12 at 09.52.31.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U03R0B9U1GD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 665392,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05N7VBFVG8/screenshot_2023-08-12_at_09.52.31.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05N7VBFVG8/download/screenshot_2023-08-12_at_09.52.31.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 187,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 249,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 373,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 415,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 497,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05N7VBFVG8-ada00d63e0/screenshot_2023-08-12_at_09.52.31_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 531,
                "original_w": 1930,
                "original_h": 1000,
                "thumb_tiny": "AwAYADClgntRR+FFAAaKU/j+VJQAUUv4UmfagAooooAKKKKAF9uKSiigD//Z",
                "permalink": "https://futureofcoding.slack.com/files/U03R0B9U1GD/F05N7VBFVG8/screenshot_2023-08-12_at_09.52.31.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05N7VBFVG8-ee51a32513",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U03R0B9U1GD",
        "display_as_bot": false,
        "ts": "1691830687.891909",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7rm6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When people ask me what the downside of something like "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=sQYUQNozljo",
                                "text": "CellPond"
                            },
                            {
                                "type": "text",
                                "text": " is, I clumsily try to explain that it has no 'reflection', you can't 'manipulate' the rules, move them around, or get them to work together with other programs (other non-CellPond programs, or even other CellPond programs). To improve on CellPond, you'd want to make it more of a 'hybrid' with other stuff.\n\nIt's not exactly the same, but I think this paper's concept of 'composability' touches on some of that!\n\nI think that combining live+rich editors together often has the 'lego brick problem'. Combining them together often feels like attaching lego bricks. As in - there are predefined places (studs) where you can place them. You're quite restricted with what can go where. It feels plastic, and hard. I use "
                            },
                            {
                                "type": "link",
                                "url": "https://www.blackmagicdesign.com/products/davinciresolve/fusion",
                                "text": "Davinci Resolve's Fusion"
                            },
                            {
                                "type": "text",
                                "text": " quite a lot, and it certainly feels like that to me (see attached image).\n\nTextual code doesn't feel plastic. It feels like 'playdough'. You can mold different parts together, so that they become interlaced. There's a lot more freedom. I think a great example for this is "
                            },
                            {
                                "type": "link",
                                "url": "https://legacy.reactjs.org/docs/introducing-jsx.html",
                                "text": "JSX"
                            },
                            {
                                "type": "text",
                                "text": ". You can compose HTML and Javascript together in any sort of way you want. It doesn't feel restricted, and you aren't stuck with the hard plastic borders caused by keeping them in different files.\n\nThat being said, the 'plastic-ness' of live editors is often a feature. eg: "
                            },
                            {
                                "type": "link",
                                "url": "https://scratch.mit.edu/about",
                                "text": "Scratch"
                            },
                            {
                                "type": "text",
                                "text": " feels restrictive because it wants to stop you from making mistakes. This is great! But how can we do that while maintain some more 'playdoughyness'?\n\nI've spoken a bit with "
                            },
                            {
                                "type": "link",
                                "url": "https://elliot.website/",
                                "text": "Elliot Evans"
                            },
                            {
                                "type": "text",
                                "text": " about this, as I think that his "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/r--d5XlUyT4",
                                "text": "ideas about carets"
                            },
                            {
                                "type": "text",
                                "text": " tackle this problem really well!! (for "
                            },
                            {
                                "type": "link",
                                "url": "https://elliot.website/editor/",
                                "text": "Polytope"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nI'm also interested in "
                            },
                            {
                                "type": "link",
                                "url": "https://ivanish.ca/hest-podcast/",
                                "text": "Hest"
                            },
                            {
                                "type": "text",
                                "text": " because of its focus on 'continuous-ness' of data. Sounds less rigid to me.\n\nAnd I'm currently working on a weird thing called Arroost, which aims to be more reflective and intra-composable. Its output is 'more of itself', so it allows a bit more of that. I wouldn't say it's composable, but it's an experimental step towards it.\n\nAnyway, really useful paper! It's given me more of the language and context for exploring this sort of thing!"
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "U03R0B9U1GD",
            "ts": "1691831152.000000"
        },
        "client_msg_id": "01d75dec-6285-497d-b807-6270b403272b",
        "thread_ts": "1691829091.772779",
        "parent_user_id": "U03R0B9U1GD"
    },
    {
        "client_msg_id": "ee9ec1ba-14d9-4fee-bb5d-98deb05344a4",
        "type": "message",
        "text": "Kagi Universal Summarizer says:\n...\nThe document discusses qualities that are important for programming beyond static text. It identifies three main qualities - liveness, richness, and composability.\n...\nThis allows domain-specific interactive programming tools to be integrated into general-purpose environments with full liveness. The document argues this can unlock new value for live and rich tools and programming research by enabling composition. It lays out a vision for further exploring the design space at the intersection of liveness, richness, and composability.\n...\nfull summary (5 paragraphs): <https://publish.obsidian.md/programmingsimplicity/2023-08-12-Summary+of+Paper+Live%2C+Rich+and+Composable>",
        "user": "UGWUJUZHT",
        "ts": "1691833164.414059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A1QwJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kagi Universal Summarizer says:\n...\nThe document discusses qualities that are important for programming beyond static text. It identifies three main qualities - liveness, richness, and composability.\n...\nThis allows domain-specific interactive programming tools to be integrated into general-purpose environments with full liveness. The document argues this can unlock new value for live and rich tools and programming research by enabling composition. It lays out a vision for further exploring the design space at the intersection of liveness, richness, and composability.\n...\nfull summary (5 paragraphs): "
                            },
                            {
                                "type": "link",
                                "url": "https://publish.obsidian.md/programmingsimplicity/2023-08-12-Summary+of+Paper+Live%2C+Rich+and+Composable"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://ogimage.obsidian.md/og-image.png?title=2023-08-12-Summary+of+Paper+Live%2C+Rich+and+Composable&description=Input+Paper%3A+Live%2C+Rich%2C+and+Composable%3A+Qualities+for+Programming+Beyond+Static+Text+URL%3A+https%3A%2F%2Farxiv.org%2Fpdf%2F2303.06777.pdf+Kagi+Universal+Summarizer%3A+https%3A%2F%2Fkagi.com%2Fsummarizer%2Findex.html+Summa%E2%80%A6",
                "image_width": 1200,
                "image_height": 630,
                "image_bytes": 66888,
                "from_url": "https://publish.obsidian.md/programmingsimplicity/2023-08-12-Summary+of+Paper+Live%2C+Rich+and+Composable",
                "id": 1,
                "original_url": "https://publish.obsidian.md/programmingsimplicity/2023-08-12-Summary+of+Paper+Live%2C+Rich+and+Composable",
                "fallback": "2023-08-12-Summary of Paper Live, Rich and Composable - Obsidian Publish",
                "text": "Input Paper: Live, Rich, and Composable: Qualities for Programming Beyond Static Text URL: <https://arxiv.org/pdf/2303.06777.pdf> Kagi Universal Summarizer: <https://kagi.com/summarizer/index.html> Summa\u2026",
                "title": "2023-08-12-Summary of Paper Live, Rich and Composable - Obsidian Publish",
                "title_link": "https://publish.obsidian.md/programmingsimplicity/2023-08-12-Summary+of+Paper+Live%2C+Rich+and+Composable",
                "service_name": "publish.obsidian.md"
            }
        ],
        "thread_ts": "1691829091.772779",
        "parent_user_id": "U03R0B9U1GD"
    },
    {
        "client_msg_id": "48841138-7f68-4ac5-9390-57cd155abe98",
        "type": "message",
        "text": "<@U03R0B9U1GD> I\u2019m really glad to hear that the paper\u2019s been helpful to you!\n\nI agree with your articulation of the \u2018lego brick problem\u2019. I have a prototype approach to composing live &amp; rich tools* and I occasionally feel that it suffers from this problem \u2013 that the layers of abstraction around components are overly stiff and don\u2019t afford composition as natural and combinatorially rich as I\u2019d hope. But then I remember that the status quo is \u201cno composition at all,\u201d so, y\u2019know, baby steps.\n\n* forthcoming at UIST; I\u2019ll share some preprint stuff soon!",
        "user": "UBKNXPBAB",
        "ts": "1691927118.203269",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OAo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019m really glad to hear that the paper\u2019s been helpful to you!\n\nI agree with your articulation of the \u2018lego brick problem\u2019. I have a prototype approach to composing live & rich tools* and I occasionally feel that it suffers from this problem \u2013 that the layers of abstraction around components are overly stiff and don\u2019t afford composition as natural and combinatorially rich as I\u2019d hope. But then I remember that the status quo is \u201cno composition at all,\u201d so, y\u2019know, baby steps.\n\n* forthcoming at UIST; I\u2019ll share some preprint stuff soon!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1691829091.772779",
        "parent_user_id": "U03R0B9U1GD"
    },
    {
        "type": "message",
        "text": "Not sure how relevant this is (or how legible it is without context), but \u201cclunky modules\u201d always reminds me of this bit from Timeless Way of Building where Alexander writes about design via a process of holistic differentiation, vs design via combining prefabricated parts.",
        "files": [
            {
                "id": "F05MD7QGKK8",
                "created": 1691927152,
                "timestamp": 1691927152,
                "name": "timeless-modular.png",
                "title": "timeless-modular.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 1465006,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05MD7QGKK8/timeless-modular.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05MD7QGKK8/download/timeless-modular.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 158,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 211,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 317,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 352,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 422,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05MD7QGKK8-23735b79d8/timeless-modular_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 451,
                "original_w": 5000,
                "original_h": 2200,
                "thumb_tiny": "AwAVADDRJOaMnFBHNLnAoAQZoZtvqfpQDz0oPWgBScUgPNHYUAnNADqMUUUAJgUYFLRQAYooooA//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F05MD7QGKK8/timeless-modular.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05MD7QGKK8-803ce77d8f",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "ts": "1691927291.894719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iAD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure how relevant this is (or how legible it is without context), but \u201cclunky modules\u201d always reminds me of this bit from Timeless Way of Building where Alexander writes about design via a process of holistic differentiation, vs design via combining prefabricated parts."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "b5a1b5ee-ea13-4b25-b329-9d21cbecde68",
        "thread_ts": "1691829091.772779",
        "parent_user_id": "U03R0B9U1GD"
    }
]