[
    {
        "client_msg_id": "7933E2CE-A0AC-44AE-82E0-0843EF803D1F",
        "type": "message",
        "text": "Hi, since I've started building visual programming systems, I have always used a push-based approach where a node triggers another node that follows it. This is much inspired by flow based programming. But since I want to build a generic visual programming system, I think that it is also important to support different ways.. basic statecharts I already support, but a pull-based system is not yet something that I had build with my system. Until now! .. so in this video you can see how I construct a flow that is used to construct a glsl fragment shader. Here the output node pulls in the data from the node's cominh before it in the flow, so working backwards through a flow. \n\nAlthough it's not my goal to build a full product around this alone.. a lot better and much more extensive applications already exist for building shaders this way. But still helpful to look at my project from a different perspective, which leads to some refactoring, bug fixing, insights and inspiration.\n\nYesterday I was really in doubt if this was the right route for this week's time spent on my project because of the awesome demo that tldraw made with gpt4-vision api, very cool! So,I also had to play with it together with my own application and was also amazed with the possibilities! Probably my next video will have this as a topic. Anyway, for now, enjoy my short video where I construct a very simple shader which runs on the GPU via webgl.\n\n<https://youtu.be/_VvoZbsmces|https://youtu.be/_VvoZbsmces>",
        "user": "U0123H7JRDM",
        "ts": "1700330143.951929",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O0myW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, since I've started building visual programming systems, I have always used a push-based approach where a node triggers another node that follows it. This is much inspired by flow based programming. But since I want to build a generic visual programming system, I think that it is also important to support different ways.. basic statecharts I already support, but a pull-based system is not yet something that I had build with my system. Until now! .. so in this video you can see how I construct a flow that is used to construct a glsl fragment shader. Here the output node pulls in the data from the node's cominh before it in the flow, so working backwards through a flow. \n\nAlthough it's not my goal to build a full product around this alone.. a lot better and much more extensive applications already exist for building shaders this way. But still helpful to look at my project from a different perspective, which leads to some refactoring, bug fixing, insights and inspiration.\n\nYesterday I was really in doubt if this was the right route for this week's time spent on my project because of the awesome demo that tldraw made with gpt4-vision api, very cool! So,I also had to play with it together with my own application and was also amazed with the possibilities! Probably my next video will have this as a topic. Anyway, for now, enjoy my short video where I construct a very simple shader which runs on the GPU via webgl.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/_VvoZbsmces",
                                "text": "https://youtu.be/_VvoZbsmces"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/_VvoZbsmces",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/_VvoZbsmces/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/_VvoZbsmces?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Creating a basic glsl shader using a pull-based flow\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/_VvoZbsmces",
                "fallback": "YouTube Video: Creating a basic glsl shader using a pull-based flow",
                "title": "Creating a basic glsl shader using a pull-based flow",
                "title_link": "https://youtu.be/_VvoZbsmces",
                "author_name": "Maikel van de Lisdonk",
                "author_link": "https://www.youtube.com/@maikelvandelisdonk7024",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1700330143.951929",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1700380713.730109",
        "reply_users": [
            "UCUSW7WVD",
            "U0123H7JRDM"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5937221e-ef07-4b08-8961-aa08f421ab10",
        "type": "message",
        "text": "Really cool visuals! I also appreciate your place and route for the arrows. Nice balance between the discipline of straight lines and the aesthetics of curves.",
        "user": "UCUSW7WVD",
        "ts": "1700354050.588599",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bcEW/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really cool visuals! I also appreciate your place and route for the arrows. Nice balance between the discipline of straight lines and the aesthetics of curves."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1700330143.951929",
        "parent_user_id": "U0123H7JRDM"
    },
    {
        "client_msg_id": "AE1F24DF-05C3-4C68-91A9-F74453F10E3A",
        "type": "message",
        "text": "Thanks! A thing that I want to improve is the auto placement of new nodes.. I think that your approach with the \"rectangle world\" in one your\nvideos might help, so I am going to try something simular.. I also need ways to create space after nodes have been placed, as you can see in my video... currently too much dragging is needed to create space so that the layout of the nodes gets clearer.",
        "user": "U0123H7JRDM",
        "ts": "1700380713.730109",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RH5As",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! A thing that I want to improve is the auto placement of new nodes.. I think that your approach with the \"rectangle world\" in one your\nvideos might help, so I am going to try something simular.. I also need ways to create space after nodes have been placed, as you can see in my video... currently too much dragging is needed to create space so that the layout of the nodes gets clearer."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1700330143.951929",
        "parent_user_id": "U0123H7JRDM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]