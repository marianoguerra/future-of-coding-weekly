[
    {
        "client_msg_id": "e92e7f45-2695-43d3-b6f2-92054c6157a7",
        "type": "message",
        "text": "Hey folks! I'm doing some research into code formatters/pretty printers, with a view to potentially building my own. Does any one have any examples of code formatters that they've found especially fast, or that they know of which have a special focus on performance?\n\nI'm interested in learning about some of the potential techniques at play - what sort of caching and parallelization is being done, are they doing incremental parsing like tree-sitter etc..",
        "user": "U05CF6KLESV",
        "ts": "1698946058.130759",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "obb4I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey folks! I'm doing some research into code formatters/pretty printers, with a view to potentially building my own. Does any one have any examples of code formatters that they've found especially fast, or that they know of which have a special focus on performance?\n\nI'm interested in learning about some of the potential techniques at play - what sort of caching and parallelization is being done, are they doing incremental parsing like tree-sitter etc.."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946058.130759",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1698976118.992219",
        "reply_users": [
            "UMQ6LR9NZ",
            "UGWUJUZHT",
            "U013ZLJARC7",
            "U05PESXCC2E",
            "U05UBCXHWM6"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "type": "message",
        "subtype": "tombstone",
        "text": "This message was deleted.",
        "user": "USLACKBOT",
        "hidden": true,
        "ts": "1698946386.087409",
        "thread_ts": "1698946386.087409",
        "parent_user_id": "USLACKBOT",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1698947184.666619",
        "reply_users": [
            "U05CF6KLESV"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05CF6KLESV"
                ],
                "count": 1
            },
            {
                "name": "thread-please",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d7bc76b0-fd1a-4fa2-a8ac-631279be47c8",
        "type": "message",
        "text": "Again, thanks! I'll definitely take a look. Most of the formatter parsers I've looked at (e.g. Prettier, Gofmt), will create the AST of the full file, create an IR, and then do the formatting.\n\nI'm wondering if each of these steps can be streamed incrementally, and if you can do each operation in parallel.\n\nMy initial thought is, possibly, but not without some difficulties. For example, Prettier formats line breaks with some awareness of parent and subsequent sibling nodes in its IR).",
        "user": "U05CF6KLESV",
        "ts": "1698947184.666619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nV1Vz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Again, thanks! I'll definitely take a look. Most of the formatter parsers I've looked at (e.g. Prettier, Gofmt), will create the AST of the full file, create an IR, and then do the formatting.\n\nI'm wondering if each of these steps can be streamed incrementally, and if you can do each operation in parallel.\n\nMy initial thought is, possibly, but not without some difficulties. For example, Prettier formats line breaks with some awareness of parent and subsequent sibling nodes in its IR)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946386.087409",
        "parent_user_id": "USLACKBOT"
    },
    {
        "client_msg_id": "9d3310a8-f7bb-4e33-928d-d0f79cde64c7",
        "type": "message",
        "text": "Ruff has a beta formatter compatible with Black: <https://astral.sh/blog/the-ruff-formatter>",
        "user": "U04QB9V2RNG",
        "ts": "1698948402.548049",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Gzqu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ruff has a beta formatter compatible with Black: "
                            },
                            {
                                "type": "link",
                                "url": "https://astral.sh/blog/the-ruff-formatter"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "thread-please",
                "users": [
                    "UBN9AFS0N",
                    "U016VUZGUUQ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4929935c-119e-4d87-a6db-c13c69c11e72",
        "type": "message",
        "text": "I\u2019ve found <https://git.sr.ht/~technomancy/fnlfmt|fnlfmt>, for the fennel language really readable.",
        "user": "UMQ6LR9NZ",
        "ts": "1698948550.423439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZVGmS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve found "
                            },
                            {
                                "type": "link",
                                "url": "https://git.sr.ht/~technomancy/fnlfmt",
                                "text": "fnlfmt"
                            },
                            {
                                "type": "text",
                                "text": ", for the fennel language really readable."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV"
    },
    {
        "client_msg_id": "eb1671c4-09a8-4eb6-862d-9133b1ada296",
        "type": "message",
        "text": "FYI, maybe - I\u2019m not interested in speed, and this might not apply. I note that Ohm-JS has a interactive parsing mode (I haven\u2019t tried it).  I wonder if that means that one could attach semantics code (that\u2019s the way that Ohm-JS is used) that does some formatting?",
        "user": "UGWUJUZHT",
        "ts": "1698949981.137379",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cgtP4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FYI, maybe - I\u2019m not interested in speed, and this might not apply. I note that Ohm-JS has a interactive parsing mode (I haven\u2019t tried it).  I wonder if that means that one could attach semantics code (that\u2019s the way that Ohm-JS is used) that does some formatting?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV"
    },
    {
        "client_msg_id": "aa801d12-4c55-4a47-98c6-6c027c6e1f9d",
        "type": "message",
        "text": "[reply from John] Again, thanks! I\u2019ll definitely take a look. Most of the formatter parsers I\u2019ve looked at (e.g. Prettier, Gofmt), will create the AST of the full file, create an IR, and then do the formatting.\n\nI\u2019m wondering if each of these steps can be streamed incrementally, and if you can do each operation in parallel.\n\nMy initial thought is, possibly, but not without some difficulties. For example, Prettier formats line breaks with some awareness of parent and subsequent sibling nodes in its IR).",
        "user": "UGWUJUZHT",
        "ts": "1698950019.085619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XZ5/s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[reply from John] Again, thanks! I\u2019ll definitely take a look. Most of the formatter parsers I\u2019ve looked at (e.g. Prettier, Gofmt), will create the AST of the full file, create an IR, and then do the formatting.\n\nI\u2019m wondering if each of these steps can be streamed incrementally, and if you can do each operation in parallel.\n\nMy initial thought is, possibly, but not without some difficulties. For example, Prettier formats line breaks with some awareness of parent and subsequent sibling nodes in its IR)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV"
    },
    {
        "client_msg_id": "4afc926a-0171-446f-b23b-4070a445adb4",
        "type": "message",
        "text": "> This library implements a pretty expressive printer, following the algorithm presented in Porncharoenwase et al. (2023). The pretty printer is expressive, provably optimal, and practically efficient.\n<https://docs.racket-lang.org/pretty-expressive/index.html>\n\nFull paper here:\n<https://sorawee.github.io/pretty-expressive-oopsla23-artifact/full-paper.pdf>",
        "user": "U013ZLJARC7",
        "ts": "1698950047.821629",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h7nDx",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This library implements a pretty expressive printer, following the algorithm presented in "
                            },
                            {
                                "type": "text",
                                "text": "Porncharoenwase et al.",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "text",
                                "text": "2023",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). The pretty printer is expressive, provably optimal, and practically efficient."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://docs.racket-lang.org/pretty-expressive/index.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFull paper here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://sorawee.github.io/pretty-expressive-oopsla23-artifact/full-paper.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1698950112.000000"
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05CF6KLESV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f715af18-0f6b-4066-bb35-95416b66f8b4",
        "type": "message",
        "text": "I know that CodeMirror uses Lezer, which is capable of doing incremental parsing. <https://codemirror.net/examples/lang-package/>\nIf you're not familiar with CodeMirror, it's a text-editor component that is highly customizable.",
        "user": "U05PESXCC2E",
        "ts": "1698951140.164849",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EW6Tt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know that CodeMirror uses Lezer, which is capable of doing incremental parsing. "
                            },
                            {
                                "type": "link",
                                "url": "https://codemirror.net/examples/lang-package/"
                            },
                            {
                                "type": "text",
                                "text": "\nIf you're not familiar with CodeMirror, it's a text-editor component that is highly customizable."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV"
    },
    {
        "client_msg_id": "40b08455-77f1-4d16-952c-7fd386a5b3f0",
        "type": "message",
        "text": "Over the years, I've thought about different ways of creating an interactive tutorial about writing a simple programming language. For example, you can create a \"wizard\" style with next and back buttons, or you can create one single page with the code floating on the right side of the content (possibly sticky). One detail is that each example would grow in size (for the complete code), but would only focus on one sub-section. I thought about collapsing sections already covered, but being able to expand them, or just have a single button to expand all the hidden code. Has anyone had experience or have seen articles that use a \"build from small to large\", showing code along the way?",
        "user": "U05PESXCC2E",
        "ts": "1698953870.722339",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u56Ek",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Over the years, I've thought about different ways of creating an interactive tutorial about writing a simple programming language. For example, you can create a \"wizard\" style with next and back buttons, or you can create one single page with the code floating on the right side of the content (possibly sticky). One detail is that each example would grow in size (for the complete code), but would only focus on one sub-section. I thought about collapsing sections already covered, but being able to expand them, or just have a single button to expand all the hidden code. Has anyone had experience or have seen articles that use a \"build from small to large\", showing code along the way?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "reply_count": 10,
        "reply_users_count": 4,
        "latest_reply": "1699071750.186319",
        "reply_users": [
            "U05PESXCC2E",
            "UCUSW7WVD",
            "UMQ6LR9NZ",
            "ULM3U6275"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "e8a91322-f5d2-48e8-a41d-9f5d75f2d6bc",
        "type": "message",
        "text": "I realize it's a bit abstract. An example of \"paged\" tours wold be <https://go.dev/tour/welcome/1>",
        "user": "U05PESXCC2E",
        "ts": "1698954014.969379",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sVo0r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I realize it's a bit abstract. An example of \"paged\" tours wold be "
                            },
                            {
                                "type": "link",
                                "url": "https://go.dev/tour/welcome/1"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    },
    {
        "client_msg_id": "18e39718-3d19-43dc-b160-39c57e20f63b",
        "type": "message",
        "text": "I've always loved this walkthrough: <https://viewsourcecode.org/snaptoken/kilo|https://viewsourcecode.org/snaptoken/kilo>",
        "user": "UCUSW7WVD",
        "ts": "1698955850.215729",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KgRLJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've always loved this walkthrough: "
                            },
                            {
                                "type": "link",
                                "url": "https://viewsourcecode.org/snaptoken/kilo",
                                "text": "https://viewsourcecode.org/snaptoken/kilo"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E",
        "reactions": [
            {
                "name": "dart",
                "users": [
                    "U05PESXCC2E"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4d7b019b-a483-46e8-9635-75270fc00021",
        "type": "message",
        "text": "This looks like inline code (vs off to the side), and colored \"diffs\" to show the changes and also collapsed functions. I like it. Very visual.",
        "user": "U05PESXCC2E",
        "ts": "1698956227.101219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RLUzx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks like inline code (vs off to the side), and colored \"diffs\" to show the changes and also collapsed functions. I like it. Very visual."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    },
    {
        "client_msg_id": "3e56c856-1f4b-45b1-a2fa-f6b43cbbba5b",
        "type": "message",
        "text": "<https://tree-sitter.github.io/tree-sitter/|tree-sitter> is really fast, I don't know if anyone has built a formater for it?",
        "user": "U05UBCXHWM6",
        "ts": "1698976049.102179",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b26rP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://tree-sitter.github.io/tree-sitter/",
                                "text": "tree-sitter"
                            },
                            {
                                "type": "text",
                                "text": " is really fast, I don't know if anyone has built a formater for it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV"
    },
    {
        "client_msg_id": "8c1630db-485c-475f-959e-1fe304956296",
        "type": "message",
        "text": "Looks like yes! <https://www.tweag.io/blog/2023-03-09-announcing-topiary/|topiary> is a thing",
        "user": "U05UBCXHWM6",
        "ts": "1698976118.992219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WFMqc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like yes! "
                            },
                            {
                                "type": "link",
                                "url": "https://www.tweag.io/blog/2023-03-09-announcing-topiary/",
                                "text": "topiary"
                            },
                            {
                                "type": "text",
                                "text": " is a thing"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://tweag.io/logo.png",
                "image_width": 2580,
                "image_height": 2080,
                "image_bytes": 163373,
                "from_url": "https://www.tweag.io/blog/2023-03-09-announcing-topiary/",
                "service_icon": "https://www.tweag.io/icons/icon-48x48.png?v=24f8ea31818259c4506bd1dd71f09cf3",
                "id": 1,
                "original_url": "https://www.tweag.io/blog/2023-03-09-announcing-topiary/",
                "fallback": "Announcing Topiary",
                "text": "We're happy to announce the first release of Topiary, a formatter for\nmany languages that leverages Tree-sitter.",
                "title": "Announcing Topiary",
                "title_link": "https://www.tweag.io/blog/2023-03-09-announcing-topiary/",
                "service_name": "tweag.io"
            }
        ],
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV"
    },
    {
        "client_msg_id": "3f543baa-645c-4b49-b0a8-c0c47927109b",
        "type": "message",
        "text": "Similar to what <@UCUSW7WVD> shared, I enjoy how <https://www.buildyourownlisp.com/|Build your own Lisp> is setup.",
        "user": "UMQ6LR9NZ",
        "ts": "1699019170.224539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2OmXo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Similar to what "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " shared, I enjoy how "
                            },
                            {
                                "type": "link",
                                "url": "https://www.buildyourownlisp.com/",
                                "text": "Build your own Lisp"
                            },
                            {
                                "type": "text",
                                "text": " is setup."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E",
        "reactions": [
            {
                "name": "dart",
                "users": [
                    "U05PESXCC2E"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "45bbd845-3f4d-417b-bf72-70e53b3c4e87",
        "type": "message",
        "text": "I particularly like that it makes evident a thought process behind the code. Many examples start with a naive implementation, and then, once the idea has been communicated the chapter concludes with a \u201ccleaning up\u201d section that gently optimizes what has been done before",
        "user": "UMQ6LR9NZ",
        "ts": "1699019255.775629",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VFuGr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I particularly like that it makes evident a thought process behind the code. Many examples start with a naive implementation, and then, once the idea has been communicated the chapter concludes with a \u201ccleaning up\u201d section that gently optimizes what has been done before"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    },
    {
        "client_msg_id": "deb70055-fad2-4417-9476-ae5126f50a22",
        "type": "message",
        "text": "Thank you Eli. Yes, it has a similar format and I like the build-ups. To support \"visual diff\" and code folding, I think I'll add Markdown code comments at the end of the line. Maybe something like:\n\n```NumericLiteral                  // &gt;\n  = value:[0-9]+ {\n      return {\n        type: 'NumericLiteral', // +\n        value: Number(text())   // +\n      };\n    }```\nGitHub Markdown support adding + and - to the beginning of the line, but I want to be able to support other hints, maybe tooltips for example.",
        "user": "U05PESXCC2E",
        "ts": "1699029215.582359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XfeQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you Eli. Yes, it has a similar format and I like the build-ups. To support \"visual diff\" and code folding, I think I'll add Markdown code comments at the end of the line. Maybe something like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "NumericLiteral                  // >\n  = value:[0-9]+ {\n      return {\n        type: 'NumericLiteral', // +\n        value: Number(text())   // +\n      };\n    }"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nGitHub Markdown support adding + and - to the beginning of the line, but I want to be able to support other hints, maybe tooltips for example."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    },
    {
        "client_msg_id": "e06ba90d-4c6c-4b1a-b1c1-8a521fec9820",
        "type": "message",
        "text": "legit, I tend to shy away from tooltips because they are a headache to make accessible \u2014 I think that is why I\u2019m drawn to this more literate code style, but I defo see the gap it leaves in getting comments sort of right as close to the code as possible",
        "user": "UMQ6LR9NZ",
        "ts": "1699029503.243309",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NaPoW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "legit, I tend to shy away from tooltips because they are a headache to make accessible \u2014 I think that is why I\u2019m drawn to this more literate code style, but I defo see the gap it leaves in getting comments sort of right as close to the code as possible"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    },
    {
        "client_msg_id": "0d92e10d-052d-4d82-bb86-63788251c7f0",
        "type": "message",
        "text": "Maybe not hover tooltips, but like static popup notes",
        "user": "U05PESXCC2E",
        "ts": "1699029807.933159",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QL7lj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe not hover tooltips, but like static popup notes"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    },
    {
        "client_msg_id": "4a8476ac-00fc-4fbd-9a97-2d90450bb071",
        "type": "message",
        "text": "Assuming you already have good reference docs on your website, you might wait for the LLMs to crawl them and then create a tutorial chat UI on your site that asks the user for simple apps or examples they'd like to write, and walks them through how to do that.\n\nCould also periodically have the LLM generate a bunch of simple examples with descriptions, for quick tutorial browsing. Conveniently, these would update as your docs and APIs do. It's possible the docs themselves could be autogenerated...",
        "user": "ULM3U6275",
        "ts": "1699046564.258219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T4r79",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Assuming you already have good reference docs on your website, you might wait for the LLMs to crawl them and then create a tutorial chat UI on your site that asks the user for simple apps or examples they'd like to write, and walks them through how to do that.\n\nCould also periodically have the LLM generate a bunch of simple examples with descriptions, for quick tutorial browsing. Conveniently, these would update as your docs and APIs do. It's possible the docs themselves could be autogenerated..."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1699046671.000000"
        },
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d23bff36-6303-446e-b48a-24693eb28e59",
        "type": "message",
        "text": "Ah yes, I haven't done much with AI/deep learning. That could be the start of my journey.",
        "user": "U05PESXCC2E",
        "ts": "1699071750.186319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jfxM1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah yes, I haven't done much with AI/deep learning. That could be the start of my journey."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E"
    }
]