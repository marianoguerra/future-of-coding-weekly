[
    {
        "client_msg_id": "ea45f928-bf77-4437-b5ad-d96a40755016",
        "type": "message",
        "text": "Has anyone seen controlled natural languages implemented in a structure-aware WYSIWYG XML editor? Is there some reason that wouldn't work?",
        "user": "U02U0AS3J49",
        "ts": "1686205425.866679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WucR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone seen controlled natural languages implemented in a structure-aware WYSIWYG XML editor? Is there some reason that wouldn't work?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686205425.866679",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1686290811.448749",
        "reply_users": [
            "U0296ACR13M",
            "U02U0AS3J49"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "40fdc698-6c4c-4752-b09c-e4f00eb695ae",
        "type": "message",
        "text": "Can't say I have, but I'm interested what do you mean by this exactly and what would be the use case?",
        "user": "U0296ACR13M",
        "ts": "1686207405.608079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sb7LO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can't say I have, but I'm interested what do you mean by this exactly and what would be the use case?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686205425.866679",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "a42b6486-9d7d-461c-b420-31651996ef1d",
        "type": "message",
        "text": "The use case for CNL is to make the (usually domain-specific) code readable, but writing it has been hard, because there was no way to stop people from typing invalid syntax, and the CNL syntax was so similar to natural language that it was difficult to  remember what you can and cannot say. Block-based languages solve the problem by not allowing you to type. You must drag and drop valid syntax nodes and combine them. That's good, but the interface is unfamiliar for some people. Oracle Policy Automation allows you to type anything you want (in MS Word), and offers a search bar you can use to find valid syntax if you get messed up. It's more familiar, but very easy to make syntax errors. A structure aware XML editor would look and feel more like Word, giving non-programmers a familiar environment, but only allow you to type things that were syntactically correct. I'm imagining a sort of strict autocomplete. My particular use case is knowledge representation of statute and regulation, so my users are used to those things being expressed as documents.",
        "user": "U02U0AS3J49",
        "ts": "1686234437.438929",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FV2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The use case for CNL is to make the (usually domain-specific) code readable, but writing it has been hard, because there was no way to stop people from typing invalid syntax, and the CNL syntax was so similar to natural language that it was difficult to  remember what you can and cannot say. Block-based languages solve the problem by not allowing you to type. You must drag and drop valid syntax nodes and combine them. That's good, but the interface is unfamiliar for some people. Oracle Policy Automation allows you to type anything you want (in MS Word), and offers a search bar you can use to find valid syntax if you get messed up. It's more familiar, but very easy to make syntax errors. A structure aware XML editor would look and feel more like Word, giving non-programmers a familiar environment, but only allow you to type things that were syntactically correct. I'm imagining a sort of strict autocomplete. My particular use case is knowledge representation of statute and regulation, so my users are used to those things being expressed as documents."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686205425.866679",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "1af07c20-5fc7-483a-b52e-524e76e1a7d3",
        "type": "message",
        "text": "I see. I think the viability of using XML editor for CNL depends on the details of the language and how structure aware the editor is. Some XML schema definition might be enough for simple language, but more complex languages are likely to require context sensitive syntax rules and even semantic understanding from the editor. I feel like you'll run into a hard ceiling at some point trying to define and enforce the structure with a schema. A language workbench able to produce textual projectional editor would probably be a safer bet.",
        "user": "U0296ACR13M",
        "ts": "1686290811.448749",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f0Ehq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. I think the viability of using XML editor for CNL depends on the details of the language and how structure aware the editor is. Some XML schema definition might be enough for simple language, but more complex languages are likely to require context sensitive syntax rules and even semantic understanding from the editor. I feel like you'll run into a hard ceiling at some point trying to define and enforce the structure with a schema. A language workbench able to produce textual projectional editor would probably be a safer bet."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686205425.866679",
        "parent_user_id": "U02U0AS3J49"
    }
]