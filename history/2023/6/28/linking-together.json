[
    {
        "client_msg_id": "ed2e2c4d-2edc-4214-adf7-0dd9c8d0ac35",
        "type": "message",
        "text": "<https://wg5-fortran.org/N2201-N2250/N2212.pdf|Everyone excited for Fortran 2023!?> Only mostly joking, but I just noticed today that fortran is scheduled for <https://wg5-fortran.org/f2023.html|a new standard release next month>. I got a big smile at some of the proposed imporvements\n\u2022 Trig functions that work in degrees\n\u2022 Using integer arrays to specify subscripts and section subscripts\n\u2022 Enum types",
        "user": "U055V4HCHU7",
        "ts": "1687906847.914619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=PIP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://wg5-fortran.org/N2201-N2250/N2212.pdf",
                                "text": "Everyone excited for Fortran 2023!?"
                            },
                            {
                                "type": "text",
                                "text": " Only mostly joking, but I just noticed today that fortran is scheduled for "
                            },
                            {
                                "type": "link",
                                "url": "https://wg5-fortran.org/f2023.html",
                                "text": "a new standard release next month"
                            },
                            {
                                "type": "text",
                                "text": ". I got a big smile at some of the proposed imporvements\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Trig functions that work in degrees"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Using integer arrays to specify subscripts and section subscripts"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Enum types"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "reply_count": 12,
        "reply_users_count": 3,
        "latest_reply": "1688064796.486359",
        "reply_users": [
            "U055V4HCHU7",
            "UJBAJNFLK",
            "U01U19ECZTJ"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U055QFU92JK",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "655886e5-c764-46d3-9963-5981efee56fe",
        "type": "message",
        "text": "&gt; 2.4 US 22. Conditional expressions and arguments Conditional expressions, expressions whose value is one of several alternatives, are added. A simple example is value = ( a&gt;0.0 ? a : 0.0)\nFortran now supports ternary conditions?",
        "user": "U055V4HCHU7",
        "ts": "1687906957.140929",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A3U",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2.4 US 22. Conditional expressions and arguments Conditional expressions, expressions whose value is one of several alternatives, are added. A simple example is value = ( a>0.0 ? a : 0.0)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nFortran now supports ternary conditions?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U055QFU92JK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "98b7535d-7032-4322-abb5-084ce0339c83",
        "type": "message",
        "text": "Nobody ever gets excited about Fortran, and that's why it exists. It's boring technology that you can rely on. People get excited about what they are doing with their Fortran programs, happy for not having to deal with tech churn.\n\nA useful lens for understanding Fortran is Stewart Brand's <https://doi.org/10.21428/7f2e5f08|pace layers> . Excitement is about the fastest layer, which Brand labels \"fashion/art\". Fortran is in the infrastructure layer. It's as exciting as highways and sewage systems.",
        "user": "UJBAJNFLK",
        "ts": "1687934133.690319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KMNkD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nobody ever gets excited about Fortran, and that's why it exists. It's boring technology that you can rely on. People get excited about what they are doing with their Fortran programs, happy for not having to deal with tech churn.\n\nA useful lens for understanding Fortran is Stewart Brand's "
                            },
                            {
                                "type": "link",
                                "url": "https://doi.org/10.21428/7f2e5f08",
                                "text": "pace layers"
                            },
                            {
                                "type": "text",
                                "text": " . Excitement is about the fastest layer, which Brand labels \"fashion/art\". Fortran is in the infrastructure layer. It's as exciting as highways and sewage systems."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://assets.pubpub.org/9uuqrs53/71517867926813.jpg",
                "image_width": 1500,
                "image_height": 700,
                "image_bytes": 511408,
                "from_url": "https://doi.org/10.21428/7f2e5f08",
                "service_icon": "https://assets.pubpub.org/gqinwefs/21508255847021.png",
                "id": 1,
                "original_url": "https://doi.org/10.21428/7f2e5f08",
                "fallback": "Journal of Design and Science: Pace Layering: How Complex Systems Learn and Keep Learning",
                "text": "Pace layers provide many-leveled corrective, stabilizing feedback throughout the system.\u00a0It is in the contradictions between these layers that civilization finds its surest health. I propose six significant levels of pace and size in a robust and adaptable civilization.",
                "title": "Pace Layering: How Complex Systems Learn and Keep Learning",
                "title_link": "https://doi.org/10.21428/7f2e5f08",
                "service_name": "Journal of Design and Science"
            }
        ],
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0245E9RB2B",
                    "U01U19ECZTJ",
                    "U055V4HCHU7",
                    "U013ZLJARC7"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "7c2816f8-e0a5-4957-914e-85c0a608a486",
        "type": "message",
        "text": "It would have been a good investment in your time if you had learned FORTRAN in 1957 (provided you wanted/needed to code in FORTRAN for 66 years).",
        "user": "U01U19ECZTJ",
        "ts": "1687966298.606609",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bYv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would have been a good investment in your time if you had learned FORTRAN in 1957 (provided you wanted/needed to code in FORTRAN for 66 years)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "5e0540dc-91e5-475c-a397-c9d9ec99dfe8",
        "type": "message",
        "text": "I was talking to a COBOL programmer and I assumed that the language had probably evolved a lot over the years, but they assured me that it hadn't and had remained relatively stable and unchanging, at least over their career.",
        "user": "U01U19ECZTJ",
        "ts": "1687966366.556069",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GtoV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was talking to a COBOL programmer and I assumed that the language had probably evolved a lot over the years, but they assured me that it hadn't and had remained relatively stable and unchanging, at least over their career."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "24fa0562-cbd3-4e5f-9bbf-bb0f6b88194f",
        "type": "message",
        "text": "An irc contact turned close friend did their entire phd in fortran99 because that's what their fluid dynamics library was written it. I read through some of the systems and (aside from the math I didn't grasp) it was seriously readable",
        "user": "U055V4HCHU7",
        "ts": "1687968994.974259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4GA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An irc contact turned close friend did their entire phd in fortran99 because that's what their fluid dynamics library was written it. I read through some of the systems and (aside from the math I didn't grasp) it was seriously readable"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "7accc04b-845d-40a8-bfed-c215d13a1696",
        "type": "message",
        "text": "I love seeing it supported and invested in (at whatever speed). The world may well crumble without it",
        "user": "U055V4HCHU7",
        "ts": "1687969046.504909",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "68Bt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love seeing it supported and invested in (at whatever speed). The world may well crumble without it"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "ddce3f09-35b0-4231-aa6c-9107e5220b16",
        "type": "message",
        "text": "<@U01U19ECZTJ> It's indeed interesting to compare COBOL, Fortran, and Lisp, the three oldest languages that are still widely used. COBOL has hardly changed, Fortran has evolved significantly, but with a strong emphasis on backward compatibility, and Lisp has always continued splitting into dialects that have taken lots of different directions.\nI see this mostly as Conway's law in action, the languages reflecting their communities: for COBOL, banks and insurance companies, for who stability is top priority, scientific computing based on mature theories for Fortran, and builders of experimental software for Lisp.",
        "user": "UJBAJNFLK",
        "ts": "1688018288.178919",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UT0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01U19ECZTJ"
                            },
                            {
                                "type": "text",
                                "text": " It's indeed interesting to compare COBOL, Fortran, and Lisp, the three oldest languages that are still widely used. COBOL has hardly changed, Fortran has evolved significantly, but with a strong emphasis on backward compatibility, and Lisp has always continued splitting into dialects that have taken lots of different directions.\nI see this mostly as Conway's law in action, the languages reflecting their communities: for COBOL, banks and insurance companies, for who stability is top priority, scientific computing based on mature theories for Fortran, and builders of experimental software for Lisp."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "c9c29225-35eb-4b50-993e-362e2162facb",
        "type": "message",
        "text": "Makes sense and I think this points to what is both Lisp's greatest strength and weakness: its versatility and mutability at the cost of being able to develop a community around an actually common standard.",
        "user": "U01U19ECZTJ",
        "ts": "1688046179.643339",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IpMo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makes sense and I think this points to what is both Lisp's greatest strength and weakness: its versatility and mutability at the cost of being able to develop a community around an actually common standard."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "7378de4d-2266-4d41-8ed4-838157ee2fe9",
        "type": "message",
        "text": "Maybe the curse of powerful languages.",
        "user": "U01U19ECZTJ",
        "ts": "1688046226.758499",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SFs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe the curse of powerful languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "0f114bd1-833c-423f-b9f9-bb4167ddba44",
        "type": "message",
        "text": "I have little context on the modern iterations of these languages and am trying to attribute _some_ reason as to why they split in popularity. The few thoughts that came to mind:\n\u2022 Lisp is a standard and the dialects can be more flexible / meet modern use cases. \n\u2022 COBOL found a home on mainframes which are rarely used outside of banking\n\u2022 Fortran found an early footing in academic systems and has only been a stable, reliable base for scientific computing. Also performance\nDo any of those points hold water?",
        "user": "U055V4HCHU7",
        "ts": "1688056383.699989",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q4ghm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have little context on the modern iterations of these languages and am trying to attribute "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reason as to why they split in popularity. The few thoughts that came to mind:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Lisp is a standard and the dialects can be more flexible / meet modern use cases. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "COBOL found a home on mainframes which are rarely used outside of banking"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Fortran found an early footing in academic systems and has only been a stable, reliable base for scientific computing. Also performance"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDo any of those points hold water?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U055V4HCHU7",
            "ts": "1688056697.000000"
        },
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "c5d0593c-7b26-4f38-83cb-0ac36cc9cd91",
        "type": "message",
        "text": "COBOL has very little competition, in that it is a language actually designed for business applications. Java was designed for set-top boxes, javscript for light scripting of webpages, Python for education, C for OS system programming, Smalltalk also for education. Given that the majority of the world's code is for business applications, this is a remarkably underserved area. COBOL's rich record support makes working with structured data much easier than something like C's anemic structures. FORTRAN also benefited from rich standard libraries like <https://www.netlib.org/linpack/>",
        "user": "U01U19ECZTJ",
        "ts": "1688062455.951289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ReZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "COBOL has very little competition, in that it is a language actually designed for business applications. Java was designed for set-top boxes, javscript for light scripting of webpages, Python for education, C for OS system programming, Smalltalk also for education. Given that the majority of the world's code is for business applications, this is a remarkably underserved area. COBOL's rich record support makes working with structured data much easier than something like C's anemic structures. FORTRAN also benefited from rich standard libraries like "
                            },
                            {
                                "type": "link",
                                "url": "https://www.netlib.org/linpack/"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    },
    {
        "client_msg_id": "5528b84d-8a6b-495c-8263-9f165ce4556f",
        "type": "message",
        "text": "<@U055V4HCHU7> All three have official standards, which have multiple highly conforming implementations. It's really the application domains and the associated user communities that make the difference.",
        "user": "UJBAJNFLK",
        "ts": "1688064796.486359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QWH=5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U055V4HCHU7"
                            },
                            {
                                "type": "text",
                                "text": " All three have official standards, which have multiple highly conforming implementations. It's really the application domains and the associated user communities that make the difference."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1687906847.914619",
        "parent_user_id": "U055V4HCHU7"
    }
]