[
    {
        "client_msg_id": "fa27b21f-c3a9-4a10-b5dc-473b037d29ca",
        "type": "message",
        "text": "Slides from a recent talk of mine (at a game engine/rendering conference, but is actually very much about programming language design/impl as it relates to game engines), video still forthcoming: <https://twitter.com/mirror2mask/status/1667757561960103936>",
        "user": "UHDQ62M4P",
        "ts": "1686506303.145839",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HwTug",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Slides from a recent talk of mine (at a game engine/rendering conference, but is actually very much about programming language design/impl as it relates to game engines), video still forthcoming: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/mirror2mask/status/1667757561960103936"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://pbs.twimg.com/media/FyUQpYcacAEe7QI.jpg:large",
                "image_width": 2048,
                "image_height": 741,
                "image_bytes": 324495,
                "from_url": "https://twitter.com/mirror2mask/status/1667757561960103936",
                "service_icon": "http://abs.twimg.com/favicons/twitter.2.ico",
                "id": 1,
                "original_url": "https://twitter.com/mirror2mask/status/1667757561960103936",
                "fallback": "Twitter: Natalya Tatarchuk :flag-ua: on Twitter",
                "text": "#REAC2023 - the slides from Wouter van Oortmerssen's \"Scripting Language? Engine Language? Why Not Both?\" posted - <https://t.co/8PbCm2mOXh> - Enjoy!",
                "title": "Natalya Tatarchuk :flag-ua: on Twitter",
                "title_link": "https://twitter.com/mirror2mask/status/1667757561960103936",
                "service_name": "Twitter"
            }
        ],
        "thread_ts": "1686506303.145839",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1686638508.367649",
        "reply_users": [
            "UBN9AFS0N",
            "U02JQA5FY5C",
            "UHDQ62M4P",
            "UJBAJNFLK",
            "UA14TGLTC"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1686638508.367649"
    },
    {
        "client_msg_id": "bf416ab2-2109-401d-9365-d81c1c774215",
        "type": "message",
        "text": "\"Bla, a more academic language where stack frames and objects where the same interchangeable things!\"\n\nI had that idea once :smile: do you have anything to recommend about stack frames? I find it's a thing that most programming languages \"take for granted\"",
        "user": "UBN9AFS0N",
        "ts": "1686512227.372459",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mas",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Bla, a more academic language where stack frames and objects where the same interchangeable things!\"\n\nI had that idea once "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " do you have anything to recommend about stack frames? I find it's a thing that most programming languages \"take for granted\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "708d563d-ec6a-4ac0-8b51-b23cb09abf59",
        "type": "message",
        "text": "amazing - very much like your approach",
        "user": "U02JQA5FY5C",
        "ts": "1686517678.961099",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "amazing - very much like your approach"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHDQ62M4P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2c043446-ea5f-4035-a53b-1a66a0936759",
        "type": "message",
        "text": "<@UBN9AFS0N> yeah it's not a first class citizen in almost all languages.. I guess the classical language to look into for \"stack frames as objects\" is continuations in scheme, but even there they a bit implicit about the link, in the Bla language you had an explicit `self` reference to the stack frame",
        "user": "UHDQ62M4P",
        "ts": "1686522408.042109",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RVoF6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " yeah it's not a first class citizen in almost all languages.. I guess the classical language to look into for \"stack frames as objects\" is continuations in scheme, but even there they a bit implicit about the link, in the Bla language you had an explicit "
                            },
                            {
                                "type": "text",
                                "text": "self",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reference to the stack frame"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "b24ecbc9-8153-4121-8fc6-5dfa621a0573",
        "type": "message",
        "text": "In Pharo (descendent of Smalltalk 80 via Squeak), stack frames are plain objects. You can access (inspect, even modify) the current stack frame as `thisContext` anywhere you like.\n\nIt is mostly used by debugging tools and exception handlers, but I suspect that more creative uses have been envisaged.",
        "user": "UJBAJNFLK",
        "ts": "1686550031.283759",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+II",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Pharo (descendent of Smalltalk 80 via Squeak), stack frames are plain objects. You can access (inspect, even modify) the current stack frame as "
                            },
                            {
                                "type": "text",
                                "text": "thisContext",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " anywhere you like.\n\nIt is mostly used by debugging tools and exception handlers, but I suspect that more creative uses have been envisaged."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1686550113.000000"
        },
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "b9ff0e8c-edfd-4af6-961e-340e1afd084d",
        "type": "message",
        "text": "In python it's not hard to access them and are very OO but they are really similar to any other stack frame in other languages, I think having them first class and adding functionality to them would be useful, for example adding metadata to make debugging and stack traces more useful",
        "user": "UBN9AFS0N",
        "ts": "1686551396.776649",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yOCkz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In python it's not hard to access them and are very OO but they are really similar to any other stack frame in other languages, I think having them first class and adding functionality to them would be useful, for example adding metadata to make debugging and stack traces more useful"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "90bbe8b5-d3f0-404c-bfea-9ee01dde854f",
        "type": "message",
        "text": "Python provides some access, but Python stack frames are hardly first-class objects. For comparison: in Pharo, you can serialize a stack frame object, then deserialize it elsewhere and do some debugging.",
        "user": "UJBAJNFLK",
        "ts": "1686560474.211199",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gsw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Python provides some access, but Python stack frames are hardly first-class objects. For comparison: in Pharo, you can serialize a stack frame object, then deserialize it elsewhere and do some debugging."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "2da9b3d7-5f51-488a-88ce-67893e1de0a7",
        "type": "message",
        "text": "Thinking of Scheme, continuations have the same flavor as lambda in that they capture something and then put it in a black box.  I came to respect the Scheme Report for steering clear of features requiring implementations to be dynamic.",
        "user": "UA14TGLTC",
        "ts": "1686638508.367649",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ritbG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking of Scheme, continuations have the same flavor as lambda in that they capture something and then put it in a black box.  I came to respect the Scheme Report for steering clear of features requiring implementations to be dynamic."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1686506303.145839",
        "parent_user_id": "UHDQ62M4P"
    }
]