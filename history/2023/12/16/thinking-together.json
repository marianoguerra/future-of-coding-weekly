[
    {
        "client_msg_id": "02EEA2D5-4B53-40B1-8C0C-E112CAC073A1",
        "type": "message",
        "text": "In linguistics, we have \"denotation\" and \"connotation\" as two forms of meaning. In programming, we have denotational semantics and operational semantics. Do we have connotational semantics? (If not \u2014 may we?)",
        "user": "UC2A2ARPT",
        "ts": "1702757349.726829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ooqRc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In linguistics, we have \"denotation\" and \"connotation\" as two forms of meaning. In programming, we have denotational semantics and operational semantics"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Do we have connotational semantics? (If not \u2014 may we?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "reply_count": 26,
        "reply_users_count": 9,
        "latest_reply": "1702832561.143399",
        "reply_users": [
            "U03CEGR3HSL",
            "UC2A2ARPT",
            "UK3LH8CF5",
            "UMQ6LR9NZ",
            "UFEQUBNNT",
            "U023V63MF6V",
            "U0245E9RB2B",
            "U013ZLJARC7",
            "UNS7QDKFV"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c4bb0aaf-34dc-420e-ac78-db7242c2a874",
        "type": "message",
        "text": "We have idioms and design patterns which, when recognized by a reader, carry connotations.\n\nWhether that's a good thing or a bad thing is debatable. \n\nPaul Graham has argued that the presence of design patterns in a language indicates an inability to create the abstraction you really need. For example, he has compared design patterns to manual macro expansions.\n<https://twitter.com/paulg/status/1409386827803410436|https://twitter.com/paulg/status/1409386827803410436>\n\nPeter Norvig is rumored to have said \"Design patterns are bug reports against your programming language.\"\n\nHe also pointed out how many standard design patterns become unnecessary in a sufficiently dynamic language.\n<https://norvig.com/design-patterns/|https://norvig.com/design-patterns/>",
        "user": "U03CEGR3HSL",
        "ts": "1702758121.465389",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "srDd0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We have idioms and design patterns which, when recognized by a reader, carry connotations.\n\nWhether that's a good thing or a bad thing is debatable. \n\nPaul Graham has argued that the presence of design patterns in a language indicates an inability to create the abstraction you really need. For example, he has compared design patterns to manual macro expansions.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/paulg/status/1409386827803410436",
                                "text": "https://twitter.com/paulg/status/1409386827803410436"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPeter Norvig is rumored to have said \"Design patterns are bug reports against your programming language.\"\n\nHe also pointed out how many standard design patterns become unnecessary in a sufficiently dynamic language.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://norvig.com/design-patterns/",
                                "text": "https://norvig.com/design-patterns/"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://twitter.com/paulg/status/1409386827803410436",
                "service_icon": "http://abs.twimg.com/favicons/twitter.3.ico",
                "thumb_url": "https://pbs.twimg.com/profile_images/1824002576/pg-railsconf_200x200.jpg",
                "thumb_width": 200,
                "thumb_height": 200,
                "id": 1,
                "original_url": "https://twitter.com/paulg/status/1409386827803410436",
                "fallback": "X (formerly Twitter): Paul Graham (@paulg) on X",
                "text": "@stylewarning \"Design patterns\" (= macroexpansions)",
                "title": "Paul Graham (@paulg) on X",
                "title_link": "https://twitter.com/paulg/status/1409386827803410436",
                "service_name": "X (formerly Twitter)"
            }
        ],
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "4C99B3C8-44FB-4157-8E6D-4E9E12847461",
        "type": "message",
        "text": "My sense is that every (say) adjective in human language both denotes and connotes distinct meanings. Does every programming construct connote something? Is this where the debate over the meaning of reduce vs loop emerges?",
        "user": "UC2A2ARPT",
        "ts": "1702758712.200259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BMr9r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My sense is that every (say) adjective in human language both denotes and connotes distinct meanings"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Does every programming construct connote something? Is this where the debate over the meaning of reduce vs loop emerges?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "96ef11fd-308f-4f07-a8d7-3bc43b79e9a2",
        "type": "message",
        "text": "My first instinct is to say the connotation is (ideally) the programmer's intent. I'm not certain yet whether I believe that, but starting from there...\n\nI think this does seem relevant to discussions about language features specifically meant to iterate over a range of numbers or the members of a collection, versus something more generic like the for loop in C.\n\nOne could argue that the distance between denotation and connotation is greater with a generic for loop than it is with a loop structure specifically meant to iterate over the members of a collection, and by reducing the difference between denotation and connotation you reduce the intellectual difficulty of reading the code, and you make it easier for the compiler to infer the programmer's intent for purposes of optimization.",
        "user": "U03CEGR3HSL",
        "ts": "1702759089.123419",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DzQ/v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My first instinct is to say the connotation is (ideally) the programmer's intent. I'm not certain yet whether I believe that, but starting from there...\n\nI think this does seem relevant to discussions about language features specifically meant to iterate over a range of numbers or the members of a collection, versus something more generic like the for loop in C.\n\nOne could argue that the distance between denotation and connotation is greater with a generic for loop than it is with a loop structure specifically meant to iterate over the members of a collection, and by reducing the difference between denotation and connotation you reduce the intellectual difficulty of reading the code, and you make it easier for the compiler to infer the programmer's intent for purposes of optimization."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03CEGR3HSL",
            "ts": "1702759138.000000"
        },
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "9990FD9C-1AE5-49C2-8B39-D903CE8154A1",
        "type": "message",
        "text": "I'd go further \u2014 I think there's a bit of a low-brow _stink_ on using a for loop when (say) mapping would be more elegant, and (right back at them) a bit of a high-brow stink on anything fancier than a loop. Like, our programming constructs have a culture around them. The choice of construct connotes something about the person who wrote the code.",
        "user": "UC2A2ARPT",
        "ts": "1702760238.935229",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SA1tA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd go further \u2014 I think there's a bit of a low-brow "
                            },
                            {
                                "type": "text",
                                "text": "stink",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " on using a for loop when (say) mapping would be more elegant, and (right back at them) a bit of a high-brow stink on anything fancier than a loop"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Like, our programming constructs have a culture around them. The choice of construct connotes something about the person who wrote the code"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "DE836388-1EB0-4A46-9A0B-1C87D6623D2A",
        "type": "message",
        "text": "(A word can connote more than one meaning simultaneously, right?)",
        "user": "UC2A2ARPT",
        "ts": "1702760298.422389",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0H9Xh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(A word can connote more than one meaning simultaneously, right?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "de3ed5cc-b1e2-4937-a079-ab1448cf9835",
        "type": "message",
        "text": "Of course. I'm not a literary type, but I think that's where many of the so-called layered meanings in literature and poetry come from.",
        "user": "U03CEGR3HSL",
        "ts": "1702760386.766639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AYPBF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course. I'm not a literary type, but I think that's where many of the so-called layered meanings in literature and poetry come from."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "F5CC4CBB-C0B4-4FE8-89E7-5BFD7DAC50EF",
        "type": "message",
        "text": "So perhaps the connotational semantics are tied up with the reasons that a construct is added to a language.",
        "user": "UC2A2ARPT",
        "ts": "1702760397.974569",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h7IDS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So perhaps the connotational semantics are tied up with the reasons that a construct is added to a language"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "b599ecf9-e709-440e-a261-de0386539d61",
        "type": "message",
        "text": "And a word can definitely denote more than one meaning simultaneously. That's where puns come from!",
        "user": "U03CEGR3HSL",
        "ts": "1702760406.920809",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3gO4X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And a word can definitely denote more than one meaning simultaneously. That's where puns come from!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fbed60d8-bf79-4345-bad0-e3b1e631eff6",
        "type": "message",
        "text": "&gt; So perhaps the connotational semantics are tied up with the reasons that a construct is added to a language.\n&gt; \nThat might be where some of them start, but I think connotations, like idioms, grow within the shared understanding of a community.",
        "user": "U03CEGR3HSL",
        "ts": "1702760539.519579",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o7hLg",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So perhaps the connotational semantics are tied up with the reasons that a construct is added to a language.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThat might be where some of them start, but I think connotations, like idioms, grow within the shared understanding of a community."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "250d70a7-1854-483b-a0f1-880b0283b99c",
        "type": "message",
        "text": "Disclaimer: I've given this no serious thought before, so I may have totally different opinions tomorrow.",
        "user": "U03CEGR3HSL",
        "ts": "1702760584.469309",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FjroS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Disclaimer: I've given this no serious thought before, so I may have totally different opinions tomorrow."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ECE3449A-758D-4D8C-BF11-CFF4FDFC81BD",
        "type": "message",
        "text": "I definitely think different language constructs carry connotations. Don\u2019t know any work specifically about it. But am reminded of this I saw the other day. <https://interconnected.org/home/2023/12/05/code|https://interconnected.org/home/2023/12/05/code>",
        "user": "UK3LH8CF5",
        "ts": "1702765618.013079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uLJq9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I definitely think different language constructs carry connotations"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " know any work specifically about it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But am reminded of this I saw the other day"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://interconnected.org/home/2023/12/05/code",
                                "text": "https://interconnected.org/home/2023/12/05/code"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://interconnected.org/home/2023/12/05/code",
                "thumb_url": "https://interconnected.org/home/2023/12/05/code.png?v=1",
                "thumb_width": 400,
                "thumb_height": 400,
                "id": 1,
                "original_url": "https://interconnected.org/home/2023/12/05/code",
                "fallback": "Interconnected, a blog by Matt Webb: The subjective experience of coding in different programming languages",
                "text": "Posted on Tuesday 5 Dec 2023. 687 words, no links. By Matt Webb.",
                "title": "The subjective experience of coding in different programming languages",
                "title_link": "https://interconnected.org/home/2023/12/05/code",
                "service_name": "Interconnected, a blog by Matt Webb"
            }
        ],
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "4ed1c1a6-dfd0-4db5-b22d-a5c28db4e55a",
        "type": "message",
        "text": "<https://en.wikipedia.org/wiki/Roland_Barthes|Barthes>!\n\nFor Barthes connotation and denotation are different orders of \u201csignification.\u201d\n\n&gt; He suggested that the construction of myths results in two levels of signification: the \u201clanguage-object\u201d, a first order linguistic system; and the \u201cmetalanguage\u201d, the second-order system transmitting the myth.\nWhere the language-object refers directly to some thing, and metalanguage is used to convey meaning in the mode of myth!",
        "user": "UMQ6LR9NZ",
        "ts": "1702766046.311289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0V1ih",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Roland_Barthes",
                                "text": "Barthes"
                            },
                            {
                                "type": "text",
                                "text": "!\n\nFor Barthes connotation and denotation are different orders of \u201csignification.\u201d\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "He suggested that the construction of myths results in two levels of signification: the \u201clanguage-object\u201d, a first order linguistic system; and the \u201cmetalanguage\u201d, the second-order system transmitting the myth."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhere the language-object refers directly to some thing, and metalanguage is used to convey meaning in the mode of myth!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "648f505d-66cc-414c-b538-2c98ab39749f",
        "type": "message",
        "text": "(this is sort of foundational to a lot of marxist readings of stuff, so\u2026a marxist programming?)",
        "user": "UMQ6LR9NZ",
        "ts": "1702766097.768279",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gW7Ef",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(this is sort of foundational to a lot of marxist readings of stuff, so\u2026a marxist programming?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "7106b537-530f-48fd-b522-df4c00d3ac0d",
        "type": "message",
        "text": "<https://literariness.org/2016/03/18/connotation-and-denotation/|A quick thing on Barthes in relation to connotation and denotation>",
        "user": "UMQ6LR9NZ",
        "ts": "1702766158.841969",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PpCDz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://literariness.org/2016/03/18/connotation-and-denotation/",
                                "text": "A quick thing on Barthes in relation to connotation and denotation"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://literariness.org/2016/03/18/connotation-and-denotation/",
                "ts": 1458292452,
                "image_url": "https://literariness.org/wp-content/uploads/2016/03/roland-barthes-1.jpg",
                "image_width": 618,
                "image_height": 549,
                "image_bytes": 76144,
                "service_icon": "https://i0.wp.com/literariness.org/wp-content/uploads/2020/06/cropped-cropped-WhatsApp-Image-2018-09-28-at-11.30.42-PM.jpeg?fit=180%2C180&amp;ssl=1",
                "id": 1,
                "original_url": "https://literariness.org/2016/03/18/connotation-and-denotation/",
                "fallback": "Literary Theory and Criticism: Connotation and Denotation",
                "text": "Connotation and Denotation are crucial concepts in Semiotics, Structuralism, Marxism, Cultural Studies and in the entire realm of literary and cultural theory. Denotation refers to the primary sign\u2026",
                "title": "Connotation and Denotation",
                "title_link": "https://literariness.org/2016/03/18/connotation-and-denotation/",
                "service_name": "Literary Theory and Criticism"
            }
        ],
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "fd232784-8a26-43b4-8b86-4f7d7ce3740b",
        "type": "message",
        "text": "<https://www.oxfordreference.com/display/10.1093/oi/authority.20110803095710580|1 last link, because I got overexcited>",
        "user": "UMQ6LR9NZ",
        "ts": "1702766359.969469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Czzwa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.oxfordreference.com/display/10.1093/oi/authority.20110803095710580",
                                "text": "1 last link, because I got overexcited"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.oxfordreference.com/display/10.1093/oi/authority.20110803095710580",
                "image_url": "https://www.oxfordreference.com/cover/covers/9780199532919.jpg",
                "image_width": 164,
                "image_height": 252,
                "image_bytes": 15382,
                "service_icon": "https://www.oxfordreference.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.oxfordreference.com/display/10.1093/oi/authority.20110803095710580",
                "fallback": "Oxford Reference: denotation and connotation",
                "text": "\"denotation and connotation\" published on by null.",
                "title": "denotation and connotation",
                "title_link": "https://www.oxfordreference.com/display/10.1093/oi/authority.20110803095710580",
                "service_name": "Oxford Reference"
            }
        ],
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "C7E60422-AB44-4069-8AD7-AE054A813FF4",
        "type": "message",
        "text": "Ivan, were you ever a Rubyist? I was, in the early 2000\u2019s when there were dozens of DSLs for any particular task, and the various sources of connotation described in this thread were in full force\u2014syntactical, tribal, brow-based. Whether and when you chose to write { and } or \u201cdo\u201d and \u201cend\u201d (which are basically equivalent) could make me feel at home in a file or like a foreigner, because it said something about who you learned Ruby from or which language you just came from. It probably wasn\u2019t a special time or language, but it\u2019s something I noticed because I was in a community that reveled in it.",
        "user": "UFEQUBNNT",
        "ts": "1702782029.618459",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Py+CD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ivan, were you ever a Rubyist? I was, in the early 2000\u2019s when there were dozens of DSLs for any particular task, and the various sources of connotation described in this thread were in full force\u2014syntactical, tribal, brow-based. Whether and when you chose to write { and } or \u201cdo\u201d and \u201cend\u201d (which are basically equivalent) could make me feel at home in a file or like a foreigner, because it said something about who you learned Ruby from or which language you just came from. It probably wasn\u2019t a special time or language, but"
                            },
                            {
                                "type": "text",
                                "text": " it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " something I noticed because I was in a community that reveled in it."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DE3A8C63-E420-4203-B840-ECD0BC6718E1",
        "type": "message",
        "text": "Yeah, that's a great example of what I'm thinking.",
        "user": "UC2A2ARPT",
        "ts": "1702782418.591939",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "koL/D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's a great example of what I'm thinking"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "cdc262b4-1b7e-43f0-8ab2-61b5b4399c35",
        "type": "message",
        "text": "Not sure exactly what the different styles connote, but there used to be holy wars over indentation styles.\n\n<https://en.m.wikipedia.org/wiki/Indentation_style|https://en.m.wikipedia.org/wiki/Indentation_style>\n\n<http://www.catb.org/jargon/html/I/indent-style.html|http://www.catb.org/jargon/html/I/indent-style.html> \n\nPerl has an especially idiom heavy culture. I still remember thinking through \"do_something(..) || die(...);\" the first several times I saw it.\n\nI once worked on a code base where the standard way of doing something i times was \"while(i--) {...}\". THAT took some getting used to.",
        "user": "U03CEGR3HSL",
        "ts": "1702784728.094949",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DFyHQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure exactly what the different styles connote, but there used to be holy wars over indentation styles.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/Indentation_style",
                                "text": "https://en.m.wikipedia.org/wiki/Indentation_style"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://www.catb.org/jargon/html/I/indent-style.html",
                                "text": "http://www.catb.org/jargon/html/I/indent-style.html"
                            },
                            {
                                "type": "text",
                                "text": " \n\nPerl has an especially idiom heavy culture. I still remember thinking through \"do_something(..) || die(...);\" the first several times I saw it.\n\nI once worked on a code base where the standard way of doing something i times was \"while(i--) {...}\". THAT took some getting used to."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://en.m.wikipedia.org/wiki/Indentation_style",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.m.wikipedia.org/wiki/Indentation_style",
                "fallback": "wikipedia: Indentation style",
                "text": "In computer programming, an indentation style is a convention governing the indentation of blocks of code to convey program structure. This article largely addresses the free-form languages, such as C and its descendants, but can be (and often is) applied to most other programming languages (especially those in the curly bracket family), where whitespace is otherwise insignificant. Indentation style is only one aspect of programming style.\nIndentation is not a requirement of most programming languages, where it is used as secondary notation. Rather, indenting helps better convey the structure of a program to human readers. Especially, it is used to clarify the link between control flow constructs such as conditions or loops, and code contained within and outside of them. However, some languages (such as Python and occam) use indentation to determine the structure instead of using braces or keywords; this is termed the off-side rule. In such languages, indentation is meaningful to the compiler or interpreter; it is more than only a clarity or style issue.\nThis article uses the term brackets to refer to parentheses, and the term braces to refer to curly brackets.",
                "title": "Indentation style",
                "title_link": "https://en.m.wikipedia.org/wiki/Indentation_style",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/"
            }
        ],
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "DC983D7C-A3FC-4B58-8EB1-7FA9C4ABEFA2",
        "type": "message",
        "text": "I love this question. I\u2019m still thinking about it.\n\nI thought of a few mundane examples of when designers intentionally smuggled connotations into the language: \u201cfoo!\u201d as syntax for _unsafely_ removing null from foo\u2019s type, and \u201cfoo?.bar\u201d for when we\u2019re _unsure_ whether foo exists. These are good.\n\nBut man, I can\u2019t think of instances as universally relatable as we have in prose. Like syntax for _begrudgingly_ implementing an interface, or _timidly_ asserting a precondition, or _sarcastically_ implementing a can\u2019t-happen branch, or _apologetically_ throwing an exception. I can\u2019t think of a way, without a comment, to tell a reader that the following code _seems_ to work but I\u2019ve only ever run it once so be careful. Put it in the top-level instead of packaging it up in a function? What about self-confident code?\n\nDo I just have a huge blind spot for these things, though? I recently learned that TypeScript has two syntaxes for declaring object types. I use them both regularly, but I never spared a conscious thought for their concurrent existence. I would use one to evoke OCaml-ness and the other, Java-ness. Total autopilot. All vibes.",
        "user": "UFEQUBNNT",
        "ts": "1702790219.112979",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1VxHY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this question. I\u2019m still thinking about it.\n\nI thought of a few mundane examples of when designers intentionally smuggled connotations into the language: \u201cfoo!\u201d as syntax for "
                            },
                            {
                                "type": "text",
                                "text": "unsafely",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " removing null from foo\u2019s type, and \u201cfoo?.bar\u201d for when we\u2019re "
                            },
                            {
                                "type": "text",
                                "text": "unsure",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " whether foo exists. These are good.\n\nBut man, I can\u2019t think of instances as universally relatable as we have in prose. Like syntax for "
                            },
                            {
                                "type": "text",
                                "text": "begrudgingly",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " implementing an interface, or "
                            },
                            {
                                "type": "text",
                                "text": "timidly",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " asserting a precondition, or "
                            },
                            {
                                "type": "text",
                                "text": "sarcastically",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " implementing a can\u2019t-happen branch, or "
                            },
                            {
                                "type": "text",
                                "text": "apologetically",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " throwing an exception. I can\u2019t think of a way, without a comment, to tell a reader that the following code "
                            },
                            {
                                "type": "text",
                                "text": "seems",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " to work but I\u2019ve only ever run it once so be careful. Put it in the top-level instead of packaging it up in a function? What about self-confident code?\n\nDo I just have a huge blind spot for these things, though? I recently learned that TypeScript has two syntaxes for declaring object types. I use them both regularly, but I never spared a conscious thought for their concurrent existence. I would use one to evoke OCaml-ness and the other, Java-ness. Total autopilot. All vibes."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1702791221.000000"
        },
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "0ff393d9-11ba-4303-ad06-5ccdb2b380da",
        "type": "message",
        "text": "i'm finding it hard to imagine connotation without emotion; which (clearly) is unnecessary in the parts of the programme that deliver machine instructions (so far!) -- but there's space for it in the parts of the programme that are mean to be read, admired, spread, taught, debated, timecapsuled, encultured...",
        "user": "U023V63MF6V",
        "ts": "1702793525.338469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0ufVZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i'm finding it hard to imagine connotation without emotion; which (clearly) is unnecessary in the parts of the programme that deliver machine instructions (so far!) -- but there's space for it in the parts of the programme that are mean to be read, admired, spread, taught, debated, timecapsuled, encultured..."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "92cf7f44-141c-4d51-9ac3-74f49e4ac70c",
        "type": "message",
        "text": "The best thing I've learned from following <@UC1TYP06P> is that the design of a program is something different from the code. Sometimes it's not even possible to recover the design from just the source code: <https://www.pathsensitive.com/2018/01/the-design-of-software-is-thing-apart.html>.\n\nBut you can make your intentions clearer, and one way is through the connotations of your code. The programmatic structures and the variable names that you choose both communicate something about the design.\n\nI believe most of the bugs that I've written in the past year happened because the design of a component changed and the implementation didn't.\n\nAt that point, the code may still \"work\" just fine in its current form (i.e., it returns the correct output for any input). But if so, it works by coincidence rather than by design.\n\nAnother way to say this is that the connotations of the code implicitly make promises about the behavior. And if those promises are no longer guaranteed by the design, it becomes very easy to create bugs by calling a function in a way that seems natural, but has unintended side effects.",
        "user": "U0245E9RB2B",
        "ts": "1702793915.430769",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n2bRS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The best thing I've learned from following "
                            },
                            {
                                "type": "user",
                                "user_id": "UC1TYP06P"
                            },
                            {
                                "type": "text",
                                "text": " is that the design of a program is something different from the code. Sometimes it's not even possible to recover the design from just the source code: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.pathsensitive.com/2018/01/the-design-of-software-is-thing-apart.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nBut you can make your intentions clearer, and one way is through the connotations of your code. The programmatic structures and the variable names that you choose both communicate something about the design.\n\nI believe most of the bugs that I've written in the past year happened because the design of a component changed and the implementation didn't.\n\nAt that point, the code may still \"work\" just fine in its current form (i.e., it returns the correct output for any input). But if so, it works by coincidence rather than by design.\n\nAnother way to say this is that the connotations of the code implicitly make promises about the behavior. And if those promises are no longer guaranteed by the design, it becomes very easy to create bugs by calling a function in a way that seems natural, but has unintended side effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.pathsensitive.com/2018/01/the-design-of-software-is-thing-apart.html",
                "image_url": "https://3.bp.blogspot.com/-XRJpXMxNxqk/WouWBilMEnI/AAAAAAAAKm0/QrQ5AH4hjt8G44zh6SkSm5r0j2n47GK7wCLcBGAs/w1200-h630-p-k-no-nu/Screen%2BShot%2B2018-02-19%2Bat%2B10.28.42%2BPM.png",
                "image_width": 576,
                "image_height": 303,
                "image_bytes": 24094,
                "service_icon": "https://www.pathsensitive.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.pathsensitive.com/2018/01/the-design-of-software-is-thing-apart.html",
                "fallback": "The Design of Software is A Thing Apart",
                "text": "Big up-front planning phases are out. Rapid iteration is in. With all this movement towards agile, it\u2019s increasingly tempting to throw ou...",
                "title": "The Design of Software is A Thing Apart",
                "title_link": "https://www.pathsensitive.com/2018/01/the-design-of-software-is-thing-apart.html",
                "service_name": "pathsensitive.com"
            }
        ],
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "991F0CD7-9674-489D-9ABE-998F55020380",
        "type": "message",
        "text": "In (human) language, where do connotations come from? Do they emerge from popular usage? Somewhere else? Multiple factors?\n\nWould _connotational semantics_ come from a similar source?",
        "user": "UC2A2ARPT",
        "ts": "1702794190.092929",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TTPof",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In (human) language, where do connotations come from? Do they emerge from popular usage? Somewhere else? Multiple factors?\n\nWould "
                            },
                            {
                                "type": "text",
                                "text": "connotational semantics ",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": "come from a similar source?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "1a013e9c-40af-4ca5-90be-99f0615626d4",
        "type": "message",
        "text": "Not in the programming languages themselves (see also: content-free grammars), but sometimes at the meta level between the programmers (see: examples upthread).",
        "user": "U013ZLJARC7",
        "ts": "1702809215.279829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4SzDC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not in the programming languages themselves (see also: content-free grammars), but sometimes at the meta level between the programmers (see: examples upthread)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "95E7332B-0B4A-46B1-A74D-0BFCBA0E6D21",
        "type": "message",
        "text": "&gt; Would _connotational semantics_ come from a similar source?\nI think this is a fascinating question, and also points to the phrase \u201csemantics\u201d being a wee bit overloaded in English, maybe? \n\nLike, there is a semiotics to a program \u2014 \n\n\u2022 the \u201cphysical\u201d source symbolizes a program\u2019s intent\n\u2022 but then also it\u2019s compilation or reduction for execution is sort of the purpose behind it made \u201creal\u201d\nAs for where connotations come from, they are the exciting bit of programming to me, I think \u2014 the connotation of an image, say, is varied and dependent on how it\u2019s interpreted, and what you understand to inform that image \u2014 the more abstract the image, the more you can sorta say the connotation is \u201ccloser\u201d to alignment with the image itself. \n\nWith a program when do you start thinking about a it\u2019s connotations? When it\u2019s source in an editor? When it\u2019s been compiled? When it\u2019s been run?",
        "user": "UMQ6LR9NZ",
        "ts": "1702816970.968889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ewle8",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would "
                            },
                            {
                                "type": "text",
                                "text": "connotational semantics ",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": "come from a similar source?"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think this is a fascinating question, and also points to the phrase \u201csemantics\u201d being a wee bit overloaded in English, maybe? \n\nLike, there is a semiotics to a program \u2014 \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the \u201cphysical\u201d source symbolizes a program\u2019s intent"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "but then also it\u2019s compilation or reduction for execution is sort of the purpose behind it made \u201creal\u201d"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAs for where connotations come from, they are the exciting bit of programming to me, I think "
                            },
                            {
                                "type": "text",
                                "text": "\u2014"
                            },
                            {
                                "type": "text",
                                "text": " the connotation of an image, say, is varied and dependent on how "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " interpreted, and what you understand to inform that image "
                            },
                            {
                                "type": "text",
                                "text": "\u2014"
                            },
                            {
                                "type": "text",
                                "text": " the more abstract the image, the more you can sorta say the connotation is \u201ccloser\u201d to alignment with the image itself"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " \n\nWith a program when do you start thinking about a "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s connotations"
                            },
                            {
                                "type": "text",
                                "text": "? When "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " source in an editor? When "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " been compiled? When "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " been run?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d4595c07-e9fe-41d7-b6e4-467d79712aa5",
        "type": "message",
        "text": "There's the old joke that \"a sufficiently determined programmer can write Fortran-77 in any language\".     Learning the syntax of a language is pretty easy (or at least straightforward).  What takes longer is learning the 'spirit' of a programming language.  Or learning common idioms in how particular tasks are done in a programming language.",
        "user": "UNS7QDKFV",
        "ts": "1702831885.045879",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zkd0N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's the old joke that \"a sufficiently determined programmer can write Fortran-77 in any language\".     Learning the syntax of a language is pretty easy (or at least straightforward).  What takes longer is learning the 'spirit' of a programming language.  Or learning common idioms in how particular tasks are done in a programming language."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cb23e466-1856-422d-a282-00854b72a6fc",
        "type": "message",
        "text": "&gt; In (human) language, where do connotations come from? Do they emerge from popular usage?\n&gt; \nMy first guess would be that they emerge from the frequent usage of a word or phrase in combination with some other word, phrase, or idea. When this happens often enough, the word or phrase evokes images or feelings associated with the other word, phrase, or idea.",
        "user": "U03CEGR3HSL",
        "ts": "1702832561.143399",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XIUaK",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In (human) language, where do connotations come from? Do they emerge from popular usage?\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nMy first guess would be that they emerge from the frequent usage of a word or phrase in combination with some other word, phrase, or idea. When this happens often enough, the word or phrase evokes images or feelings associated with the other word, phrase, or idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1702757349.726829",
        "parent_user_id": "UC2A2ARPT"
    }
]