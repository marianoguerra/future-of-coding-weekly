[
    {
        "client_msg_id": "828fe74e-ac8b-4dfc-af01-6841dbe5c4d6",
        "type": "message",
        "text": "The perhaps most melodramatic thing I've ever written about software. Sat in my to publish folder for a while. But I realized I am just a bit melodramatic, no one will care :)\n\n> Theory creation, world-building, and crafting software are all one in the same activity. Removing any of these elements eliminates the very value you hired software engineers to provide. But it does more than that. It forces these software engineers to make a difficult choice: fight to create the world they believe in, or give up and live in a world they are no longer invested in.\n<https://jimmyhmiller.github.io/stuck>",
        "user": "UK3LH8CF5",
        "ts": "1703699285.130469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2c98R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The perhaps most melodramatic thing I've ever written about software. Sat in my to publish folder for a while. But I realized I am just a bit melodramatic, no one will care :)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Theory creation, world-building, and crafting software are all one in the same activity. Removing any of these elements eliminates the very value you hired software engineers to provide. But it does more than that. It forces these software engineers to make a difficult choice: fight to create the world they believe in, or give up and live in a world they are no longer invested in."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://jimmyhmiller.github.io/stuck"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1703699305.000000"
        },
        "thread_ts": "1703699285.130469",
        "reply_count": 16,
        "reply_users_count": 6,
        "latest_reply": "1703827180.305189",
        "reply_users": [
            "U03CEGR3HSL",
            "UCUSW7WVD",
            "UK3LH8CF5",
            "UFEQUBNNT",
            "UMQ6LR9NZ",
            "U03LJBR6THT"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UFEQUBNNT",
                    "U03CEGR3HSL",
                    "U8A5MS6R1",
                    "U03LJBR6THT"
                ],
                "count": 5
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e838bd13-576f-4339-a053-c1fd1a6be660",
        "type": "message",
        "text": "I caught some flack on slack a while back when I argued that only people with a programming background should be allowed to lead programming teams or be product managers, but I believe that your blog post just made an excellent argument for my position.\n\nThe people who impose theory damaging decisions upon a programming team usually do it because they don't understand the consequences of their decisions, and they don't understand the consequences because they don't know anything about computers or programming.",
        "user": "U03CEGR3HSL",
        "ts": "1703700463.188869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IXmTQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I caught some flack on slack a while back when I argued that only people with a programming background should be allowed to lead programming teams or be product managers, but I believe that your blog post just made an excellent argument for my position.\n\nThe people who impose theory damaging decisions upon a programming team usually do it because they don't understand the consequences of their decisions, and they don't understand the consequences because they don't know anything about computers or programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "9b40011b-d36b-4ff3-9817-94fd6e318515",
        "type": "message",
        "text": "Does your conception of \"theory\" here include things like relative priority of new features vs bugs vs paying off tech debt? The big rewrite somebody is pushing? The theory of the codebase feels inseparable from the theory of the org..\n\nAnother thought this brings up for me is the saying, \"if you have data let's discuss it, if you have an opinion let's go with mine.\" But of course data has its own limitations and secondary effects..",
        "user": "UCUSW7WVD",
        "ts": "1703704842.565439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "axGmu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does your conception of \"theory\" here include things like relative priority of new features vs bugs vs paying off tech debt? The big rewrite somebody is pushing? The theory of the codebase feels inseparable from the theory of the org..\n\nAnother thought this brings up for me is the saying, \"if you have data let's discuss it, if you have an opinion let's go with mine.\" But of course data has its own limitations and secondary effects.."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1703709632.000000"
        },
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "26c394ea-545f-4c56-959b-133fac3f1f46",
        "type": "message",
        "text": "<@U03CEGR3HSL> I agree. I think all decisions in a tech org are technical decisions. Product decisions cannot be separated from their technical implementations. Even priority and roadmap are massive technical decisions. Implementing feature A -&gt; B -&gt; C can be 10 times faster than doing feature C -&gt; B -&gt; A (especially if you are blind to the end state of #{A B C})",
        "user": "UK3LH8CF5",
        "ts": "1703707166.480619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nW3zI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": " I agree. I think all decisions in a tech org are technical decisions. Product decisions cannot be separated from their technical implementations. Even priority and roadmap are massive technical decisions. Implementing feature A -> B -> C can be 10 times faster than doing feature C -> B -> A (especially if you are blind to the end state of #{A B C})"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6ba5dbce-a7b9-491e-9295-e45ba2e08442",
        "type": "message",
        "text": "<@UCUSW7WVD> Yeah our theory includes how the program relates to the world broadly, so it definitely includes things like the relative priority of new features, bugs etc.\n\nI'm not sure I see the connection to the data quote. But of course you know I have issues with quantitative measures :slightly_smiling_face:",
        "user": "UK3LH8CF5",
        "ts": "1703707376.887139",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1/mLA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Yeah our theory includes how the program relates to the world broadly, so it definitely includes things like the relative priority of new features, bugs etc.\n\nI'm not sure I see the connection to the data quote. But of course you know I have issues with quantitative measures "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "3F4DEA69-7DE1-448A-9464-CE8A1C7697AC",
        "type": "message",
        "text": "That was so well-put. Thanks.\n\nI was a little confused by the mentions of \u201carchitect, engineering manager, project manager, VP of , C*\u201d. I relate to the frustration of feeling alien in a code base built with theories that I don\u2019t yet understand or simply disagree with, but I\u2019ve never felt like I was put there by a project manager or CEO. Did I have the wrong idea of what you meant when you described an alien world, or do I not understand the relevant pressures that people in non-engineering roles apply to software?",
        "user": "UFEQUBNNT",
        "ts": "1703707701.558169",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ABrt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was so well-put"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Thanks"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nI was a little confused by the mentions of \u201carchitect, engineering manager, project manager, VP of , C*\u201d. I relate to the frustration of feeling alien in a code base built with theories that I don\u2019t yet understand or simply disagree with, but I\u2019ve never felt like I was put there by a project manager or CEO. Did I have the wrong idea of what you meant when you described an alien world, or do I not understand the relevant pressures that people in non-engineering roles apply to software?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "4fa0078b-c847-490b-991a-37db19a882ad",
        "type": "message",
        "text": "Thanks <@UFEQUBNNT> :slightly_smiling_face:\n\nI could have even put \"senior engineer, staff engineer, principle engineer\" on that list so I don't think of it as non-engineering roles, but roles with more power than you.\n\nI definitely think you are right that it is an alien world. But I think the world can be made alien even in greenfield development by the pressures those with power impose on you.\n\nI can think of many examples in my career personally, but I admit it might not be the experience of everyone. For example, I worked on the reporting system for a small ad-tech company. The setup was a mess and no customers liked it. We had  big plans that would have made it actually useful for our customers. Everyone time we presented them to the ceo, he told us as long as the customers wanted it, we could do it. But then when the roadmap was made, he replaced everything we wrote with his own plan.\n\nWorking on those features was depressing.",
        "user": "UK3LH8CF5",
        "ts": "1703708268.895379",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kkaOg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI could have even put \"senior engineer, staff engineer, principle engineer\" on that list so I don't think of it as non-engineering roles, but roles with more power than you.\n\nI definitely think you are right that it is an alien world. But I think the world can be made alien even in greenfield development by the pressures those with power impose on you.\n\nI can think of many examples in my career personally, but I admit it might not be the experience of everyone. For example, I worked on the reporting system for a small ad-tech company. The setup was a mess and no customers liked it. We had  big plans that would have made it actually useful for our customers. Everyone time we presented them to the ceo, he told us as long as the customers wanted it, we could do it. But then when the roadmap was made, he replaced everything we wrote with his own plan.\n\nWorking on those features was depressing."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a98386d2-968f-4c4b-a1ff-ebedbcb68c54",
        "type": "message",
        "text": "What I meant by the data quote is the unfortunate tendency to think the only opposite of data is opinion. I think that's one reason any debate around competing theories gets shut down by incumbents.",
        "user": "UCUSW7WVD",
        "ts": "1703709279.394239",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qMFQB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What I meant by the data quote is the unfortunate tendency to think the only opposite of data is opinion. I think that's one reason any debate around competing theories gets shut down by incumbents."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "88ac4e33-917d-4299-9b58-50df0103dbab",
        "type": "message",
        "text": "Ahh, yeah, I definitely agree with that. I've never liked that quote for that very reason :slightly_smiling_face:",
        "user": "UK3LH8CF5",
        "ts": "1703709318.758149",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yDfuC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ahh, yeah, I definitely agree with that. I've never liked that quote for that very reason "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d96d5be7-28b2-43ee-a484-3a21d83f078a",
        "type": "message",
        "text": "I dug this; but I guess my 1 point of\u2026frustration?\u2026disagreement? is that maybe there is a way to reframe this that brings _more_ people to the table, rather than excludes folks?\n\n&gt; Our primary activity is not the making of things, but of thinking about how the thing ought to be made. We are building up this theory as an interested party, we are crafting the world into the way we want it to be. Or at least that\u2019s what we want to do.\nCould a more diverse group of folks build a theory together? Are the programming-intelligentsia the only ones allowed to contribute to a theory?\n\nIn my work I\u2019m tasked with making services folks are obligated by their government to interface with as accessible as possible\u2026but I\u2019m often locked out of the room until the very last minute, as such, the influence I can have on theory-building is left until after the theory has crystalized, and almost always without facets that include my purview and expertise. Could theory building be made more intentional and expansive, like an actual step in the process of building software, and in this way include more voices?",
        "user": "UMQ6LR9NZ",
        "ts": "1703712179.755509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dOpiX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I dug this; but I guess my 1 point of\u2026frustration?\u2026disagreement? is that maybe there is a way to reframe this that brings "
                            },
                            {
                                "type": "text",
                                "text": "more",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " people to the table, rather than excludes folks?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our primary activity is not the making of things, but of thinking about how the thing ought to be made. We are building up this theory as an interested party, we are crafting the world into the way we want it to be. Or at least that\u2019s what we want to do."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCould a more diverse group of folks build a theory together? Are the programming-intelligentsia the only ones allowed to contribute to a theory?\n\nIn my work I\u2019m tasked with making services folks are obligated by their government to interface with as accessible as possible\u2026but I\u2019m often locked out of the room until the very last minute, as such, the influence I can have on theory-building is left until after the theory has crystalized, and almost always without facets that include my purview and expertise. Could theory building be made more intentional and expansive, like an actual step in the process of building software, and in this way include more voices?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "c2b826c5-076d-488e-abc7-2791ffe5a039",
        "type": "message",
        "text": "&gt;  Could theory building be made more intentional and expansive, like an actual step in the process of building software, and in this way include more voices?\n&gt; \nI would argue that including more people is exactly what is needed. The problem is that the management intelligenceia often believes that since they have an MBA they can manage anything and they don't need to include the perspective of programmers or other technical people.\n\nI have literally heard people say that technical issues should not be considered when making business decisions because the business should drive the technology and the technology should not drive the business. The result is invariably disastrous for both the technology and the business.",
        "user": "U03CEGR3HSL",
        "ts": "1703712722.436529",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VuqJ9",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Could theory building be made more intentional and expansive, like an actual step in the process of building software, and in this way include more voices?\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI would argue that including more people is exactly what is needed. The problem is that the management intelligenceia often believes that since they have an MBA they can manage anything and they don't need to include the perspective of programmers or other technical people.\n\nI have literally heard people say that technical issues should not be considered when making business decisions because the business should drive the technology and the technology should not drive the business. The result is invariably disastrous for both the technology and the business."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "ec16f018-153a-4cd0-86d1-c08d31bb957a",
        "type": "message",
        "text": "Ah, legit \u2014 in agreement on this :heart_hands:",
        "user": "UMQ6LR9NZ",
        "ts": "1703712769.096249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OK7y+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, legit \u2014 in agreement on this "
                            },
                            {
                                "type": "emoji",
                                "name": "heart_hands",
                                "unicode": "1faf6"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "0b66142c-b39f-4fcf-bd5d-1839d97c9313",
        "type": "message",
        "text": "> Could a more diverse group of folks build a theory together? Are the programming-intelligentsia the only ones allowed to contribute to a theory?\nI've got so many thoughts on this that I'm afraid by me saying so much it will sound like a long winded no, so let me just start by saying yes, a diverse group should be involved in this 100% agreed.\n\nFirst, I definitely agree the framing doesn't talk about this. This post was very much written at a time a frustration and is a personal post for me.\n\nAs for can folk build a theory together, I think this is an important question, but much easier said than done. In theory, this is what \"cross functional\" teams are supposed to do. by having qa, accessibility, legal, dev, product, etc involved it is supposed that we are now gaining the theories all these groups have into some mega theory. I don't think it is that easy.\n\nThe key reason is that theories aren't articulable. They are know how's. Your knowledge of accessibility isn't something can simply be written down in a brief before the project. Certainly you can make recommendations and try to provide guidelines, but I'm sure much would be left out. If you are not directly involved in building the artifact, your know-how will be left out.\n\n> Are the programming-intelligentsia the only ones allowed to contribute to a theory?\nI definitely hope not! But I think we have to accept that there is a real bottleneck here. One that can't be easily worked around. The programmers will build the system, and along with that will implicitly instill their own values into the system. Their understanding of the world will infect the system.\n\nSo, how can we fix this? Sadly it does involve changing those programmers. Part of this is of course by exposing programmers to those with other desires, perspectives, needs. (This is why I'm not a fan of \"product\", they filter everything a programmer sees). But I don't think process and requirements are the ultimate fix. We need the people building the system to internalize  more. To for example, include in their world the importance of accessibility. We need to raise their consciousness.\n\n> Could theory building be made more intentional and expansive, like an actual step in the process of building software, and in this way include more voices?\nI sadly don't think a step in the process is enough. I think we have to inculcate the habits of taking others perspectives, of reaching out to folk who may be impacted by these decisions, of pausing and researching before making decisions, of taking a broader perspective. Should programmers be the only one to contribute to the theory? Of course not! But since at the end of the day they build the system, if we don't fix who they are, their habits of thought, their process of theory formation, we will always end up with these bad results.\n\nFinally, as for a shared theory, this is something I think is quite difficult and want to explore at some point on the podcast. Theories are know-hows, so wouldn't a shared theory simply be the collective know-how of a group? I don't think that's the case. But, I do think you can create the circumstances where this can be true. There's talk in HCI of \"Distributed Cognition\". Need to spend the time to find the right paper for it. But basic idea is that some groups can form distributed cognition where the know-how is spread out. Pilot, co-pilot, and the planes instrumentation are one classic example. But I don't think it applies to just any arbitrary set of people.",
        "user": "UK3LH8CF5",
        "ts": "1703715132.192329",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iI1Gv",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Could a more diverse group of folks build a theory together? Are the programming-intelligentsia the only ones allowed to contribute to a theory?"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI've got so many thoughts on this that I'm afraid by me saying so much it will sound like a long winded no, so let me just start by saying yes, a diverse group should be involved in this 100% agreed.\n\nFirst, I definitely agree the framing doesn't talk about this. This post was very much written at a time a frustration and is a personal post for me.\n\nAs for can folk build a theory together, I think this is an important question, but much easier said than done. In theory, this is what \"cross functional\" teams are supposed to do. by having qa, accessibility, legal, dev, product, etc involved it is supposed that we are now gaining the theories all these groups have into some mega theory. I don't think it is that easy.\n\nThe key reason is that theories aren't articulable. They are know how's. Your knowledge of accessibility isn't something can simply be written down in a brief before the project. Certainly you can make recommendations and try to provide guidelines, but I'm sure much would be left out. If you are not directly involved in building the artifact, your know-how will be left out.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are the programming-intelligentsia the only ones allowed to contribute to a theory?"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI definitely hope not! But I think we have to accept that there is a real bottleneck here. One that can't be easily worked around. The programmers will build the system, and along with that will implicitly instill their own values into the system. Their understanding of the world will infect the system.\n\nSo, how can we fix this? Sadly it does involve changing those programmers. Part of this is of course by exposing programmers to those with other desires, perspectives, needs. (This is why I'm not a fan of \"product\", they filter everything a programmer sees). But I don't think process and requirements are the ultimate fix. We need the people building the system to internalize  more. To for example, include in their world the importance of accessibility. We need to raise their consciousness.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Could theory building be made more intentional and expansive, like an actual step in the process of building software, and in this way include more voices?"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI sadly don't think a step in the process is enough. I think we have to inculcate the habits of taking others perspectives, of reaching out to folk who may be impacted by these decisions, of pausing and researching before making decisions, of taking a broader perspective. Should programmers be the only one to contribute to the theory? Of course not! But since at the end of the day they build the system, if we don't fix who they are, their habits of thought, their process of theory formation, we will always end up with these bad results.\n\nFinally, as for a shared theory, this is something I think is quite difficult and want to explore at some point on the podcast. Theories are know-hows, so wouldn't a shared theory simply be the collective know-how of a group? I don't think that's the case. But, I do think you can create the circumstances where this can be true. There's talk in HCI of \"Distributed Cognition\". Need to spend the time to find the right paper for it. But basic idea is that some groups can form distributed cognition where the know-how is spread out. Pilot, co-pilot, and the planes instrumentation are one classic example. But I don't think it applies to just any arbitrary set of people."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1703729334.000000"
        },
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heartbeat",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "raised_hands",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "pray",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "41a84e99-4d6d-4b21-9afb-626115b3c5e0",
        "type": "message",
        "text": "<@UK3LH8CF5> firstly, loving this answer. Thank you for taking the time to share it!\n\n&gt; But I think we have to accept that there is a real bottleneck here. One that can\u2019t be easily worked around. The programmers will build the system, and along with that will implicitly instill their own values into the system. Their understanding of the world will infect the system.\nI wonder if this bit points back to the future of coding, and the role tools play in helping to reveal, craft, and make \u201creal\u201d theories?\n\nEspecially the last bit,\n\n&gt; Their understanding of the world will infect the system.\nWhat if a tool could be inoculated with different understandings of the world; Marshal McLuhan style, the medium is the message, wherein the tool could be configured with parameters that help guid theory making?\n\n&gt; But I don\u2019t think process and requirements are the ultimate fix. We need the people building the system to internalize more.\nHUGE agree here \u2014 one of the major differences in the space where I\u2019m at now versus other places I\u2019ve worked in the past is that teams often include, or are sometimes almost all made up of _researchers_ \u2014 sometimes with diverse backgrounds of previous experience. The skillset and insights these folks are able to synthesize is wild and often times remarkable.\n\n&gt; Should programmers be the only one to contribute to the theory? Of course not! But sense at the end of the day they build the system, if we don\u2019t fix who they are, their habits of thought, their process of theory formation, we will always end up with these bad results.\nI read this (and agree) that this is because the the programmers often have the responsibility of making the theory \u201cmanifest.\u201d\n\nThe shared theory thing is defo my personal point-of-interest with the whole future of coding thing. I don\u2019t have much cogent to say about it, but am starting to think that a big bit of tension (especially when looking to Naur) is, perhaps, the specificity of a _theory_ \u2014 like \u201creal\u201d theories are diffuse and a bit more ephemeral than the word\u2019s more general usage lets on.",
        "user": "UMQ6LR9NZ",
        "ts": "1703719133.336359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Fo3m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " firstly, loving this answer. Thank you for taking the time to share it!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I think we have to accept that there is a real bottleneck here. One that can\u2019t be easily worked around. The programmers will build the system, and along with that will implicitly instill their own values into the system. Their understanding of the world will infect the system."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI wonder if this bit points back to the future of coding, and the role tools play in helping to reveal, craft, and make \u201creal\u201d theories?\n\nEspecially the last bit,\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Their understanding of the world will infect the system."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhat if a tool could be inoculated with different understandings of the world; Marshal McLuhan style, the medium is the message, wherein the tool could be configured with parameters that help guid theory making?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I don\u2019t think process and requirements are the ultimate fix. We need the people building the system to internalize more."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHUGE agree here \u2014 one of the major differences in the space where I\u2019m at now versus other places I\u2019ve worked in the past is that teams often include, or are sometimes almost all made up of "
                            },
                            {
                                "type": "text",
                                "text": "researchers",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \u2014 sometimes with diverse backgrounds of previous experience. The skillset and insights these folks are able to synthesize is wild and often times remarkable.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Should programmers be the only one to contribute to the theory? Of course not! But sense at the end of the day they build the system, if we don\u2019t fix who they are, their habits of thought, their process of theory formation, we will always end up with these bad results."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI read this (and agree) that this is because the the programmers often have the responsibility of making the theory \u201cmanifest.\u201d\n\nThe shared theory thing is defo my personal point-of-interest with the whole future of coding thing. I don\u2019t have much cogent to say about it, but am starting to think that a big bit of tension (especially when looking to Naur) is, perhaps, the specificity of a "
                            },
                            {
                                "type": "text",
                                "text": "theory",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \u2014 like \u201creal\u201d theories are diffuse and a bit more ephemeral than the word\u2019s more general usage lets on."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "70a25ec0-4bef-4df6-875c-0ef7f0f45b94",
        "type": "message",
        "text": "And if a theory is diffuse, I wonder if it could be transmitted like a curriculum, where, in order to be brought in on the theory after it was made you could be presented with something like \u201ctake this online course, watch these youtube videos, listen to this song, read this book, talk to Gessel from accounting about _December 1984._\u201d",
        "user": "UMQ6LR9NZ",
        "ts": "1703720646.350149",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CusLy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And if a theory is diffuse, I wonder if it could be transmitted like a curriculum, where, in order to be brought in on the theory after it was made you could be presented with something like \u201ctake this online course, watch these youtube videos, listen to this song, read this book, talk to Gessel from accounting about "
                            },
                            {
                                "type": "text",
                                "text": "December 1984.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "668b81b9-efaa-43c4-813f-92c489f0d41f",
        "type": "message",
        "text": "Zooming out a bit, I've spent a lot of time in my career reflecting on why some of the authors whose work I most respect have values so antithetical to mine. Some candidate answers (warning, not very uplifting):\n\n\u2022 Life in small groups is better than life in large ones precisely because of impositions like this -- except for the fact that large groups have a way of outcompeting small ones. Feels a bit analogous to large cities conquering their smaller neighbors, though the consequences aren't quite as drastic these days as they were for say the Helots that competed with Sparta[1]. Not that larger is always better, just that sizes larger than some threshold seem correlated with success. Maybe small groups have to get lucky to attract a great programmer, but the odds favor large groups to do so. Every hire is a gamble, worst case is usually bounded, but best case you hire Jeff Dean. (I don't really believe this. Even Jeff Dean requires the right culture to become. But I worry. Is it possible I'm on the wrong side of history here? Here, I'll see and raise your melodrama.)\n\u2022 Similarly, perhaps it makes sense to have such rules because the time of a good architect maintaining a coherent vision is on balance more valuable than the cost to morale of most of the team. Having any theory is better than descending to cacophony. Again, I don't really think so, but I worry.\nThe common thread between such thoughts is the observation that morale problems seldom seem to sink orgs. Is it just the \"market\" staying irrational longer than I can perceive but eventually returning to reality? Or does everyone else know something I don't?\n\n[1] <https://en.wikipedia.org/wiki/Sparta#Helots>",
        "user": "UCUSW7WVD",
        "ts": "1703727722.504519",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/0Neu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Zooming out a bit, I've spent a lot of time in my career reflecting on why some of the authors whose work I most respect have values so antithetical to mine. Some candidate answers (warning, not very uplifting):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Life in small groups is better than life in large ones precisely because of impositions like this -- except for the fact that large groups have a way of outcompeting small ones. Feels a bit analogous to large cities conquering their smaller neighbors, though the consequences aren't quite as drastic these days as they were for say the Helots that competed with Sparta[1]. Not that larger is always better, just that sizes larger than some threshold seem correlated with success. Maybe small groups have to get lucky to attract a great programmer, but the odds favor large groups to do so. Every hire is a gamble, worst case is usually bounded, but best case you hire Jeff Dean. (I don't really believe this. Even Jeff Dean requires the right culture to become. But I worry. Is it possible I'm on the wrong side of history here? Here, I'll see and raise your melodrama.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Similarly, perhaps it makes sense to have such rules because the time of a good architect maintaining a coherent vision is on balance more valuable than the cost to morale of most of the team. Having any theory is better than descending to cacophony. Again, I don't really think so, but I worry."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe common thread between such thoughts is the observation that morale problems seldom seem to sink orgs. Is it just the \"market\" staying irrational longer than I can perceive but eventually returning to reality? Or does everyone else know something I don't?\n\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Sparta#Helots"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1703729538.000000"
        },
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "9e195271-8eaf-4ef2-899b-1bfda9b37b84",
        "type": "message",
        "text": "this is beautiful, thanks for sharing",
        "user": "U03LJBR6THT",
        "ts": "1703827180.305189",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yPCHK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is beautiful, thanks for sharing"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703699285.130469",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    }
]