[
    {
        "client_msg_id": "f07647e2-17f2-4114-b160-e66801b848d5",
        "type": "message",
        "text": "Future of Coding \u2022 Episode 69\nMary Shaw \u2022 Myths &amp; Mythconceptions\n\ud808\udcb6 <https://futureofcoding.org/episodes/069>\n\nIn the spirit of clearly communicating what you're signing up for, this podcast episode is nearly three hours long, and among other things it contains a discussion of a paper by author Mary Shaw titled <https://dl.acm.org/doi/pdf/10.1145/3480947|Myths &amp; Mythconceptions> which takes as an organizing principle a collection of myths that are widely believed by programmers, largely unacknowledged, which shape our views on the nature of programming _as an activity_ and the needs of programmers _as people_ and the sort of work that we do _as a sort of work_, and where by acknowledging these myths the three of us (Mary Shaw primarily, and by extension Jimmy and I, those three people, that's it, no other people appear on this podcast) are able to more vividly grip the image of programming with our mind's eye (or <https://aphantasia.com|somesuch>) and conceive of a different formulation for programming, and in addition to these myths this paper also incudes a number of excellent lists that I take great pleasure in reading, beyond which I should also note that the paper does a job of explaining itself and that hopefully you'll find I've done a similar job, that's the spirit, please enjoy.",
        "user": "UC2A2ARPT",
        "ts": "1703808750.611779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O0uIi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Future of Coding \u2022 Episode 69\nMary Shaw \u2022 Myths & Mythconceptions\n\ud808\udcb6 "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/069"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn the spirit of clearly communicating what you're signing up for, this podcast episode is nearly three hours long, and among other things it contains a discussion of a paper by author Mary Shaw titled "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/pdf/10.1145/3480947",
                                "text": "Myths & Mythconceptions"
                            },
                            {
                                "type": "text",
                                "text": " which takes as an organizing principle a collection of myths that are widely believed by programmers, largely unacknowledged, which shape our views on the nature of programming "
                            },
                            {
                                "type": "text",
                                "text": "as an activity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the needs of programmers "
                            },
                            {
                                "type": "text",
                                "text": "as people",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the sort of work that we do "
                            },
                            {
                                "type": "text",
                                "text": "as a sort of work",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and where by acknowledging these myths the three of us (Mary Shaw primarily, and by extension Jimmy and I, those three people, that's it, no other people appear on this podcast) are able to more vividly grip the image of programming with our mind's eye (or "
                            },
                            {
                                "type": "link",
                                "url": "https://aphantasia.com",
                                "text": "somesuch"
                            },
                            {
                                "type": "text",
                                "text": ") and conceive of a different formulation for programming, and in addition to these myths this paper also incudes a number of excellent lists that I take great pleasure in reading, beyond which I should also note that the paper does a job of explaining itself and that hopefully you'll find I've done a similar job, that's the spirit, please enjoy."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "reply_count": 27,
        "reply_users_count": 11,
        "latest_reply": "1704043691.305709",
        "reply_users": [
            "UC2A2ARPT",
            "UMQ6LR9NZ",
            "U013ZLJARC7",
            "U05Q5DXRK5L",
            "U03R0B9U1GD",
            "UK3LH8CF5",
            "U03CEGR3HSL",
            "U02U0AS3J49",
            "U066TQFTXFT",
            "U03DNFDFYDA",
            "U017TE5R09M"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMQ6LR9NZ",
                    "U03R0B9U1GD",
                    "U017TE5R09M",
                    "U0123H7JRDM"
                ],
                "count": 5
            },
            {
                "name": "tada",
                "users": [
                    "U03CEGR3HSL",
                    "UFPRPSA4S",
                    "UJBAJNFLK",
                    "U03R0B9U1GD",
                    "U013ZLJARC7",
                    "U017TE5R09M"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "84fb7dd9-9dd8-41f1-96c3-9aa552d72aaa",
        "type": "message",
        "text": "As usual, most of the action is in the <https://futureofcoding.org/episodes/069|show notes>\n\n\u2022 <https://en.wikipedia.org/wiki/MUMPS|MUMPS> (the medical thing, not to be confused with <https://en.wikipedia.org/wiki/Mumps|mumps> the medical thing) is used by <https://en.wikipedia.org/wiki/Epic_Systems|Epic> (the software company, not to be confused with <https://en.wikipedia.org/wiki/Epic_Games|Epic> the software company).",
        "user": "UC2A2ARPT",
        "ts": "1703809553.876539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O1Evw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As usual, most of the action is in the "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/069",
                                "text": "show notes"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/MUMPS",
                                        "text": "MUMPS"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (the medical thing, not to be confused with "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Mumps",
                                        "text": "mumps"
                                    },
                                    {
                                        "type": "text",
                                        "text": " the medical thing) is used by "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Epic_Systems",
                                        "text": "Epic"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (the software company, not to be confused with "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Epic_Games",
                                        "text": "Epic"
                                    },
                                    {
                                        "type": "text",
                                        "text": " the software company)."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1703877094.000000"
        },
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "4626EEBE-E58D-46EE-886A-91ECA3CC03F0",
        "type": "message",
        "text": "MUMPS is the only old school programming system I\u2019ve ever learned that\u2019s actually come in useful at work!",
        "user": "UMQ6LR9NZ",
        "ts": "1703811243.205669",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DbmSh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MUMPS is the only old school programming system "
                            },
                            {
                                "type": "text",
                                "text": "I\u2019ve"
                            },
                            {
                                "type": "text",
                                "text": " ever learned "
                            },
                            {
                                "type": "text",
                                "text": "that\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " actually come in useful at work!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d4df0366-4b6a-4af5-b26a-9d173fe8013e",
        "type": "message",
        "text": "A mythconception that chaps my bottom: I think programming, software engineering, and computer science are three different things, but people insist on using the terms interchangeably. :disappointed:",
        "user": "U013ZLJARC7",
        "ts": "1703859436.830029",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0aPZu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A mythconception that chaps my bottom: I think programming, software engineering, and computer science are three different things, but people insist on using the terms interchangeably. "
                            },
                            {
                                "type": "emoji",
                                "name": "disappointed",
                                "unicode": "1f61e"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD",
                    "UJBAJNFLK",
                    "U5STGTB3J",
                    "UCUSW7WVD"
                ],
                "count": 4
            },
            {
                "name": "100",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DF02CCDF-81D0-4EC5-9905-98E2AA89D94D",
        "type": "message",
        "text": "Yeah. I see the distinction, and I'm guilty of sloppily using the terms. Good reminder.",
        "user": "UC2A2ARPT",
        "ts": "1703863084.695139",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3wKEn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I see the distinction, and I'm guilty of sloppily using the terms. Good reminder"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "b58e7079-0121-4eee-98e6-1f56b6a313e9",
        "type": "message",
        "text": "I see _distinctions_ but am not sure I\u2019m landing at a similar set of distinctions as other folks \u2014 do you all feel that there is a sort of \u201chappy path\u201d or \u201cright meaning\u201d to each term?",
        "user": "UMQ6LR9NZ",
        "ts": "1703863157.946659",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iToCk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see "
                            },
                            {
                                "type": "text",
                                "text": "distinctions",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but am not sure I\u2019m landing at a similar set of distinctions as other folks \u2014 do you all feel that there is a sort of \u201chappy path\u201d or \u201cright meaning\u201d to each term?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "036FD28E-E795-4E92-B042-670565A0E622",
        "type": "message",
        "text": "Just finished the paper, looking forward to this monster of an episode. Thinking about the diff between vernacular and professional, and how one might move between those roles and the contexts in which that would happen. ",
        "user": "U05Q5DXRK5L",
        "ts": "1703863844.178939",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j1pLY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just finished the paper, looking forward to this monster of an episode"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Thinking about the diff between vernacular and professional"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " and how one might move between those roles and the contexts in which that would happen"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "rocket",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "<@U013ZLJARC7> together we are unstoppable. the coding trinity",
        "files": [
            {
                "id": "F06BQSZF7F0",
                "created": 1703864771,
                "timestamp": 1703864771,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U03R0B9U1GD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 88393,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06BQSZF7F0/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06BQSZF7F0/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 184,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 245,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 368,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 408,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 490,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06BQSZF7F0-073f953030/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 523,
                "original_w": 1702,
                "original_h": 869,
                "thumb_tiny": "AwAYADDSooooAY7MG+XGPcGnKSRz178YoxuPsKUHI96ACiiigBjhyflJH0xQokBOSSPfFPooAQZA+7+tHOc4/WlooAaS56Aj8jSgkn7pFLS0Af/Z",
                "permalink": "https://futureofcoding.slack.com/files/U03R0B9U1GD/F06BQSZF7F0/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06BQSZF7F0-51c4fbbb72",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U03R0B9U1GD",
        "display_as_bot": false,
        "ts": "1703864796.443619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aFJPJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " together we are unstoppable. the coding trinity"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "541ef6da-7d81-421b-994d-067221ac8340",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "captain-planet",
                "users": [
                    "UMQ6LR9NZ",
                    "U03R0B9U1GD",
                    "U013ZLJARC7",
                    "U05Q5DXRK5L",
                    "UC2A2ARPT"
                ],
                "count": 5
            },
            {
                "name": "superhero",
                "users": [
                    "U85HCL7JP",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "152c8fae-714d-47d7-b473-a722d2230896",
        "type": "message",
        "text": "<@UMQ6LR9NZ> there\u2019s definitely a specific way that I think about them, but it doesn\u2019t conform to any standard understanding, so\u2026 :man-shrugging::skin-tone-2:",
        "user": "U013ZLJARC7",
        "ts": "1703865531.610239",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r7Iza",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMQ6LR9NZ"
                            },
                            {
                                "type": "text",
                                "text": " there\u2019s definitely a specific way that I think about them, but it doesn\u2019t conform to any standard understanding, so\u2026 "
                            },
                            {
                                "type": "emoji",
                                "name": "man-shrugging",
                                "unicode": "1f937-1f3fb-200d-2642-fe0f",
                                "skin_tone": 2
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "827b21b1-532c-462e-a7d6-44a497668774",
        "type": "message",
        "text": "&gt; programming, software engineering, and computer science are three different things\nYeah that is a good myth :wink:",
        "user": "UK3LH8CF5",
        "ts": "1703873586.037829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mzqUE",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "programming, software engineering, and computer science are three different things"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah that is a good myth "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "expressionless",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "joy",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0fa7c3f3-545f-4932-91b6-1164f72b6a03",
        "type": "message",
        "text": "Well, I was listening to the episode and then I went and watched the Cell Pond talk and during the questions I learned about the game Baba is you which I then spent a lot of time figuring out how to give to some younger people I know.\n\nEventually I will pop the stack and finish the episode, but it's been fun so far!",
        "user": "U03CEGR3HSL",
        "ts": "1703874442.910299",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CT27U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I was listening to the episode and then I went and watched the Cell Pond talk and during the questions I learned about the game Baba is you which I then spent a lot of time figuring out how to give to some younger people I know.\n\nEventually I will pop the stack and finish the episode, but it's been fun so far!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UK3LH8CF5",
                    "U03R0B9U1GD"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "6e4f2179-0a75-4d31-b604-222850737a48",
        "type": "message",
        "text": "In my field there is a language called Catala, written in a functional language, designed so that one step of the transpilation process from Catala to other languages can be proved correct.  One step. Why? As far as I can tell, academic novelty. It doesn't solve any real world problem in the domain it is supposed to serve, and the downsides of encoding laws this way are considerable. That is an example of mathematical tractibility for its own sake. The language was designed by a person getting a PhD in formal methods. There are levels of formality, but that level just isn't helping. Do they believe the myths? No, probably not. But they might benefit from reading the paper anyway.",
        "user": "U02U0AS3J49",
        "ts": "1703928600.397579",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "205/x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my field there is a language called Catala, written in a functional language, designed so that one step of the transpilation process from Catala to other languages can be proved correct.  One step. Why? As far as I can tell, academic novelty. It doesn't solve any real world problem in the domain it is supposed to serve, and the downsides of encoding laws this way are considerable. That is an example of mathematical tractibility for its own sake. The language was designed by a person getting a PhD in formal methods. There are levels of formality, but that level just isn't helping. Do they believe the myths? No, probably not. But they might benefit from reading the paper anyway."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD",
                    "UK3LH8CF5",
                    "UCUSW7WVD",
                    "UC2A2ARPT"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "978D1385-375D-4472-A39C-2CB4B0D6CA82",
        "type": "message",
        "text": "Perhaps worth noting that there are a few small subdomains where formal methods are both important and helpful. Two that come to mind are cryptography and synchronization primitives.",
        "user": "U066TQFTXFT",
        "ts": "1703949734.205549",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uUVt/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps worth noting that there are a few small subdomains where formal methods are both important and helpful"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Two that come to mind are cryptography and synchronization primitives."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "5678EBCB-4E0E-4B1E-B4A5-86C9FEDA2A5E",
        "type": "message",
        "text": "On an adjacent topic, this talk by John Regehr about the economic aspects of correctness in compilers is a nice twist and generally pretty impressive. <https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe|https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe>",
        "user": "U066TQFTXFT",
        "ts": "1703949943.082849",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+KlYa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On an adjacent topic, this talk by John Regehr about the economic aspects of correctness in compilers is a nice twist and generally pretty impressive"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe",
                                "text": "https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/tMYYrR-hazI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/tMYYrR-hazI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Locknote: How Badly Do We Want Correct Compilers? - John Regehr - NDC TechTown 2023\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe",
                "fallback": "YouTube Video: Locknote: How Badly Do We Want Correct Compilers? - John Regehr - NDC TechTown 2023",
                "title": "Locknote: How Badly Do We Want Correct Compilers? - John Regehr - NDC TechTown 2023",
                "title_link": "https://youtu.be/tMYYrR-hazI?si=Lt6who6-xv1ZVPBe",
                "author_name": "NDC Conferences",
                "author_link": "https://www.youtube.com/@NDC",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "AF575D2B-6DA2-485D-B06E-44B6E250F4B1",
        "type": "message",
        "text": "I haven\u2019t finished the podcast yet (3 hrs = multiple sessions!), but while listening I was wondering about bringing fuzzing to vernacular programming.\n\nAt its heart it is a simple technique\u2014list some things that ought to be true and then let the computer burn cycles double-checking your work\u2014and one that systematically saves time and catches bugs for professional programmers (or at least for those who bother to use it).\n\nAnd fuzzing is almost an anti-formal-method: just throw lots of stuff at a program and see what breaks, practical engineering trade-offs everywhere you look. :)",
        "user": "U066TQFTXFT",
        "ts": "1703950331.869539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IfqHq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " finished the podcast yet (3 hrs = multiple sessions!), but while listening I was wondering about bringing fuzzing to vernacular programming"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nAt its heart it is a simple technique\u2014list some things that ought to be true and then let the computer burn cycles double-checking your work\u2014and one that systematically saves time and catches bugs for professional programmers (or at least for those who bother to use it)"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnd fuzzing is almost an anti-formal-method: just throw lots of stuff at a program and see what breaks, practical engineering trade-offs everywhere you look"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c3bd7e30-7d2f-498e-85fe-02227798f354",
        "type": "message",
        "text": "My take on CS vs SE vs programming: <https://www.reddit.com/r/AskComputerScience/s/Vf7q3tWBPc|https://www.reddit.com/r/AskComputerScience/s/Vf7q3tWBPc>",
        "user": "U03DNFDFYDA",
        "ts": "1703957842.389689",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rWt11",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My take on CS vs SE vs programming: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.reddit.com/r/AskComputerScience/s/Vf7q3tWBPc",
                                "text": "https://www.reddit.com/r/AskComputerScience/s/Vf7q3tWBPc"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "86400adb-f1c1-49d2-836d-d384a6d0ea10",
        "type": "message",
        "text": "The distinctions between them are rarely discussed, but they're deeply orthogonal",
        "user": "U03DNFDFYDA",
        "ts": "1703957977.968909",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RRE+B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The distinctions between them are rarely discussed, but they're deeply orthogonal"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ca76d798-35a5-44f1-a853-4b39a77d4a4c",
        "type": "message",
        "text": "Quasi-related and illustrative: I find being able to type really fast is helpful in my career. It's almost never load-bearing but sometimes I know it helps a lot that I can get stuff out \"on paper\" very quickly",
        "user": "U03DNFDFYDA",
        "ts": "1703958088.099989",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WrJ1U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quasi-related and illustrative: I find being able to type really fast is helpful in my career. It's almost never load-bearing but sometimes I know it helps a lot that I can get stuff out \"on paper\" very quickly"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d2784da5-19a0-4b65-8703-13874126c5ae",
        "type": "message",
        "text": "Alan Kay once said science is what's real, math is what's true, and engineering is what's possible.\n\nI'm not convinced that computer science is science. Here's one amusing discussion about this.\n<https://wiki.c2.com/?IsComputerScience|https://wiki.c2.com/?IsComputerScience>\n\nI also love the first minute or two of this SICP lecture where Hal Abelson talks about the term computer science. (This was before he sold his soul in the Aaron Swartz investigation, so I like to believe that the person giving this lecture was a good man at the time.)\n<https://m.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090&index=1&pp=iAQB|https://m.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090&index=1&pp=iAQB>\n\nI'm also not convinced that software engineering is engineering. Here's another good read from C2.\n<https://wiki.c2.com/?SoftwareEngineering|https://wiki.c2.com/?SoftwareEngineering>\n\nPersonally, I just use whatever words the people around me are using. They probably aren't working from a rigorous definition anyways.",
        "user": "U03CEGR3HSL",
        "ts": "1703959179.063369",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Morh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alan Kay once said science is what's real, math is what's true, and engineering is what's possible.\n\nI'm not convinced that computer science is science. Here's one amusing discussion about this.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.c2.com/?IsComputerScience",
                                "text": "https://wiki.c2.com/?IsComputerScience"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI also love the first minute or two of this SICP lecture where Hal Abelson talks about the term computer science. (This was before he sold his soul in the Aaron Swartz investigation, so I like to believe that the person giving this lecture was a good man at the time.)\n"
                            },
                            {
                                "type": "link",
                                "url": "https://m.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090&index=1&pp=iAQB",
                                "text": "https://m.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090&index=1&pp=iAQB"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'm also not convinced that software engineering is engineering. Here's another good read from C2.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.c2.com/?SoftwareEngineering",
                                "text": "https://wiki.c2.com/?SoftwareEngineering"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPersonally, I just use whatever words the people around me are using. They probably aren't working from a rigorous definition anyways."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03CEGR3HSL",
            "ts": "1703959729.000000"
        },
        "attachments": [
            {
                "from_url": "https://m.youtube.com/watch?v=-J_xL4IGhJA&amp;index=1&amp;pp=iAQB",
                "thumb_url": "https://i.ytimg.com/vi/-J_xL4IGhJA/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/-J_xL4IGhJA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Lecture 1A: Overview and Introduction to Lisp\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://m.youtube.com/watch?v=-J_xL4IGhJA&amp;list=PLE18841CABEA24090&amp;index=1&amp;pp=iAQB",
                "fallback": "YouTube Video: Lecture 1A: Overview and Introduction to Lisp",
                "title": "Lecture 1A: Overview and Introduction to Lisp",
                "title_link": "https://m.youtube.com/watch?v=-J_xL4IGhJA&amp;index=1&amp;pp=iAQB",
                "author_name": "MIT OpenCourseWare",
                "author_link": "https://www.youtube.com/@mitocw",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "86cc3d1c-e038-4980-82f9-bc94437869f5",
        "type": "message",
        "text": "If you haven't watched/read it yet Hillel Wayne has been doing great work exploring the question of real engineering vs. bullshit software engineering (my preferred term for what I do :wink:) ... in part by interviewing quite a few real engineers who also write software:\n\u2022 blog post 1/3 (2021): <https://www.hillelwayne.com/post/are-we-really-engineers/>\n\u2022 talk (2023): <https://www.youtube.com/watch?v=CmIGPGPdxTI&amp;ab_channel=GOTOConferences>\n    \u25e6 slides: <https://onedrive.live.com/view.aspx?resid=7E5188E64FF71F3A%21457159&amp;authkey=!ABog_uhJFm6grFk>\n",
        "user": "U03DNFDFYDA",
        "ts": "1703961411.830539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3yZiZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you haven't watched/read it yet Hillel Wayne has been doing great work exploring the question of real engineering vs. bullshit software engineering (my preferred term for what I do "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": ") ... in part by interviewing quite a few real engineers who also write software:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "blog post 1/3 (2021): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.hillelwayne.com/post/are-we-really-engineers/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "talk (2023): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.youtube.com/watch?v=CmIGPGPdxTI&ab_channel=GOTOConferences"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "slides: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://onedrive.live.com/view.aspx?resid=7E5188E64FF71F3A%21457159&authkey=!ABog_uhJFm6grFk"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.hillelwayne.com/post/are-we-really-engineers/",
                "service_icon": "https://www.hillelwayne.com/favicon.ico",
                "ts": 1610928000,
                "id": 1,
                "original_url": "https://www.hillelwayne.com/post/are-we-really-engineers/",
                "fallback": "Hillel Wayne: Are We Really Engineers?",
                "text": "This is part one of the Crossover Project. Part two is here and part three is here.\nI sat in front of Mat, idly chatting about tech and cuisine. Before now, I had known him mostly for his cooking pictures on Twitter, the kind that made me envious of suburbanites and their 75,000 BTU woks. But now he was the test subject for my new project, to see if it was going to be fruitful or a waste of time.",
                "title": "Are We Really Engineers?",
                "title_link": "https://www.hillelwayne.com/post/are-we-really-engineers/",
                "service_name": "Hillel Wayne"
            },
            {
                "from_url": "https://www.youtube.com/watch?v=CmIGPGPdxTI&amp;ab_channel=GOTOConferences",
                "thumb_url": "https://i.ytimg.com/vi/CmIGPGPdxTI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/CmIGPGPdxTI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Is Software Engineering Real Engineering? \u2022 Hillel Wayne \u2022 YOW! 2023\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 2,
                "original_url": "https://www.youtube.com/watch?v=CmIGPGPdxTI&amp;ab_channel=GOTOConferences",
                "fallback": "YouTube Video: Is Software Engineering Real Engineering? \u2022 Hillel Wayne \u2022 YOW! 2023",
                "title": "Is Software Engineering Real Engineering? \u2022 Hillel Wayne \u2022 YOW! 2023",
                "title_link": "https://www.youtube.com/watch?v=CmIGPGPdxTI&amp;ab_channel=GOTOConferences",
                "author_name": "GOTO Conferences",
                "author_link": "https://www.youtube.com/@GOTO-",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "9d3fd416-f491-4e39-8982-a71a4fdcfa69",
        "type": "message",
        "text": "A wonderful paper by Mary Shaw, one of my great inspirations.  Looking forward to your insights.\n\nOne of the really puzzling things about her earlier software architecture work was the insistence that although connectors deserve first class status, programming languages and architecture description languages were considered _completely different_.  Though they are clearly analogous and the architecture side a generalization of the programming side.\n\nAnd then the whole CMU gang went off the SEI end\u2026\n\nTo me, this paper and the talk were Mary coming back to true form, a tour de force with many crucial insights.\n\nMy favorite one of course was the one about the myth that programming is writing procedures.  _The Gentle Tyranny of Call/Return_ one might call it :slightly_smiling_face:.",
        "user": "U017TE5R09M",
        "ts": "1703962711.284639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "noiAJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A wonderful paper by Mary Shaw, one of my great inspirations.  Looking forward to your insights.\n\nOne of the really puzzling things about her earlier software architecture work was the insistence that although connectors deserve first class status, programming languages and architecture description languages were considered "
                            },
                            {
                                "type": "text",
                                "text": "completely different",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Though they are clearly analogous and the architecture side a generalization of the programming side.\n\nAnd then the whole CMU gang went off the SEI end\u2026\n\nTo me, this paper and the talk were Mary coming back to true form, a tour de force with many crucial insights.\n\nMy favorite one of course was the one about the myth that programming is writing procedures.  "
                            },
                            {
                                "type": "text",
                                "text": "The Gentle Tyranny of Call/Return",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " one might call it "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "03c71944-00e9-4da7-8a79-6f3514918e31",
        "type": "message",
        "text": "&gt; My favorite one of course was the one about the myth that programming is writing\n&gt; procedures. The Gentle Tyranny of Call/Return one might call it\n&gt; \nOh it's not gentle! Tail calls enable entire architectures that are impossible when everything needs to be hierarchical.",
        "user": "U03CEGR3HSL",
        "ts": "1703978021.467889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E6xc/",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My favorite one of course was the one about the myth that programming is writing\n"
                            },
                            {
                                "type": "text",
                                "text": "procedures. The Gentle Tyranny of Call/Return one might call it\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOh it's not gentle! Tail calls enable entire architectures that are impossible when everything needs to be hierarchical."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "6838b2e8-db93-4b25-9792-2d518c45cb49",
        "type": "message",
        "text": "On the idea of measuring \"good enough\", I think we need to look to design for advice. We need to empathize with the users, and design toward improving their subjective experience. A user told me once that my tool made him feel like he had super powers. The tool was (and remains) buggy as hell (a block-based visual DSL), but it was good enough, because that feeling motivates use. Use generates feedback, and feedback will help you find and fix incorrectness. So the software doesn't need to even be good enough right away. The process just needs to be self-sustaining and tend toward good enough. So I would argue new ways of measuring good enough may still be too correct a goal. The real thing is fuzzier. Have a user you care about. Fuzzy. Try to make them feel something good. Fuzzy. Learn with them. Fuzzy. Repeat. Correct is a myth, but do the fuzzy thing, and good enough will eventually emerge.",
        "user": "U02U0AS3J49",
        "ts": "1703980220.011869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P/jqn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the idea of measuring \"good enough\", I think we need to look to design for advice. We need to empathize with the users, and design toward improving their subjective experience. A user told me once that my tool made him feel like he had super powers. The tool was (and remains) buggy as hell (a block-based visual DSL), but it was good enough, because that feeling motivates use. Use generates feedback, and feedback will help you find and fix incorrectness. So the software doesn't need to even be good enough right away. The process just needs to be self-sustaining and tend toward good enough. So I would argue new ways of measuring good enough may still be too correct a goal. The real thing is fuzzier. Have a user you care about. Fuzzy. Try to make them feel something good. Fuzzy. Learn with them. Fuzzy. Repeat. Correct is a myth, but do the fuzzy thing, and good enough will eventually emerge."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U03R0B9U1GD",
                    "UC2A2ARPT"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "U066TQFTXFT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U017TE5R09M"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bda3d064-bc41-42ce-9fb6-039ebb6c0970",
        "type": "message",
        "text": "Well, I'm 2 hours into the podcast and I've read a smattering of pages from different parts of the paper.\n\nMy sense is that the author is actually criticizing modern academic programming language researchers, but falsely generalizing her criticisms to all programming language researchers and implementers in all parts of history.\n\nThis paper seems to have been written in a world full of languages like Pascal, ML, and Haskell where all professional programmers work top down from a specification through a process of stepwise refinement as advocated by folks like Wirth and Dijkstra. \n\nIt seems to completely ignore the massive amounts of casual, exploratory, and bottom up program design that have been a major force within the Lisp, Logo, Smalltalk, Forth, SNOBOL, Perl, Python, Ruby, Unix, Emacs, and awk communities for decades. (And I almost certainly missed at least a few others.)\n\nIt also ignores older academic and industry work focused on writing programs that are easy to modify in the face of changing specifications (Parnas, SICP, Dijkstra, Brodie, etc.).\n\nIt also ignores the long history of Unix programmers saying \"the environment IS the IDE.\" During the editor wars, it was common for the Emacs fans to point out that VI was very limited by comparison unless it was calling out to external programs. The VI fans would counter that calling out to external programs was the proper Unix way to do things rather than reinventing the world within your editor. Unix programmers have been hyper aware of their development and execution ecosystem, and not just their programming language, for the better part of 50 years.\n\nIt also ignores escape hatches within vernacular programming systems. Does someone stop being a vernacular programmer when they decide that Excel formulas are no longer enough and they need to use some VBA?\n\nI think there may be some validity to this paper as a criticism of mathematical naval gazing within the ivory tower, but I'm not sure it says much about the industry as a whole or even programming language designers in general.",
        "user": "U03CEGR3HSL",
        "ts": "1703999469.540889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x0ETK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I'm 2 hours into the podcast and I've read a smattering of pages from different parts of the paper.\n\nMy sense is that the author is actually criticizing modern academic programming language researchers, but falsely generalizing her criticisms to all programming language researchers and implementers in all parts of history.\n\nThis paper seems to have been written in a world full of languages like Pascal, ML, and Haskell where all professional programmers work top down from a specification through a process of stepwise refinement as advocated by folks like Wirth and Dijkstra. \n\nIt seems to completely ignore the massive amounts of casual, exploratory, and bottom up program design that have been a major force within the Lisp, Logo, Smalltalk, Forth, SNOBOL, Perl, Python, Ruby, Unix, Emacs, and awk communities for decades. (And I almost certainly missed at least a few others.)\n\nIt also ignores older academic and industry work focused on writing programs that are easy to modify in the face of changing specifications (Parnas, SICP, Dijkstra, Brodie, etc.).\n\nIt also ignores the long history of Unix programmers saying \"the environment IS the IDE.\" During the editor wars, it was common for the Emacs fans to point out that VI was very limited by comparison unless it was calling out to external programs. The VI fans would counter that calling out to external programs was the proper Unix way to do things rather than reinventing the world within your editor. Unix programmers have been hyper aware of their development and execution ecosystem, and not just their programming language, for the better part of 50 years.\n\nIt also ignores escape hatches within vernacular programming systems. Does someone stop being a vernacular programmer when they decide that Excel formulas are no longer enough and they need to use some VBA?\n\nI think there may be some validity to this paper as a criticism of mathematical naval gazing within the ivory tower, but I'm not sure it says much about the industry as a whole or even programming language designers in general."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "64fcac20-98fb-4a50-b25f-a57f4b67ad4f",
        "type": "message",
        "text": "&gt;  [The Gentle Tyranny of Call/Return] \u2026is not gentle!  Tail calls enable \u2026\nMaybe I should have titled the paper \u201cThe _Subtle_ Tyranny of Call/Return\u201d instead?   As in you are trapped by it even when you think you\u2019ve escaped\u2026\n\n&gt;  falsely generalizing her criticisms to all programming language researchers and implementers in all parts of history.\nI don\u2019t think that is warranted.  She is always clear that what she describes and criticizes is  \u201ctypical\u201d, not \u201call\u201d.   For example: \u201cTraditional general-purpose programming languages, or at any rate the ones of most interest to programming language researchers\u2026\u201c.   Next:  \u201cMainstream languages are usually designed\u2026\u201c.   And so on and so forth.",
        "user": "U017TE5R09M",
        "ts": "1704009421.461109",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eFKBR",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " [The Gentle Tyranny of Call/Return] \u2026is not gentle!  Tail calls enable \u2026"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nMaybe I should have titled the paper \u201cThe "
                            },
                            {
                                "type": "text",
                                "text": "Subtle",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Tyranny of Call/Return\u201d instead?   As in you are trapped by it even when you think you\u2019ve escaped\u2026\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " falsely generalizing her criticisms to all programming language researchers and implementers in all parts of history."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don\u2019t think that is warranted.  She is always clear that what she describes and criticizes is  \u201ctypical\u201d, not \u201call\u201d.   For example: \u201cTraditional general-purpose programming languages, or at any rate the ones of most interest to programming language researchers\u2026\u201c.   Next:  \u201cMainstream languages are usually designed\u2026\u201c.   And so on and so forth."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9b4a6ce5-a951-4b44-8069-f9d4d846c8e1",
        "type": "message",
        "text": "> don't think that is warranted. She is always clear that what she describes and criticizes is \"typical\", not \"all\". For example:\n> \"Traditional general-purpose programming languages, or at any rate the ones of most interest to programming\n> language researchers...\" Next: \"Mainstream languages are\n> usually designed...\". And so on and so forth.\n> \nPerhaps I should have said \"most,\" but I think my point still holds. The most popular programming languages among programmers are not of much interest to today's academic programming language researchers, and are not particularly mathematically tractable.",
        "user": "U03CEGR3HSL",
        "ts": "1704024574.818549",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b6Cee",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "don't think that is warranted. She is always clear that what she describes and criticizes is \"typical\", not \"all\". For example:\n"
                            },
                            {
                                "type": "text",
                                "text": "\"Traditional general-purpose programming languages, or at any rate the ones of most interest to programming\n"
                            },
                            {
                                "type": "text",
                                "text": "language researchers...\" Next: \"Mainstream languages are\n"
                            },
                            {
                                "type": "text",
                                "text": "usually designed...\". And so on and so forth.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nPerhaps I should have said \"most,\" but I think my point still holds. The most popular programming languages among programmers are not of much interest to today's academic programming language researchers, and are not particularly mathematically tractable."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03CEGR3HSL",
            "ts": "1704024713.000000"
        },
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "da0562f3-03e4-4573-887f-9e306fa63026",
        "type": "message",
        "text": "Well, I finished the episode and when Jimmy started asking \"who actually believes these myths?\" I was right there with him. I'm not even sure that most academic language researchers believe them. I think they might just act like they believe them because their attention is naturally drawn to things that they can write mathematical looking papers about because mathematical looking papers appear to be more \"serious\" research.",
        "user": "U03CEGR3HSL",
        "ts": "1704043332.230739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CnMzZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I finished the episode and when Jimmy started asking \"who actually believes these myths?\" I was right there with him. I'm not even sure that most academic language researchers believe them. I think they might just act like they believe them because their attention is naturally drawn to things that they can write mathematical looking papers about because mathematical looking papers appear to be more \"serious\" research."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "617c6f96-0609-4399-9f36-128398a2af42",
        "type": "message",
        "text": "An anecdote on that front: I'm not on the Go team, but I contributed very heavily to the toolchain and have a fair amount of visibility. When Go was adding generics, it went through multiple years of deliberation over clarity, usability, usefulness, and compile time. Everything was focused on the developer experience, with lots of concern given to approachability for less experienced programmers. Only once the team was reasonably happy on that front did they go find some type theorists to double-check that what they'd created wasn't going to blow up on them later. It felt (from the outside) more like a box-ticking exercise.",
        "user": "U066TQFTXFT",
        "ts": "1704043691.305709",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nu6qI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An anecdote on that front: I'm not on the Go team, but I contributed very heavily to the toolchain and have a fair amount of visibility. When Go was adding generics, it went through multiple years of deliberation over clarity, usability, usefulness, and compile time. Everything was focused on the developer experience, with lots of concern given to approachability for less experienced programmers. Only once the team was reasonably happy on that front did they go find some type theorists to double-check that what they'd created wasn't going to blow up on them later. It felt (from the outside) more like a box-ticking exercise."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1703808750.611779",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            }
        ]
    }
]