[
    {
        "client_msg_id": "84bc1602-f680-4b28-bf5d-12495a13291d",
        "type": "message",
        "text": "Had an interesting experience this week, I'd like to share about the effect of changing the visual context of my tool...:thread:",
        "user": "U02U0AS3J49",
        "ts": "1683907869.328429",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cGq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Had an interesting experience this week, I'd like to share about the effect of changing the visual context of my tool..."
                            },
                            {
                                "type": "emoji",
                                "name": "thread",
                                "unicode": "1f9f5"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "reply_count": 20,
        "reply_users_count": 6,
        "latest_reply": "1684067362.627209",
        "reply_users": [
            "U02U0AS3J49",
            "UBN9AFS0N",
            "UBKNXPBAB",
            "U04KZ8A9WCT",
            "UGWUJUZHT",
            "UJBAJNFLK"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1684067362.627209",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "U0123H7JRDM",
                    "UCUSW7WVD"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "a4eb02ea-c223-43e0-a8a4-9f089107afd3",
        "type": "message",
        "text": "By way of background, I'm building a tool that is a) a block-based declarative logic programming environment for statutory knowledge representation, and b) some basic expert-system-flavoured interfaces for interacting with that code in a more friendly way. I'm doing the work for the Government of Canada, and they are using it for experiments in something called \"Rules as Code\", which is basically \"hey, how could government work better if we had a data format for laws that allowed computers to understand what they mean?\" &lt;/background&gt;",
        "user": "U02U0AS3J49",
        "ts": "1683907988.046239",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Q9UZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By way of background, I'm building a tool that is a) a block-based declarative logic programming environment for statutory knowledge representation, and b) some basic expert-system-flavoured interfaces for interacting with that code in a more friendly way. I'm doing the work for the Government of Canada, and they are using it for experiments in something called \"Rules as Code\", which is basically \"hey, how could government work better if we had a data format for laws that allowed computers to understand what they mean?\" </background>"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "294373c0-2b26-43e9-98ab-d8a7d3bd339e",
        "type": "message",
        "text": "I'm not a UI person, but last week I went to the trouble of coming up with a basic template for the tool that actually resizes correctly, etc. Basically from \"barely functional\" to \"almost decent-looking\". I basically needed to re-learn bootstrap and django templates from scratch, but I got it done. But doing that gave me the knowledge that I needed to do something that I have been wanting to do for a while, which is to take the friendly user-interface part of Blawx, and wrap it in a template to make it look like a Government of Canada website.  Meaningless, from a technology perspective, but potentially super-persuasive as a tool for helping people inside GC gain an intuition for what the tool can do.",
        "user": "U02U0AS3J49",
        "ts": "1683908150.277249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gnKp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not a UI person, but last week I went to the trouble of coming up with a basic template for the tool that actually resizes correctly, etc. Basically from \"barely functional\" to \"almost decent-looking\". I basically needed to re-learn bootstrap and django templates from scratch, but I got it done. But doing that gave me the knowledge that I needed to do something that I have been wanting to do for a while, which is to take the friendly user-interface part of Blawx, and wrap it in a template to make it look like a Government of Canada website.  Meaningless, from a technology perspective, but potentially super-persuasive as a tool for helping people inside GC gain an intuition for what the tool can do."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "type": "message",
        "text": "Here's what it looks like.",
        "files": [
            {
                "id": "F057FUEGNMT",
                "created": 1683908151,
                "timestamp": 1683908151,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U02U0AS3J49",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 75907,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F057FUEGNMT/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F057FUEGNMT/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 281,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 374,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 562,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 624,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 749,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F057FUEGNMT-c0c101c369/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 799,
                "original_w": 1214,
                "original_h": 947,
                "thumb_tiny": "AwAlADC4rSmQhkKr/e3VL3+9QevOfzoBA9aAFzS80mRS0AJzSEEkHOMH86dRQBVN0PPZGQgA4yOanjZXXK9PcYoCBWLKoBPU4607n2oAXA9KMUUUAFFBz2pOe+KAMTewA+Y/nSb2/vH86Q9vpRVCF3t/eb86N7f3m/Om0UAO3t/eb86N7f3m/Om0tAH/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U02U0AS3J49/F057FUEGNMT/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F057FUEGNMT-53be1b7c6e",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U02U0AS3J49",
        "display_as_bot": false,
        "ts": "1683908164.059479",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4YTsS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's what it looks like."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "9bb8fad4-34aa-4446-b2b8-63f46de525b9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "60c456b0-afdf-44a1-896c-ac7b2fd5e2b1",
        "type": "message",
        "text": "Here's what I noticed that sort of surprised me. The very moment I saw it, my mind went to a completely different category of problems. I started noticing the things that were missing that made it less compelling in this context.",
        "user": "U02U0AS3J49",
        "ts": "1683908267.530709",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "39=g=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's what I noticed that sort of surprised me. The very moment I saw it, my mind went to a completely different category of problems. I started noticing the things that were missing that made it less compelling in this context."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "5b25b780-96e4-438b-aecd-f91d3d20f308",
        "type": "message",
        "text": "Where most of the last month and a half has been spent worrying about how to get the event reasoning system to treat certain predicates in a closed-world fashion, suddenly I was very concerned that there was no list of caveats, no \"don't use this for real, dog\" warning, no set of instructions for how to use the fact editing interface, etc... All of those are things that I might have noticed about the tool when it was wrapped in my own template, but they occurred to me only occasionally as future nice-to-have. In this context, they seemed like absolute must-do-now shit.",
        "user": "U02U0AS3J49",
        "ts": "1683908457.513009",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kB9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where most of the last month and a half has been spent worrying about how to get the event reasoning system to treat certain predicates in a closed-world fashion, suddenly I was very concerned that there was no list of caveats, no \"don't use this for real, dog\" warning, no set of instructions for how to use the fact editing interface, etc... All of those are things that I might have noticed about the tool when it was wrapped in my own template, but they occurred to me only occasionally as future nice-to-have. In this context, they seemed like absolute must-do-now shit."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "57d6e6a5-f29b-4641-8c52-0c8da558b63c",
        "type": "message",
        "text": "I still haven't decided if that instinct is right, or wrong, but that's not the thing I'm curious about. I'm curious about whether this idea, that the context can change what you notice about your tool, change what seems important... if there is a way to use that to help control what you notice.",
        "user": "U02U0AS3J49",
        "ts": "1683908555.799929",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HoB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I still haven't decided if that instinct is right, or wrong, but that's not the thing I'm curious about. I'm curious about whether this idea, that the context can change what you notice about your tool, change what seems important... if there is a way to use that to help control what you notice."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U04KZ8A9WCT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f98baf68-54bd-4752-a893-e02af40ae545",
        "type": "message",
        "text": "I'd love to know if you have experienced this sort of thing, or if it's just my weird brain, and in particular if you have ever specifically chosen or avoided contexts for your work so as to obtain or avoid certain kinds of insights.",
        "user": "U02U0AS3J49",
        "ts": "1683908638.903089",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/vqM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to know if you have experienced this sort of thing, or if it's just my weird brain, and in particular if you have ever specifically chosen or avoided contexts for your work so as to obtain or avoid certain kinds of insights."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "8ad124e5-cee2-45c8-bb19-a1b4482b4f3b",
        "type": "message",
        "text": "Like now, I'm wondering if I should ALWAYS have been doing it this way, because it focusses me on better things, and/or it makes the result more approachable to my users.",
        "user": "U02U0AS3J49",
        "ts": "1683908740.080479",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ISvUk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like now, I'm wondering if I should ALWAYS have been doing it this way, because it focusses me on better things, and/or it makes the result more approachable to my users."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "e1ecc91a-bb02-4708-b978-33f05a699724",
        "type": "message",
        "text": "(or, if I should be avoiding it so that I don't put carts before horses)",
        "user": "U02U0AS3J49",
        "ts": "1683908972.777799",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "swq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(or, if I should be avoiding it so that I don't put carts before horses)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "b2c41772-51a6-4944-abd6-0e2828f7ab7b",
        "type": "message",
        "text": "Related: <https://notes.andymatuschak.org/Effective_system_design_requires_insights_drawn_from_serious_contexts_of_use>\n\nEffective system design requires insights drawn from serious contexts of use\n\nScrappy prototypes are great: they allow scrappy iteration and quick evaluation. But many critical insights will only emerge in the context of a serious creative problem that\u2019s not about the system itself. This is a key claim of <https://notes.andymatuschak.org/z7YyAp683VNbTmDG4hx9QFpf5urwxZJpsycS6|Insight through making>.",
        "user": "UBN9AFS0N",
        "ts": "1683912202.509629",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AWh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Related: "
                            },
                            {
                                "type": "link",
                                "url": "https://notes.andymatuschak.org/Effective_system_design_requires_insights_drawn_from_serious_contexts_of_use"
                            },
                            {
                                "type": "text",
                                "text": "\n\nEffective system design requires insights drawn from serious contexts of use\n\nScrappy prototypes are great: they allow scrappy iteration and quick evaluation. But many critical insights will only emerge in the context of a serious creative problem that\u2019s not about the system itself. This is a key claim of "
                            },
                            {
                                "type": "link",
                                "url": "https://notes.andymatuschak.org/z7YyAp683VNbTmDG4hx9QFpf5urwxZJpsycS6",
                                "text": "Insight through making"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6167d8b0-e68a-4801-a507-1fc7570bbfcb",
        "type": "message",
        "text": "That's something I'm hoping users of my tool will experience \u2014 that formalizing what you know forces you to know it better, which gives you the opportunity to improve what you know. So tools for statutory knowledge representation are inherently tools for statutory drafting. If you encode the law, you learn how to write it better. But this feels slightly different. Like pallette cleansing, or something. A perception trick.",
        "user": "U02U0AS3J49",
        "ts": "1683914056.813879",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sP8P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's something I'm hoping users of my tool will experience \u2014 that formalizing what you know forces you to know it better, which gives you the opportunity to improve what you know. So tools for statutory knowledge representation are inherently tools for statutory drafting. If you encode the law, you learn how to write it better. But this feels slightly different. Like pallette cleansing, or something. A perception trick."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "f66fd98f-83c4-4859-aa6d-f7963a4aefff",
        "type": "message",
        "text": "Just went back and transcribed a quote from a video to post it here :slightly_smiling_face:\n\n<http://marianoguerra.org/posts/screw-it-up-all-the-way-until-the-finish/>",
        "user": "UBN9AFS0N",
        "ts": "1683914210.065809",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DVr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just went back and transcribed a quote from a video to post it here "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://marianoguerra.org/posts/screw-it-up-all-the-way-until-the-finish/"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "http://marianoguerra.org/posts/screw-it-up-all-the-way-until-the-finish/",
                "service_icon": "http://marianoguerra.org/favicon.ico",
                "ts": 1683913562,
                "id": 1,
                "original_url": "http://marianoguerra.org/posts/screw-it-up-all-the-way-until-the-finish/",
                "fallback": "Mariano Guerra's Log: \"Screw it up all the way until the finish\"",
                "text": "In a video about molten glass the artist says something I like a lot so I'm\ntranscribing it here to reference it (slightly edited, emphasis mine):\n\nA great piece is basically balanced right on the edg",
                "title": "\"Screw it up all the way until the finish\"",
                "title_link": "http://marianoguerra.org/posts/screw-it-up-all-the-way-until-the-finish/",
                "service_name": "Mariano Guerra's Log"
            }
        ],
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "313063ae-0f51-4ade-99e4-4003136c0127",
        "type": "message",
        "text": "&gt; A great piece is basically balanced right on the edge of failure and success.\n&gt; It's just balanced right there.\n&gt; But you don't really know how or where that line is.\n&gt; So you're very excited about that idea, it's spectacular to you.\n&gt; And you go and do it even though you don't seem like it.\n&gt; You're going into it with a little bit of fear and trepidation to get too close to that line because you don't want to fail and lose it.\n&gt; But once you do fail it... all that's gone.\n&gt; Now it's game on.\n&gt; It's all about just learning, right?\n&gt; So if it's a piece that you know is going to take four and a half hours and at 3 hours, it's kind of screwed up.\n&gt; And you just say, okay, let's stop and start over.\n&gt; Well, you really don't know what happens in hour 3 to 5. You have no idea.\n&gt; So when you get to three again. Now, you have no idea what's coming.\n&gt; So my idea is usually *if I screw up, screw it up all the way that I can to find out exactly what's hiding, what vocabulary of intuition has not been developed, what part of that language*.\n&gt; So now I've screwed it up, screwed it up, screwed it up all the way until the finish.\n&gt; We know where things might happen.\n&gt; So now, when I go back into it, I've got the intuition more developed.\n&gt; I mean, *failure ends up being a good space for discovery*, right?\n&gt; But it's like, *if I'm going to fail,*\n&gt; *let's keep failing,*\n&gt; *let's keep screwing up.*\n&gt; *Let's see what's there. Let's go find out.*\n&gt; *You know, but if you just stop and put it away and start over, you're kind of missing out on a lot*.\n",
        "user": "UBN9AFS0N",
        "ts": "1683914213.731239",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OiPk",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A great piece is basically balanced right on the edge of failure and success.\nIt's just balanced right there.\nBut you don't really know how or where that line is.\nSo you're very excited about that idea, it's spectacular to you.\nAnd you go and do it even though you don't seem like it.\nYou're going into it with a little bit of fear and trepidation to get too close to that line because you don't want to fail and lose it.\nBut once you do fail it... all that's gone.\nNow it's game on.\nIt's all about just learning, right?\nSo if it's a piece that you know is going to take four and a half hours and at 3 hours, it's kind of screwed up.\nAnd you just say, okay, let's stop and start over.\nWell, you really don't know what happens in hour 3 to 5. You have no idea.\nSo when you get to three again. Now, you have no idea what's coming.\nSo my idea is usually "
                            },
                            {
                                "type": "text",
                                "text": "if I screw up, screw it up all the way that I can to find out exactly what's hiding, what vocabulary of intuition has not been developed, what part of that language",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\nSo now I've screwed it up, screwed it up, screwed it up all the way until the finish.\nWe know where things might happen.\nSo now, when I go back into it, I've got the intuition more developed.\nI mean, "
                            },
                            {
                                "type": "text",
                                "text": "failure ends up being a good space for discovery",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", right?\nBut it's like, "
                            },
                            {
                                "type": "text",
                                "text": "if I'm going to fail,",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "let's keep failing,",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "let's keep screwing up.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Let's see what's there. Let's go find out.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "You know, but if you just stop and put it away and start over, you're kind of missing out on a lot",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U04KZ8A9WCT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9742095f-6dbd-4e48-8a4c-fc8b0c999973",
        "type": "message",
        "text": "Oh, that's a very interesting insight. I regularly find myself saying \"I don't think we are there, yet,\" because there are unanswered questions that are more basic. But that's not actually the point. The point is whether what we learn from going further is worth the effort. Low cost failure is to be sought out. That's what happened, here. I did a bad version of the next thing, it was cheap, easy, and it taught me a bunch. So the control to exercise is to seek out a context that is \"the whole thing.\" :thinking_face:",
        "user": "U02U0AS3J49",
        "ts": "1683915823.351529",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qNYEd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, that's a very interesting insight. I regularly find myself saying \"I don't think we are there, yet,\" because there are unanswered questions that are more basic. But that's not actually the point. The point is whether what we learn from going further is worth the effort. Low cost failure is to be sought out. That's what happened, here. I did a bad version of the next thing, it was cheap, easy, and it taught me a bunch. So the control to exercise is to seek out a context that is \"the whole thing.\" "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "a601dca7-84e4-450e-a769-fd74bb349c11",
        "type": "message",
        "text": "I can\u2019t think of concrete situations, but I relate strongly to the experience you\u2019re describing here! The superficial trappings of something have a profound effect on how your mind frames it, in a way deep-structure-obsessed CS people often fail to recognize. I think this leads to a lesson for prototyping: Bring your prototype into diverse settings! Take it to the beach. Take it to the art museum. Take it to your parent\u2019s house.",
        "user": "UBKNXPBAB",
        "ts": "1683926259.984929",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KMbt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can\u2019t think of concrete situations, but I relate strongly to the experience you\u2019re describing here! The superficial trappings of something have a profound effect on how your mind frames it, in a way deep-structure-obsessed CS people often fail to recognize. I think this leads to a lesson for prototyping: Bring your prototype into diverse settings! Take it to the beach. Take it to the art museum. Take it to your parent\u2019s house."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "181e5cfa-edc5-4f4b-98e3-4c0972568dc5",
        "type": "message",
        "text": "It could be loosely related to the _broken window theory_. I hadn't thought like that but from this thread I realize that plenty of times when prototyping I (we all probably) tend to just wing it and do things half way \"since it's just a prototype\" and as soon as I add more structure into it, a \"production ready\" setup then I start to pay more attention to other details",
        "user": "U04KZ8A9WCT",
        "ts": "1683928178.285039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=aLG3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It could be loosely related to the "
                            },
                            {
                                "type": "text",
                                "text": "broken window theory",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I hadn't thought like that but from this thread I realize that plenty of times when prototyping I (we all probably) tend to just wing it and do things half way \"since it's just a prototype\" and as soon as I add more structure into it, a \"production ready\" setup then I start to pay more attention to other details"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "This idea used to be called RAD - Rapid Application Development.  Today, it is espoused in the Religion of Agile development.  It used to be a thrust in some pre-CL Lisps.\n\nThe idea is that you HAVE to screw around with ideas to try to figure out what the requirements are.  Users will NEVER specify enough details, so, it is incumbent upon you - the Architect and the Engineer - to figure out what the requirements are.\n\nScrewing around with ideas needs to be supported by languages that make throwing prototypes away easy.  Building elaborate type systems is counter-productive when screwing around with ideas.  Sunk Cost Fallacy - if you\u2019ve spent lots of time working out the details of a type system, you are less likely to want to throw it away.  Instead you will want to tweak the elaborate type system, even when that doesn\u2019t make sense.\n\nJust about all of our popular languages cause you to enter into the domain of Sunk Cost Fallacy.  Predict the Future.  Over-confidence in the correct-itude of a design.  No room for screwing around and throwing code away.\n\nAfter several, iterative rounds of screwing around, you might Production-Engineer an idea and turn it into an actual product.  This is the point where current popular languages (Haskell, Python, Rust, etc.) become useful.",
        "user": "UGWUJUZHT",
        "ts": "1684022774.126679",
        "thread_ts": "1683907869.328429",
        "root": {
            "client_msg_id": "84bc1602-f680-4b28-bf5d-12495a13291d",
            "type": "message",
            "text": "Had an interesting experience this week, I'd like to share about the effect of changing the visual context of my tool...:thread:",
            "user": "U02U0AS3J49",
            "ts": "1683907869.328429",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "cGq",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Had an interesting experience this week, I'd like to share about the effect of changing the visual context of my tool..."
                                },
                                {
                                    "type": "emoji",
                                    "name": "thread",
                                    "unicode": "1f9f5"
                                }
                            ]
                        }
                    ]
                }
            ],
            "team": "T5TCAFTA9",
            "thread_ts": "1683907869.328429",
            "reply_count": 20,
            "reply_users_count": 6,
            "latest_reply": "1684067362.627209",
            "reply_users": [
                "U02U0AS3J49",
                "UBN9AFS0N",
                "UBKNXPBAB",
                "U04KZ8A9WCT",
                "UGWUJUZHT",
                "UJBAJNFLK"
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1684067362.627209"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W8vF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This idea used to be called RAD - Rapid Application Development.  Today, it is espoused in the Religion of Agile development.  It used to be a thrust in some pre-CL Lisps.\n\nThe idea is that you HAVE to screw around with ideas to try to figure out what the requirements are.  Users will NEVER specify enough details, so, it is incumbent upon you - the Architect and the Engineer - to figure out what the requirements are.\n\nScrewing around with ideas needs to be supported by languages that make throwing prototypes away easy.  Building elaborate type systems is counter-productive when screwing around with ideas.  Sunk Cost Fallacy - if you\u2019ve spent lots of time working out the details of a type system, you are less likely to want to throw it away.  Instead you will want to tweak the elaborate type system, even when that doesn\u2019t make sense.\n\nJust about all of our popular languages cause you to enter into the domain of Sunk Cost Fallacy.  Predict the Future.  Over-confidence in the correct-itude of a design.  No room for screwing around and throwing code away.\n\nAfter several, iterative rounds of screwing around, you might Production-Engineer an idea and turn it into an actual product.  This is the point where current popular languages (Haskell, Python, Rust, etc.) become useful."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "3c6d685e-73d0-4994-a640-10b66734fbb8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "U04KZ8A9WCT",
                    "UP00ZLX6G"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "9fe45ee0-3c43-4972-9fa6-c7c90f2047ad",
        "type": "message",
        "text": "The idea that visual cues set the context for perception and thinking has been around for a long time in various settings, but it seems that it doesn't have a name. Outside of tech, there's \"broken windows\", but also \"dress for the job the want, not the one you have\". Mental visualization as a technique for achieving goals plays a big role in Neuro-Linguistic Programming. And some ideas of Feng Shui go in the same direction, though I am careful here because all I know about Feng Shui comes from a single conversation with an expert practitioner.",
        "user": "UJBAJNFLK",
        "ts": "1684051393.968619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RC6v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The idea that visual cues set the context for perception and thinking has been around for a long time in various settings, but it seems that it doesn't have a name. Outside of tech, there's \"broken windows\", but also \"dress for the job the want, not the one you have\". Mental visualization as a technique for achieving goals plays a big role in Neuro-Linguistic Programming. And some ideas of Feng Shui go in the same direction, though I am careful here because all I know about Feng Shui comes from a single conversation with an expert practitioner."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04KZ8A9WCT",
                    "UGWUJUZHT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "0cf9c661-6ac0-4105-973a-3a11cafde84d",
        "type": "message",
        "text": "Yes, riffing on Konrad\u2019s note, I would add phrases such as \u201clanguage affects thought\u201d, \u201ca picture is worth a thousand words\u201d, etc.\n\nI conjecture that purveyors of statically-typed, textual languages \u201csee\u201d structure \u201cin their heads\u201d, but feel forced to pound the structure down for use with pointy sticks and clay tablets.\n\nIn Physics, I learned that to understand a seemingly-complicated problem required breaking the problem down (\u201cdivide and conquer\u201d) then creating a unique notation for that problem aspect (a different notation for each aspect) and to apply \u201csimplifying assumptions\u201d to the new notation to make the aspect-under-scrutiny seem less complicated.  While, of course, remaining cognizant of the simplifying assumptions and remaining cognizant of not using the notation beyond its sweet spot.\n\nI think that software development is like that, too.  You drill down on a particular aspect of a problem, ignoring the rest.  When you come up for air, you see other aspects that need to be solved.  All popular programming languages are the same and force you to think inside the same kind of box.  Simpler solutions to a problem might not be apparent, nor seem very simple from inside the single box.\n\nMaybe what is being experienced is the freedom to think - to solve a problem instead of force-fitting the problem for expression within the confines of a single given notation or a single style of thought.",
        "user": "UGWUJUZHT",
        "ts": "1684063438.955869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JVR5Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, riffing on Konrad\u2019s note, I would add phrases such as \u201clanguage affects thought\u201d, \u201ca picture is worth a thousand words\u201d, etc.\n\nI conjecture that purveyors of statically-typed, textual languages \u201csee\u201d structure \u201cin their heads\u201d, but feel forced to pound the structure down for use with pointy sticks and clay tablets.\n\nIn Physics, I learned that to understand a seemingly-complicated problem required breaking the problem down (\u201cdivide and conquer\u201d) then creating a unique notation for that problem aspect (a different notation for each aspect) and to apply \u201csimplifying assumptions\u201d to the new notation to make the aspect-under-scrutiny seem less complicated.  While, of course, remaining cognizant of the simplifying assumptions and remaining cognizant of not using the notation beyond its sweet spot.\n\nI think that software development is like that, too.  You drill down on a particular aspect of a problem, ignoring the rest.  When you come up for air, you see other aspects that need to be solved.  All popular programming languages are the same and force you to think inside the same kind of box.  Simpler solutions to a problem might not be apparent, nor seem very simple from inside the single box.\n\nMaybe what is being experienced is the freedom to think - to solve a problem instead of force-fitting the problem for expression within the confines of a single given notation or a single style of thought."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "e27a06ee-a823-4ea3-af7f-20dd1ff9467b",
        "type": "message",
        "text": "I suspect that programming languages and systems still suffer from early computing technology. In particular batch mode, with long feedback cycles. Think before you code. Run code in your head before punching it into expensive cards. Those days are gone!",
        "user": "UJBAJNFLK",
        "ts": "1684067362.627209",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b2yH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect that programming languages and systems still suffer from early computing technology. In particular batch mode, with long feedback cycles. Think before you code. Run code in your head before punching it into expensive cards. Those days are gone!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49"
    }
]