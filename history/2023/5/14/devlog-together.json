[
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "This idea used to be called RAD - Rapid Application Development.  Today, it is espoused in the Religion of Agile development.  It used to be a thrust in some pre-CL Lisps.\n\nThe idea is that you HAVE to screw around with ideas to try to figure out what the requirements are.  Users will NEVER specify enough details, so, it is incumbent upon you - the Architect and the Engineer - to figure out what the requirements are.\n\nScrewing around with ideas needs to be supported by languages that make throwing prototypes away easy.  Building elaborate type systems is counter-productive when screwing around with ideas.  Sunk Cost Fallacy - if you\u2019ve spent lots of time working out the details of a type system, you are less likely to want to throw it away.  Instead you will want to tweak the elaborate type system, even when that doesn\u2019t make sense.\n\nJust about all of our popular languages cause you to enter into the domain of Sunk Cost Fallacy.  Predict the Future.  Over-confidence in the correct-itude of a design.  No room for screwing around and throwing code away.\n\nAfter several, iterative rounds of screwing around, you might Production-Engineer an idea and turn it into an actual product.  This is the point where current popular languages (Haskell, Python, Rust, etc.) become useful.",
        "user": "UGWUJUZHT",
        "ts": "1684022774.126679",
        "thread_ts": "1683907869.328429",
        "root": {
            "client_msg_id": "84bc1602-f680-4b28-bf5d-12495a13291d",
            "type": "message",
            "text": "Had an interesting experience this week, I'd like to share about the effect of changing the visual context of my tool...:thread:",
            "user": "U02U0AS3J49",
            "ts": "1683907869.328429",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "cGq",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Had an interesting experience this week, I'd like to share about the effect of changing the visual context of my tool..."
                                },
                                {
                                    "type": "emoji",
                                    "name": "thread",
                                    "unicode": "1f9f5"
                                }
                            ]
                        }
                    ]
                }
            ],
            "team": "T5TCAFTA9",
            "thread_ts": "1683907869.328429",
            "reply_count": 20,
            "reply_users_count": 6,
            "latest_reply": "1684067362.627209",
            "reply_users": [
                "U02U0AS3J49",
                "UBN9AFS0N",
                "UBKNXPBAB",
                "U04KZ8A9WCT",
                "UGWUJUZHT",
                "UJBAJNFLK"
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1684067362.627209"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W8vF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This idea used to be called RAD - Rapid Application Development.  Today, it is espoused in the Religion of Agile development.  It used to be a thrust in some pre-CL Lisps.\n\nThe idea is that you HAVE to screw around with ideas to try to figure out what the requirements are.  Users will NEVER specify enough details, so, it is incumbent upon you - the Architect and the Engineer - to figure out what the requirements are.\n\nScrewing around with ideas needs to be supported by languages that make throwing prototypes away easy.  Building elaborate type systems is counter-productive when screwing around with ideas.  Sunk Cost Fallacy - if you\u2019ve spent lots of time working out the details of a type system, you are less likely to want to throw it away.  Instead you will want to tweak the elaborate type system, even when that doesn\u2019t make sense.\n\nJust about all of our popular languages cause you to enter into the domain of Sunk Cost Fallacy.  Predict the Future.  Over-confidence in the correct-itude of a design.  No room for screwing around and throwing code away.\n\nAfter several, iterative rounds of screwing around, you might Production-Engineer an idea and turn it into an actual product.  This is the point where current popular languages (Haskell, Python, Rust, etc.) become useful."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "3c6d685e-73d0-4994-a640-10b66734fbb8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "U04KZ8A9WCT",
                    "UP00ZLX6G"
                ],
                "count": 4
            }
        ]
    }
]