[
    {
        "client_msg_id": "102a2e65-c34c-40f9-93eb-19a8a7afb277",
        "type": "message",
        "text": "1. Are games more robust than other kinds of end-user software?  Why?\n2. Are games in 2023 more robust than games in 1980?  Why?",
        "user": "UGWUJUZHT",
        "ts": "1684930223.294319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AEKyv",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Are games more robust than other kinds of end-user software?  Why?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Are games in 2023 more robust than games in 1980?  Why?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "reply_count": 12,
        "reply_users_count": 4,
        "latest_reply": "1685025388.661789",
        "reply_users": [
            "UMQ6LR9NZ",
            "UGWUJUZHT",
            "U059NCQSKJM",
            "U04MTMF6Y4W"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "9054c7c5-e63f-4f32-8663-dc7cda369424",
        "type": "message",
        "text": "&gt; 1. Are games more robust than other kinds of end-user software?  Why?\nNot sure if this counts as \u201crobust\u201d \u2014 but I think games usually need to be \u201cexplainable\u201d and easy(ish) to understand in a way that other software isn\u2019t. The biz logic of some industry program can become complicated beyond the point of reason, as long as it still \u201cworks,\u201d whereas a game, at some level, always has to make its logic known. Known to both devs and folks playing the game.",
        "user": "UMQ6LR9NZ",
        "ts": "1684930607.327509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GjK",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Are games more robust than other kinds of end-user software?  Why?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNot sure if this counts as \u201crobust\u201d \u2014 but I think games usually need to be \u201cexplainable\u201d and easy(ish) to understand in a way that other software isn\u2019t. The biz logic of some industry program can become complicated beyond the point of reason, as long as it still \u201cworks,\u201d whereas a game, at some level, always has to make its logic known. Known to both devs and folks playing the game."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f0bbaddc-92a4-44be-bd3f-919233815eed",
        "type": "message",
        "text": "(also, love love love this line of questioning! learning to QA games I think totally changed the way I approached software design/dev/and testing \u2014 it influences a lot of what I do these days for work)",
        "user": "UMQ6LR9NZ",
        "ts": "1684930780.930679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6dV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(also, love love love this line of questioning! learning to QA games I think totally changed the way I approached software design/dev/and testing \u2014 it influences a lot of what I do these days for work)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "9675979d-44c5-48c3-8a61-469a03916b8d",
        "type": "message",
        "text": "&gt; 1. Are games in 2023 more robust than games in 1980?  Why?\nThinking of your second question \u2014 can you define a bit more what you mean by \u201crobust?\u201d\n\nAt first blush, I\u2019m want to say \u201cno, not really\u201d \u2014 but I think I\u2019m conflating \u201crobust\u201d and \u201cresilient\u201d\n\nModern games are rife with dependencies on external systems, beefy hardware, other folks, whereas games from the 80s got to be shipped \u201cdone.\u201d No updates for a cartridge.",
        "user": "UMQ6LR9NZ",
        "ts": "1684930914.839489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/WKQ",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Are games in 2023 more robust than games in 1980?  Why?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThinking of your second question \u2014 can you define a bit more what you mean by \u201crobust?\u201d\n\nAt first blush, I\u2019m want to say \u201cno, not really\u201d \u2014 but I think I\u2019m conflating \u201crobust\u201d and \u201cresilient\u201d\n\nModern games are rife with dependencies on external systems, beefy hardware, other folks, whereas games from the 80s got to be shipped \u201cdone.\u201d No updates for a cartridge."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "6187b2bc-203e-49bc-b99b-bea9b3b532b6",
        "type": "message",
        "text": "My MacBook laughtop starts acting weird if I don\u2019t give it a weekly preventative reboot.  Wasting my time and effort and destroying my carefully set up environment.\n\nI consider myself to be completely ignorant of gaming and production of game software.  But, I get the impression that gamers don\u2019t experience an annoying UX.\n\nIf so, then FoC can learn something from game software design and development and production.\n\nBy \u201crobust\u201d I guess I mean anything that affects the UX.  You\u2019ve already stretched my knee-jerk thoughts about this.\n\nWhat does \u201cQA\u201d of games mean in practice?  Any other revelations about the development of games?",
        "user": "UGWUJUZHT",
        "ts": "1684931652.604759",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SNk2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My MacBook laughtop starts acting weird if I don\u2019t give it a weekly preventative reboot.  Wasting my time and effort and destroying my carefully set up environment.\n\nI consider myself to be completely ignorant of gaming and production of game software.  But, I get the impression that gamers don\u2019t experience an annoying UX.\n\nIf so, then FoC can learn something from game software design and development and production.\n\nBy \u201crobust\u201d I guess I mean anything that affects the UX.  You\u2019ve already stretched my knee-jerk thoughts about this.\n\nWhat does \u201cQA\u201d of games mean in practice?  Any other revelations about the development of games?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "8d16106d-c382-406e-9cff-49d989331014",
        "type": "message",
        "text": "Observation: \u201cModern games are rife with dependencies...\u201c.  This seems to say that \u201cmore type checking\u201d won\u2019t help as much as \u201cgetting rid of dependencies\u201d will.  Does that mean rethinking of packages, package managers, make, the structure of software apps, etc, etc?",
        "user": "UGWUJUZHT",
        "ts": "1684932134.386149",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ewqf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Observation: \u201cModern games are rife with dependencies...\u201c.  This seems to say that \u201cmore type checking\u201d won\u2019t help as much as \u201cgetting rid of dependencies\u201d will.  Does that mean rethinking of packages, package managers, make, the structure of software apps, etc, etc?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "9089e126-23d6-409a-a128-28b0777d6656",
        "type": "message",
        "text": "&gt; But, I get the impression that gamers don\u2019t experience an annoying UX.\nAlas, this isn\u2019t true \u2014 many games are rife with bad UX. There are many reasons for this, but one of the biggest reasons I see for bad UX in games is when a game is ported from 1 system to another, and the input methods aren\u2019t well considered. You see this especially for a lot of games that start out life on desktop, but that then move to consoles. The UI elements end up being filled with small text, and tiny touch targets that are difficult to find or navigate through using a controller.\n\n\u2026but this isn\u2019t like every game by any means.\n\nSomething that I think many moderns games get \u201cright\u201d is how they lead a player through an even open-ended environment through well crafted spaces.\n\nLots of modern software can be difficult to navigate for the first time, and doesn\u2019t always do heaps to suggest a way through \u2014 many games are able to lean on tools provided by classical art and expanded throughout art history to suggest a path through a space.",
        "user": "UMQ6LR9NZ",
        "ts": "1684934768.183679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/h1",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But, I get the impression that gamers don\u2019t experience an annoying UX."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alas, this isn\u2019t true \u2014 many games are rife with bad UX. There are many reasons for this, but one of the biggest reasons I see for bad UX in games is when a game is ported from 1 system to another, and the input methods aren\u2019t well considered. You see this especially for a lot of games that start out life on desktop, but that then move to consoles. The UI elements end up being filled with small text, and tiny touch targets that are difficult to find or navigate through using a controller.\n\n\u2026but this isn\u2019t like every game by any means.\n\nSomething that I think many moderns games get \u201cright\u201d is how they lead a player through an even open-ended environment through well crafted spaces.\n\nLots of modern software can be difficult to navigate for the first time, and doesn\u2019t always do heaps to suggest a way through \u2014 many games are able to lean on tools provided by classical art and expanded throughout art history to suggest a path through a space."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04MTMF6Y4W"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f8d9b401-fbe9-43ce-af04-1a636bbdedfb",
        "type": "message",
        "text": "&gt; What does \u201cQA\u201d of games mean in practice? Any other revelations about the development of games?\nOnce upon a time,  I used to approach QA tasks by strictly comparing some finished thing to the spec./requirements.\n\nSort of like deconstructing  a finished cake by magically un-baking it, extracting all of the flour, sugar, eggs, milk and oil to ensure that the recipe was followed to the \u201cT.\u201d\n\nLearning to QA games, I realized that _everything is state_. And that another approach is to not focus on the ridged bits of the program (what you built, and what is spec\u2019d) but to focus instead on all the ways state flows through that thing you built\u2026because state is what is often harder to control, and difficult to reason about.\n\nI think Rich Hickey would say it is to be avoided, but in my experience state is unavoidable \u2014 what needs to be done instead of avoiding it is to realize you don\u2019t always control it, and make sure your program can deal with totally unforeseen types of state",
        "user": "UMQ6LR9NZ",
        "ts": "1684935130.203349",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VRISL",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does \u201cQA\u201d of games mean in practice? Any other revelations about the development of games?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOnce upon a time,  I used to approach QA tasks by strictly comparing some finished thing to the spec./requirements.\n\nSort of like deconstructing  a finished cake by magically un-baking it, extracting all of the flour, sugar, eggs, milk and oil to ensure that the recipe was followed to the \u201cT.\u201d\n\nLearning to QA games, I realized that "
                            },
                            {
                                "type": "text",
                                "text": "everything is state",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". And that another approach is to not focus on the ridged bits of the program (what you built, and what is spec\u2019d) but to focus instead on all the ways state flows through that thing you built\u2026because state is what is often harder to control, and difficult to reason about.\n\nI think Rich Hickey would say it is to be avoided, but in my experience state is unavoidable \u2014 what needs to be done instead of avoiding it is to realize you don\u2019t always control it, and make sure your program can deal with totally unforeseen types of state"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2b3f229e-fa0d-4f13-b573-cb91f9517325",
        "type": "message",
        "text": "&gt; Observation: \u201cModern games are rife with dependencies...\u201c. This seems to say that \u201cmore type checking\u201d won\u2019t help as much as \u201cgetting rid of dependencies\u201d will. Does that mean rethinking of packages, package managers, make, the structure of software apps, etc, etc?\nThe dependencies are usually external from the programming systems. In the 1980s a game was a game was a game. When you loaded a cartridge into a nintendo it started what was on that cartridge and you were off.\n\nToday, when you start a game many of them have to connect to a web service, or are thin clients to a thing running on a server somewhere, or exist in a world that is contingent on the actions of other player factions at the level of a \u201cseason.\u201d\n\nWhat I say \u201cdependencies\u201d in this context, i mean stuff like hardware and services, not so much other people\u2019s code",
        "user": "UMQ6LR9NZ",
        "ts": "1684935260.459469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wjJ1S",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Observation: \u201cModern games are rife with dependencies...\u201c. This seems to say that \u201cmore type checking\u201d won\u2019t help as much as \u201cgetting rid of dependencies\u201d will. Does that mean rethinking of packages, package managers, make, the structure of software apps, etc, etc?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe dependencies are usually external from the programming systems. In the 1980s a game was a game was a game. When you loaded a cartridge into a nintendo it started what was on that cartridge and you were off.\n\nToday, when you start a game many of them have to connect to a web service, or are thin clients to a thing running on a server somewhere, or exist in a world that is contingent on the actions of other player factions at the level of a \u201cseason.\u201d\n\nWhat I say \u201cdependencies\u201d in this context, i mean stuff like hardware and services, not so much other people\u2019s code"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "a48cfbd9-3dcb-4edc-9919-9a0612bd10f1",
        "type": "message",
        "text": "&gt; Are games in 2023 more robust than games in 1980?  Why?\nGenerally speaking I think not. As entertainment, the stakes tend to be lower. Add in the economics around how games are developed and sold and the immense complexity of modern AAA titles, and you wind up with an intensely challenging testing story.\n\n&gt; Are games in 2023 more robust than games in 1980?  Why?\nAlmost surely not. It's a matter of complexity and scale. The average Atari 8 bit home computer video game cartridge is *8k*.  That's not just 8k code, that's 8k code, assets, the whole enchilada. Compare and contrast with _No Man's Sky_ which clocks in at 6 gigabytes! Admittedly the majority of this is assets, but I can only imagine the code size is quite a bit bigger than 8k.\n\nHow can a creature of such size and complexity possibly be more robust than &lt; 8k of lovingly hand crafted 6502 assembler?",
        "user": "U059NCQSKJM",
        "ts": "1684938608.019069",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "502P",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are games in 2023 more robust than games in 1980?  Why?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nGenerally speaking I think not. As entertainment, the stakes tend to be lower. Add in the economics around how games are developed and sold and the immense complexity of modern AAA titles, and you wind up with an intensely challenging testing story.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are games in 2023 more robust than games in 1980?  Why?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAlmost surely not. It's a matter of complexity and scale. The average Atari 8 bit home computer video game cartridge is "
                            },
                            {
                                "type": "text",
                                "text": "8k",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  That's not just 8k code, that's 8k code, assets, the whole enchilada. Compare and contrast with "
                            },
                            {
                                "type": "text",
                                "text": "No Man's Sky",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which clocks in at 6 gigabytes! Admittedly the majority of this is assets, but I can only imagine the code size is quite a bit bigger than 8k.\n\nHow can a creature of such size and complexity possibly be more robust than < 8k of lovingly hand crafted 6502 assembler?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U059NCQSKJM",
            "ts": "1684938655.000000"
        },
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "0172431b-69b3-479a-b223-4d15dce4723a",
        "type": "message",
        "text": "&gt; Are games more robust than other kinds of end-user software?  Why?\nDepends how you define robust? The potential actions that can be taken are planned in  advance for a game. so if robust  = no. of features / functionality then no. OTOH, the development process for games tends to focus on shipping a complete product rather than MVPs and continuous improvements in other software. So if robust = complete then yes.\n\n&gt;  Are games in 2023 more robust than games in 1980?  Why?\nThis is harder to answer because there's such a big gap between indie and AAA in 2023. Modern progress and expectations have given game studios more opportunity to shoot themselves in the foot. I don't think that's a good enough argument for modern games being less robust. Hardware and tools are more robust than in 1980. Some of that, as performance always does, gets wasted and some of it goes into making better games.",
        "user": "U04MTMF6Y4W",
        "ts": "1684943027.039469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSyB",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are games more robust than other kinds of end-user software?  Why?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Depends how you define robust? The potential actions that can be taken are planned in  advance for a game. so if robust  = no. of features / functionality then no. OTOH, the development process for games tends to focus on shipping a complete product rather than MVPs and continuous improvements in other software. So if robust = complete then yes.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Are games in 2023 more robust than games in 1980?  Why?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is harder to answer because there's such a big gap between indie and AAA in 2023. Modern progress and expectations have given game studios more opportunity to shoot themselves in the foot. I don't think that's a good enough argument for modern games being less robust. Hardware and tools are more robust than in 1980. Some of that, as performance always does, gets wasted and some of it goes into making better games."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "06a6d312-d2a4-475f-a0bb-0bf31a7edbba",
        "type": "message",
        "text": "Another thought for the second question is, I'm not sure to what degree 1980s game did not have bugs and glitches versus YouTube not being around to make them go viral. I imagine the total number is lower than today, but much higher than we'd guess.",
        "user": "U04MTMF6Y4W",
        "ts": "1684943190.989669",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ejqg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thought for the second question is, I'm not sure to what degree 1980s game did not have bugs and glitches versus YouTube not being around to make them go viral. I imagine the total number is lower than today, but much higher than we'd guess."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "012986db-ec67-4426-b2d5-b3c7f64442a2",
        "type": "message",
        "text": "I am going to need to come up with a more robust way to allow my users to edit legislative text in a way that is user friendly, and forces them to stick to a predefined data structure. I'm wondering if anyone has tried to use tools like slate.js or ProseMirror for that sort of thing, or have other suggestions. It's legislation, so I want the editing environment to be as text-like as I can manage.",
        "user": "U02U0AS3J49",
        "ts": "1684961862.316719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wTD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am going to need to come up with a more robust way to allow my users to edit legislative text in a way that is user friendly, and forces them to stick to a predefined data structure. I'm wondering if anyone has tried to use tools like slate.js or ProseMirror for that sort of thing, or have other suggestions. It's legislation, so I want the editing environment to be as text-like as I can manage."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684961862.316719",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1685463984.574519",
        "reply_users": [
            "U050XKVAGKF",
            "U02U0AS3J49"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "df22dda6-9ee6-4b93-9d3b-90c7b3bed7d0",
        "type": "message",
        "text": "There was no Youtube, but as someone who lived through that era I can assure you there was community :slightly_smiling_face: There were dial-up BBSes and messaging networks like FIDONet and WWIVNet so larger distributed communities were a thing, and we discussed all the games of the time down to the most minute detail! Even if we couldn't post streaming video showing each glitch.",
        "user": "U059NCQSKJM",
        "ts": "1685025388.661789",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uP9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was no Youtube, but as someone who lived through that era I can assure you there was community "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " There were dial-up BBSes and messaging networks like FIDONet and WWIVNet so larger distributed communities were a thing, and we discussed all the games of the time down to the most minute detail! Even if we couldn't post streaming video showing each glitch."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684930223.294319",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U04MTMF6Y4W",
                    "U02QC0PPER3"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8258E7EA-E61C-43C6-8741-9C0914F3FF59",
        "type": "message",
        "text": "I\u2019ve had great experiences with codemirror. It allows you to describe a syntax with a package called Lezer. It can be a bit of a nut to crack but the creator is incredibly responsive.",
        "user": "U050XKVAGKF",
        "ts": "1685184156.093049",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZbU9J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve had great experiences with codemirror. It allows you to describe a syntax with a package called Lezer. It can be a bit of a nut to crack but the creator is incredibly responsive."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684961862.316719",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "type": "message",
        "text": "Thanks for that, Greg. Hadn't heard of Lezer, so I will check it out. I've been playing with ProseMirror a little further, and it looks really promising. People have been working on automating generating ProseMirror configurations (partly) from XML schema documents, which is an enormous upside for me, so I'll probably dig deeper. Do you know if they are related to each other other than in name? The prosemirror system has a very syntax-centric method of configuring it, so it wouldn't totally surprise me.",
        "files": [
            {
                "id": "F05A47J6P2N",
                "created": 1685463602,
                "timestamp": 1685463602,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U02U0AS3J49",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 38506,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05A47J6P2N/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05A47J6P2N/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 92,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 122,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 183,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 204,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 244,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F05A47J6P2N-93a70f83e7/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 261,
                "original_w": 1293,
                "original_h": 329,
                "thumb_tiny": "AwAMADDSxz1o5paKAEbFICPanHpSYFABx7Uce1GBS0Af/9k=",
                "permalink": "https://futureofcoding.slack.com/files/U02U0AS3J49/F05A47J6P2N/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F05A47J6P2N-8bcecb3524",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U02U0AS3J49",
        "display_as_bot": false,
        "ts": "1685463622.674739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Kpu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for that, Greg. Hadn't heard of Lezer, so I will check it out. I've been playing with ProseMirror a little further, and it looks really promising. People have been working on automating generating ProseMirror configurations (partly) from XML schema documents, which is an enormous upside for me, so I'll probably dig deeper. Do you know if they are related to each other other than in name? The prosemirror system has a very syntax-centric method of configuring it, so it wouldn't totally surprise me."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "e39811d2-5059-4e74-953a-e62dac895a31",
        "thread_ts": "1684961862.316719",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "8A0F4751-4BDE-46A3-A7E6-1E9A74DC4A20",
        "type": "message",
        "text": "Looks like it\u2019s the same developer! ",
        "user": "U050XKVAGKF",
        "ts": "1685463984.574519",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z9Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like it\u2019s the same developer! "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1684961862.316719",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            }
        ]
    }
]