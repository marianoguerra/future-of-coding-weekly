[
    {
        "client_msg_id": "651312dd-2bac-4996-a021-e86c4712f188",
        "type": "message",
        "text": "One of the things I am curious about is how a11y relates to the future of coding. So far it doesn't seem to come up in the discussions on the podcast but I think there is something to be said about the advancement in a11y in computing over the last 25 years and a large part of this is due to a movement away from some of the more creative interface designs (ala Magic Ink). Is there a future of code that is more accessible to people with different abilities?",
        "user": "U0625T25APL",
        "ts": "1698194889.284659",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7LXNl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the things I am curious about is how a11y relates to the future of coding. So far it doesn't seem to come up in the discussions on the podcast but I think there is something to be said about the advancement in a11y in computing over the last 25 years and a large part of this is due to a movement away from some of the more creative interface designs (ala Magic Ink). Is there a future of code that is more accessible to people with different abilities?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "reply_count": 25,
        "reply_users_count": 6,
        "latest_reply": "1698268128.437119",
        "reply_users": [
            "U0378MDUG1Y",
            "U0625T25APL",
            "UE6EFEPTQ",
            "UMQ6LR9NZ",
            "U04JY2BF24E",
            "U05V0SLP6AX"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "heart_hands",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "tada",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "heart_eyes",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "BC6F6C92-E5D0-4F21-A346-C728A455CA8A",
        "type": "message",
        "text": "Super important part of the FOC, see some recent discussions below. Also check out Amy\u2019s explorations linked in both!\n\n<https://futureofcoding.slack.com/archives/C5U3SEW6A/p1695860749288399|https://futureofcoding.slack.com/archives/C5U3SEW6A/p1695860749288399>\n\n<https://futureofcoding.slack.com/archives/C5U3SEW6A/p1696137050571599|https://futureofcoding.slack.com/archives/C5U3SEW6A/p1696137050571599>",
        "user": "U0378MDUG1Y",
        "ts": "1698199467.098209",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "berHG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Super important part of the FOC, see some recent discussions below. Also check out Amy\u2019s explorations linked in both!\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1695860749288399",
                                "text": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1695860749288399"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1696137050571599",
                                "text": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1696137050571599"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1698202683.000000"
        },
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1695860749288399",
                "ts": "1695860749.288399",
                "author_id": "U02U0AS3J49",
                "channel_id": "C5U3SEW6A",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1695860749.288399",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "KQbPU",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Via "
                                                },
                                                {
                                                    "type": "user",
                                                    "user_id": "U05SM46J1BK"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " on Mastodon: Come for the hybrid block/text editor and the time travel debugging, stay for the social Justice. "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://www.washington.edu/doit/webinars/?webinar=wordplay",
                                                    "text": "https://www.washington.edu/doit/webinars/?webinar=wordplay"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1695860749288399",
                "fallback": "[September 27th, 2023 5:25 PM] jason: Via <@U05SM46J1BK> on Mastodon: Come for the hybrid block/text editor and the time travel debugging, stay for the social Justice. <https://www.washington.edu/doit/webinars/?webinar=wordplay|https://www.washington.edu/doit/webinars/?webinar=wordplay>",
                "text": "Via <@U05SM46J1BK> on Mastodon: Come for the hybrid block/text editor and the time travel debugging, stay for the social Justice. <https://www.washington.edu/doit/webinars/?webinar=wordplay|https://www.washington.edu/doit/webinars/?webinar=wordplay>",
                "author_name": "Jason Morris",
                "author_link": "https://futureofcoding.slack.com/team/U02U0AS3J49",
                "author_icon": "https://secure.gravatar.com/avatar/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-48.png",
                "author_subname": "Jason Morris",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            },
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1696137050571599",
                "ts": "1696137050.571599",
                "author_id": "U0378MDUG1Y",
                "channel_id": "C5U3SEW6A",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1696137050.571599",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "0ptrd",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "\u201cSearching for Justice in Programming Language Design\u201d by Amy Ko (2023)\n\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://wordplay.dev/",
                                                    "text": "https://wordplay.dev/"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " (releasing later in the fall)\n\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://www.washington.edu/doit/webinars/?webinar=wordplay",
                                                    "text": "https://www.washington.edu/doit/webinars/?webinar=wordplay"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n\n"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "files": [
                    {
                        "id": "F05UQHKAPEY",
                        "created": 1696137048,
                        "timestamp": 1696137048,
                        "name": "Image from iOS.jpg",
                        "title": "Image from iOS",
                        "mimetype": "image/jpeg",
                        "filetype": "jpg",
                        "pretty_type": "JPEG",
                        "user": "U0378MDUG1Y",
                        "user_team": "T5TCAFTA9",
                        "editable": false,
                        "size": 52507,
                        "mode": "hosted",
                        "is_external": false,
                        "external_type": "",
                        "is_public": true,
                        "public_url_shared": false,
                        "display_as_bot": false,
                        "username": "",
                        "subtype": "slack_image",
                        "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F05UQHKAPEY/image_from_ios.jpg",
                        "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F05UQHKAPEY/download/image_from_ios.jpg",
                        "media_display_type": "unknown",
                        "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_64.jpg",
                        "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_80.jpg",
                        "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_360.jpg",
                        "thumb_360_w": 360,
                        "thumb_360_h": 194,
                        "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_480.jpg",
                        "thumb_480_w": 480,
                        "thumb_480_h": 259,
                        "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_160.jpg",
                        "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_720.jpg",
                        "thumb_720_w": 720,
                        "thumb_720_h": 388,
                        "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F05UQHKAPEY-ab54b485d6/image_from_ios_800.jpg",
                        "thumb_800_w": 800,
                        "thumb_800_h": 431,
                        "original_w": 882,
                        "original_h": 475,
                        "thumb_tiny": "AwAZADDRIJPDEfhQAw6v+lNb/WUOfmBoAU5B5f8AlQMg/fyB14prdR9KdkslADtwxmk3g9KaoIU5oXOPagB5QE5pCgJ/pS0UAIUz0OBSgEDk5oooAWkIAU4ooPQ0Af/Z",
                        "permalink": "https://futureofcoding.slack.com/files/U0378MDUG1Y/F05UQHKAPEY/image_from_ios.jpg",
                        "permalink_public": "https://slack-files.com/T5TCAFTA9-F05UQHKAPEY-8dcf63bfb9",
                        "comments_count": 0,
                        "is_starred": false,
                        "has_rich_preview": false,
                        "file_access": "visible"
                    }
                ],
                "id": 2,
                "original_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1696137050571599",
                "fallback": "[September 30th, 2023 10:10 PM] chris.shank.23: \u201cSearching for Justice in Programming Language Design\u201d by Amy Ko (2023)\n\n<https://wordplay.dev/|https://wordplay.dev/> (releasing later in the fall)\n\n<https://www.washington.edu/doit/webinars/?webinar=wordplay|https://www.washington.edu/doit/webinars/?webinar=wordplay>",
                "text": "\u201cSearching for Justice in Programming Language Design\u201d by Amy Ko (2023)\n\n<https://wordplay.dev/|https://wordplay.dev/> (releasing later in the fall)\n\n<https://www.washington.edu/doit/webinars/?webinar=wordplay|https://www.washington.edu/doit/webinars/?webinar=wordplay>",
                "author_name": "Christopher Shank",
                "author_link": "https://futureofcoding.slack.com/team/U0378MDUG1Y",
                "author_icon": "https://avatars.slack-edge.com/2022-03-23/3286745266387_1092a4f970985ebc8d2b_48.png",
                "author_subname": "Christopher Shank",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "c76f79bb-2c01-4660-8ed6-211db87714d4",
        "type": "message",
        "text": "Thank you!",
        "user": "U0625T25APL",
        "ts": "1698199513.423509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ye0AT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0625T25APL",
            "ts": "1698199516.000000"
        },
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "942FD3CA-572B-475A-B65B-CE39DD68BBF7",
        "type": "message",
        "text": "Also relevant are the explorations around non-English computation\n\n <https://futureofcoding.slack.com/archives/C5U3SEW6A/p1694840398848199|https://futureofcoding.slack.com/archives/C5U3SEW6A/p1694840398848199>",
        "user": "U0378MDUG1Y",
        "ts": "1698202112.118699",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LP8WZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also relevant are the explorations around non-English computation\n\n "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1694840398848199",
                                "text": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1694840398848199"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1694840398848199",
                "ts": "1694840398.848199",
                "author_id": "U0378MDUG1Y",
                "channel_id": "C5U3SEW6A",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1694840398.848199",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "tgl",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "\u201cAlternatives to Modern Programming Languages with Ramsey Nasser and Jon Corbett\u201d from the Causal Islands Podcast\n\n"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "rich_text_quote",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "This month, we are joined by special guests Ramsey Nasser and Jon Corbett to discuss their work creating Arabic and Cree programming languages, respectively."
                                                }
                                            ],
                                            "border": 0
                                        },
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://fission.codes/blog/causal-islands-podcast-ep03-alternatives-to-modern-programming-languages/",
                                                    "text": "https://fission.codes/blog/causal-islands-podcast-ep03-alternatives-to-modern-programming-languages/"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1694840398848199",
                "fallback": "[September 15th, 2023 9:59 PM] chris.shank.23: \u201cAlternatives to Modern Programming Languages with Ramsey Nasser and Jon Corbett\u201d from the Causal Islands Podcast\n\n&gt; This month, we are joined by special guests Ramsey Nasser and Jon Corbett to discuss their work creating Arabic and Cree programming languages, respectively.\n<https://fission.codes/blog/causal-islands-podcast-ep03-alternatives-to-modern-programming-languages/|https://fission.codes/blog/causal-islands-podcast-ep03-alternatives-to-modern-programming-languages/>",
                "text": "\u201cAlternatives to Modern Programming Languages with Ramsey Nasser and Jon Corbett\u201d from the Causal Islands Podcast\n\n&gt; This month, we are joined by special guests Ramsey Nasser and Jon Corbett to discuss their work creating Arabic and Cree programming languages, respectively.\n<https://fission.codes/blog/causal-islands-podcast-ep03-alternatives-to-modern-programming-languages/|https://fission.codes/blog/causal-islands-podcast-ep03-alternatives-to-modern-programming-languages/>",
                "author_name": "Christopher Shank",
                "author_link": "https://futureofcoding.slack.com/team/U0378MDUG1Y",
                "author_icon": "https://avatars.slack-edge.com/2022-03-23/3286745266387_1092a4f970985ebc8d2b_48.png",
                "author_subname": "Christopher Shank",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Slack Conversation"
            }
        ],
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "type": "message",
        "text": "Here's the big omega combinator as annotated lambda diagram.\nPlus showing how the (here non-terminating) evaluation could be fluently animated. :drooling_face:\n( John Tromps unannoteed version here: <https://tromp.github.io/cl/diagrams.html> )",
        "files": [
            {
                "id": "F062H8XPRK8",
                "created": 1698224482,
                "timestamp": 1698224482,
                "name": "Screenshot_20231025_105239.png",
                "title": "Screenshot_20231025_105239.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UKVEBP5RD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 136150,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F062H8XPRK8/screenshot_20231025_105239.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F062H8XPRK8/download/screenshot_20231025_105239.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_360.png",
                "thumb_360_w": 295,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_480.png",
                "thumb_480_w": 393,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_720.png",
                "thumb_720_w": 589,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 977,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_960.png",
                "thumb_960_w": 786,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F062H8XPRK8-9678228fb1/screenshot_20231025_105239_1024.png",
                "thumb_1024_w": 838,
                "thumb_1024_h": 1024,
                "original_w": 998,
                "original_h": 1219,
                "thumb_tiny": "AwAwACe67nccPj8P/rUm9uu/9P8A61QzKGmxgE59TmpFRkRhxjHQE0xXdx4m25DMpI9T/wDWo+0L6r+dRmPez8sMMfumpIU2HG4ke5BoDW49JUc4DDPoKfUTf8fCfQ1LSGVJD+9xsDHPqc9aVgQOQByOjE0+SL5t5Pf3ppUHqx/X/GgQq/ff/eNS9D1/WqzjIfjPz0qBAozu3fjTGTH/AI+E+hqWoQQZoyCTkGpqQBTTGCc06o2jYnhiPxNAEDMV37Tg78ZIzT08xlBLAZ7YoMT5b5VYE55NJ5Lf88l/76p3Acn+tj/4F/Op6gSNhKrFFUAHoanpAf/Z",
                "permalink": "https://futureofcoding.slack.com/files/UKVEBP5RD/F062H8XPRK8/screenshot_20231025_105239.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F062H8XPRK8-ed0eefeb6f",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UKVEBP5RD",
        "display_as_bot": false,
        "ts": "1698224784.573139",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XGPPg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's the big omega combinator as annotated lambda diagram.\nPlus showing how the (here non-terminating) evaluation could be fluently animated. "
                            },
                            {
                                "type": "emoji",
                                "name": "drooling_face",
                                "unicode": "1f924"
                            },
                            {
                                "type": "text",
                                "text": "\n( John Tromps unannoteed version here: "
                            },
                            {
                                "type": "link",
                                "url": "https://tromp.github.io/cl/diagrams.html"
                            },
                            {
                                "type": "text",
                                "text": " )"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "902d7b31-7f9e-44bc-af96-a2e1e62ebf20",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UMV4B97GT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b22db9c6-acc9-471f-bdeb-930b8b57c7ed",
        "type": "message",
        "text": "I am pretty conflicted in this area, as one of the main aspects of my grand plan is a UX or HX (human experience) built around a shared space, which inevitably means 3D for me. But of course, people with reduced abilities around vision won't be able to access that as well as most. Of course, they still grasp the concept of a space, and there will be ways to allow them to enter, \"see\" what's there, and interact. But I spend a LOT of time planning the 3D stuff, and there's a lot of code around it.",
        "user": "UE6EFEPTQ",
        "ts": "1698227965.576679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r507h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am pretty conflicted in this area, as one of the main aspects of my grand plan is a UX or HX (human experience) built around a shared space, which inevitably means 3D for me. But of course, people with reduced abilities around vision won't be able to access that as well as most. Of course, they still grasp the concept of a space, and there will be ways to allow them to enter, \"see\" what's there, and interact. But I spend a LOT of time planning the 3D stuff, and there's a lot of code around it."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "9621af16-7475-4749-bc28-b215481778b9",
        "type": "message",
        "text": "It heads naturally towards AR and VR: which are very immersively 3D of course. Now, those with partial or no sight still belong in the real 3D world, but this means they have to have i/o that works for them: so probably sound, maybe touch and motion.",
        "user": "UE6EFEPTQ",
        "ts": "1698228082.424279",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ArLtr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It heads naturally towards AR and VR: which are very immersively 3D of course. Now, those with partial or no sight still belong in the real 3D world, but this means they have to have i/o that works for them: so probably sound, maybe touch and motion."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1698228126.000000"
        },
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "6FFEBD2A-66CC-40F0-904C-8E915381CA16",
        "type": "message",
        "text": "Nothing profound to say here, but wanted to raise my hand and let ya know I spend literally all day thinking about this everyday :joy: \n\nAlways glad to chat about this aspect of the future of coding. ",
        "user": "UMQ6LR9NZ",
        "ts": "1698232923.540249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DhiWa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nothing profound to say here, but wanted to raise my hand and let ya know I spend literally all day thinking about this everyday "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": " \n\nAlways glad to chat about this aspect of the future of coding"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "4a07b9ee-26fd-4e6e-8318-ae27e43bd0e1",
        "type": "message",
        "text": "When I think about this, I try to approach accessibility as something that can be baked into the design of a thing, and not made to be just about I/O and UI -- while those are specific facets of accessibility, I think there is work to be done about creating pits of success that our foundational to a thing that lead to more accessible experiences for all.",
        "user": "UMQ6LR9NZ",
        "ts": "1698233358.717869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G8sXA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I think about this, I try to approach accessibility as something that can be baked into the design of a thing, and not made to be just about I/O and UI -- while those are specific facets of accessibility, I think there is work to be done about creating pits of success that our foundational to a thing that lead to more accessible experiences for all."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "7c0ed121-65e9-42d9-abe8-d7b0699d497b",
        "type": "message",
        "text": "<@UMQ6LR9NZ> need examples!",
        "user": "UE6EFEPTQ",
        "ts": "1698236253.990869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yro/7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMQ6LR9NZ"
                            },
                            {
                                "type": "text",
                                "text": " need examples!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "863ece81-3cf8-44b1-8310-52675364476b",
        "type": "message",
        "text": "Here's a random idea: how about using LLMs to describe a UI to visually impaired readers? I've seen LLMs used for summarization in other contexts. Could it be a useful alternative to screen readers?",
        "user": "U04JY2BF24E",
        "ts": "1698240780.850539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aD4nc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a random idea: how about using LLMs to describe a UI to visually impaired readers? I've seen LLMs used for summarization in other contexts. Could it be a useful alternative to screen readers?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "ab33d6ed-f070-4e5a-bcb0-90893421e5e4",
        "type": "message",
        "text": "> Could it be a useful alternative to screen readers?\nIn short, and sort of blunt terms, not really",
        "user": "UMQ6LR9NZ",
        "ts": "1698240817.078849",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a4xK3",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Could it be a useful alternative to screen readers?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn short, and sort of blunt terms, not really"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMQ6LR9NZ",
            "ts": "1698240826.000000"
        },
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "db6379b5-a2cd-4893-bb2f-428c92c30d9b",
        "type": "message",
        "text": "In slightly longer terms, yes-ish. What an LLM describing an interface made exclusively for a sighted person to use would accomplish is insert an extra layer of mediation between user and interface",
        "user": "UMQ6LR9NZ",
        "ts": "1698240867.388969",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hGFkd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In slightly longer terms, yes-ish. What an LLM describing an interface made exclusively for a sighted person to use would accomplish is insert an extra layer of mediation between user and interface"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "f8d9b75a-804e-4e34-8606-fdab93c1f8c2",
        "type": "message",
        "text": "screen readers don\u2019t reproduce a UI 1:1, instead they decompose it into a navigable tree, sort of like a DOM, but broken out by semantic (and ideally) interactive elements",
        "user": "UMQ6LR9NZ",
        "ts": "1698240922.164719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yvhhI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "screen readers don\u2019t reproduce a UI 1:1, instead they decompose it into a navigable tree, sort of like a DOM, but broken out by semantic (and ideally) interactive elements"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "1aaa0d4b-f8fa-4907-9c3e-cb58431c8186",
        "type": "message",
        "text": "I think that if an LLM could describe an interface, but I think it would be tricky not to sort of re-create a screen reader in an LLM if you want it to be useable, if that makes sense?",
        "user": "UMQ6LR9NZ",
        "ts": "1698240959.209949",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V84AY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that if an LLM could describe an interface, but I think it would be tricky not to sort of re-create a screen reader in an LLM if you want it to be useable, if that makes sense?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "3a5d801f-3d07-46b3-b7dd-3cd5825b7b8f",
        "type": "message",
        "text": "<@UE6EFEPTQ> I think one of the only IRL examples I\u2019ve seen in the future of coding space is <@U05V0SLP6AX>\u2019s work with <http://wordplay.dev|wordplay.dev>, where, at least judging by the demo, it assumes various accessible outputs as default, it isn\u2019t something the dev has to layer on",
        "user": "UMQ6LR9NZ",
        "ts": "1698241060.132119",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sik/n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " I think one of the only IRL examples I\u2019ve seen in the future of coding space is "
                            },
                            {
                                "type": "user",
                                "user_id": "U05V0SLP6AX"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s work with "
                            },
                            {
                                "type": "link",
                                "url": "http://wordplay.dev",
                                "text": "wordplay.dev"
                            },
                            {
                                "type": "text",
                                "text": ", where, at least judging by the demo, it assumes various accessible outputs as default, it isn\u2019t something the dev has to layer on"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "759b87a2-2930-4bed-a2f2-ed6434871317",
        "type": "message",
        "text": "I've used screen readers on an accessibility project in the education domain. They are maddening, but I suppose a visually impaired reader may get used to them. I suggest that screen readers are less than ideal for certain information displays: graphs, tabular data, others? An LLM in certain contexts may provide a more accessible description: \"Here is a graph with time on the x access and population on the y axis. The y access ranges from zero to 1 million in increments of one hundred thousand...\"",
        "user": "U04JY2BF24E",
        "ts": "1698241060.602819",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "srPv4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've used screen readers on an accessibility project in the education domain. They are maddening, but I suppose a visually impaired reader may get used to them. I suggest that screen readers are less than ideal for certain information displays: graphs, tabular data, others? An LLM in certain contexts may provide a more accessible description: \"Here is a graph with time on the x access and population on the y axis. The y access ranges from zero to 1 million in increments of one hundred thousand...\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL",
        "reactions": [
            {
                "name": "arrow_up",
                "users": [
                    "U0625T25APL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e822f44b-b2cb-473d-89dd-de09839f125c",
        "type": "message",
        "text": "One could also imagine an interaction with the LLM: \"Tell me what the population value is for the year 1910?\"...etc.",
        "user": "U04JY2BF24E",
        "ts": "1698241149.939119",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TiUWn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One could also imagine an interaction with the LLM: \"Tell me what the population value is for the year 1910?\"...etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "03d65da1-b908-42ab-b60a-0c8b748a2ba7",
        "type": "message",
        "text": "100% \u2014 as caveat this is what I do for work as an accessibility specialist for the US gov. \u2014 what I\u2019ve seen in the research is that often times folks who rely on screen readers as their primary interface aren\u2019t generally interested in interacting with a graph. Folks often propose audio solutions to graphs when, what most folks end up wanting is just a sentence describing it, so, an LLM that could do that would be pretty slick \u2014 maybe not even describe the graph, but sort of summarize it: \u201c32% of respondents agree with the question\u201d and then maybe an interface to inquire deeper",
        "user": "UMQ6LR9NZ",
        "ts": "1698241198.473539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3tYQC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "100% \u2014 as caveat this is what I do for work as an accessibility specialist for the US gov. \u2014 what I\u2019ve seen in the research is that often times folks who rely on screen readers as their primary interface aren\u2019t generally interested in interacting with a graph. Folks often propose audio solutions to graphs when, what most folks end up wanting is just a sentence describing it, so, an LLM that could do that would be pretty slick \u2014 maybe not even describe the graph, but sort of summarize it: \u201c32% of respondents agree with the question\u201d and then maybe an interface to inquire deeper"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "65505b63-bfb7-40d8-8ddc-236381a37002",
        "type": "message",
        "text": "Yes, exactly what I am getting at. Something to provide an overview to orient the user.",
        "user": "U04JY2BF24E",
        "ts": "1698241241.950319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y4Kz8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, exactly what I am getting at. Something to provide an overview to orient the user."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fd132c68-e610-4448-91c2-c1430540492d",
        "type": "message",
        "text": "In the past year or 2, I got interested in OO and I find even its basic form within a mainstream language very powerful.\n\nYet, when I try to advocate for using polymorphism in almost any context, I get \"this is too unfamiliar\"/\"that's not how we do things in framework X\" instead advocating for switch statements or similar.\n\nAnd it really gets me thinking, if we don't even understand OO after 30 years of mainstream adoption (in some form or another) and are still doing \"structured programming\" with lambdas &amp; objects, is generic code just hopeless in practice? Is there an education problem? Is it just indicative of how poor standards are that few people have the privilege to do any amount of design for their systems before developing?\n\nIf so, how does \"future of coding\" even matter if any form of real adoption feels impossible.",
        "user": "U03LJBR6THT",
        "ts": "1698246162.762769",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0PKRR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the past year or 2, I got interested in OO and I find even its basic form within a mainstream language very powerful.\n\nYet, when I try to advocate for using polymorphism in almost any context, I get \"this is too unfamiliar\"/\"that's not how we do things in framework X\" instead advocating for switch statements or similar.\n\nAnd it really gets me thinking, if we don't even understand OO after 30 years of mainstream adoption (in some form or another) and are still doing \"structured programming\" with lambdas & objects, is generic code just hopeless in practice? Is there an education problem? Is it just indicative of how poor standards are that few people have the privilege to do any amount of design for their systems before developing?\n\nIf so, how does \"future of coding\" even matter if any form of real adoption feels impossible."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "reply_count": 12,
        "reply_users_count": 8,
        "latest_reply": "1698391355.732309",
        "reply_users": [
            "U02U0AS3J49",
            "U013ZLJARC7",
            "U03LJBR6THT",
            "UMQ6LR9NZ",
            "U03DNFDFYDA",
            "U05GSC0B4A0",
            "U05PESXCC2E",
            "U5STGTB3J"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "8154ef7a-7778-4048-8402-9363e630eaf1",
        "type": "message",
        "text": "<@U04JY2BF24E> I <https://knowbility.org/blog/2023/accessibility-apis-part-2|came across this blog post> that is interestingly connected to this discussion!",
        "user": "UMQ6LR9NZ",
        "ts": "1698253783.053319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zRB9R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U04JY2BF24E"
                            },
                            {
                                "type": "text",
                                "text": " I "
                            },
                            {
                                "type": "link",
                                "url": "https://knowbility.org/blog/2023/accessibility-apis-part-2",
                                "text": "came across this blog post"
                            },
                            {
                                "type": "text",
                                "text": " that is interestingly connected to this discussion!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04JY2BF24E"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "33fef3fc-a3ec-48aa-91e5-7d30bda12157",
        "type": "message",
        "text": "I can only guess, but I suspect you will find that people don't do polymorphism because it solves writing problems they don't have, and creates reading problems they don't want. No reason for despair generally that bad ideas aren't widely adopted, particularly if you judge ideas by their adoption.",
        "user": "U02U0AS3J49",
        "ts": "1698254075.127729",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K10qB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can only guess, but I suspect you will find that people don't do polymorphism because it solves writing problems they don't have, and creates reading problems they don't want. No reason for despair generally that bad ideas aren't widely adopted, particularly if you judge ideas by their adoption."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT",
                    "USH01JEDQ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "542bf97c-d1c3-430f-a39e-6dd1d6dc7872",
        "type": "message",
        "text": "A related question I have about this is that I can imagine using a screen reader to write code being mind-numbingly awful, Christ Krycho talks in his \"New Rustacean\" podcast about one of the hardest things about it was explaining code with just his voice (for example \"then type let x equals some struct colon colon new open paren close paren\") is not very helpful or engaging. Does that mean the future of code is something more like literate programming?",
        "user": "U0625T25APL",
        "ts": "1698254790.380489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZmQsI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A related question I have about this is that I can imagine using a screen reader to write code being mind-numbingly awful, Christ Krycho talks in his \"New Rustacean\" podcast about one of the hardest things about it was explaining code with just his voice (for example \"then type let x equals some struct colon colon new open paren close paren\") is not very helpful or engaging. Does that mean the future of code is something more like literate programming?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "81d6e400-c9ec-4b33-b456-091c3370a0dd",
        "type": "message",
        "text": "&gt; Does that mean the future of code is something more like literate programming?\nI dig this question so hard",
        "user": "UMQ6LR9NZ",
        "ts": "1698254901.998359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R+Mzr",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does that mean the future of code is something more like literate programming?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI dig this question so hard"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "7de98bfe-c28c-473b-85d4-d401a103ba1d",
        "type": "message",
        "text": "&gt; Also relevant are the explorations around non-English computation\nI always appreciated that Swift went with pure UTF-8 identifiers, that doesn't solve the keyword problem or even other language context concepts (RTL/LTR, or the existence or meaning of sigils)",
        "user": "U0625T25APL",
        "ts": "1698255011.980459",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IEuFT",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also relevant are the explorations around non-English computation"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I always appreciated that Swift went with pure UTF-8 identifiers, that doesn't solve the keyword problem or even other language context concepts (RTL/LTR, or the existence or meaning of sigils)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "0461e04b-23c8-44d0-9efd-06bbaf6df71a",
        "type": "message",
        "text": "Previously I didn't really see a lot of benefit to the Unison before but I wonder if there is a place for its \"this is not text\" approach to definitive source code?",
        "user": "U0625T25APL",
        "ts": "1698255621.121519",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "msUu+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Previously I didn't really see a lot of benefit to the Unison before but I wonder if there is a place for its \"this is not text\" approach to definitive source code?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "b93f0bc2-af70-4bbb-893d-3c40706a900a",
        "type": "message",
        "text": "We release Wordplay beta next Tuesday. It\u2019s really only a glimpse of what\u2019s needed for accessible, language-inclusive programming, but I\u2019m looking forward to everyone\u2019s thoughts!",
        "user": "U05V0SLP6AX",
        "ts": "1698263756.736329",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iSy3W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We release Wordplay beta next Tuesday. It\u2019s really only a glimpse of what\u2019s needed for accessible, language-inclusive programming, but I\u2019m looking forward to everyone\u2019s thoughts!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UMQ6LR9NZ",
                    "U0625T25APL"
                ],
                "count": 2
            },
            {
                "name": "tada",
                "users": [
                    "U05SU27S1M2",
                    "U0625T25APL",
                    "U04PDG834SF",
                    "U0378MDUG1Y"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "55bdbf61-2863-48bb-a583-d5cc7da1df90",
        "type": "message",
        "text": "I finally got a chance to watch the webinar and I am very excited about the work you are doing Amy. Thank you",
        "user": "U0625T25APL",
        "ts": "1698268128.437119",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+dW0l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I finally got a chance to watch the webinar and I am very excited about the work you are doing Amy. Thank you"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698194889.284659",
        "parent_user_id": "U0625T25APL"
    },
    {
        "client_msg_id": "da8ef185-4401-4249-9382-d7a80fbb37b8",
        "type": "message",
        "text": "There are many kinds of OO, but the kind one mostly encounters is quite bad. Those who have programmed using Java/C++-style OO, or in languages that should be able to do better but are culturally poisoned by Java/C++ culture (Ruby, for example), often develop antipathy to the whole idea.",
        "user": "U013ZLJARC7",
        "ts": "1698303868.151789",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "poTNX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are many kinds of OO, but the kind one mostly encounters is quite bad. Those who have programmed using Java/C++-style OO, or in languages that should be able to do better but are culturally poisoned by Java/C++ culture (Ruby, for example), often develop antipathy to the whole idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1698324185.000000"
        },
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8165BF83-8142-4DD6-B329-400E8F687AC7",
        "type": "message",
        "text": "I was being too abstract, and unfortunately this topic sparks too much controversy to be useful but still thought I\u2019d try.\n\nYes I\u2019m talking about ruby, &amp; JavaScript, <@U013ZLJARC7> that makes sense.\n\nWhat\u2019s really bothering me here is a bigger question:\n\nIf people are so resistant to change &amp; you propose a non-trivial idea which might actually get adoption how do you get people to not just use it like their previous thing. \n\nLike to me the java/c++ thing is they are structured (c/basic/etc) programmers who do things with in objects now, in that case setting up &amp; programming an interface is such an immense pain few people do it enough to get the epiphany.\n\nWhat does it say about us that even an idea which had so much going for it, almost completely missed in practice? Was smalltalk in particular marketed poorly to make it more approachable than it was? Was it purely the confusion with Simula which shared the term \u201cOO\u201d &amp; bjarne quotes as primary influence of c++v ",
        "user": "U03LJBR6THT",
        "ts": "1698323961.517289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ryHKq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was being too abstract, and unfortunately this topic sparks too much controversy to be useful but still thought I\u2019d try.\n\nYes I\u2019m talking about ruby, & JavaScript, "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " that makes sense.\n\nWhat\u2019s really bothering me here is a bigger question:\n\nIf people are so resistant to change & you propose a non-trivial idea which might actually get adoption how do you get people to not just use it like their previous thing. \n\nLike to me the java/c++ thing is they are structured (c/basic/etc) programmers who do things with in objects now, in that case setting up & programming an interface is such an immense pain few people do it enough to get the epiphany.\n\nWhat does it say about us that even an idea which had so much going for it, almost completely missed in practice? Was smalltalk in particular marketed poorly to make it more approachable than it was? Was it purely the confusion with Simula which shared the term \u201cOO\u201d & bjarne quotes as primary influence of c++v "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT"
    },
    {
        "client_msg_id": "fd54289b-82ba-4422-b0c4-021013b518a4",
        "type": "message",
        "text": "I see loads of objects in Ruby and JS, just mostly for the worse. Can you give an example of this kinds of things you\u2019re proposing that aren\u2019t being taken up?",
        "user": "U013ZLJARC7",
        "ts": "1698324152.496529",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "88zhd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see loads of objects in Ruby and JS, just mostly for the worse. Can you give an example of this kinds of things you\u2019re proposing that aren\u2019t being taken up?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT"
    },
    {
        "client_msg_id": "012D44F1-B986-48FE-BF3C-0F8835F8B2E7",
        "type": "message",
        "text": "Not just objects, but actually doing work to define good interfaces. I\u2019ve yet to see it in either.\n\nThe closest actually good example in rails is people creating custom form objects to do forms which don\u2019t work exactly like the built in form objects - don\u2019t map exactly to 1 model. This is just looking at existing interface & putting something in, and in practice its quite good. \n\nI\u2019m not just talking about using classes or objects, but actually spending the time to think about & design interfaces to make good generic code. \n\nI fear I\u2019m having trouble making my point, there is too much nuance in this topic for me to speak clearly about it. It goes beyond OO, but I think that\u2019s lost, I apologize. Having a tough week, I need some time to think about how to phrase my thoughts on this. ",
        "user": "U03LJBR6THT",
        "ts": "1698324438.077779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KWjW8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not just objects, but actually doing work to define good interfaces. I\u2019ve yet to see it in either.\n\nThe closest actually good example in rails is people creating custom form objects to do forms which don\u2019t work exactly like the built in form objects - don\u2019t map exactly to 1 model. This is just looking at existing interface & putting something in, and in practice its quite good. \n\nI\u2019m not just talking about using classes or objects, but actually spending the time to think about & design interfaces to make good generic code. \n\nI fear "
                            },
                            {
                                "type": "text",
                                "text": "I\u2019m"
                            },
                            {
                                "type": "text",
                                "text": " having trouble making my point, there is too much nuance in this topic for me to speak clearly about it. It goes beyond OO, but I think "
                            },
                            {
                                "type": "text",
                                "text": "that\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " lost, I apologize"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Having a tough week, I need some time to think about how to phrase my thoughts on this. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03LJBR6THT",
            "ts": "1698324979.000000"
        },
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT"
    },
    {
        "client_msg_id": "4335141e-b375-431e-8fc6-b87fffac63b3",
        "type": "message",
        "text": "API design is hard is every language/paradigm, yeah!",
        "user": "U013ZLJARC7",
        "ts": "1698325945.640639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EAVBF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "API design is hard is every language/paradigm, yeah!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "point_up_2",
                "users": [
                    "UL2SJ88Q3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "315edfba-8c84-4856-af51-9efb7a8a5a83",
        "type": "message",
        "text": "with the caveat that I\u2019ve worked in very few code bases that are really \u201call in\u201d on OO, the ones that I\u2019ve seen come the closest to making it a good thing (good read here as \u201chelpful\u201d) are the teams that did the work ahead of time to model their domain, to define what an \u201cobject\u201d was, and not sort of back into modeling objects just based off of some real world things like a lot of books suggests. Doing that, I\u2019ve found, can dig ya into a wicked deep whole.\n\nI think, OO, like a lot of design philosophies, can be a powerful tool, but can\u2019t be applied without doing the design work, too, and not all devs are cozy or know how to do that level of design.",
        "user": "UMQ6LR9NZ",
        "ts": "1698333743.867269",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zryvk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "with the caveat that I\u2019ve worked in very few code bases that are really \u201call in\u201d on OO, the ones that I\u2019ve seen come the closest to making it a good thing (good read here as \u201chelpful\u201d) are the teams that did the work ahead of time to model their domain, to define what an \u201cobject\u201d was, and not sort of back into modeling objects just based off of some real world things like a lot of books suggests. Doing that, I\u2019ve found, can dig ya into a wicked deep whole.\n\nI think, OO, like a lot of design philosophies, can be a powerful tool, but can\u2019t be applied without doing the design work, too, and not all devs are cozy or know how to do that level of design."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "519a5de4-839f-47c2-bf71-fdfb0a82427d",
        "type": "message",
        "text": "I think OO is pretty good as long as you layer on a couple of additional dogmas:\n\u2022 Keep data and behaviour separate\n\u2022 Everything is either abstract (designed for extensibility) or final (doesn't allow extensibility)",
        "user": "U03DNFDFYDA",
        "ts": "1698336371.924249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r4S6B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think OO is pretty good as long as you layer on a couple of additional dogmas:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Keep data and behaviour separate"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Everything is either abstract (designed for extensibility) or final (doesn't allow extensibility)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT"
    },
    {
        "client_msg_id": "efe13120-5af0-41e8-af0a-7429aae18343",
        "type": "message",
        "text": "it's interesting that you bring up polymorphism...I've kind of been on this kick for a while too :slightly_smiling_face:\n\nThere's this talk from a while back that I really like <https://www.youtube.com/watch?v=zs0E4E83_X8|The Soul of Software> where Avdi Grimm mentions this breakdown from <http://davewest.us/product/object-thinking/|Object Thinking> of programming having two schools of thought: Formalists and the Informalists (Hermeneuticists)...and Avdi makes a comment that if you were taught inheritance before polymorphism, you were taught by a formalist, but if you were taught polymorphism before inheritance you were taught by an informalist...\n\nUltimately what I've found and that they mention in the book - programming/engineering is heavily dominated by the formalist world...so it can be hard if you find yourself as the only person in the team with the opposite view of programming\n\nthe way I see the answer to your original question though is that the pendulum kind of swings back and forth over time with one side being frustrated while the other is in their element and highly productive",
        "user": "U05GSC0B4A0",
        "ts": "1698336413.295449",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JyJDo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's interesting that you bring up polymorphism...I've kind of been on this kick for a while too "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere's this talk from a while back that I really like "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=zs0E4E83_X8",
                                "text": "The Soul of Software"
                            },
                            {
                                "type": "text",
                                "text": " where Avdi Grimm mentions this breakdown from "
                            },
                            {
                                "type": "link",
                                "url": "http://davewest.us/product/object-thinking/",
                                "text": "Object Thinking"
                            },
                            {
                                "type": "text",
                                "text": " of programming having two schools of thought: Formalists and the Informalists (Hermeneuticists)...and Avdi makes a comment that if you were taught inheritance before polymorphism, you were taught by a formalist, but if you were taught polymorphism before inheritance you were taught by an informalist...\n\nUltimately what I've found and that they mention in the book - programming/engineering is heavily dominated by the formalist world...so it can be hard if you find yourself as the only person in the team with the opposite view of programming\n\nthe way I see the answer to your original question though is that the pendulum kind of swings back and forth over time with one side being frustrated while the other is in their element and highly productive"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6f82d8ca-5a61-475f-8c33-6dbbd2a71d71",
        "type": "message",
        "text": "like...Ruby in the late 00's/early 2010s was dominated by this culture of throwing off the constraints of java and having complete freedom...which led to a huge explosion of new concepts and tools and ideas hitting the mainstream...(at the same time making it possible to make horrible abominations - I was at Groupon in 2013)\n\nand now you see those concepts and tools shifting more into the formal realm where variation and stability and correctness has become more important, because the patterns that work for the types of apps people are building have been found",
        "user": "U05GSC0B4A0",
        "ts": "1698336628.099259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VPHKG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like...Ruby in the late 00's/early 2010s was dominated by this culture of throwing off the constraints of java and having complete freedom...which led to a huge explosion of new concepts and tools and ideas hitting the mainstream...(at the same time making it possible to make horrible abominations - I was at Groupon in 2013)\n\nand now you see those concepts and tools shifting more into the formal realm where variation and stability and correctness has become more important, because the patterns that work for the types of apps people are building have been found"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05GSC0B4A0",
            "ts": "1698336678.000000"
        },
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f5fc2c41-de95-4e3c-9c59-b8c3804d2fdc",
        "type": "message",
        "text": "Yes, inheritance will paint you into a corner, but you don't need to use inheritance all the time. Delegation, interfaces, etc. Rust traits, Go delegation, Haskell typeclasses. Polymorphism without the inheritance. Also related, of course, is the expression problem when talking about OO vs non-OO. <https://www.giacomodebidda.com/posts/3-ways-to-solve-the-expression-problem>",
        "user": "U05PESXCC2E",
        "ts": "1698375032.336289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hZafC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, inheritance will paint you into a corner, but you don't need to use inheritance all the time. Delegation, interfaces, etc. Rust traits, Go delegation, Haskell typeclasses. Polymorphism without the inheritance. Also related, of course, is the expression problem when talking about OO vs non-OO. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.giacomodebidda.com/posts/3-ways-to-solve-the-expression-problem"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.giacomodebidda.com/posts/3-ways-to-solve-the-expression-problem",
                "thumb_url": "https://i.ytimg.com/vi/lC39ifspIf4/mqdefault.jpg",
                "thumb_width": 320,
                "thumb_height": 180,
                "service_icon": "https://www.giacomodebidda.com/assets/img/favicon/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.giacomodebidda.com/posts/3-ways-to-solve-the-expression-problem",
                "fallback": "3 ways to solve the expression problem",
                "text": "The expression problem is about adding new capabilities to existing code without modifying it. In this article we discuss a few approaches to solve the expression problem.",
                "title": "3 ways to solve the expression problem",
                "title_link": "https://www.giacomodebidda.com/posts/3-ways-to-solve-the-expression-problem",
                "service_name": "giacomodebidda.com"
            }
        ],
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT"
    },
    {
        "client_msg_id": "5D8D764C-6FEC-491F-A6E1-47ED8AF13460",
        "type": "message",
        "text": "<@U03LJBR6THT> You\u2019re touching on something that resonates a lot with me. However I\u2019m unsure if you talk about what I think you do, or if I\u2019m just reading into your post what I want it to say.\nLet me try a few seemingly random questions to tease out what you are trying to point at:\n\n1. The original Gang of Four _Design Patterns_, do they exemplify what you are trying to point at? Or are they irrelevant for that? Or are they perhaps even a counter example?\n2. Some ontologies try to categorize everything in one huge tree (eg. biological species). Others are just trying to paint a comprehensible picture of complex local relationships. One could say the former is more concerned with identifying all the nodes while the latter is more concerned with identifying all the edges. Would you agree that the former feels misguided or irrelevant for what you mean and the latter is closer to it? Does the former remind you of inheritance?\n3. Does a mathematical structure from group theory like a monoid (not a monad; although that\u2019s adjacent I\u2019m deliberately trying not to go there) feel related to your idea of power from polymorphism? For instance, adding integers and concatenating strings feels somehow similar, but yet clearly is also different. Does that map to what you have in mind? And furthermore, would you agree that it\u2019s not about the formalism (that we call it \u201cmonoid\u201d and can precisely describe what we mean), but about the intuition we can develop for it (\u201cAh, it\u2019s the same thing! It works for integers, strings, and now I see how I can transfer it to this other type and it\u2019s beneficial to see the connection and treat it the same way.\u201d)?\n4. When you described that scenario where polymorphism is replaced with \u201ca switch statement\u201d, did you feel like the other person is just not \u201cgetting it\u201d? Did you feel like your polymorphism way was simpler and more elegant, but the other person clearly thought it was more complex and argued that it\u2019s hard to beat the simplicity of a switch or if statement? Do you happen to come across a different understanding of what is simple and what is complex more often?\n5. That kind of polymorphism you think of, how does it relate to beauty? Would you say it\u2019s beautiful? Does that question even make any sense to you at all or do you think I\u2019m taking it somewhere weird now?\nSorry if I throw around concepts you\u2019re not familiar with. I\u2019m just trying to cover some area, hoping I hit enough overlap with your experience to find out if we think about the same thing or not.",
        "user": "U5STGTB3J",
        "ts": "1698391355.732309",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i9dI9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03LJBR6THT"
                            },
                            {
                                "type": "text",
                                "text": " You\u2019re touching on something that resonates a lot with me. However I\u2019m unsure if you talk about what I think you do, or if I\u2019m just reading into your post what I want it to say.\nLet me try a few seemingly random questions to tease out what you are trying to point at:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The original Gang of Four "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Design Patterns",
                                        "style": {
                                            "bold": false,
                                            "italic": true,
                                            "strike": false
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", do they exemplify what you are trying to point at? Or are they irrelevant for that? Or are they perhaps even a counter example?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Some ontologies try to categorize everything in one huge tree (eg. biological species). Others are just trying to paint a comprehensible picture of complex local relationships. One could say the former is more concerned with identifying all the nodes while the latter is more concerned with identifying all the edges. Would you agree that the former feels misguided or irrelevant for what you mean and the latter is closer to it? Does the former remind you of inheritance?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Does a mathematical structure from group theory like a monoid (not a monad; although that\u2019s adjacent I\u2019m deliberately trying not to go there) feel related to your idea of power from polymorphism? For instance, adding integers and concatenating strings feels somehow similar, but yet clearly is also different. Does that map to what you have in mind? And furthermore, would you agree that it\u2019s not about the formalism (that we call it \u201cmonoid\u201d and can precisely describe what we mean), but about the intuition we can develop for it (\u201cAh, it\u2019s the same thing! It works for integers, strings, and now I see how I can transfer it to this other type and it\u2019s beneficial to see the connection and treat it the same way.\u201d)?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "When you described that scenario where polymorphism is replaced with \u201ca switch statement\u201d, did you feel like the other person is just not \u201cgetting it\u201d? Did you feel like your polymorphism way was simpler and more elegant, but the other person clearly thought it was more complex and argued that it\u2019s hard to beat the simplicity of a switch or if statement? Do you happen to come across a different understanding of what is simple and what is complex more often?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "That kind of polymorphism you think of, how does it relate to beauty? Would you say it\u2019s beautiful? Does that question even make any sense to you at all or do you think "
                                    },
                                    {
                                        "type": "text",
                                        "text": "I\u2019m"
                                    },
                                    {
                                        "type": "text",
                                        "text": " taking it somewhere weird now?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSorry if I throw around concepts you\u2019re not familiar with. I\u2019m just trying to cover some area, hoping I hit enough overlap with your experience to find out if we think about the same thing or not."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT"
    }
]