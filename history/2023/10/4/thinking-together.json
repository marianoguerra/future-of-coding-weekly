[
    {
        "client_msg_id": "ef28e012-c60c-42f2-b55c-570df72c458b",
        "type": "message",
        "text": "Some thoughts re: \u201867 Considered Harmful\u2019:\n*Superparentheses*:\nLove the discussion about this topic :stuck_out_tongue:. Haskell has `$` which means \u2018opening parenthesis that is closed by the end of the line\u2019 which gets a bit close to the idea of a \u2018super opening parenthesis\u2019.\n\n*C and GOTO:* \nC came out after this paper, and its `goto` statement was neutered: It only allows _local_ jumps (remaining in the same function) and only to hard-coded labels (though <https://gcc.gnu.org/onlinedocs/gcc-4.8.0/gcc/Labels-as-Values.html#Labels-as-Values|a common GCC compiler extension> extends this to allow dynamic labels).\nThe closest C gets to unrestricted GOTO is `setjmp`/`longjmp`; but here the _callee decides_ where you jump to (just like with exceptions) so you can really only jump up on the stack, making them slightly less painful to reason about.\nNeither gets used a lot: I mainly know the `goto sosueme` idiom from a few of the talks of Alexei Alexandrescu in which he uses it in a hot code path because the resulting machine code is better optimized. And `setjmp`/`longjmp` is used in some places to emulate exceptions or coroutines in plain C, but whenever the OS provides higher-level abstractions to use here they are preferred (just like how OS support for threading is better than rolling your own spin-locks).\n\nEDIT: Also, love your relentless efforts to add the Dijkstra sting every time :joy:. Editing this episode must have taken painfully long :bow:.",
        "user": "U05T675LXTM",
        "ts": "1696410113.191029",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IR/8G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some thoughts re: \u201867 Considered Harmful\u2019:\n"
                            },
                            {
                                "type": "text",
                                "text": "Superparentheses",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\nLove the discussion about this topic "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": ". Haskell has "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which means \u2018opening parenthesis that is closed by the end of the line\u2019 which gets a bit close to the idea of a \u2018super opening parenthesis\u2019.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "C and GOTO: ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nC came out after this paper, and its "
                            },
                            {
                                "type": "text",
                                "text": "goto",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " statement was neutered: It only allows "
                            },
                            {
                                "type": "text",
                                "text": "local",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " jumps (remaining in the same function) and only to hard-coded labels (though "
                            },
                            {
                                "type": "link",
                                "url": "https://gcc.gnu.org/onlinedocs/gcc-4.8.0/gcc/Labels-as-Values.html#Labels-as-Values",
                                "text": "a common GCC compiler extension"
                            },
                            {
                                "type": "text",
                                "text": " extends this to allow dynamic labels).\nThe closest C gets to unrestricted GOTO is "
                            },
                            {
                                "type": "text",
                                "text": "setjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "/"
                            },
                            {
                                "type": "text",
                                "text": "longjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "; but here the "
                            },
                            {
                                "type": "text",
                                "text": "callee decides ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "where you jump to (just like with exceptions) so you can really only jump up on the stack, making them slightly less painful to reason about.\nNeither gets used a lot: I mainly know the "
                            },
                            {
                                "type": "text",
                                "text": "goto sosueme ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "idiom from a few of the talks of Alexei Alexandrescu in which he uses it in a hot code path because the resulting machine code is better optimized. And "
                            },
                            {
                                "type": "text",
                                "text": "setjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "/"
                            },
                            {
                                "type": "text",
                                "text": "longjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is used in some places to emulate exceptions or coroutines in plain C, but whenever the OS provides higher-level abstractions to use here they are preferred (just like how OS support for threading is better than rolling your own spin-locks).\n\nEDIT: Also, love your relentless efforts to add the Dijkstra sting every time "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": ". Editing this episode must have taken painfully long "
                            },
                            {
                                "type": "emoji",
                                "name": "bow",
                                "unicode": "1f647"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05T675LXTM",
            "ts": "1696410226.000000"
        },
        "thread_ts": "1696410113.191029",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1696557670.440869",
        "reply_users": [
            "UUB7RA7PF",
            "U05T675LXTM",
            "U013ZLJARC7",
            "USH01JEDQ",
            "UBKNXPBAB",
            "U05UN1152MC",
            "UCUSW7WVD"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05UBCXHWM6",
                    "UK3LH8CF5"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "04993956-8a04-4ffe-bf77-75fa0b639ba3",
        "type": "message",
        "text": "I love that `$` in haskell, if it was gone I would cry! (And implement my own)",
        "user": "UUB7RA7PF",
        "ts": "1696410865.843279",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mx/w1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love that "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in haskell, if it was gone I would cry! (And implement my own)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05T675LXTM",
                    "U03R0B9U1GD",
                    "U05UBCXHWM6"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "8f71edb8-530d-4a34-a89f-f7cc326ba043",
        "type": "message",
        "text": "And making a separate topic for the second half of the episode about the list of other \u2018things considered harmful\u2019 because it is mostly separate from the previous discussion ^_^\u2019:\n\u2022 Most of your takes are actually luke-warm, in my opinion. :slightly_smiling_face: \n\u2022 Agile (with capital A) considered harmful: 100% agree with your discussion here.\n\u2022 Dependency Injection considered harmful: I disagree. You can definitely use it too much and it would be better if people would approach it from the dependency inversion principle side, but it definitely is better than tightly coupling your code on implementation details. And related to that, I\u2019d like to add:\n\u2022 Inheritance considered harmful: Why do we still teach new programmers how to do inheritance? Besides \u2018prefer composition over inheritance\u2019, have we not learned in the last 20-ish years that doing polymorphism based on interfaces/traits creates much more maintainable code?",
        "user": "U05T675LXTM",
        "ts": "1696411106.324219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+LVTJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And making a separate topic for the second half of the episode about the list of other \u2018things considered harmful\u2019 because it is mostly separate from the previous discussion ^_^\u2019:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most of your takes are actually luke-warm, in my opinion. "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "slightly_smiling_face",
                                        "unicode": "1f642"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Agile (with capital A) considered harmful: 100% agree with your discussion here."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Dependency Injection considered harmful: I disagree. You can definitely use it too much and it would be better if people would approach it from the dependency inversion principle side, but it definitely is better than tightly coupling your code on implementation details. And related to that, I\u2019d like to add:"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Inheritance considered harmful: Why do we still teach new programmers how to do inheritance? Besides \u2018prefer composition over inheritance\u2019, have we not learned in the last 20-ish years that doing polymorphism based on interfaces/traits creates much more maintainable code?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05T675LXTM",
            "ts": "1696411478.000000"
        },
        "thread_ts": "1696411106.324219",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1696620851.546679",
        "reply_users": [
            "U016VUZGUUQ",
            "U05T675LXTM",
            "UK3LH8CF5"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "bf08a945-19b2-4a26-b9f8-299632eca319",
        "type": "message",
        "text": "Same here. For people coming from other languages: you might know `|&gt;` and maybe `&lt;|`. (F#, Scala, Elixir, Elm, PureScript, \u2026 have them). `$` is `&lt;|` . The Haskell version of `|&gt;` is known as `&amp;`  which is mainly useful if you want to split a long expression over multiple lines (and read it top-to-bottom).",
        "user": "U05T675LXTM",
        "ts": "1696411402.578489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "guhj4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Same here. For people coming from other languages: you might know "
                            },
                            {
                                "type": "text",
                                "text": "|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and maybe "
                            },
                            {
                                "type": "text",
                                "text": "<|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". (F#, Scala, Elixir, Elm, PureScript, \u2026 have them). "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "<|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . The Haskell version of "
                            },
                            {
                                "type": "text",
                                "text": "|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is known as "
                            },
                            {
                                "type": "text",
                                "text": "&",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  which is mainly useful if you want to split a long expression over multiple lines (and read it top-to-bottom)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05UBCXHWM6",
                    "U05UN1152MC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "03dbd3a0-0af3-46b6-806d-09bc9ab6c700",
        "type": "message",
        "text": "`goto` turns up in many, many places where performance matters. Here are ~5 pages of hits for `goto` in the Linux kernel, for example:\n\n<https://github.com/search?q=repo%3Atorvalds%2Flinux+goto&amp;type=code&amp;p=1>\n\nDijkstra could make his argument only because he didn\u2019t do much of this kind of work.",
        "user": "U013ZLJARC7",
        "ts": "1696416692.138509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z1XzS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "goto",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " turns up in many, many places where performance matters. Here are ~5 pages of hits for "
                            },
                            {
                                "type": "text",
                                "text": "goto",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the Linux kernel, for example:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/search?q=repo%3Atorvalds%2Flinux+goto&type=code&p=1"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDijkstra could make his argument only because he didn\u2019t do much of this kind of work."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM"
    },
    {
        "client_msg_id": "3CBF286C-4C5C-4698-BF37-94268DCE8647",
        "type": "message",
        "text": "I quit this episode due to the audio hijinks",
        "user": "USH01JEDQ",
        "ts": "1696423634.756839",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lXK0W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I quit this episode due to the audio hijinks"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c6563a0c-107a-499f-b7d5-ff96e4fff329",
        "type": "message",
        "text": "People are doing dependency injection without dependency inversion? Why? How?",
        "user": "U016VUZGUUQ",
        "ts": "1696432317.545359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LQVc9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People are doing dependency injection without dependency inversion? Why? How?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696411106.324219",
        "parent_user_id": "U05T675LXTM"
    },
    {
        "client_msg_id": "f3405d0d-bfb2-4185-be8a-27e4871b6f5d",
        "type": "message",
        "text": "<@USH01JEDQ> Me too!",
        "user": "UBKNXPBAB",
        "ts": "1696487211.427249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PUj94",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USH01JEDQ"
                            },
                            {
                                "type": "text",
                                "text": " Me too!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM"
    },
    {
        "client_msg_id": "684d6f13-569f-43a7-9298-0ebb0c9eb5cb",
        "type": "message",
        "text": "<@U016VUZGUUQ> What I mean is that you should not do dependency injection for its own sake, but as a potential implementation of the dependency inversion principle:\n\n If you have an object that \u2018does all the things\u2019 which is threaded around everywhere and whenever you need to do anything you use the object, you only make code harder to read.\n\nBut if you have small objects which each implement only a single well-defined short interface, then it is easy to follow the logic and swap things out.\n\nI hope my explanation makes sense",
        "user": "U05T675LXTM",
        "ts": "1696506685.651479",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NeUWG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " What I mean is that you should not do dependency injection for its own sake, but as a potential implementation of the dependency inversion principle:\n\n If you have an object that \u2018does all the things\u2019 which is threaded around everywhere and whenever you need to do anything you use the object, you only make code harder to read.\n\nBut if you have small objects which each implement only a single well-defined short interface, then it is easy to follow the logic and swap things out.\n\nI hope my explanation makes sense"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696411106.324219",
        "parent_user_id": "U05T675LXTM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "13e2de58-87d5-4e72-a994-ff145ab7d2c2",
        "type": "message",
        "text": "My first ever program was in BBC BASIC:\n```10 PRINT \"MATT IS ACE\"\n20 GOTO 10```\nWhere is the harm in that :slightly_smiling_face:",
        "user": "U05UN1152MC",
        "ts": "1696533995.785469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dqtGn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My first ever program was in BBC BASIC:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "10 PRINT \"MATT IS ACE\"\n20 GOTO 10"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where is the harm in that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM"
    },
    {
        "client_msg_id": "55394600-7568-4a55-a3e1-f6d613c7ec96",
        "type": "message",
        "text": "Seriously though <@U013ZLJARC7> you make a great point. It's easy to write a \"chainsaws considered harmful\" paper, but there are contexts where chainsaws are extremely useful (and relatively safe).",
        "user": "U05UN1152MC",
        "ts": "1696534167.817249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ypWzo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seriously though "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " you make a great point. It's easy to write a \"chainsaws considered harmful\" paper, but there are contexts where chainsaws are extremely useful (and relatively safe)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6fed9413-17f2-47df-a700-b95950f9efc2",
        "type": "message",
        "text": "Back in the day I wrote up a little story about a lesson that might be relevant here: <https://akkartik.name/post/swamp>",
        "user": "UCUSW7WVD",
        "ts": "1696557670.440869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "USMAe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Back in the day I wrote up a little story about a lesson that might be relevant here: "
                            },
                            {
                                "type": "link",
                                "url": "https://akkartik.name/post/swamp"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM"
    },
    {
        "client_msg_id": "18ae41db-5bf9-40b2-ad44-165821233800",
        "type": "message",
        "text": "&gt; Most of your takes are actually luke-warm, in my opinion.\nYeah, I agree. I was dissatisfied with that aspect of the episode.\n\n&gt; but it definitely is better than tightly coupling your code on implementation details\nYeah, I definitely disagree with this one. I'd much rather my application code be about the implementation details. Interfaces don't matter at that level. Implementation details do.\n\n&gt; But if you have small objects which each implement only a single well-defined short interface, then it is easy to follow the logic and swap things out.\nI just need one interface `call`. :slightly_smiling_face:",
        "user": "UK3LH8CF5",
        "ts": "1696620851.546679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mf8/k",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of your takes are actually luke-warm, in my opinion."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, I agree. I was dissatisfied with that aspect of the episode.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but it definitely is better than tightly coupling your code on implementation details"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, I definitely disagree with this one. I'd much rather my application code be about the implementation details. Interfaces don't matter at that level. Implementation details do.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But if you have small objects which each implement only a single well-defined short interface, then it is easy to follow the logic and swap things out."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI just need one interface "
                            },
                            {
                                "type": "text",
                                "text": "call",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1696411106.324219",
        "parent_user_id": "U05T675LXTM"
    }
]