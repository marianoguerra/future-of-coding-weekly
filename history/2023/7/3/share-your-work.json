[
    {
        "client_msg_id": "d994645e-b8d7-460c-b867-5e59dd836787",
        "type": "message",
        "text": "Future of Coding \u2022 Episode 65\nLaurence Diver \u2022 Interpreting the Rule(s) of Code: Performance, Performativity, and Production\n\ud808\udcb6 <https://futureofcoding.org/episodes/065>\n\nThe execution of code, by its very nature, creates the conditions of a \u201cstrong legalism\u201d in which you must unquestioningly obey laws produced without your say, invisibly, with no chance for appeal. This is a wild idea; today\u2019s essay is packed with them. In drawing parallels between law and computing, it gives us a new skepticism about software and the effect it has on the world. It\u2019s also full of challenges and benchmarks and ideas for ways that code can be reimagined. The conclusion of the essay is flush with inspiration, and the references are stellar. So while it might not look it at first, this is one of the most powerful works of FoC we\u2019ve read.",
        "user": "UC2A2ARPT",
        "ts": "1688402564.602729",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G1uXn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Future of Coding \u2022 Episode 65\nLaurence Diver \u2022 Interpreting the Rule(s) of Code: Performance, Performativity, and Production\n\ud808\udcb6 "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/065"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe execution of code, by its very nature, creates the conditions of a \u201cstrong legalism\u201d in which you must unquestioningly obey laws produced without your say, invisibly, with no chance for appeal. This is a wild idea; today\u2019s essay is packed with them. In drawing parallels between law and computing, it gives us a new skepticism about software and the effect it has on the world. It\u2019s also full of challenges and benchmarks and ideas for ways that code can be reimagined. The conclusion of the essay is flush with inspiration, and the references are stellar. So while it might not look it at first, this is one of the most powerful works of FoC we\u2019ve read."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "reply_count": 18,
        "reply_users_count": 5,
        "latest_reply": "1688750702.640889",
        "reply_users": [
            "UMQ6LR9NZ",
            "UK3LH8CF5",
            "U02U0AS3J49",
            "U03R0B9U1GD",
            "U04E5QAD6DD"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            },
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heartpulse",
                "users": [
                    "UCUSW7WVD",
                    "U02B6FQKZK8",
                    "UA14TGLTC",
                    "U04E5QAD6DD"
                ],
                "count": 4
            },
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f1b83143-1855-4bea-911a-e25311890b6f",
        "type": "message",
        "text": "w/no other context, my fingers\u2019 are crossed for <@UK3LH8CF5>\u2019s philosophy corner to be about Foucault.",
        "user": "UMQ6LR9NZ",
        "ts": "1688403019.629899",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UF2X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "w/no other context, my fingers\u2019 are crossed for "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s philosophy corner to be about Foucault."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "294470d0-0160-4f1e-b7da-ffe3c96a5de3",
        "type": "message",
        "text": "Lol. I don't know enough about Foucault sadly. I'm more of an analytic philosophy person. But I definitely should read more Foucault.",
        "user": "UK3LH8CF5",
        "ts": "1688403067.901629",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z05",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lol. I don't know enough about Foucault sadly. I'm more of an analytic philosophy person. But I definitely should read more Foucault."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "96908f29-8a7f-4079-9866-ef3128daa143",
        "type": "message",
        "text": "as is true with all philosophers of that vintage, Foucault can be problematic. Be warned. I found his various writings on power pretty interesting, and I think formative",
        "user": "UMQ6LR9NZ",
        "ts": "1688403185.613509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8RQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as is true with all philosophers of that vintage, Foucault can be problematic. Be warned. I found his various writings on power pretty interesting, and I think formative"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "9bc587ff-ec9e-44c0-b56b-f7c2ae3cc203",
        "type": "message",
        "text": "That's WILD. Laurence and I have gotten into it on more than a couple of occasions online. Unsurprisingly, he has THOUGHTS about Rules as Code. But they have never struck me as \"inspirational.\" Looking forward to this.",
        "user": "U02U0AS3J49",
        "ts": "1688420725.791699",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rFF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's WILD. Laurence and I have gotten into it on more than a couple of occasions online. Unsurprisingly, he has THOUGHTS about Rules as Code. But they have never struck me as \"inspirational.\" Looking forward to this."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "022A8144-97A0-4BE4-A10E-38F4BEB33781",
        "type": "message",
        "text": "<@U02U0AS3J49> yeah I figured you might have some thoughts on this one :)",
        "user": "UK3LH8CF5",
        "ts": "1688422384.523909",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3oZlZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " yeah I figured you might have some thoughts on this one :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "ghost",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6fe95edd-24f9-490f-b04f-3d86236a78da",
        "type": "message",
        "text": "French has a standards body. :wink:",
        "user": "U02U0AS3J49",
        "ts": "1688432203.012629",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YLpM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "French has a standards body. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "upside_down_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f53c9128-b5af-4e57-a911-c9ed38c30908",
        "type": "message",
        "text": "The comparison of how code is interpreted and executed and how law is interpreted and executed has parallels. But what people are actually proposing to do has nothing to do with executing law programmatically. The system cannot be so easily replaced. Cryptomaximalists exist, but they are the only version of the problem he is describing that actually does exist. Nowhere else is the thing he is describing even possible, much less extant.\n\nThe idea that code is dangerous because it can be used to turn norms into laws is true, but only inside the context of non legalist structures, which means the danger is mitigated. And it is not unique to code. Policies that are blindly followed do the same thing. Laws themselves are a hardening of policy intents in that way. Contracts are a hardening of agreements, too. To the extent that code is different from these other hardenings, it is a matter of degree, because of the risk of doing the wrong thing faster, or more automatically, because of a lack of context, or human in the loop.\n\n\"Speed of execution of code prevents the possibility of reevaluating it's terms.\" That is it's virtue. It is not without a concomitant risk that we are doing the wrong thing, but faster. But doing the wrong thing faster is an inherent risk that is mitigated by basically all of software development. You cannot take the quality of laws we have now, and assume that they will be automated as-is. Not only is that a terrible idea that no one would support, (not even the cryptomaximalists think we should just automate contracts as they currently are) it is quite literally impossible to do.  Natural language are libraries that get imported implicitly into every law and contract, and when you try to encode them, you discover you can't without requiring it because of the absence of a natural language library, among many many other issues. \n\nThe idea \"you have no appeal\" of code is true only if you live inside the computer. In reality, the software is owned and used by someone who can be sued. When someone stole a bunch of Bitcoin from an online contract, they were sued.\n\nWe are also taking the ex post necessity of the legal system and treating it as a virtue. The fact that you have to sue someone and ask a judge to interpret a contact is not a feature. Requiring things to go bad first is an efficiency method that we arrived at because most things go fine, and most things that don't get sorted, and it's only the remainder that actually require attention from the system, which has limited resources. \n\nDemocracy and rule of law does not arise by virtue of the availability of a referee in the absence of agreement. That is a pathetic, emaciated view of democracy and the rule of law. It arises from the 99% of cases that never require the attention of a lawyer or judge, too, and far moreso.\n\nThe important distinction between how laws and code are executed is not that one is mechanised and the other is not. It is that one is fault tolerant and self healing while the other is not. Which is why we require so much less of our laws than we do of our code. But increasingly, civil society IS being automated, particularly inside governments. And the disconnect between what the laws are and what the machines need them to be is a huge issue. We cannot pretend that laws don't need to be automated. They plainly do.\n\nJimmy absolutely nails it. There is no absence of ambiguity with code, it is just intentional. And the interesting parallel to that is that intentional ambiguity in law is considered valuable, accidental ambiguity is not.\n\nWhich gets to the idea that we are treating law as virtuous for requiring interpretation and having so much ambiguity, when that is not the case. Clarity and fairness are better than ambiguity and the right of appeal. Needing to appeal is a failure mode. If it were not possible, that would be awful. But that doesn't mean we should want more of it.\n\nCode is different in degree from law, yes, but so is the way we use it. No one user tests a law. No one debugs a law. The people who write laws are not talked with their maintenance, or responsible for errors. Code is different, but that is only the tool. The processes in which that tool is used are also different, and designed to address exactly the risks he is addressing.\n\nHe seems obsessed with what we can do to programming in order to fix the problems with putting laws into code. He seems oblivious of or indifferent to all the ways that we can improve laws by using the code we already have.\n\nThe question is not how do we avoid the strong legalistic effect of our code. The question is under what circumstances is that risk appropriately mitigated and worth adopting?\n\nAnd this is where it gets down to brass tacks, for me. The legal system sucks. Most people who need help can't get it. Governments are overwhelmed and underfunded. And raising this spectre of strong legalism in code, while it has the intent of protecting people from harm, is actually being used by -among other parties- a protectionist legal profession to argue directly against one of the most helpful things we could do right now, which is automated legal harm reduction. An automated system can literally be only better than nothing, and justified on that basis, because nothing is what so many people actually have. \n\nThese arguments about the rules of law and democracy are being used to stifle efforts to get real people real help with real problems because of effectively imaginary risks, or risks we already know how to mitigate.\n\nAnd the horses are so far gone from the barn, they have forgotten it. Governments of sheer necessity are automating laws constantly. Those of us who call for rules as code are merely asking that they do it more consciously, and reusably, with tools designed for the task. \n\nDoes programming need to change to mitigate these risks effectively? A little. We need tools that are accessible to a much wider variety of people, that have a far smaller semantic gap between the natural language expression of the rule and the computer language expression of the rule, tools that are designed to facilitate human validation of those encodings, languages that are inherently explainable, with sophisticated reasoning, that cite their sources, that name the person whose legal interpretation was modeled, that are accessible, open source, and trustworthy.  And those tools needed to be possible to use to test and validate anything else we might like to reduce the risk of. So we don't need to change all of programming, but we do need to add to it.",
        "user": "U02U0AS3J49",
        "ts": "1688435978.605269",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7zD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The comparison of how code is interpreted and executed and how law is interpreted and executed has parallels. But what people are actually proposing to do has nothing to do with executing law programmatically. The system cannot be so easily replaced. Cryptomaximalists exist, but they are the only version of the problem he is describing that actually does exist. Nowhere else is the thing he is describing even possible, much less extant.\n\nThe idea that code is dangerous because it can be used to turn norms into laws is true, but only inside the context of non legalist structures, which means the danger is mitigated. And it is not unique to code. Policies that are blindly followed do the same thing. Laws themselves are a hardening of policy intents in that way. Contracts are a hardening of agreements, too. To the extent that code is different from these other hardenings, it is a matter of degree, because of the risk of doing the wrong thing faster, or more automatically, because of a lack of context, or human in the loop.\n\n\"Speed of execution of code prevents the possibility of reevaluating it's terms.\" That is it's virtue. It is not without a concomitant risk that we are doing the wrong thing, but faster. But doing the wrong thing faster is an inherent risk that is mitigated by basically all of software development. You cannot take the quality of laws we have now, and assume that they will be automated as-is. Not only is that a terrible idea that no one would support, (not even the cryptomaximalists think we should just automate contracts as they currently are) it is quite literally impossible to do.  Natural language are libraries that get imported implicitly into every law and contract, and when you try to encode them, you discover you can't without requiring it because of the absence of a natural language library, among many many other issues. \n\nThe idea \"you have no appeal\" of code is true only if you live inside the computer. In reality, the software is owned and used by someone who can be sued. When someone stole a bunch of Bitcoin from an online contract, they were sued.\n\nWe are also taking the ex post necessity of the legal system and treating it as a virtue. The fact that you have to sue someone and ask a judge to interpret a contact is not a feature. Requiring things to go bad first is an efficiency method that we arrived at because most things go fine, and most things that don't get sorted, and it's only the remainder that actually require attention from the system, which has limited resources. \n\nDemocracy and rule of law does not arise by virtue of the availability of a referee in the absence of agreement. That is a pathetic, emaciated view of democracy and the rule of law. It arises from the 99% of cases that never require the attention of a lawyer or judge, too, and far moreso.\n\nThe important distinction between how laws and code are executed is not that one is mechanised and the other is not. It is that one is fault tolerant and self healing while the other is not. Which is why we require so much less of our laws than we do of our code. But increasingly, civil society IS being automated, particularly inside governments. And the disconnect between what the laws are and what the machines need them to be is a huge issue. We cannot pretend that laws don't need to be automated. They plainly do.\n\nJimmy absolutely nails it. There is no absence of ambiguity with code, it is just intentional. And the interesting parallel to that is that intentional ambiguity in law is considered valuable, accidental ambiguity is not.\n\nWhich gets to the idea that we are treating law as virtuous for requiring interpretation and having so much ambiguity, when that is not the case. Clarity and fairness are better than ambiguity and the right of appeal. Needing to appeal is a failure mode. If it were not possible, that would be awful. But that doesn't mean we should want more of it.\n\nCode is different in degree from law, yes, but so is the way we use it. No one user tests a law. No one debugs a law. The people who write laws are not talked with their maintenance, or responsible for errors. Code is different, but that is only the tool. The processes in which that tool is used are also different, and designed to address exactly the risks he is addressing.\n\nHe seems obsessed with what we can do to programming in order to fix the problems with putting laws into code. He seems oblivious of or indifferent to all the ways that we can improve laws by using the code we already have.\n\nThe question is not how do we avoid the strong legalistic effect of our code. The question is under what circumstances is that risk appropriately mitigated and worth adopting?\n\nAnd this is where it gets down to brass tacks, for me. The legal system sucks. Most people who need help can't get it. Governments are overwhelmed and underfunded. And raising this spectre of strong legalism in code, while it has the intent of protecting people from harm, is actually being used by -among other parties- a protectionist legal profession to argue directly against one of the most helpful things we could do right now, which is automated legal harm reduction. An automated system can literally be only better than nothing, and justified on that basis, because nothing is what so many people actually have. \n\nThese arguments about the rules of law and democracy are being used to stifle efforts to get real people real help with real problems because of effectively imaginary risks, or risks we already know how to mitigate.\n\nAnd the horses are so far gone from the barn, they have forgotten it. Governments of sheer necessity are automating laws constantly. Those of us who call for rules as code are merely asking that they do it more consciously, and reusably, with tools designed for the task. \n\nDoes programming need to change to mitigate these risks effectively? A little. We need tools that are accessible to a much wider variety of people, that have a far smaller semantic gap between the natural language expression of the rule and the computer language expression of the rule, tools that are designed to facilitate human validation of those encodings, languages that are inherently explainable, with sophisticated reasoning, that cite their sources, that name the person whose legal interpretation was modeled, that are accessible, open source, and trustworthy.  And those tools needed to be possible to use to test and validate anything else we might like to reduce the risk of. So we don't need to change all of programming, but we do need to add to it."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U0296ACR13M"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6af70cbd-daa0-46d0-ac83-012f8ccf4eb1",
        "type": "message",
        "text": "it isn\u2019t unusual to say that a program was \u201cexecuted.\u201d\n\nlikewise, orders and laws can be executed.\n\nthroughout listening to ya\u2019ll\u2019s discussion, and throughout reading the piece, and throughout reading the responses here, i\u2019ve been trying to figure out how to articulate _something_ about how power is enacted and preserved across laws and programming.\n\ni don\u2019t have a clear idea \u2014 but wanted to nudge the conversation in that direction by asking the question:\n\na state has the power to enforce laws, an individual doesn\u2019t \u2014 not unless they\u2019re backed by the state\n\ndoes this relate to programming in some way?",
        "user": "UMQ6LR9NZ",
        "ts": "1688437533.306469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r+s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it isn\u2019t unusual to say that a program was \u201cexecuted.\u201d\n\nlikewise, orders and laws can be executed.\n\nthroughout listening to ya\u2019ll\u2019s discussion, and throughout reading the piece, and throughout reading the responses here, i\u2019ve been trying to figure out how to articulate "
                            },
                            {
                                "type": "text",
                                "text": "something",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " about how power is enacted and preserved across laws and programming.\n\ni don\u2019t have a clear idea \u2014 but wanted to nudge the conversation in that direction by asking the question:\n\na state has the power to enforce laws, an individual doesn\u2019t \u2014 not unless they\u2019re backed by the state\n\ndoes this relate to programming in some way?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMQ6LR9NZ",
            "ts": "1688471216.000000"
        },
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3e304758-1d03-4a5e-803b-25715f7ec5d7",
        "type": "message",
        "text": "I think there is more to contrast than to compare  Legal power is limited. There is only so much of it. Only one set of laws can be executing in one place at a time. So getting and keeping legal power is important. Code doesn't share that property. There is little to hold power over, because almost nothing is excludable, and almost nothing is mandatory, except by force of law. Sure, programming languages constrain their users. But you can just stop using them, so the constraint is voluntary. Sovereign citizens aside, you can't just opt out of law. Show me a situation where someone is trying to use software to collect and hold power over others, and I'll show you someone who is using a combination of software and law. A license, a contract, a patent, or something.",
        "user": "U02U0AS3J49",
        "ts": "1688458117.912589",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+gA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there is more to contrast than to compare  Legal power is limited. There is only so much of it. Only one set of laws can be executing in one place at a time. So getting and keeping legal power is important. Code doesn't share that property. There is little to hold power over, because almost nothing is excludable, and almost nothing is mandatory, except by force of law. Sure, programming languages constrain their users. But you can just stop using them, so the constraint is voluntary. Sovereign citizens aside, you can't just opt out of law. Show me a situation where someone is trying to use software to collect and hold power over others, and I'll show you someone who is using a combination of software and law. A license, a contract, a patent, or something."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3dc95dbb-42f6-4703-a22f-d99ae52d798e",
        "type": "message",
        "text": "Lovely episode!\n\nRegarding the death of Atom, I have to say... it's been really nice making <https://marketplace.visualstudio.com/items?itemName=TodePond.TodePond-Theme|my own VS Code theme>. It took a long time but it has made it feel more 'my own' (highly recommend putting in the time).\n\nListening makes me think *so much* of Dave Ackley's stuff! He's probably coming from a very different angle, but I think the whole 'robust-first' idea relates a lot. <https://youtu.be/ScYgBxLupAs|This video> would be a fun one to explore. There's loads of<https://youtu.be/7hwO8Q_TyCA| food-for-thought ones> on the channel though (whether you agree or not).\n\nAlso, this episode made me think of the <https://berthub.eu/articles/posts/reverse-engineering-source-code-of-the-biontech-pfizer-vaccine/|RNA vaccine code>! The level of redundancy involved contrasts quite heavily with how I code in my everyday life (for obvious reasons). But it's still code! It was coded with a very different set of values + goals.\n\nRelated to Ivan's address issues, I constantly have trouble with inputting my data on online forms. My gender marker + name is different in different places, which is the same story for many trans people in this country. eg: My health details have to sometimes match hormone levels, sometimes birth sex. There's no allowance for deviation from the 'programmed' rigid boxes that are decreed to be correct. My legal name on my ID + health details is different to my passport. This is what I'm \"supposed to do\" to go through the required legal hoops in this country (it's outside my control - I'd rather keep it simple). If I'm registering for something with a human, I can explain this to them, so my paperwork gets done correctly. But when I'm using an online form, there's no capacity for this. The rigidness has been hard-coded in! And it consistently means that I cause errors and bugs in old+new code systems. Makes me think of people who try to change their legal name to \"null\" to cause trouble :) Just a little anecdote for you all.",
        "user": "U03R0B9U1GD",
        "ts": "1688487414.604199",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TegiT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lovely episode!\n\nRegarding the death of Atom, I have to say... it's been really nice making "
                            },
                            {
                                "type": "link",
                                "url": "https://marketplace.visualstudio.com/items?itemName=TodePond.TodePond-Theme",
                                "text": "my own VS Code theme"
                            },
                            {
                                "type": "text",
                                "text": ". It took a long time but it has made it feel more 'my own' (highly recommend putting in the time).\n\nListening makes me think "
                            },
                            {
                                "type": "text",
                                "text": "so much",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of Dave Ackley's stuff! He's probably coming from a very different angle, but I think the whole 'robust-first' idea relates a lot. "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/ScYgBxLupAs",
                                "text": "This video"
                            },
                            {
                                "type": "text",
                                "text": " would be a fun one to explore. There's loads of"
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/7hwO8Q_TyCA",
                                "text": " food-for-thought ones"
                            },
                            {
                                "type": "text",
                                "text": " on the channel though (whether you agree or not).\n\nAlso, this episode made me think of the "
                            },
                            {
                                "type": "link",
                                "url": "https://berthub.eu/articles/posts/reverse-engineering-source-code-of-the-biontech-pfizer-vaccine/",
                                "text": "RNA vaccine code"
                            },
                            {
                                "type": "text",
                                "text": "! The level of redundancy involved contrasts quite heavily with how I code in my everyday life (for obvious reasons). But it's still code! It was coded with a very different set of values + goals.\n\nRelated to Ivan's address issues, I constantly have trouble with inputting my data on online forms. My gender marker + name is different in different places, which is the same story for many trans people in this country. eg: My health details have to sometimes match hormone levels, sometimes birth sex. There's no allowance for deviation from the 'programmed' rigid boxes that are decreed to be correct. My legal name on my ID + health details is different to my passport. This is what I'm \"supposed to do\" to go through the required legal hoops in this country (it's outside my control - I'd rather keep it simple). If I'm registering for something with a human, I can explain this to them, so my paperwork gets done correctly. But when I'm using an online form, there's no capacity for this. The rigidness has been hard-coded in! And it consistently means that I cause errors and bugs in old+new code systems. Makes me think of people who try to change their legal name to \"null\" to cause trouble :) Just a little anecdote for you all."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c43aa7ca-65bf-4325-ad38-59e8d4993337",
        "type": "message",
        "text": "&gt;  But you can just stop using them\nI don't know, I feel pretty stuck with the languages I use sometimes - for various reasons :)",
        "user": "U03R0B9U1GD",
        "ts": "1688487462.492669",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hs+F",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " But you can just stop using them"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know, I feel pretty stuck with the languages I use sometimes - for various reasons :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8be17835-d63e-417b-9948-119f7fb9fa52",
        "type": "message",
        "text": "Fair. What I mean is that if you did stop using them, no one with any state-sponsored monopoly over violent persuasion would have anything to say about it. Which is admittedly a very low bar.",
        "user": "U02U0AS3J49",
        "ts": "1688495326.220549",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=/fxE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fair. What I mean is that if you did stop using them, no one with any state-sponsored monopoly over violent persuasion would have anything to say about it. Which is admittedly a very low bar."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "70a184d7-957b-40b9-a11b-def1666e7392",
        "type": "message",
        "text": "I haven't finished the podcast yet nor following this whole discussion, and I did <https://search.futureofcoding.org/history/?fromDate=2023-04-03&amp;toDate=2023-04-09&amp;channel=linking-together&amp;filter=#2023-04-06T13:09:25.555Z|share this article previously> but it connects here pretty well. My take-away from the article is that software, so far, has not had the expected impact on overall productivity, and that the challenge is that it is  _hard_ and  _expensive_ to model the real world within the constraints of programming.\n\nThe article: <https://web.archive.org/web/20221206161753/https://austinvernon.eth.link/blog/softwareisprocess.html>\n\nSeems not unlike the legalism discussed in the podcast, but I'll keep listening. :smile:\n\n(edit: fixed links)",
        "user": "U04E5QAD6DD",
        "ts": "1688563760.419879",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D3y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't finished the podcast yet nor following this whole discussion, and I did "
                            },
                            {
                                "type": "link",
                                "url": "https://search.futureofcoding.org/history/?fromDate=2023-04-03&toDate=2023-04-09&channel=linking-together&filter=#2023-04-06T13:09:25.555Z",
                                "text": "share this article previously"
                            },
                            {
                                "type": "text",
                                "text": " but it connects here pretty well. My take-away from the article is that software, so far, has not had the expected impact on overall productivity, and that the challenge is that it is  "
                            },
                            {
                                "type": "text",
                                "text": "hard",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and  "
                            },
                            {
                                "type": "text",
                                "text": "expensive",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to model the real world within the constraints of programming.\n\nThe article: "
                            },
                            {
                                "type": "link",
                                "url": "https://web.archive.org/web/20221206161753/https://austinvernon.eth.link/blog/softwareisprocess.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSeems not unlike the legalism discussed in the podcast, but I'll keep listening. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(edit: fixed links)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U04E5QAD6DD",
            "ts": "1688563898.000000"
        },
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "65c265cd-84b4-4993-a40c-498598b68f57",
        "type": "message",
        "text": "<@U02U0AS3J49>\nThank you for the detailed feedback! I think you've made some excellent points here. And maybe as an outsider I'm conflating some things you see as related. Personally I see your project of encoding laws in a computationally understandable way as a bit of a different concern than what we were talking about in this essay. I mean they are definitely related, but nothing we talked about was meant as an argument against that project. Having worked to encode complicated medical rules in a rete based rules engine, I definitely appreciate the difficulty involved, but also the benefits it can bring.\n\nTo me the most interesting part of this essay is focusing on exactly what you are talking about below:\n\n&gt; Show me a situation where someone is trying to use software to collect and hold power over others, and I'll show you someone who is using a combination of software and law. A license, a contract, a patent, or something.\nAs software engineers, we often make systems that rely on the backdrop of the law to enforce things. But the way in which we enforce our side of those terms can be incredibly legalistic and harmful to users.\n\nFor example, recently a number of youtubers big and small have had their ability to monetize completely removed because of \"suspicious traffic\". Basically they have been accused of ad fraud. From what I've seen, even the most connected have had a difficult time solving this issue.\n\nHere I see a classic case of the kinds of confusions we as software engineers make. What we are interested in is ad fraud (in this case). We want to stop users who are created fake bot traffic from benefitting from it. But what we actually have access to in our software systems is not whether or not someone committed ad fraud. We have numbers and correlations. But use these as if we are getting at truth. We build systems for which there is no recourse.\n\nI did what to pull out a few things you said below, but if I missed something you'd want me to comment on, happy to.\n\n&gt; But what people are actually proposing to do has nothing to do with executing law programmatically.\nYeah, I don't think he is claiming that. But if we were unclear on that point, that's our bad.\n\n&gt; The idea that code is dangerous because it can be used to turn norms into laws is true, but only inside the context of non legalist structures, which means the danger is mitigated. And it is not unique to code.\nMy personal concern is that codes legalism leaks into the way we think about systems. Code's legalism is seen as a virtue to be emulated. Ambiguity (even intentional) and context-sensitivity are seen as bad. The distinction between what we are trying to achieve and the measurement of that achievement are conflated. (OKRs are a terrible idea)\n\n&gt; \"Speed of execution of code prevents the possibility of reevaluating it's terms.\" That is it's virtue. It is not without a concomitant risk that we are doing the wrong thing, but faster. But doing the wrong thing faster is an inherent risk that is mitigated by basically all of software development. You cannot take the quality of laws we have now, and assume that they will be automated as-is.\nI mean, we do that in some ways. Look at the DMCA processes our youtube content. The copywrite strikes are automated, the demonetization is automated, many times even the appeals are automated. Obviously no one thinks we are going to take all our laws and automate them. But it's hard to see how not being able to reevaluate the terms is a virtue. Getting the terms right is the hardest part about software and I don't know any system that gets those terms right from the outset.\n\n&gt; We are also taking the ex post necessity of the legal system and treating it as a virtue. The fact that you have to sue someone and ask a judge to interpret a contact is not a feature.\nYeah, I don't think anyone thinks the fact that you have to sue someone is a virtue. What is a virtue is that you have the freedom to do actions that you believe are or should be lawful and if you are arrested/fined you have the ability to appeal that decision. Contrast this with \"cursing\" in club penguin for example. You are immediately booted, you have no recourse. (I don't actually know if there was/is an appeal process in club penguin).\n\n&gt; We cannot pretend that laws don't need to be automated. They plainly do.\nYeah, I agree. I see that as the point of this paper. How we can automate things in a good way? What changes can we make to make sure our automations don't have legalistic problems?\n\n&gt; And raising this spectre of strong legalism in code, while it has the intent of protecting people from harm, is actually being used by -among other parties- a protectionist legal profession to argue directly against one of the most helpful things we could do right now, which is automated legal harm reduction. An automated system can literally be only better than nothing, and justified on that basis, because nothing is what so many people actually have.\nI can definitely see how this would happen. And I can see how it would be frustrating from the position you are in. For what is worth, I don't see Diver doing this, but instead proposing ways in which we can make these systems well. That's one of the things I like about his work, it isn't an argument against using code, it is a discussion about how to do it well.\n\n&gt; Sure, programming languages constrain their users. But you can just stop using them, so the constraint is voluntary. \n&gt; Fair. What I mean is that if you did stop using them, no one with any state-sponsored monopoly over violent persuasion would have anything to say about it. Which is admittedly a very low bar.\nYeah, but other people using software that you didn't explicitly decide to use can still ruin people's lives without \"state-sponsored monopoly over violent persuasion\". Imagine the company I talked about that screens applications using machine learning is used by all fast-food restaurants in your area. Imagine these are the jobs you are qualified for, but the ML model has decided you will quit the job too early. Of course, you can go try and find a job elsewhere. Of course, a similar situation could happen due to human bias. But there is something very unsettling about this version of the future. The ML model can't be convinced, it can't provide reasons. It isn't a rational process whatsoever.\n\nI think these are real harms we ought to pay attention too. I think saying people can not use software they don't like is just like saying people can move if they don't like their local laws. Both statements are generally true, but no helpful for many people.\n\n&gt; We need tools that are accessible to a much wider variety of people, that have a far smaller semantic gap between the natural language expression of the rule and the computer language expression of the rule, tools that are designed to facilitate human validation of those encodings, languages that are inherently explainable, with sophisticated reasoning, that cite their sources, that name the person whose legal interpretation was modeled, that are accessible, open source, and trustworthy.  And those tools needed to be possible to use to test and validate anything else we might like to reduce the risk of. So we don't need to change all of programming, but we do need to add to it.\nThis sounds super interesting. If you have any papers that argument against what this paper argued for and gives what you see as the alternative prospective, super interested in that. No promise we will do it on the podcast, but definitely interested. Ideally a paper a bit less in the technical details of how to do these things with code, and more arguing for their applications.\n\nIn general, I think what you've said here doesn't feel too much at odds with what I think we were trying to explore. I do think software has a role to play. I do think we need to automate things. I do totally get how these sorts of arguments might be used against projects like yours and that must suck. I don't think that's the aim of the argument here. You are definitely right that there is no discussion of how to use code to improve laws. I'd love to explore that further and am super happy there are people like you working on that. If you can help point us in that direction for some readings, I'd love to take a look :)",
        "user": "UK3LH8CF5",
        "ts": "1688573168.521829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xhIvC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": "\nThank you for the detailed feedback! I think you've made some excellent points here. And maybe as an outsider I'm conflating some things you see as related. Personally I see your project of encoding laws in a computationally understandable way as a bit of a different concern than what we were talking about in this essay. I mean they are definitely related, but nothing we talked about was meant as an argument against that project. Having worked to encode complicated medical rules in a rete based rules engine, I definitely appreciate the difficulty involved, but also the benefits it can bring.\n\nTo me the most interesting part of this essay is focusing on exactly what you are talking about below:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Show me a situation where someone is trying to use software to collect and hold power over others, and I'll show you someone who is using a combination of software and law. A license, a contract, a patent, or something."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAs software engineers, we often make systems that rely on the backdrop of the law to enforce things. But the way in which we enforce our side of those terms can be incredibly legalistic and harmful to users.\n\nFor example, recently a number of youtubers big and small have had their ability to monetize completely removed because of \"suspicious traffic\". Basically they have been accused of ad fraud. From what I've seen, even the most connected have had a difficult time solving this issue.\n\nHere I see a classic case of the kinds of confusions we as software engineers make. What we are interested in is ad fraud (in this case). We want to stop users who are created fake bot traffic from benefitting from it. But what we actually have access to in our software systems is not whether or not someone committed ad fraud. We have numbers and correlations. But use these as if we are getting at truth. We build systems for which there is no recourse.\n\nI did what to pull out a few things you said below, but if I missed something you'd want me to comment on, happy to.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But what people are actually proposing to do has nothing to do with executing law programmatically."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, I don't think he is claiming that. But if we were unclear on that point, that's our bad.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The idea that code is dangerous because it can be used to turn norms into laws is true, but only inside the context of non legalist structures, which means the danger is mitigated. And it is not unique to code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nMy personal concern is that codes legalism leaks into the way we think about systems. Code's legalism is seen as a virtue to be emulated. Ambiguity (even intentional) and context-sensitivity are seen as bad. The distinction between what we are trying to achieve and the measurement of that achievement are conflated. (OKRs are a terrible idea)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Speed of execution of code prevents the possibility of reevaluating it's terms.\" That is it's virtue. It is not without a concomitant risk that we are doing the wrong thing, but faster. But doing the wrong thing faster is an inherent risk that is mitigated by basically all of software development. You cannot take the quality of laws we have now, and assume that they will be automated as-is."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI mean, we do that in some ways. Look at the DMCA processes our youtube content. The copywrite strikes are automated, the demonetization is automated, many times even the appeals are automated. Obviously no one thinks we are going to take all our laws and automate them. But it's hard to see how not being able to reevaluate the terms is a virtue. Getting the terms right is the hardest part about software and I don't know any system that gets those terms right from the outset.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We are also taking the ex post necessity of the legal system and treating it as a virtue. The fact that you have to sue someone and ask a judge to interpret a contact is not a feature."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, I don't think anyone thinks the fact that you have to sue someone is a virtue. What is a virtue is that you have the freedom to do actions that you believe are or should be lawful and if you are arrested/fined you have the ability to appeal that decision. Contrast this with \"cursing\" in club penguin for example. You are immediately booted, you have no recourse. (I don't actually know if there was/is an appeal process in club penguin).\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We cannot pretend that laws don't need to be automated. They plainly do."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, I agree. I see that as the point of this paper. How we can automate things in a good way? What changes can we make to make sure our automations don't have legalistic problems?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And raising this spectre of strong legalism in code, while it has the intent of protecting people from harm, is actually being used by -among other parties- a protectionist legal profession to argue directly against one of the most helpful things we could do right now, which is automated legal harm reduction. An automated system can literally be only better than nothing, and justified on that basis, because nothing is what so many people actually have."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI can definitely see how this would happen. And I can see how it would be frustrating from the position you are in. For what is worth, I don't see Diver doing this, but instead proposing ways in which we can make these systems well. That's one of the things I like about his work, it isn't an argument against using code, it is a discussion about how to do it well.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure, programming languages constrain their users. But you can just stop using them, so the constraint is voluntary. \nFair. What I mean is that if you did stop using them, no one with any state-sponsored monopoly over violent persuasion would have anything to say about it. Which is admittedly a very low bar."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, but other people using software that you didn't explicitly decide to use can still ruin people's lives without \"state-sponsored monopoly over violent persuasion\". Imagine the company I talked about that screens applications using machine learning is used by all fast-food restaurants in your area. Imagine these are the jobs you are qualified for, but the ML model has decided you will quit the job too early. Of course, you can go try and find a job elsewhere. Of course, a similar situation could happen due to human bias. But there is something very unsettling about this version of the future. The ML model can't be convinced, it can't provide reasons. It isn't a rational process whatsoever.\n\nI think these are real harms we ought to pay attention too. I think saying people can not use software they don't like is just like saying people can move if they don't like their local laws. Both statements are generally true, but no helpful for many people.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We need tools that are accessible to a much wider variety of people, that have a far smaller semantic gap between the natural language expression of the rule and the computer language expression of the rule, tools that are designed to facilitate human validation of those encodings, languages that are inherently explainable, with sophisticated reasoning, that cite their sources, that name the person whose legal interpretation was modeled, that are accessible, open source, and trustworthy.  And those tools needed to be possible to use to test and validate anything else we might like to reduce the risk of. So we don't need to change all of programming, but we do need to add to it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis sounds super interesting. If you have any papers that argument against what this paper argued for and gives what you see as the alternative prospective, super interested in that. No promise we will do it on the podcast, but definitely interested. Ideally a paper a bit less in the technical details of how to do these things with code, and more arguing for their applications.\n\nIn general, I think what you've said here doesn't feel too much at odds with what I think we were trying to explore. I do think software has a role to play. I do think we need to automate things. I do totally get how these sorts of arguments might be used against projects like yours and that must suck. I don't think that's the aim of the argument here. You are definitely right that there is no discussion of how to use code to improve laws. I'd love to explore that further and am super happy there are people like you working on that. If you can help point us in that direction for some readings, I'd love to take a look :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ccf2d159-bcc9-405a-ab0d-24f9f8c31210",
        "type": "message",
        "text": "For clarity, you guys did great, it's the paper I'm giving feedback on. And I'm admittedly biased.\n\nI would mind less if he was responding to the automation of law in software. But he claims to be responding to \"Rules as Code.\" \"Rules as Code\" is not \"software\" is not \"automation*. He sees Rules as Code as \"let's automate our laws more with software\", when in fact it is \"let's automate our laws better with better software\", and is aimed precisely at many of the evils he is warning against.\n\nCode would make for terrible law. But \"Rules as Code\" doesn't call for that. What we should want is better laws and better code, and rules as code is a way to get both. \n\nYouTube can automate unfairly. But is that a result of making code law? No. It is an automation of the Terms of Service. If it is unfair, but within the terms of the contract you agreed to with YouTube, then it is an automation of an unfair legal rule. Or, if it is an unfair automation of a fair contract, you can sue under the contract.\n\nCode is dangerous when it impacts people negatively. That is not to do with law. The fact that you can contemplate code as a mini legalist dictatorship inside the machine is cute, I guess, but not helpful. If you come to believe encoding laws is inherently unavoidably negative, you have been lied to. If you don't, no other prescriptions logically arise from the analogy, and all the real solutions to the problem arise without it.\n\nI'm not aware of any papers arguing in this direction other than parts of my LLM thesis, and that is not a great paper. I have a small website where I post thoughts along these lines, in the hope that there might eventually be enough of them to form a collection worth reading. Happy to pass along those links if you are interested.",
        "user": "U02U0AS3J49",
        "ts": "1688593592.361709",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WR/Lt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For clarity, you guys did great, it's the paper I'm giving feedback on. And I'm admittedly biased.\n\nI would mind less if he was responding to the automation of law in software. But he claims to be responding to \"Rules as Code.\" \"Rules as Code\" is not \"software\" is not \"automation*. He sees Rules as Code as \"let's automate our laws more with software\", when in fact it is \"let's automate our laws better with better software\", and is aimed precisely at many of the evils he is warning against.\n\nCode would make for terrible law. But \"Rules as Code\" doesn't call for that. What we should want is better laws and better code, and rules as code is a way to get both. \n\nYouTube can automate unfairly. But is that a result of making code law? No. It is an automation of the Terms of Service. If it is unfair, but within the terms of the contract you agreed to with YouTube, then it is an automation of an unfair legal rule. Or, if it is an unfair automation of a fair contract, you can sue under the contract.\n\nCode is dangerous when it impacts people negatively. That is not to do with law. The fact that you can contemplate code as a mini legalist dictatorship inside the machine is cute, I guess, but not helpful. If you come to believe encoding laws is inherently unavoidably negative, you have been lied to. If you don't, no other prescriptions logically arise from the analogy, and all the real solutions to the problem arise without it.\n\nI'm not aware of any papers arguing in this direction other than parts of my LLM thesis, and that is not a great paper. I have a small website where I post thoughts along these lines, in the hope that there might eventually be enough of them to form a collection worth reading. Happy to pass along those links if you are interested."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "fc83246f-5252-407f-86ae-8b41cbf48736",
        "type": "message",
        "text": "The reason that his advice is weak, is because he has precluded an actual solution to the problem by conflating it with the problem itself. Rules as Code should have been the prescription, not the problem.",
        "user": "U02U0AS3J49",
        "ts": "1688593797.428299",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CLKA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The reason that his advice is weak, is because he has precluded an actual solution to the problem by conflating it with the problem itself. Rules as Code should have been the prescription, not the problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ea818fee-54a4-40ac-840d-7177964e9d99",
        "type": "message",
        "text": "Now that I've finished with the episode \u2014 I really enjoyed it!\n\nI'm curious what examples \u2014 both specific implementations and of categories \u2014 of less-legalistic languages people are aware of?\n\nIn terms of syntax, LISP, SmallTalk, and Forth seem to be on the minimal-syntax-so-you-build-your-own-language train, at least to some degree.\n\nIn terms of exposing the innards of the program (like Jimmy's Black example \u2014 do you have a link?), HyperCard, SmallTalk, and\u2026I guess the web, at least the early web, did this. Perhaps not all the way down, but a lot more than most.\n\nWhat other categories of less-legalism are there?",
        "user": "U04E5QAD6DD",
        "ts": "1688598090.097889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SDD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now that I've finished with the episode \u2014 I really enjoyed it!\n\nI'm curious what examples \u2014 both specific implementations and of categories \u2014 of less-legalistic languages people are aware of?\n\nIn terms of syntax, LISP, SmallTalk, and Forth seem to be on the minimal-syntax-so-you-build-your-own-language train, at least to some degree.\n\nIn terms of exposing the innards of the program (like Jimmy's Black example \u2014 do you have a link?), HyperCard, SmallTalk, and\u2026I guess the web, at least the early web, did this. Perhaps not all the way down, but a lot more than most.\n\nWhat other categories of less-legalism are there?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02U0AS3J49",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f4ebae98-3617-432c-8345-2afea7074490",
        "type": "message",
        "text": "One personal belief I have is that we aren't going to get to a less legalistic programming by applying legalism. Although, honestly, I'm not sure I want to use legalism here. I think that's actually a bit too specific. Lorraine Daston makes the distinction between Thick and Thin rules in her book \"Rules: A Short History of What We Live By\". (Podcast about it <https://newbooksnetwork.com/lorraine-daston>)\n\nThick rules are those that assume exceptions. They are the rules of thumb. The rules seeking to guide behavior rather than define it. So <@U04E5QAD6DD> when you ask about less legalistic languages, my mind goes not just languages, but ecosystems. What ecosystems recognize exceptions being the norm? Which ecosystems tolerate fuzziness? One that comes to mind is Erlang/Elixir. The attitude that things will fail and we ought to make this first class feels to be in the right direction.\n\nWhat else? Local-first also feels to be on that spectrum. Allowing for the freedom of the user, for the reality that offline exists, that actions might not be in the order we assumed they were in.\n\nI think this also extends to cultural elements. Ecosystems that believe an application of straight-forward, thin rules results in all the qualities we would like will tend towards legalism. I'll let each person decide which groups they believe are doing that :slightly_smiling_face: But I think it is incredibly common in the programming world and something we need to address if we are to make progress. Also, if we want future of coding endeavors to take root. We must be willing to question best practices and make room for opinion and taste.",
        "user": "UK3LH8CF5",
        "ts": "1688750702.640889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qtp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One personal belief I have is that we aren't going to get to a less legalistic programming by applying legalism. Although, honestly, I'm not sure I want to use legalism here. I think that's actually a bit too specific. Lorraine Daston makes the distinction between Thick and Thin rules in her book \"Rules: A Short History of What We Live By\". (Podcast about it "
                            },
                            {
                                "type": "link",
                                "url": "https://newbooksnetwork.com/lorraine-daston"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nThick rules are those that assume exceptions. They are the rules of thumb. The rules seeking to guide behavior rather than define it. So "
                            },
                            {
                                "type": "user",
                                "user_id": "U04E5QAD6DD"
                            },
                            {
                                "type": "text",
                                "text": " when you ask about less legalistic languages, my mind goes not just languages, but ecosystems. What ecosystems recognize exceptions being the norm? Which ecosystems tolerate fuzziness? One that comes to mind is Erlang/Elixir. The attitude that things will fail and we ought to make this first class feels to be in the right direction.\n\nWhat else? Local-first also feels to be on that spectrum. Allowing for the freedom of the user, for the reality that offline exists, that actions might not be in the order we assumed they were in.\n\nI think this also extends to cultural elements. Ecosystems that believe an application of straight-forward, thin rules results in all the qualities we would like will tend towards legalism. I'll let each person decide which groups they believe are doing that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " But I think it is incredibly common in the programming world and something we need to address if we are to make progress. Also, if we want future of coding endeavors to take root. We must be willing to question best practices and make room for opinion and taste."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1688402564.602729",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "star",
                "users": [
                    "U03R0B9U1GD",
                    "U04E5QAD6DD"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]