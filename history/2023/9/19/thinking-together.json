[
    {
        "client_msg_id": "d76e623d-e46a-4409-bdf0-546c2f3ced97",
        "type": "message",
        "text": "<@UC2A2ARPT> and <@U05SU27S1M2> mentioned \u201c...hand drawn programming environments...\u201c.  The first thing that I think of when I hear this is \u201cwhiteboards\u201d.  What are the dimensions involved in whiteboards? x/y/t.  T goes forwards (e.g. adding new details by drawing them in over time) and backwards (erasing parts of drawings).  Iteration. Scrubbing.",
        "user": "UGWUJUZHT",
        "ts": "1695086681.821979",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qx1Hh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U05SU27S1M2"
                            },
                            {
                                "type": "text",
                                "text": " mentioned \u201c...hand drawn programming environments...\u201c.  The first thing that I think of when I hear this is \u201cwhiteboards\u201d.  What are the dimensions involved in whiteboards? x/y/t.  T goes forwards (e.g. adding new details by drawing them in over time) and backwards (erasing parts of drawings).  Iteration. Scrubbing."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1695089470.000000"
        },
        "thread_ts": "1695086681.821979",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1695206689.883539",
        "reply_users": [
            "UC2A2ARPT",
            "U05SU27S1M2",
            "UA14TGLTC",
            "UGWUJUZHT"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "EE345C2B-C4AD-495D-952A-FC09BFAB1DA3",
        "type": "message",
        "text": "My current experience is that polar coordinates  are more meaningfully expressive than Cartesian. But is suppose it depends on what you're trying to do. Time, for sure.",
        "user": "UC2A2ARPT",
        "ts": "1695104209.736899",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CB6zR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My current experience is that polar coordinates  are more meaningfully expressive than Cartesian"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But is suppose it depends on what you're trying to do"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Time, for sure"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ff4eb0bb-cd37-4332-9255-ea9beaf0eae4",
        "type": "message",
        "text": "I like to make mostly stateless systems so that time takes care of itself. You can also treat qualities like the spikiness/compactness etc of shapes as more dimensions, and calculate things based on proximity to each other rather than a global x/y. I am working with a whiteboard tabletop, adding a plotter for feedback.",
        "user": "U05SU27S1M2",
        "ts": "1695106380.268119",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kCVY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like to make mostly stateless systems so that time takes care of itself. You can also treat qualities like the spikiness/compactness etc of shapes as more dimensions, and calculate things based on proximity to each other rather than a global x/y. I am working with a whiteboard tabletop, adding a plotter for feedback."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "24116542-5E4F-4439-B980-059032CE5264",
        "type": "message",
        "text": "Why on earth, in this era of many-gigabyte machines, don\u2019t all programming languages have a time-travel mode for debugging?",
        "user": "U05PY5AQCA2",
        "ts": "1695145427.272959",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gGlk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why on earth, in this era of many-gigabyte machines, don\u2019t all programming languages have a time-travel mode for debugging?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "reply_count": 13,
        "reply_users_count": 7,
        "latest_reply": "1695428339.428769",
        "reply_users": [
            "U02U0AS3J49",
            "U05PY5AQCA2",
            "UCUSW7WVD",
            "UJBAJNFLK",
            "UKJGU23KP",
            "UA14TGLTC",
            "U05FSHWJER3"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cry",
                "users": [
                    "UA14TGLTC",
                    "U03RE43UR40",
                    "UML4ZEKDK"
                ],
                "count": 3
            },
            {
                "name": "thinking_face",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            },
            {
                "name": "expressionless",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8F004E25-8E83-456C-AE53-A728CA7D3944",
        "type": "message",
        "text": "Turtle graphics for the win!",
        "user": "UA14TGLTC",
        "ts": "1695152705.014769",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MXH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Turtle"
                            },
                            {
                                "type": "text",
                                "text": " graphics for "
                            },
                            {
                                "type": "text",
                                "text": "the win!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c3c5dbed-27c0-48d9-835d-f0c987ac6d99",
        "type": "message",
        "text": "My guess? You can't take a state, and the program, and then  move it one step backwards and expect to get the previous state, because the languages don't have a semantics in that direction in time. So time-travel mode would require a gazillion save files that you could reload whenever you like. And the size of the programs grows to match the available space, so programs run on many-gigabyte machines would need many-terrabyte machines to be able to record that kind of history.",
        "user": "U02U0AS3J49",
        "ts": "1695155024.550739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "teJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My guess? You can't take a state, and the program, and then  move it one step backwards and expect to get the previous state, because the languages don't have a semantics in that direction in time. So time-travel mode would require a gazillion save files that you could reload whenever you like. And the size of the programs grows to match the available space, so programs run on many-gigabyte machines would need many-terrabyte machines to be able to record that kind of history."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "8AD93CDE-0B4D-495B-8634-80F7988DDA57",
        "type": "message",
        "text": "I would be happy with something \u201crelatively simple\u201d: all in memory; keep a list of state value creations, always create new values rather than updating old ones, and turn off the GC. ",
        "user": "U05PY5AQCA2",
        "ts": "1695155790.410059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O/T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would be happy with something \u201crelatively simple\u201d: all in memory; keep a list of state value creations, always create new values rather than updating old ones, and turn off the GC. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "C38ED73D-4F26-48A4-9B90-E88E4A00B519",
        "type": "message",
        "text": "Ideally, let me have a start-stop call so I can reverse only certain parts of the code.",
        "user": "U05PY5AQCA2",
        "ts": "1695157443.826949",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DCuT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ideally, let me have a start-stop call so I can reverse only certain parts of the code."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "365A06D0-7F62-4D0F-9F4D-0878C76D9050",
        "type": "message",
        "text": "Yes, you would run out of memory. But you\u2019d use it just through some crucial set of calls and then hit a breakpoint.",
        "user": "U05PY5AQCA2",
        "ts": "1695157470.345089",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gnX1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, you would run out of memory. But you\u2019d use it just through some crucial set of calls and then hit a breakpoint."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "2e145ce6-f6d2-4cae-995e-9f2e0938d650",
        "type": "message",
        "text": "A few years ago I built a computing stack up from machine code that I debugged by emitting a detailed log of every instruction executed and register state at every instruction -- and then browsing the resulting log in a manner akin to time travel.\n\nI spent a long time debugging all sorts of programs with this infrastructure, that requires all of a few hundred lines of code.\n\nIf you care to try it out, these instructions should still work: <https://github.com/akkartik/mu/blob/main/tools/browse_trace.readme.md|https://github.com/akkartik/mu/blob/main/tools/browse_trace.readme.md>",
        "user": "UCUSW7WVD",
        "ts": "1695179280.060379",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NA463",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A few years ago I built a computing stack up from machine code that I debugged by emitting a detailed log of every instruction executed and register state at every instruction -- and then browsing the resulting log in a manner akin to time travel.\n\nI spent a long time debugging all sorts of programs with this infrastructure, that requires all of a few hundred lines of code.\n\nIf you care to try it out, these instructions should still work: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu/blob/main/tools/browse_trace.readme.md",
                                "text": "https://github.com/akkartik/mu/blob/main/tools/browse_trace.readme.md"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1695179307.000000"
        },
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "12f91f91-e70c-4009-9c03-a6d56d3b8576",
        "type": "message",
        "text": "A generic time-travel debugger can be problematic because of resource requirements. So... how about a framework that lets developers add context-specific time-travelling debugging to their code, as a form of instrumentation?\n\nI have done this in Pharo Smalltalk (copying the practice of others, I didn't invent anything in this space), using the <https://github.com/pharo-project/pharo-beacon|Beacon> library. It implements an in-memory logging system, which in an image-based language is usually all you need in terms of logging. You can add arbitrary Smalltalk objects to your log. Including stackframes. Which you can inspect in a debugger later on (or process with your own code if that's more convenient).\n\nThis isn't quite the same as time-travel because the Smalltalk image consists of mutable objects, to which stack frames only hold references. So if you have global mutable state, you have to add snapshots of it to the log as well, and then it gets messy. If you are careful with globale and/or long-lived mutable state in your overall design, which is good advice in Smalltalk anyway, it's rarely an issue in practice.",
        "user": "UJBAJNFLK",
        "ts": "1695190961.612649",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bdk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A generic time-travel debugger can be problematic because of resource requirements. So... how about a framework that lets developers add context-specific time-travelling debugging to their code, as a form of instrumentation?\n\nI have done this in Pharo Smalltalk (copying the practice of others, I didn't invent anything in this space), using the "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/pharo-project/pharo-beacon",
                                "text": "Beacon"
                            },
                            {
                                "type": "text",
                                "text": " library. It implements an in-memory logging system, which in an image-based language is usually all you need in terms of logging. You can add arbitrary Smalltalk objects to your log. Including stackframes. Which you can inspect in a debugger later on (or process with your own code if that's more convenient).\n\nThis isn't quite the same as time-travel because the Smalltalk image consists of mutable objects, to which stack frames only hold references. So if you have global mutable state, you have to add snapshots of it to the log as well, and then it gets messy. If you are careful with globale and/or long-lived mutable state in your overall design, which is good advice in Smalltalk anyway, it's rarely an issue in practice."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1FBB0AEA-2BE9-47C3-97A2-A7023CE68789",
        "type": "message",
        "text": "Hmm.\n\nMy language of interest right now is Dart. They\u2019re about to add macros. I wonder\u2026",
        "user": "U05PY5AQCA2",
        "ts": "1695191289.973519",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vzkg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm.\n\nMy language of interest right now is Dart. They\u2019re about to add macros. I wonder\u2026"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "07f816d9-39c4-4590-8fa8-b08da87f7259",
        "type": "message",
        "text": "That's the idea of what <@UE1JQM9HQ> calls <https://moldabledevelopment.com/|Moldable Development> : don't give developers fish but teach them fishing. Let them write their own context-dependent development tools, which are both simpler and more powerful than generic ones.\n\nQuoting Christopher Alexander (\"The timeless way of building\"):\n\n&gt; So long as I build for myself, the patterns I use will be simple, and human, and full of feeling, because I understand my situation. But as soon as a few people begin to build for \"the many,\"  their patterns about what is needed become abstract; no matter how well-meaning they are, their ideas gradually get out of touch with reality, because they are not faced daily with the living examples of what the patterns say.",
        "user": "UJBAJNFLK",
        "ts": "1695191331.690199",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nhYmq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's the idea of what "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " calls "
                            },
                            {
                                "type": "link",
                                "url": "https://moldabledevelopment.com/",
                                "text": "Moldable Development"
                            },
                            {
                                "type": "text",
                                "text": " : don't give developers fish but teach them fishing. Let them write their own context-dependent development tools, which are both simpler and more powerful than generic ones.\n\nQuoting Christopher Alexander (\"The timeless way of building\"):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So long as I build for myself, the patterns I use will be simple, and human, and full of feeling, because I understand my situation. But as soon as a few people begin to build for \"the many,\"  their patterns about what is needed become abstract; no matter how well-meaning they are, their ideas gradually get out of touch with reality, because they are not faced daily with the living examples of what the patterns say."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://moldabledevelopment.com/",
                "id": 1,
                "original_url": "https://moldabledevelopment.com/",
                "fallback": "Moldable Development",
                "text": "Moldable development",
                "title": "Moldable Development",
                "title_link": "https://moldabledevelopment.com/",
                "service_name": "moldabledevelopment.com"
            }
        ],
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2",
        "reactions": [
            {
                "name": "bow",
                "users": [
                    "UE1JQM9HQ"
                ],
                "count": 1
            },
            {
                "name": "boom",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "19CB0BE0-CA5B-4AF9-B153-55C2F1F9F609",
        "type": "message",
        "text": "All this aside, it seems a relatively simple way to raise developer efficiency. So why isn\u2019t something for this shipped with every language, either as a built-in feature or as a library?",
        "user": "U05PY5AQCA2",
        "ts": "1695192171.150209",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C/dN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All this aside, it seems a relatively simple way to raise developer efficiency. So why isn\u2019t something for this shipped with every language, either as a built-in feature or as a library?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "d7891d1e-ab68-43db-ae0b-a84dab6276c4",
        "type": "message",
        "text": "Mindset and lack of awareness. Why implement a feature that nobody asks for, and whose utility potential clients don't even recognize when it's offered to them?",
        "user": "UJBAJNFLK",
        "ts": "1695197785.455949",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GqAT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mindset and lack of awareness. Why implement a feature that nobody asks for, and whose utility potential clients don't even recognize when it's offered to them?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "5BCC9FDE-DCEE-472C-A0B5-5C5D320BC3E3",
        "type": "message",
        "text": "JetBrains has been implementing forms of speculation\u2014if they detect a method doesn\u2019t have side effects they\u2019ll show the result of evaluating it before you reach it. The reaction was really positive.\n\nI don\u2019t think they\u2019ll bet the company on it, but I\u2019m confident if they could implement time travel without having to switch languages/re-engineer everything they would. ",
        "user": "UKJGU23KP",
        "ts": "1695204521.695079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mhlx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "JetBrains has been implementing forms of speculation"
                            },
                            {
                                "type": "text",
                                "text": "\u2014"
                            },
                            {
                                "type": "text",
                                "text": "if they detect a method "
                            },
                            {
                                "type": "text",
                                "text": "doesn\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " have side effects "
                            },
                            {
                                "type": "text",
                                "text": "they\u2019ll"
                            },
                            {
                                "type": "text",
                                "text": " show the result of evaluating it before you reach it. The reaction was really positive.\n\nI "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " think "
                            },
                            {
                                "type": "text",
                                "text": "they\u2019ll"
                            },
                            {
                                "type": "text",
                                "text": " bet the company on it, but I\u2019m confident if they could implement time travel without having to switch languages/re-engineer everything they would. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "client_msg_id": "05b11fff-60ed-46fc-aeb9-0eab345fe695",
        "type": "message",
        "text": "I would love to know more about your thoughts on polar coords, but, ATM I can\u2019t even formulate a reasonable question... <@UC2A2ARPT>",
        "user": "UGWUJUZHT",
        "ts": "1695204726.657859",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "426WH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would love to know more about your thoughts on polar coords, but, ATM I can\u2019t even formulate a reasonable question... "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "6ff9c635-2d3d-44f8-9bd3-e952fc005b30",
        "type": "message",
        "text": "I keep mentioning \u201ctime\u201d, because I learned a deep secret when I was breaking my brain trying to understand Denotational Semantics.  The secret is: be very explicit and make everything very explicit as you think.  Then, you can always wrap syntactic skins over the stuff, in order  to elide the concepts that you think should be elided.  In my mind, you can\u2019t know what to elide if you don\u2019t know - explicitly - what you\u2019re dealing with.  I guess that this is a kind of Physicist perspective - I want to know what makes things tick, I want to know what the Atoms are.  Synthesizing better UXs is easier when you begin with a bag filled with Atoms.",
        "user": "UGWUJUZHT",
        "ts": "1695204800.941509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FZ9g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I keep mentioning \u201ctime\u201d, because I learned a deep secret when I was breaking my brain trying to understand Denotational Semantics.  The secret is: be very explicit and make everything very explicit as you think.  Then, you can always wrap syntactic skins over the stuff, in order  to elide the concepts that you think should be elided.  In my mind, you can\u2019t know what to elide if you don\u2019t know - explicitly - what you\u2019re dealing with.  I guess that this is a kind of Physicist perspective - I want to know what makes things tick, I want to know what the Atoms are.  Synthesizing better UXs is easier when you begin with a bag filled with Atoms."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "4058dfcc-bd9f-4bfb-8327-0e6b0d81bf4b",
        "type": "message",
        "text": "One nice thing about polar coordinates is that there's no way 'up', so interfaces afford collaboration with people around a table",
        "user": "U05SU27S1M2",
        "ts": "1695204971.478539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jwMXa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One nice thing about polar coordinates is that there's no way 'up', so interfaces afford collaboration with people around a table"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f1095e59-2eca-40fc-9186-cb48aeb30a24",
        "type": "message",
        "text": "Hmm, so here\u2019s a question, sort-of...  In my mind a \u201ctensor\u201d is just a 3D polar coordinate.  Is that relevant here?",
        "user": "UGWUJUZHT",
        "ts": "1695206689.883539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SYT9i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, so here\u2019s a question, sort-of...  In my mind a \u201ctensor\u201d is just a 3D polar coordinate.  Is that relevant here?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1695086681.821979",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "3c3e5edc-79fa-48ac-bb05-c53871192d9d",
        "type": "message",
        "text": "I do not write much JavaScript, but Replay <https://www.replay.io/> is a very serious attempt at an omniscient debugger.  When I used it, the most remarkably helpful feature is that you could add \"print statements\" <https://docs.replay.io/reference-guide/debugging/print-statements> to an existing trace.",
        "user": "UA14TGLTC",
        "ts": "1695215310.563529",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r=L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do not write much JavaScript, but Replay "
                            },
                            {
                                "type": "link",
                                "url": "https://www.replay.io/"
                            },
                            {
                                "type": "text",
                                "text": " is a very serious attempt at an omniscient debugger.  When I used it, the most remarkably helpful feature is that you could add \"print statements\" "
                            },
                            {
                                "type": "link",
                                "url": "https://docs.replay.io/reference-guide/debugging/print-statements"
                            },
                            {
                                "type": "text",
                                "text": " to an existing trace."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://www.replay.io/og-image.png",
                "image_width": 1200,
                "image_height": 642,
                "image_bytes": 244220,
                "from_url": "https://www.replay.io/",
                "service_icon": "https://www.replay.io/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.replay.io/",
                "fallback": "Replay - The time-travel debugger from the future.",
                "text": "Record and replay your application with DevTools.",
                "title": "Replay - The time-travel debugger from the future.",
                "title_link": "https://www.replay.io/",
                "service_name": "replay.io"
            },
            {
                "image_url": "https://image-forwarder.notaku.so/aHR0cHM6Ly9ub3Rha3UtZG9jcy1wcm9kLnZlcmNlbC5hcHAvYXBpL29nLWltYWdlLyU3QiUyMmJ1bGxldCUyMiUzQSUyMkRPQ1MlMjIlMkMlMjJkYXRlJTIyJTNBJTIyU2VwdGVtYmVyJTIwMTUlMkMlMjAyMDIxJTIyJTJDJTIyaGVhZGluZyUyMiUzQSUyMlByaW50JTIwc3RhdGVtZW50cyUyMiUyQyUyMmxvZ29VcmwlMjIlM0ElMjJodHRwcyUzQSUyRiUyRmFwcC5yZXBsYXkuaW8lMkZpbWFnZXMlMkZmYXZpY29uLnN2ZyUyMiUyQyUyMmljb25VcmwlMjIlM0ElMjJodHRwcyUzQSUyRiUyRmltYWdlLWZvcndhcmRlci5ub3Rha3Uuc28lMkZhSFIwY0hNNkx5OXViM1JwYjI0dGRHRnphM010WXpjMk5XTTRaUzFvYUd4cU0yazJaV2x4TFhWbExtRXVjblZ1TG1Gd2NDOWxiVzlxYVM4bFJUSWxPVU1sUVRnJTNEJTIyJTJDJTIyZGVzY3JpcHRpb24lMjIlM0ElMjJQcmludCUyMHN0YXRlbWVudHMlMjBpbiUyMFJlcGxheSUyMGFyZSUyMHlvdXIlMjBtYWdpYyUyMHdhbmQlMjBmb3IlMjBkZWJ1Z2dpbmcuJTIwUmVwbGF5JTIwbGV0cyUyMHlvdSUyMGFkZCUyMHByaW50JTIwc3RhdGVtZW50cyUyMChhbHNvJTIwY2FsbGVkJTIwY29uc29sZSUyMGxvZ3MpJTIwdG8lMjBhbiUyMGV4aXN0aW5nJTIwcmVwbGF5JTIwd2l0aCUyMG5vJTIwbmVlZCUyMHRvJTIwY29tcGlsZSUyMG9yJTIwcmUtcnVuJTIwdGhlJTIwY29kZS4lMjIlMkMlMjJob3N0JTIyJTNBJTIyZG9jcy5yZXBsYXkuaW8lMjIlN0Q=",
                "image_width": 1200,
                "image_height": 627,
                "image_bytes": 56084,
                "from_url": "https://docs.replay.io/reference-guide/debugging/print-statements",
                "id": 2,
                "original_url": "https://docs.replay.io/reference-guide/debugging/print-statements",
                "fallback": "Print statements",
                "text": "Print statements in Replay are your magic wand for debugging. Replay lets you add print statements (also called console logs) to an existing replay with no need to compile or re-run the code.",
                "title": "Print statements",
                "title_link": "https://docs.replay.io/reference-guide/debugging/print-statements",
                "service_name": "docs.replay.io"
            }
        ],
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2",
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9ae437fb-f38e-47af-a03b-6b1c78fc5fdb",
        "type": "message",
        "text": "OCaml has the \"time travel\" debugger in ocamldebug, for programs compiled to bytecode.\n<https://www.typeerror.org/docs/ocaml/debugger>",
        "user": "U05FSHWJER3",
        "ts": "1695428339.428769",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0PbE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OCaml has the \"time travel\" debugger in ocamldebug, for programs compiled to bytecode.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.typeerror.org/docs/ocaml/debugger"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.typeerror.org/docs/ocaml/debugger",
                "service_icon": "https://www.typeerror.org/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.typeerror.org/docs/ocaml/debugger",
                "fallback": "18.  The debugger (ocamldebug) - OCaml Documentation",
                "text": "Chapter \u200d18 The debugger (ocamldebug) 18.1 Compiling for debugging 18.2 Invocation 18.3 Commands 18.4 Executing a program 18.5 Breakpoints 18.6 The call stack 18.7 Examining variable values 18.8 Controlling the debugger 18.9 Miscellaneous commands 18.10 Running the debugger under Emacs This chapter describes the OCaml source-level replay debugger ocamldebug. Unix: The debugger is available on Unix systems that provide BSD sockets. Windows: The debugger is available under the Cygwin port of OCaml, but not under the native Win32 ports. 18.1 Compiling for debugging Before the debugger can be used, the program must be compiled and linked with the -g option:...",
                "title": "18.  The debugger (ocamldebug) - OCaml Documentation",
                "title_link": "https://www.typeerror.org/docs/ocaml/debugger",
                "service_name": "typeerror.org"
            }
        ],
        "thread_ts": "1695145427.272959",
        "parent_user_id": "U05PY5AQCA2"
    }
]