[
    {
        "client_msg_id": "55e3cff4-1a38-4b01-b2a7-46921c4b2212",
        "type": "message",
        "text": "Is there a visual programming environment that implements lambda calculus (either untyped or simply typed)?",
        "user": "U018S42NMMM",
        "ts": "1693817796.748639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pNq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a visual programming environment that implements lambda calculus (either untyped or simply typed)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1693817796.748639",
        "reply_count": 6,
        "reply_users_count": 5,
        "latest_reply": "1694096714.083179",
        "reply_users": [
            "UA14TGLTC",
            "UCUSW7WVD",
            "UBKNXPBAB",
            "UK3LH8CF5",
            "U018S42NMMM"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "16b58b62-6f91-4a69-9cd6-ee51111e5d8a",
        "type": "message",
        "text": "Not specifically, but in my experience a natural way to introduce the lambda calculus visually is via templating.  Starting with some diagram (essentially equivalent to an expression tree), let the person pull out some part of it leaving a whole.  So from\n```here we go round the mulberry bush```\nwe can go to:\n```(here we go round _) (the mulberry bush)```\nAs soon as you try to pull something else out, you see the ambiguity:\n```(here _ go round _) (the mulberry bush) (we)```\nIn text we use lambdas and variables to order how the blanks get filled in\n```(\\ _what_ _who_ . here _who_ go round _what_ _what_ _what_) (the mulberry bush) (we)```\nand so on.\n\nImmediately, I think of three things that are \u2014 um, off \u2014 about conventional notation:\n1. `(\\ variable . expression) value` quickly puts a lot of space between `variable` and `value`.\n2. Being able to repeat a variable is so easy to do with text, that you can easily fail to realize how significant an operation it is.\n3. Likewise, the between `f (g h)` and `(f g) h` much bigger than the notation suggests.\nSo it certainly would be neat to see a spacial lambda calculus that specifically addresses these problems.",
        "user": "UA14TGLTC",
        "ts": "1693844460.433539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EjD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not specifically, but in my experience a natural way to introduce the lambda calculus visually is via templating.  Starting with some diagram (essentially equivalent to an expression tree), let the person pull out some part of it leaving a whole.  So from\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "here we go round the mulberry bush"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we can go to:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(here we go round _) (the mulberry bush)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As soon as you try to pull something else out, you see the ambiguity:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(here _ go round _) (the mulberry bush) (we)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In text we use lambdas and variables to order how the blanks get filled in\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(\\ _what_ _who_ . here _who_ go round _what_ _what_ _what_) (the mulberry bush) (we)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and so on.\n\nImmediately, I think of three things that are \u2014 um, off \u2014 about conventional notation:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(\\ variable . expression) value",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " quickly puts a lot of space between "
                                    },
                                    {
                                        "type": "text",
                                        "text": "variable",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "value",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Being able to repeat a variable is so easy to do with text, that you can easily fail to realize how significant an operation it is."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Likewise, the between "
                                    },
                                    {
                                        "type": "text",
                                        "text": "f (g h)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(f g) h",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " much bigger than the notation suggests."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So it certainly would be neat to see a spacial lambda calculus that specifically addresses these problems."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1693817796.748639",
        "parent_user_id": "U018S42NMMM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3874209f-ebdd-4782-999f-226fe11da6a9",
        "type": "message",
        "text": "Would either <http://www.lamdu.org> or <https://hazel.org> qualify?\n\n(I think this question would be _fine_ to post on <#C5T9GPWFL|thinking-together>.)",
        "user": "UCUSW7WVD",
        "ts": "1693845351.977919",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b0K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would either "
                            },
                            {
                                "type": "link",
                                "url": "http://www.lamdu.org"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "link",
                                "url": "https://hazel.org"
                            },
                            {
                                "type": "text",
                                "text": " qualify?\n\n(I think this question would be "
                            },
                            {
                                "type": "text",
                                "text": "fine",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to post on "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ".)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1693817796.748639",
        "parent_user_id": "U018S42NMMM"
    },
    {
        "client_msg_id": "B529E01D-B177-41B9-B361-DDB508E57892",
        "type": "message",
        "text": "<https://github.com/prathyvsh/lambda-calculus-visualizations|https://github.com/prathyvsh/lambda-calculus-visualizations>",
        "user": "UBKNXPBAB",
        "ts": "1693848872.710109",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j2iiz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/prathyvsh/lambda-calculus-visualizations",
                                "text": "https://github.com/prathyvsh/lambda-calculus-visualizations"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1693817796.748639",
        "parent_user_id": "U018S42NMMM",
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "U85HCL7JP",
                    "U79HM6726"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "2e42a3a7-93f8-48bc-b629-415b61cd9898",
        "type": "message",
        "text": "Here's a paper on a lambda calculus based formalism for visual programs. (Haven't read it)\n\n<https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=ca25ecf69726cde7e4e735fbc9a6805daa4ca9df>",
        "user": "UK3LH8CF5",
        "ts": "1693854048.870229",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "koQaI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a paper on a lambda calculus based formalism for visual programs. (Haven't read it)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=ca25ecf69726cde7e4e735fbc9a6805daa4ca9df"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1693817796.748639",
        "parent_user_id": "U018S42NMMM"
    },
    {
        "client_msg_id": "33aa69b1-e870-4b39-93a4-1d28dcdffd63",
        "type": "message",
        "text": "Also, not what you are looking for, but if you want to do some proofs in the simply typed lambda calculus, there is <http://incredible.pm/>\n\n(A super fun way of doing proofs)",
        "user": "UK3LH8CF5",
        "ts": "1693854445.657059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9grF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, not what you are looking for, but if you want to do some proofs in the simply typed lambda calculus, there is "
                            },
                            {
                                "type": "link",
                                "url": "http://incredible.pm/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(A super fun way of doing proofs)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1693854461.000000"
        },
        "thread_ts": "1693817796.748639",
        "parent_user_id": "U018S42NMMM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U05M5A8E0NT"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Came across <https://inet.run/> today on HN.\nHad never heard of Interaction nets before: <https://en.wikipedia.org/wiki/Interaction_nets>",
        "user": "U018S42NMMM",
        "ts": "1694096714.083179",
        "thread_ts": "1693817796.748639",
        "root": {
            "client_msg_id": "55e3cff4-1a38-4b01-b2a7-46921c4b2212",
            "type": "message",
            "text": "Is there a visual programming environment that implements lambda calculus (either untyped or simply typed)?",
            "user": "U018S42NMMM",
            "ts": "1693817796.748639",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "pNq",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Is there a visual programming environment that implements lambda calculus (either untyped or simply typed)?"
                                }
                            ]
                        }
                    ]
                }
            ],
            "team": "T5TCAFTA9",
            "thread_ts": "1693817796.748639",
            "reply_count": 6,
            "reply_users_count": 5,
            "latest_reply": "1694096714.083179",
            "reply_users": [
                "UA14TGLTC",
                "UCUSW7WVD",
                "UBKNXPBAB",
                "UK3LH8CF5",
                "U018S42NMMM"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcCu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Came across "
                            },
                            {
                                "type": "link",
                                "url": "https://inet.run/"
                            },
                            {
                                "type": "text",
                                "text": " today on HN.\nHad never heard of Interaction nets before: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Interaction_nets"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "929c09ba-83d0-4cdb-9bd5-861615073ef9"
    }
]