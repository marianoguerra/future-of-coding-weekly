[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1715051344.765399",
        "client_msg_id": "5209cf14-2d22-4814-804b-4cc7b59dda44",
        "text": "Thinking about banning the use of IF-THEN-ELSE... <https://guitarvydas.github.io/2024/05/02/Banning-the-Use-of-IF-THEN-ELSE.html>",
        "team": "T5TCAFTA9",
        "thread_ts": "1715051344.765399",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1715236747.533909",
        "reply_users": [
            "U03CEGR3HSL",
            "UJBAJNFLK",
            "UN57U8V53",
            "U8A5MS6R1"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QxL8d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about banning the use of IF-THEN-ELSE... "
                            },
                            {
                                "type": "link",
                                "url": "https://guitarvydas.github.io/2024/05/02/Banning-the-Use-of-IF-THEN-ELSE.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "U06EU9S1Y68",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1715052216.780879",
        "client_msg_id": "b8d9634d-9847-45a1-bd64-9e58fab76c93",
        "text": "Have you ever played with SNOBOL, Icon, Prolog, or the amb operator in a language with continuations like Scheme or Ruby?\n\nThose are some other contexts in which you might find inspiration for ways to use backtracking instead of explicit conditionals.",
        "team": "T5TCAFTA9",
        "thread_ts": "1715051344.765399",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qUmQE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you ever played with SNOBOL, Icon, Prolog, or the amb operator in a language with continuations like Scheme or Ruby?\n\nThose are some other contexts in which you might find inspiration for ways to use backtracking instead of explicit conditionals."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1715108695.422559",
        "client_msg_id": "8006f4a8-b6da-4d6f-aac7-bba86ac3ef32",
        "text": "Term rewriting is another approach that doesn't require branching, nor any explicit control flow (though there are rules for control flow, behind the scenes).",
        "team": "T5TCAFTA9",
        "thread_ts": "1715051344.765399",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7BGxu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Term rewriting is another approach that doesn't require branching, nor any explicit control flow (though there are rules for control flow, behind the scenes)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1715122890.326209",
        "client_msg_id": "e1a4f95c-ff4f-47c5-b04a-aa96a5494c2f",
        "text": "case/pattern matching/recursion and state machine/event/transition are the two alternatives I've been playing with",
        "team": "T5TCAFTA9",
        "thread_ts": "1715051344.765399",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vr/G3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "case/pattern matching/recursion and state machine/event/transition are the two alternatives I've been playing with"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1715236747.533909",
        "client_msg_id": "0144bcd5-120d-4cc9-8564-e9f53618c286",
        "text": "See the schematic tables introduced in Subtext 2 by <@U6KQ2S410>: <https://www.subtext-lang.org/OOPSLA07.pdf>,  <https://vimeo.com/140738254>",
        "team": "T5TCAFTA9",
        "thread_ts": "1715051344.765399",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https://vimeo.com/140738254",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "thumb_url": "https://i.vimeocdn.com/video/537388064-1f470613f861d07f3e52255db7d52ada6a7ab7e834d407b9610d8e43b1b72523-d_295x166",
                "thumb_width": 295,
                "thumb_height": 166,
                "video_html": "<iframe src=\"https://player.vimeo.com/video/140738254?autoplay=1&amp;app_id=122963\" width=\"400\" height=\"300\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture; clipboard-write\" title=\"No ifs, ands, or buts\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "id": 1,
                "original_url": "https://vimeo.com/140738254",
                "fallback": "Vimeo Video: No ifs, ands, or buts",
                "text": "Schematic tables are a new representation for conditionals. Roughly a cross between decision tables and data flow graphs, they represent computation and decision-making orthogonally. They unify the full range of conditional constructs, from if statements through pattern matching to polymorphic predicate dispatch. Program logic is maintained in a declarative canonical form that enforces completeness and disjointness among choices. Schematic tables can be used either as a code specification/generation tool, or as a self-contained diagrammatic programming language. They give program logic the clarity of truth tables, and support high-level direct manipulation of that logic, avoiding much of the mental computation demanded by conventional conditionals.",
                "title": "No ifs, ands, or buts",
                "title_link": "https://vimeo.com/140738254",
                "author_name": "Jonathan Edwards",
                "author_link": "https://vimeo.com/jonathoda",
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xe8mH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See the schematic tables introduced in Subtext 2 by "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "link",
                                "url": "https://www.subtext-lang.org/OOPSLA07.pdf"
                            },
                            {
                                "type": "text",
                                "text": ",  "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/140738254"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    }
]