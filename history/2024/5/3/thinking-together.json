[
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1714773158.564839",
        "client_msg_id": "387a58ef-8814-4d71-92dd-826876e648dc",
        "text": "I am once again looking at pages of notes I wrote three years ago attempting to find a way to declaratively diagram concurrent legal processes so as to illuminate the steps available to the parties as the process unfolds. I feel like I have something worth exploring, but to illustrate it I need a diagramming language that allows me to nest nodes inside of one another, and draw edges that originate and terminate at arbitrary depths of nodes. DOT won't let you draw an arrow starting at the edge of a subgraph, and doesn't have any way of nesting actual nodes, for example. Is anyone aware of a text-based graphing language that will let me nest objects and draw edges between arbitrary depths?",
        "team": "T5TCAFTA9",
        "thread_ts": "1714773158.564839",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1714805676.797709",
        "reply_users": [
            "UN57U8V53",
            "U02U0AS3J49",
            "U0378MDUG1Y"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tVz0l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am once again looking at pages of notes I wrote three years ago attempting to find a way to declaratively diagram concurrent legal processes so as to illuminate the steps available to the parties as the process unfolds. I feel like I have something worth exploring, but to illustrate it I need a diagramming language that allows me to nest nodes inside of one another, and draw edges that originate and terminate at arbitrary depths of nodes. DOT won't let you draw an arrow starting at the edge of a subgraph, and doesn't have any way of nesting actual nodes, for example. Is anyone aware of a text-based graphing language that will let me nest objects and draw edges between arbitrary depths?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1714781055.971859",
        "client_msg_id": "dd019fc8-295a-40fc-a118-85b19f954b51",
        "text": "I believe that fits the statecharts model\nIf it does, you can draw it with <http://stately.ai|stately.ai>",
        "team": "T5TCAFTA9",
        "thread_ts": "1714773158.564839",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PfwqN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe that fits the statecharts model\nIf it does, you can draw it with "
                            },
                            {
                                "type": "link",
                                "url": "http://stately.ai",
                                "text": "stately.ai"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1714781525.274429",
        "client_msg_id": "d020b272-b865-4b64-b412-5d5792dc87f9",
        "text": "Actually, I found a hack! Use subgraphs in DOT, and give each subgraph an invisible node for edges that originate at or target the subgraph. Ugly, but legible, and good enough for my purposes.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714773158.564839",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+fk7g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually, I found a hack! Use subgraphs in DOT, and give each subgraph an invisible node for edges that originate at or target the subgraph. Ugly, but legible, and good enough for my purposes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN57U8V53"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1714790216.072819",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1714791596.000000"
        },
        "client_msg_id": "E3FA9A8A-DCC2-4F1E-8AEA-A8038B221547",
        "text": "Seems like you figured it out! \n\nAs a side note that may interest you, I\u2019m working for a little language for the higraph formalism (which stands for hierarchical graphs and is the basis for statecharts, same creator). Not much to show yet, but it sounds like its sort of what your looking for\n\nOriginal paper here:\n<https://dl.acm.org/doi/pdf/10.1145/42411.42414|https://dl.acm.org/doi/pdf/10.1145/42411.42414>",
        "team": "T5TCAFTA9",
        "thread_ts": "1714773158.564839",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vOQVG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems like you figured it out! \n\nAs a side note that may interest you, I\u2019m working for a little language for the higraph formalism (which stands for hierarchical graphs and is the basis for statecharts, same creator). Not much to show yet, but it sounds like its sort of what your looking for\n\nOriginal paper here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/pdf/10.1145/42411.42414",
                                "text": "https://dl.acm.org/doi/pdf/10.1145/42411.42414"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1714805533.097179",
        "client_msg_id": "45c32486-0df4-4f27-b667-1b02f995c060",
        "text": "From the paper, it seems that mine is a very similar visual syntax (just with additional labelling of the blobs, and no Cartesian product), and a different semantics. If your language is open, I would love to take a look.I'm also curious if you have seen any examples of higraphs used to express higher-order logical statements.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714773158.564839",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RbINO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the paper, it seems that mine is a very similar visual syntax (just with additional labelling of the blobs, and no Cartesian product), and a different semantics. If your language is open, I would love to take a look.I'm also curious if you have seen any examples of higraphs used to express higher-order logical statements."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1714805676.797709",
        "client_msg_id": "9ceceacb-961d-4e26-86bc-2c699e30045c",
        "text": "My visual syntax also excludes overlapping bounds.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714773158.564839",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d4+2j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My visual syntax also excludes overlapping bounds."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]