[
    {
        "text": "Making more progress on AI assisted visual programming (with voice control).\n<https://www.linkedin.com/feed/update/urn:li:activity:7214151556164640769/>",
        "files": [
            {
                "id": "F07AUATTESE",
                "created": 1719987998,
                "timestamp": 1719987998,
                "name": "GAIA Voice Demo.mp4",
                "title": "GAIA Voice Demo.mp4",
                "mimetype": "video/mp4",
                "filetype": "mp4",
                "pretty_type": "MPEG 4 Video",
                "user": "U079PRQNZQD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 11767075,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "transcription": {
                    "status": "complete",
                    "locale": "en-US",
                    "preview": {
                        "content": "Let's align these nodes horizontally with the middle node. Can you also distribute them evenly horizontally and now move everything over about 20",
                        "has_more": true
                    }
                },
                "mp4": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AUATTESE-48319841d4/gaia_voice_demo.mp4",
                "url_private": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AUATTESE-48319841d4/gaia_voice_demo.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07AUATTESE/download/gaia_voice_demo.mp4",
                "vtt": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AUATTESE-48319841d4/file.vtt?_xcb=c1f64",
                "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AUATTESE-48319841d4/file.m3u8?_xcb=c1f64",
                "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9MzgyNjM2LEFWRVJBR0UtQkFORFdJRFRIPTM1MTkyNSxDT0RFQ1M9ImF2YzEuNjQwMDI4LG1wNGEuNDAuNSIsUkVTT0xVVElPTj0xOTIweDEwODAsRlJBTUUtUkFURT0yOS45NzAsU1VCVElUTEVTPSJzdWJzIgpkYXRhOmFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsO2Jhc2U2NCxJMFZZVkUwelZRb2pSVmhVTFZndFZrVlNVMGxQVGpvekNpTkZXRlF0V0MxVVFWSkhSVlJFVlZKQlZFbFBUam8zQ2lORldGUXRXQzFOUlVSSlFTMVRSVkZWUlU1RFJUb3hDaU5GV0ZRdFdDMVFURUZaVEVsVFZDMVVXVkJGT2xaUFJBb2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlZRVlJVUlZORkxUUTRNekU1T0RReFpEUXZabWxzWlY5SVh6STJORjh4T1RJd2VERXdPREJmTmpVd01FdENVRk5mTjFGV1FsSmZNREF3TURFdWRITUtJMFZZVkVsT1JqbzJMakF3Tml3S2FIUjBjSE02THk5bWFXeGxjeTV6YkdGamF5NWpiMjB2Wm1sc1pYTXRkRzFpTDFRMVZFTkJSbFJCT1MxR01EZEJWVUZVVkVWVFJTMDBPRE14T1RnME1XUTBMMlpwYkdWZlNGOHlOalJmTVRreU1IZ3hNRGd3WHpZMU1EQkxRbEJUWHpkUlZrSlNYekF3TURBeUxuUnpDaU5GV0ZSSlRrWTZOaTR3TURZc0NtaDBkSEJ6T2k4dlptbHNaWE11YzJ4aFkyc3VZMjl0TDJacGJHVnpMWFJ0WWk5VU5WUkRRVVpVUVRrdFJqQTNRVlZCVkZSRlUwVXRORGd6TVRrNE5ERmtOQzltYVd4bFgwaGZNalkwWHpFNU1qQjRNVEE0TUY4Mk5UQXdTMEpRVTE4M1VWWkNVbDh3TURBd015NTBjd29qUlZoVVNVNUdPall1TURBMkxBcG9kSFJ3Y3pvdkwyWnBiR1Z6TG5Oc1lXTnJMbU52YlM5bWFXeGxjeTEwYldJdlZEVlVRMEZHVkVFNUxVWXdOMEZWUVZSVVJWTkZMVFE0TXpFNU9EUXhaRFF2Wm1sc1pWOUlYekkyTkY4eE9USXdlREV3T0RCZk5qVXdNRXRDVUZOZk4xRldRbEpmTURBd01EUXVkSE1LSTBWWVZFbE9Sam8yTGpBd05pd0thSFIwY0hNNkx5OW1hV3hsY3k1emJHRmpheTVqYjIwdlptbHNaWE10ZEcxaUwxUTFWRU5CUmxSQk9TMUdNRGRCVlVGVVZFVlRSUzAwT0RNeE9UZzBNV1EwTDJacGJHVmZTRjh5TmpSZk1Ua3lNSGd4TURnd1h6WTFNREJMUWxCVFh6ZFJWa0pTWHpBd01EQTFMblJ6Q2lORldGUkpUa1k2Tmk0d01EWXNDbWgwZEhCek9pOHZabWxzWlhNdWMyeGhZMnN1WTI5dEwyWnBiR1Z6TFhSdFlpOVVOVlJEUVVaVVFUa3RSakEzUVZWQlZGUkZVMFV0TkRnek1UazROREZrTkM5bWFXeGxYMGhmTWpZMFh6RTVNakI0TVRBNE1GODJOVEF3UzBKUVUxODNVVlpDVWw4d01EQXdOaTUwY3dvalJWaFVTVTVHT2pZdU1EQTJMQXBvZEhSd2N6b3ZMMlpwYkdWekxuTnNZV05yTG1OdmJTOW1hV3hsY3kxMGJXSXZWRFZVUTBGR1ZFRTVMVVl3TjBGVlFWUlVSVk5GTFRRNE16RTVPRFF4WkRRdlptbHNaVjlJWHpJMk5GOHhPVEl3ZURFd09EQmZOalV3TUV0Q1VGTmZOMUZXUWxKZk1EQXdNRGN1ZEhNS0kwVllWRWxPUmpvMkxqQXdOaXdLYUhSMGNITTZMeTltYVd4bGN5NXpiR0ZqYXk1amIyMHZabWxzWlhNdGRHMWlMMVExVkVOQlJsUkJPUzFHTURkQlZVRlVWRVZUUlMwME9ETXhPVGcwTVdRMEwyWnBiR1ZmU0Y4eU5qUmZNVGt5TUhneE1EZ3dYelkxTURCTFFsQlRYemRSVmtKU1h6QXdNREE0TG5SekNpTkZXRlJKVGtZNk5pNHdNRFlzQ21oMGRIQnpPaTh2Wm1sc1pYTXVjMnhoWTJzdVkyOXRMMlpwYkdWekxYUnRZaTlVTlZSRFFVWlVRVGt0UmpBM1FWVkJWRlJGVTBVdE5EZ3pNVGs0TkRGa05DOW1hV3hsWDBoZk1qWTBYekU1TWpCNE1UQTRNRjgyTlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3T1M1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlZRVlJVUlZORkxUUTRNekU1T0RReFpEUXZabWxzWlY5SVh6STJORjh4T1RJd2VERXdPREJmTmpVd01FdENVRk5mTjFGV1FsSmZNREF3TVRBdWRITUtJMFZZVkVsT1JqbzJMakF3Tml3S2FIUjBjSE02THk5bWFXeGxjeTV6YkdGamF5NWpiMjB2Wm1sc1pYTXRkRzFpTDFRMVZFTkJSbFJCT1MxR01EZEJWVUZVVkVWVFJTMDBPRE14T1RnME1XUTBMMlpwYkdWZlNGOHlOalJmTVRreU1IZ3hNRGd3WHpZMU1EQkxRbEJUWHpkUlZrSlNYekF3TURFeExuUnpDaU5GV0ZSSlRrWTZOQzQxTnpFc0NtaDBkSEJ6T2k4dlptbHNaWE11YzJ4aFkyc3VZMjl0TDJacGJHVnpMWFJ0WWk5VU5WUkRRVVpVUVRrdFJqQTNRVlZCVkZSRlUwVXRORGd6TVRrNE5ERmtOQzltYVd4bFgwaGZNalkwWHpFNU1qQjRNVEE0TUY4Mk5UQXdTMEpRVTE4M1VWWkNVbDh3TURBeE1pNTBjd29qUlZoVUxWZ3RSVTVFVEVsVFZBbz0KI0VYVC1YLVNUUkVBTS1JTkY6QkFORFdJRFRIPTI5MjQ4NixBVkVSQUdFLUJBTkRXSURUSD0yNzIwNjUsQ09ERUNTPSJhdmMxLjY0MDAxZixtcDRhLjQwLjUiLFJFU09MVVRJT049MTI4MHg3MjAsRlJBTUUtUkFURT0yOS45NzAsU1VCVElUTEVTPSJzdWJzIgpodHRwczovL2ZpbGVzLnNsYWNrLmNvbS9maWxlcy10bWIvVDVUQ0FGVEE5LUYwN0FVQVRURVNFLTQ4MzE5ODQxZDQvZmlsZV9IXzI2NF8xMjgweDcyMF8zNTAwS0JQU183UVZCUi5tM3U4CiNFWFQtWC1NRURJQTpUWVBFPVNVQlRJVExFUyxHUk9VUC1JRD0ic3VicyIsTkFNRT0iRW5nbGlzaCIsREVGQVVMVD1ZRVMsQVVUT1NFTEVDVD1ZRVMsRk9SQ0VEPU5PLExBTkdVQUdFPSJlbmciLFVSST0iZGF0YTphcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybDtiYXNlNjQsSTBWWVZFMHpWUW9qUlZoVUxWZ3RWa1ZTVTBsUFRqb3pDaU5GV0ZRdFdDMVVRVkpIUlZSRVZWSkJWRWxQVGpvMk1EQUtJMFZZVkMxWUxVMUZSRWxCTFZORlVWVkZUa05GT2pFS0kwVllWQzFZTFZCTVFWbE1TVk5VTFZSWlVFVTZWazlFQ2lORldGUkpUa1k2TnpBdU5qTTNMQXBvZEhSd2N6b3ZMMlpwYkdWekxuTnNZV05yTG1OdmJTOW1hV3hsY3kxMGJXSXZWRFZVUTBGR1ZFRTVMVVl3TjBGVlFWUlVSVk5GTFRRNE16RTVPRFF4WkRRdlptbHNaUzUyZEhRS0kwVllWQzFZTFVWT1JFeEpVMVE9Igo=",
                "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AUATTESE-48319841d4/gaia_voice_demo_trans.mp4",
                "duration_ms": 70637,
                "media_display_type": "video",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AUATTESE-48319841d4/gaia_voice_demo_thumb_video.jpeg",
                "thumb_video_w": 1920,
                "thumb_video_h": 1080,
                "permalink": "https://futureofcoding.slack.com/files/U079PRQNZQD/F07AUATTESE/gaia_voice_demo.mp4",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07AUATTESE-073367eff7",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U079PRQNZQD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+t5tG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Making more progress on AI assisted visual programming (with voice control).\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.linkedin.com/feed/update/urn:li:activity:7214151556164640769/"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1719988023.569839",
        "client_msg_id": "fc0283a2-9eea-452c-886f-a46aa750d53a",
        "thread_ts": "1719988023.569839",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1720019393.386379",
        "reply_users": [
            "U0123H7JRDM",
            "U079PRQNZQD"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U0123H7JRDM",
                    "UA14TGLTC",
                    "UGWUJUZHT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1719989542.660139",
        "client_msg_id": "66F7CC4A-D62A-4380-A8CB-048BD80E0595",
        "text": "Very cool! How does this work with more complex scenario's and how does the data structure of your flow looks like? And which LLM are you using?",
        "team": "T5TCAFTA9",
        "thread_ts": "1719988023.569839",
        "parent_user_id": "U079PRQNZQD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QVMiv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very cool! How does this work with more complex scenario's and how does the data structure of your flow looks like? And which LLM are you using?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1719992516.428029",
        "client_msg_id": "89B3C43F-3A76-40C6-9044-5C68C653253D",
        "text": "Is the LLM used to transform text input to function calls in your codebase that handle the alignment and layout of the visual flows?",
        "team": "T5TCAFTA9",
        "thread_ts": "1719988023.569839",
        "parent_user_id": "U079PRQNZQD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IVqoe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is the LLM used to transform text input to function calls in your codebase that handle the alignment and layout of the visual flows?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U079PRQNZQD",
        "type": "message",
        "ts": "1720019393.386379",
        "client_msg_id": "CABFD46B-44B5-492B-A5B6-E91AEFBBBB48",
        "text": "Hi <@U0123H7JRDM>. The graphical data flow language is LabVIEW. I am using a bunch of behind-the-scenes API\u2018s to interact with the AST. There is still a lot more work to do for interacting with complex code. This demo was done using GPT-4o.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719988023.569839",
        "parent_user_id": "U079PRQNZQD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ixulf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": ". The graphical data flow language is LabVIEW. I am using a bunch of behind-the-scenes API\u2018s to interact with the AST. There is still a lot more work to do for interacting with complex code. This demo was done using GPT-4o."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I've been building a sync framework that app developers can integrate, to securely sync state changes between clients. I call it DIPLOMATIC, after the concept of a diplomatic bag which travels through foreign territories, but protected against inspection. So far I've got a couple host implementations targeting Deno and Cloudflare (Workers + Durable Objects + D1), as well as client libraries to build web clients in React and CLI tools in Deno.\n\nThe attached video shows off a demo app that displays and updates a consistent status message across clients. It generates and stores a cryptographic seed (synced via the browser's password manager), queues status changes when offline or not connected to a host, then pushes queued changes when connected, and receives real-time updates using WebSockets.\n\nI've got some rough docs up at <https://diplomatic-docs.replit.app>, and a walkthrough of the demo app from the video at <https://diplomatic-docs.replit.app/docs/demos/status.html>.\n\nThe backstory is that, for a while I've wanted to build a grand life-planning app, like a TODO list that can operate at the decade-level rather than the daily-level. But I kept running into these blocks:\na) I'll want to access it from phone and desktop, so it needs a sync solution,\nb) maintaining servers is a pain, and\nc) a life-planning tool will necessarily have personal info, so it shouldn't hang out in plaintext on someone else's computers.\n\nThese sorts of issues aren't unique to this tool. In fact, I think they're common enough to merit a general solution. The Web 2.0 client/server model gave us easy software updates and access from multiple devices with consistent data. But we backslid by making all app data visible to the software provider and relying on them to maintain their servers. Mobile apps gave us the additional expectation that we could access our data while offline.\n\nI think there's a simple solution to get the best of all worlds, by encoding app state changes as objects (the Event Sourcing pattern), then encrypting those deltas and shipping them off to a server which relays to other clients, which then decrypt and apply the changes locally. With this architecture, the relay servers all have a standard interface (not application-specific), and they're blind to delta contents, so hosting becomes a commodity. This means companies could specialize in just running these hosts, giving application developers a secure backend without the maintenance burden. It also creates a standardized import/export format for app state\u2014the delta log, so you get a backup format for free.\n\nI'm only designing around single-user apps at the moment. Having a \"last-wins\" policy for conflicts makes things nice and simple..\n\nIf anyone knows of related work I should check out, has suggestions, wants to collaborate, ... let me know. The code is still a bit messy, but I'm planning to tidy that up and open the repo soon.",
        "files": [
            {
                "id": "F07AYQVR8HG",
                "created": 1720038361,
                "timestamp": 1720038361,
                "name": "diplomatic-status-demo-720.mov",
                "title": "diplomatic-status-demo-720.mov",
                "mimetype": "video/quicktime",
                "filetype": "mov",
                "pretty_type": "QuickTime Movie",
                "user": "UPDJV04FR",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 16590898,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "transcription": {
                    "status": "none"
                },
                "mp4": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AYQVR8HG-2074be624d/diplomatic-status-demo-720.mp4",
                "url_private": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AYQVR8HG-2074be624d/diplomatic-status-demo-720.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07AYQVR8HG/download/diplomatic-status-demo-720.mov",
                "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AYQVR8HG-2074be624d/file.m3u8?_xcb=422ff",
                "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9NDEwNjgyLEFWRVJBR0UtQkFORFdJRFRIPTM4MjMxNCxDT0RFQ1M9ImF2YzEuNjQwMDFmLG1wNGEuNDAuNSIsUkVTT0xVVElPTj0xMjgweDY0OCxGUkFNRS1SQVRFPTI5Ljk3MApkYXRhOmFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsO2Jhc2U2NCxJMFZZVkUwelZRb2pSVmhVTFZndFZrVlNVMGxQVGpvekNpTkZXRlF0V0MxVVFWSkhSVlJFVlZKQlZFbFBUam8zQ2lORldGUXRXQzFOUlVSSlFTMVRSVkZWUlU1RFJUb3hDaU5GV0ZRdFdDMVFURUZaVEVsVFZDMVVXVkJGT2xaUFJBb2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3TVM1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3TWk1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3TXk1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3TkM1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3TlM1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3Tmk1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3Tnk1MGN3b2pSVmhVU1U1R09qTXVPRGN4TEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd04wRlpVVlpTT0VoSExUSXdOelJpWlRZeU5HUXZabWxzWlY5SVh6STJORjh4TWpnd2VEY3lNRjh6TlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3T0M1MGN3b2pSVmhVTFZndFJVNUVURWxUVkFvPQo=",
                "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AYQVR8HG-2074be624d/diplomatic-status-demo-720_trans.mp4",
                "duration_ms": 45912,
                "media_display_type": "video",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F07AYQVR8HG-2074be624d/diplomatic-status-demo-720_thumb_video.jpeg",
                "thumb_video_w": 1280,
                "thumb_video_h": 648,
                "permalink": "https://futureofcoding.slack.com/files/UPDJV04FR/F07AYQVR8HG/diplomatic-status-demo-720.mov",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07AYQVR8HG-7cd7c740a8",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UPDJV04FR",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UUSCY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been building a sync framework that app developers can integrate, to securely sync state changes between clients. I call it DIPLOMATIC, after the concept of a diplomatic bag which travels through foreign territories, but protected against inspection. So far I've got a couple host implementations targeting Deno and Cloudflare (Workers + Durable Objects + D1), as well as client libraries to build web clients in React and CLI tools in Deno.\n\nThe attached video shows off a demo app that displays and updates a consistent status message across clients. It generates and stores a cryptographic seed (synced via the browser's password manager), queues status changes when offline or not connected to a host, then pushes queued changes when connected, and receives real-time updates using WebSockets.\n\nI've got some rough docs up at "
                            },
                            {
                                "type": "link",
                                "url": "https://diplomatic-docs.replit.app"
                            },
                            {
                                "type": "text",
                                "text": ", and a walkthrough of the demo app from the video at "
                            },
                            {
                                "type": "link",
                                "url": "https://diplomatic-docs.replit.app/docs/demos/status.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThe backstory is that, for a while I've wanted to build a grand life-planning app, like a TODO list that can operate at the decade-level rather than the daily-level. But I kept running into these blocks:\na) I'll want to access it from phone and desktop, so it needs a sync solution,\nb) maintaining servers is a pain, and\nc) a life-planning tool will necessarily have personal info, so it shouldn't hang out in plaintext on someone else's computers.\n\nThese sorts of issues aren't unique to this tool. In fact, I think they're common enough to merit a general solution. The Web 2.0 client/server model gave us easy software updates and access from multiple devices with consistent data. But we backslid by making all app data visible to the software provider and relying on them to maintain their servers. Mobile apps gave us the additional expectation that we could access our data while offline.\n\nI think there's a simple solution to get the best of all worlds, by encoding app state changes as objects (the Event Sourcing pattern), then encrypting those deltas and shipping them off to a server which relays to other clients, which then decrypt and apply the changes locally. With this architecture, the relay servers all have a standard interface (not application-specific), and they're blind to delta contents, so hosting becomes a commodity. This means companies could specialize in just running these hosts, giving application developers a secure backend without the maintenance burden. It also creates a standardized import/export format for app state\u2014the delta log, so you get a backup format for free.\n\nI'm only designing around single-user apps at the moment. Having a \"last-wins\" policy for conflicts makes things nice and simple..\n\nIf anyone knows of related work I should check out, has suggestions, wants to collaborate, ... let me know. The code is still a bit messy, but I'm planning to tidy that up and open the repo soon."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1720039689.044269",
        "client_msg_id": "bd108ec2-5cdd-48da-a9b4-832b92b1397f",
        "thread_ts": "1720039689.044269",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1720114048.386569",
        "reply_users": [
            "U02QC0PPER3",
            "UPDJV04FR"
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https://diplomatic-docs.replit.app/",
                "id": 1,
                "original_url": "https://diplomatic-docs.replit.app",
                "fallback": "DIPLOMATIC",
                "text": "Sync framework",
                "title": "DIPLOMATIC",
                "title_link": "https://diplomatic-docs.replit.app/",
                "service_name": "diplomatic-docs.replit.app"
            },
            {
                "from_url": "https://diplomatic-docs.replit.app/docs/demos/status.html",
                "id": 2,
                "original_url": "https://diplomatic-docs.replit.app/docs/demos/status.html",
                "fallback": "STATUS | DIPLOMATIC",
                "text": "Sync framework",
                "title": "STATUS | DIPLOMATIC",
                "title_link": "https://diplomatic-docs.replit.app/docs/demos/status.html",
                "service_name": "diplomatic-docs.replit.app"
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1720111704.809189",
        "client_msg_id": "0bda1b38-02e0-4ad4-a63a-14a7972aa424",
        "text": "<https://github.com/standardnotes/app> has e2e encrypted sync, but I don't remember the exact techniques they use.\n---\n\nHow much do you care about offline multi-device scenarios with conflicts?  What is the resolution of \"last-wins\" you care about?\n\nRelaying deltas sounds like Operational Transformation, specifically \"operation-based OT\" as opposed to \"state-based OT\"?\nIf so, consider CRDTs instead \u2014 basically they give more peace of mind.\n(I'd google \"yjs encrypted\" &amp; \"automerge encrypted\" \u2014 the 2 leading CRDT engines)\n\n<https://localfirstweb.dev/> probably has useful resources.",
        "team": "T5TCAFTA9",
        "thread_ts": "1720039689.044269",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JZzwF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/standardnotes/app"
                            },
                            {
                                "type": "text",
                                "text": " has e2e encrypted sync, but I don't remember the exact techniques they use.\n---\n\nHow much do you care about offline multi-device scenarios with conflicts?  What is the resolution of \"last-wins\" you care about?\n\nRelaying deltas sounds like Operational Transformation, specifically \"operation-based OT\" as opposed to \"state-based OT\"?\nIf so, consider CRDTs instead \u2014 basically they give more peace of mind.\n(I'd google \"yjs encrypted\" & \"automerge encrypted\" \u2014 the 2 leading CRDT engines)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://localfirstweb.dev/"
                            },
                            {
                                "type": "text",
                                "text": " probably has useful resources."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UPDJV04FR",
        "type": "message",
        "ts": "1720114048.386569",
        "edited": {
            "user": "UPDJV04FR",
            "ts": "1720114271.000000"
        },
        "client_msg_id": "2486CA98-DF5E-420E-8C6D-CE061236472A",
        "text": "Thanks! Yes, this is inspired by operational transform. I\u2019m aware of CRDTs but haven\u2019t tried them out. I\u2019ll read up.\n\nRegarding offline conflicts, they\u2019ll be frequent. E.g. a TODO list where you check off a box on your laptop but shut the lid before it syncs. Then you check the box again on your phone for a sense of completion. In single-user scenarios like this, \u201clast wins\u201d just means whichever operation has a later timestamp is the one that overwrites the current app state, which makes sense because any conflict just indicates the user changed their mind, rather than being an actual disagreement as in multi-user scenarios.\n\nThanks for that link to localfirstweb.dev! That is highly relevant.",
        "team": "T5TCAFTA9",
        "thread_ts": "1720039689.044269",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rYhvw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! Yes, this is inspired by operational transform. I\u2019m aware of CRDTs but haven\u2019t tried them out. I\u2019ll read up.\n\nRegarding offline conflicts, they\u2019ll be frequent. E.g. a TODO list where you check off a box on your laptop but shut the lid before it syncs. Then you check the box again on your phone for a sense of completion. In single-user scenarios like this, \u201clast wins\u201d just means whichever operation has a later timestamp is the one that overwrites the current app state, which makes sense because any conflict just indicates the user changed their mind, rather than being an actual disagreement as in multi-user scenarios.\n\nThanks for that link to localfirstweb.dev! That is highly relevant"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]