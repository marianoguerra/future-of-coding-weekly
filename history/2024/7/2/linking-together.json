[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1719910206.179899",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1719947299.000000"
        },
        "client_msg_id": "7a93142b-337c-4823-a77d-120ca651c6c7",
        "text": "<https://blog.bracha.org/primordialsoup.html?snapshot=AmpleforthViewer.vfuel&docName=BreakingSilos|Breaking Silos> by Gilad Bracha\n\nExperiment: AI assisted summary edited by me to pique your interest (let me know what you think):\n\n\u2022 Modern applications are siloed and have difficulty cooperating with each other.\n\u2022 This was not always the case, exemplified by the Apple Newton, a mobile device released nearly 30 years ago.\n\u2022 Apps on the Newton were written in NewtonScript, a prototype-based language.\n\u2022 Newton applications had a flexible top-level view, enabling app compositionality where entire apps could be nested within others.\n\u2022 Objects in NewtonScript (called frames) inherited properties from both their prototype and their parent, facilitating UI use.\n\u2022 This inheritance allowed an app to function as a widget inside another app, enabling dynamic interaction between nested and enclosing apps.\n\u2022 Apps on the Newton persisted their data in object stores called soups, which were accessible by multiple apps.\n\u2022 The concept of co-designing language and UI existed earlier, exemplified by the Boxer system from the 1980s.\n\u2022 Another example of compositionality is Morphic, a graphics system developed in Self and later adapted for Squeak and Lively Kernel, focusing on graphical structure rather than application logic.\n\u2022 Inspired by Morphic, the idea of an app store with composable apps was proposed about twenty years ago.\n\u2022 These apps would live-update, synchronize automatically, and be local-first, a concept predating Apple's app store.\n\u2022 Newspeak language derived partly from this effort.\n\u2022 A practical example of app composition is in travel, where a button for weather lookup could be embedded into an itinerary and dynamically interact with surrounding widgets to display relevant weather information.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "reply_count": 17,
        "reply_users_count": 5,
        "latest_reply": "1720163414.879879",
        "reply_users": [
            "U03U0SCU5LH",
            "U04717WKH5K",
            "UJBAJNFLK",
            "UBN9AFS0N",
            "UCUSW7WVD"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1720163414.879879",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BkUI0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://blog.bracha.org/primordialsoup.html?snapshot=AmpleforthViewer.vfuel&docName=BreakingSilos",
                                "text": "Breaking Silos"
                            },
                            {
                                "type": "text",
                                "text": " by Gilad Bracha\n\nExperiment: AI assisted summary edited by me to pique your interest (let me know what you think):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Modern applications are siloed and have difficulty cooperating with each other."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This was not always the case, exemplified by the Apple Newton, a mobile device released nearly 30 years ago."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Apps on the Newton were written in NewtonScript, a prototype-based language."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Newton applications had a flexible top-level view, enabling app compositionality where entire apps could be nested within others."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Objects in NewtonScript (called frames) inherited properties from both their prototype and their parent, facilitating UI use."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This inheritance allowed an app to function as a widget inside another app, enabling dynamic interaction between nested and enclosing apps."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Apps on the Newton persisted their data in object stores called soups, which were accessible by multiple apps."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The concept of co-designing language and UI existed earlier, exemplified by the Boxer system from the 1980s."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Another example of compositionality is Morphic, a graphics system developed in Self and later adapted for Squeak and Lively Kernel, focusing on graphical structure rather than application logic."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Inspired by Morphic, the idea of an app store with composable apps was proposed about twenty years ago."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "These apps would live-update, synchronize automatically, and be local-first, a concept predating Apple's app store."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Newspeak language derived partly from this effort."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A practical example of app composition is in travel, where a button for weather lookup could be embedded into an itinerary and dynamically interact with surrounding widgets to display relevant weather information."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT",
                    "UJBAJNFLK",
                    "U06131CATV3",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1719912782.250149",
        "client_msg_id": "dafea357-9054-4dbc-8ad5-b506fb38dce4",
        "text": "<https://alexanderobenauer.com/think/|The Interfaces With Which We Think >\n\n&gt; The concepts in modern operating systems \u2014 apps, windows, desktops, notifications, and so on \u2014 have so permeated our understanding of personal computing that it\u2019s hard to imagine anything else, let alone believe there could be anything better.It\u2019s easy to assume that this is, somehow, simply, _how computers work_.\n&gt; But this can\u2019t be further from the truth.",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://alexanderobenauer.com/think/",
                "service_icon": "https://alexanderobenauer.com/assets/icons/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://alexanderobenauer.com/think/",
                "fallback": "The Interfaces With Which We Think",
                "text": "The concepts in modern operating systems \u2014 apps, windows, desktops, notifications, and so on \u2014 have so permeated our understanding of personal computing, it\u2019s hard to imagine anything else, let alone believe there could be anything better.",
                "title": "The Interfaces With Which We Think",
                "title_link": "https://alexanderobenauer.com/think/",
                "service_name": "alexanderobenauer.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vFk07",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://alexanderobenauer.com/think/",
                                "text": "The Interfaces With Which We Think "
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The concepts in modern operating systems \u2014 apps, windows, desktops, notifications, and so on \u2014 have so permeated our understanding of personal computing that it\u2019s hard to imagine anything else, let alone believe there could be anything better.It\u2019s easy to assume that this is, somehow, simply, "
                            },
                            {
                                "type": "text",
                                "text": "how computers work",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\nBut this can\u2019t be further from the truth."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT",
                    "U85HCL7JP",
                    "U02QC0PPER3",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1719919708.409959",
        "client_msg_id": "79e01749-655e-4f1a-91b9-31c63e944a81",
        "text": "Similar problem statement: <https://joshondesign.com/2017/08/18/idealos_essay|Ideal OS>\nAlso Microsoft OLE comes to mind.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3dP0m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Similar problem statement: "
                            },
                            {
                                "type": "link",
                                "url": "https://joshondesign.com/2017/08/18/idealos_essay",
                                "text": "Ideal OS"
                            },
                            {
                                "type": "text",
                                "text": "\nAlso Microsoft OLE comes to mind."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04717WKH5K",
        "type": "message",
        "ts": "1719925044.318629",
        "client_msg_id": "e472147d-804e-4c1e-9baa-03dff051c108",
        "text": "See also the work that Jef Raskin was prevented from doing at Apple that ended up in the doomed Canon Cat system (cf his book 'The Humane Interface')",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/1V7l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See also the work that Jef Raskin was prevented from doing at Apple that ended up in the doomed Canon Cat system (cf his book 'The Humane Interface')"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719926863.173959",
        "client_msg_id": "69cfcec9-fe7d-4dd9-ae87-e4318e86be65",
        "text": "<@UBN9AFS0N> The summary looks good. How much did you edit it?",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yF7cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " The summary looks good. How much did you edit it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1719926928.885289",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1719927002.000000"
        },
        "client_msg_id": "f81b58b7-2d80-49ef-8ca0-d7fc7007e2d8",
        "text": "removed a couple items and trailing sentences that didn't add much",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2rav7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "removed a couple items and trailing sentences that didn't add much"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1719926939.186179",
        "client_msg_id": "391d04ee-31bc-4db6-bd2d-b0ba8e9d1cab",
        "text": "after reading the article of course :smile:",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MwmFH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "after reading the article of course "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719933651.938019",
        "client_msg_id": "76ee5c72-8825-483a-9279-f0a386ce8352",
        "text": "At the risk of a party foul -- did you mean 'pique' not 'pick'?",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5nSn8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At the risk of a party foul -- did you mean 'pique' not 'pick'?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1719933694.695139",
        "client_msg_id": "f7606a09-0c92-4130-9ea7-098354407363",
        "text": "<@UCUSW7WVD> probably, not sure about the correct spelling :smile:",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "93sij",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " probably, not sure about the correct spelling "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719933734.917879",
        "client_msg_id": "f245c76a-dd88-4cb8-ac42-58a7673008d1",
        "text": "Yeah just trying to understand what you meant..",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "evUS6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah just trying to understand what you meant.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1719933760.381249",
        "client_msg_id": "f4dbd918-1435-4912-b696-7e1b60a43c4f",
        "text": "should I fix it and make your comment stale? :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bsi4Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "should I fix it and make your comment stale? "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1719992900.380899",
        "edited": {
            "user": "U03U0SCU5LH",
            "ts": "1720075429.000000"
        },
        "client_msg_id": "1d015e52-91e7-4cc9-ab8f-100617988e1f",
        "text": "In my opinion this is the wrong way going about breaking silos. What we need is a separation of data and apps. If data is always examinable (an open binary format), you can have different apps accessing the same data, transforming it and pass to other apps. (Unix philosophy). This data can be live too and versioned. Apps would need to be stateless. Unfortunatly that goes against companies interests, so we can't have nice things.\n\nJust look at places where we don't have silos. Like image manipulation, some 3d, email.. and of course text.. there we have a strong standardization of data formats.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y9879",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my opinion this is the wrong way going about breaking silos. What we need is a separation of data and apps. If data is always examinable (an open binary format), you can have different apps accessing the same data, transforming it and pass to other apps. (Unix philosophy). This data can be live too and versioned. Apps would need to be stateless. Unfortunatly that goes against companies interests, so we can't have nice things.\n\nJust look at places where we don't have silos. Like image manipulation, some 3d, email.. and of course text.. there we have a strong standardization of data formats."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1720007647.011169",
        "client_msg_id": "ed51d9d1-b65c-4ce1-8624-3dbecfdf23b3",
        "text": "Bracha's Newspeak is part of the Smalltalk family. In Smalltalk, there is no data. There are only objects, and the only way to access objects is by \"sending messages\", which just means calling methods. Put differently: there's no data, only APIs. Data representation/format is alway an implementation detail.\nThis view has its good and bad sides, of course. The main disadvantage is the violation of the <https://www.w3.org/2001/tag/doc/leastPower.html|Rule of Least Power>, because the least-power-notation in this framing is a Turing-complete programming language. One consequence is that interoperability requires agreement on the programming language rather than just on a few data formats.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4viJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Bracha's Newspeak is part of the Smalltalk family. In Smalltalk, there is no data. There are only objects, and the only way to access objects is by \"sending messages\", which just means calling methods. Put differently: there's no data, only APIs. Data representation/format is alway an implementation detail.\nThis view has its good and bad sides, of course. The main disadvantage is the violation of the "
                            },
                            {
                                "type": "link",
                                "url": "https://www.w3.org/2001/tag/doc/leastPower.html",
                                "text": "Rule of Least Power"
                            },
                            {
                                "type": "text",
                                "text": ", because the least-power-notation in this framing is a Turing-complete programming language. One consequence is that interoperability requires agreement on the programming language rather than just on a few data formats."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1720009187.628889",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1720009259.000000"
        },
        "client_msg_id": "35171ff4-7711-4815-a0a8-40d281a8eee7",
        "text": "> \"take the hardest and most profound thing you need to do, make it great, and then build every easier thing out of it\"\n-- <https://worrydream.com/EarlyHistoryOfSmalltalk>\n\nSounds like a philosophical difference with the Rule of Least Power :joy:",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2ZCQw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"take the hardest and most profound thing you need to do, make it great, and then build every easier thing out of it\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-- "
                            },
                            {
                                "type": "link",
                                "url": "https://worrydream.com/EarlyHistoryOfSmalltalk"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSounds like a philosophical difference with the Rule of Least Power "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK",
                    "U0112C10V4Y"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1720075586.620429",
        "client_msg_id": "fd754163-2d0e-41c8-a82a-42cd0718def6",
        "text": "And that's why smalltalk or object oriented programming in general are a terrible idea. I think they work great in the small to abstract away the insides of say a string. Unfortunatly that was so successfull, that we just ran with it. Now we have input fields, inside boxes and panes inside windows, inside apps, inside companies. And all of this defaults having no access to the data.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XXaoH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And that's why smalltalk or object oriented programming in general are a terrible idea. I think they work great in the small to abstract away the insides of say a string. Unfortunatly that was so successfull, that we just ran with it. Now we have input fields, inside boxes and panes inside windows, inside apps, inside companies. And all of this defaults having no access to the data."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1720117569.799599",
        "client_msg_id": "89458999-d25d-49ba-a0bf-9f7000ef8cd4",
        "text": "That's not what happens in Smalltalk systems. There's a single memory space in which all objects live. No app boundaries. Tying things together into something new is straightforward. With modern UIs, such as <https://gtoolkit.com/|Glamorous Toolkit>, that's true even for GUI elements.\n\nThe problem is, of course, that all this harmonious co-existence works only for code written not only in Smalltalk, but in the same Smalltalk variant (there are many). It's the 1970s idea of a single ideal computing system that everyone will adopt because it's \"best\" that hasn't worked out. And once you need interoperability between systems designed with different priorities, you need weak coupling and the Rule of Least Power (which also has advantages inside something like a Smalltalk image, but that's a different story).",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https://gtoolkit.com/",
                "service_icon": "https://gtoolkit.com/favicon.ico",
                "thumb_url": "https://gtoolkit.com//assets/pictures/glamoroustoolkit-icon.png",
                "thumb_width": 1496,
                "thumb_height": 272,
                "id": 1,
                "original_url": "https://gtoolkit.com/",
                "fallback": "Glamorous Toolkit: Home",
                "text": "Glamorous Toolkit is the Moldable Development environment.",
                "title": "Home",
                "title_link": "https://gtoolkit.com/",
                "service_name": "Glamorous Toolkit"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "74In7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's not what happens in Smalltalk systems. There's a single memory space in which all objects live. No app boundaries. Tying things together into something new is straightforward. With modern UIs, such as "
                            },
                            {
                                "type": "link",
                                "url": "https://gtoolkit.com/",
                                "text": "Glamorous Toolkit"
                            },
                            {
                                "type": "text",
                                "text": ", that's true even for GUI elements.\n\nThe problem is, of course, that all this harmonious co-existence works only for code written not only in Smalltalk, but in the same Smalltalk variant (there are many). It's the 1970s idea of a single ideal computing system that everyone will adopt because it's \"best\" that hasn't worked out. And once you need interoperability between systems designed with different priorities, you need weak coupling and the Rule of Least Power (which also has advantages inside something like a Smalltalk image, but that's a different story)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1720117713.413039",
        "client_msg_id": "ac803468-35ab-4b17-89c1-da88b8eed5b0",
        "text": "I find Gilad Bracha's vision of composable apps in Newspeak very credible. I just doubt that many people would adopt it, even if there were polished implementation. It's just too weird for most people to even look at.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jwje4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find Gilad Bracha's vision of composable apps in Newspeak very credible. I just doubt that many people would adopt it, even if there were polished implementation. It's just too weird for most people to even look at."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1720158948.699709",
        "client_msg_id": "cc5e65aa-ea52-4eaf-a694-14d6c921db56",
        "text": "The real issue is encapsulation. The authority of ones data is at the mercy of the object or the app.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U0buK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The real issue is encapsulation. The authority of ones data is at the mercy of the object or the app."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1720163414.879879",
        "client_msg_id": "f6bca5a6-4ac9-4dd1-93c7-e97470015375",
        "text": "The owner of the data is also supposed to be the owner of the object/class. In the Smalltalk philosophy, generic data structures are always an implementation detail. There's always a class specificallly for your application data, and that's a class you own.",
        "team": "T5TCAFTA9",
        "thread_ts": "1719910206.179899",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KD9do",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The owner of the data is also supposed to be the owner of the object/class. In the Smalltalk philosophy, generic data structures are always an implementation detail. There's always a class specificallly for your application data, and that's a class you own."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]