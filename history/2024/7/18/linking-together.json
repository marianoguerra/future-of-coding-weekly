[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1721279487.692989",
        "client_msg_id": "E998297B-41A4-46B4-9CD0-908A1C3AFC8C",
        "text": "<https://merveilles.town/@zens/112805206600616310|This masto thread> should resonate with folks here. Teaser:\n\n&gt; fediverse is the kind of place where I can ask a question of \u201clet\u2019s say we\u2019re designing an operating system from scratch. Clean slate. Let\u2019s throw away all our old habits and legacy decisions. what\u2019s the minimal set of applications we need to make a new operating system useful\u201d\n&gt; \n&gt; and the top replies are vt100 emulator, virtual machine to run other operating systems, and c compiler to port vim\n&gt; \n&gt; like y\u2019all are missing the point of the question!",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "reply_count": 27,
        "reply_users_count": 6,
        "latest_reply": "1721491225.301399",
        "reply_users": [
            "U03U0SCU5LH",
            "U5STGTB3J",
            "U8A5MS6R1",
            "UJBAJNFLK",
            "UGWUJUZHT",
            "UCUSW7WVD"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SgGaD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://merveilles.town/@zens/112805206600616310",
                                "text": "This masto thread"
                            },
                            {
                                "type": "text",
                                "text": " should resonate with folks here. Teaser:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fediverse is the kind of place where I can ask a question of \u201clet\u2019s say we\u2019re designing an operating system from scratch. Clean slate. Let\u2019s throw away all our old habits and legacy decisions. what\u2019s the minimal set of applications we need to make a new operating system useful\u201d\n\nand the top replies are vt100 emulator, virtual machine to run other operating systems, and c compiler to port vim\n\nlike y\u2019all are missing the point of the question!"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "U06BM40PUR2",
                    "U013ZLJARC7"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UN57U8V53",
                    "U06131CATV3",
                    "U06BM40PUR2",
                    "U8A5MS6R1"
                ],
                "count": 5
            },
            {
                "name": "face_palm::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            },
            {
                "name": "joy",
                "users": [
                    "U02E4DAQGSZ",
                    "UML4ZEKDK",
                    "U023V63MF6V"
                ],
                "count": 3
            },
            {
                "name": "popcorn",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            },
            {
                "name": "orangutan",
                "users": [
                    "U079M43CQ31"
                ],
                "count": 1
            },
            {
                "name": "face_palm",
                "users": [
                    "U0258UX5F1C"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1721292444.484549",
        "edited": {
            "user": "U03U0SCU5LH",
            "ts": "1721292475.000000"
        },
        "client_msg_id": "2d5f5487-bb11-424e-b65c-f2d998bb9e01",
        "text": "Reminds me of a similar question to some of the top economists, \"if we could redo our tax system from scratch, how would that look?\"\nThey all basically said, its good the way it is, doesn't need change.\nI think there are several forces at play:\n\"You don't know enough, so you feel like all this complexity is unnecessary\"\n\"You know all the details and lost the big picture\",\n\"You have stakes in the game\"\n \"You resist change\"\n\"Something out of the ordinary does not get funded\"\n\"The idea, actually just adds to the complexity\"\n\"There is no transition from old to new\"\n\"The new idea is just bad\"",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bVqX1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of a similar question to some of the top economists, \"if we could redo our tax system from scratch, how would that look?\"\nThey all basically said, its good the way it is, doesn't need change.\nI think there are several forces at play:\n\"You don't know enough, so you feel like all this complexity is unnecessary\"\n\"You know all the details and lost the big picture\",\n\"You have stakes in the game\"\n \"You resist change\"\n\"Something out of the ordinary does not get funded\"\n\"The idea, actually just adds to the complexity\"\n\"There is no transition from old to new\"\n\"The new idea is just bad\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721293832.630459",
        "client_msg_id": "D9476F60-5558-460B-83D0-6988F3232D9A",
        "text": "If you look at a complex system that has evolved out of thousands (millions?) of little decisions over a long period of time, and then ask to redesign such a system from scratch, it\u2019s just overwhelming.\n\nThere are no good answers to the question, because all the answers we have found in the old system came out of this long grinding process. To answer the question, we\u2019d have to go on another long journey of making thousands of little decisions one by one all over again.\n\nI bet if we tried, we\u2019d end up somewhere completely different this time. But it\u2019s hard to convince people to do it all over again. Seems so inefficient.\n\nBut if you see it (oversimplified) as a binary decision tree of 1000 decisions made over time, it would be rather spectacular if we nailed each of those 1000 decisions the first time such that we would take exactly the same path again.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bcnmf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you look at a complex system that has evolved out of thousands (millions?) of little decisions over a long period of time, and then ask to redesign such a system from scratch, "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " just overwhelming"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere are no good answers to the question, because all the answers we have found in the old system came out of this long grinding process"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " To answer the question, "
                            },
                            {
                                "type": "text",
                                "text": "we\u2019d"
                            },
                            {
                                "type": "text",
                                "text": " have to go on another long journey of making thousands of little decisions one by one all over again"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nI bet if we tried, "
                            },
                            {
                                "type": "text",
                                "text": "we\u2019d"
                            },
                            {
                                "type": "text",
                                "text": " end up somewhere completely different this time"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But it\u2019s hard to convince people to do it all over again"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Seems so inefficient.\n\nBut if you see it (oversimplified) as a binary decision tree of 1000 decisions made over time, it would be rather spectacular if we nailed each of those 1000 decisions the first time such that we would take exactly the same path again."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721317585.631879",
        "client_msg_id": "dbaa1910-57b4-4e6f-a703-304867a45d01",
        "text": "<https://blog.sbensu.com/posts/demand-for-visual-programming/|We need visual programming. No, not like that.>\n\n&gt;  *Let's observe what developers _do_, not what they _say_.*\n&gt; \n&gt; Developers do spend the time to visualize aspects of their code but rarely the logic itself. They visualize other aspects of their software that are _important, implicit, and hard to understand_. Here are some visualizations that I encounter often in serious contexts of use:\n&gt; \u2022 Various ways to visualize the codebase overall.\n&gt; \u2022 Diagrams that show how computers are connected in a network\n&gt; \u2022 Diagrams that show how data is laid out in memory\n&gt; \u2022 Transition diagrams for state machines.\n&gt; \u2022 Swimlane diagrams for request / response protocols.\n&gt; \n&gt; _This_ is the visual programming developers are asking for.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1721377717.385419",
        "reply_users": [
            "UCUSW7WVD",
            "UC2A2ARPT",
            "UE1JQM9HQ",
            "UJBAJNFLK"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vypxB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://blog.sbensu.com/posts/demand-for-visual-programming/",
                                "text": "We need visual programming. No, not like that."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Let's observe what developers ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", not what they ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "say",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nDevelopers do spend the time to visualize aspects of their code but rarely the logic itself. They visualize other aspects of their software that are "
                            },
                            {
                                "type": "text",
                                "text": "important, implicit, and hard to understand",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Here are some visualizations that I encounter often in "
                            },
                            {
                                "type": "text",
                                "text": "serious contexts of use",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Various ways to visualize the codebase overall."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Diagrams that show how computers are connected in a network"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Diagrams that show how data is laid out in memory"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Transition diagrams for state machines."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Swimlane diagrams for request / response protocols."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "This",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the visual programming developers are asking for."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721317629.069319",
        "client_msg_id": "f4ab60dc-1b4c-4045-8733-2aa10068bc8a",
        "text": "Oh wait, this is of a piece with the previous post. I suppose it's also ok at the top-level..",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aq6/I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh wait, this is of a piece with the previous post. I suppose it's also ok at the top-level.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1721317807.883659",
        "client_msg_id": "5b3f2dfd-ac4b-42e7-97c6-753a50b50877",
        "text": "As a follow-up to the above, there's this nice blog post from <@UCYF51KT2> on _diagrams as code:_ <https://tonsky.me/blog/diagrams/|Where Should Visual Programming Go?>\n\n&gt; Level 3: Diagrams are code\n&gt; This is what the endgame should be IMO. Some things are better represented as text. Some are best understood visually. We should mix and match what works best on a case-by-case basis. Don\u2019t try to visualize simple code. Don\u2019t try to write code where a diagram is better.\nHear, hear!",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "reply_count": 20,
        "reply_users_count": 6,
        "latest_reply": "1721593798.308779",
        "reply_users": [
            "UCUSW7WVD",
            "UBKNXPBAB",
            "U02E4DAQGSZ",
            "UC2A2ARPT",
            "UGWUJUZHT",
            "U06BUK2M2RH"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XnKdQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As a follow-up to the above, there's this nice blog post from "
                            },
                            {
                                "type": "user",
                                "user_id": "UCYF51KT2"
                            },
                            {
                                "type": "text",
                                "text": " on "
                            },
                            {
                                "type": "text",
                                "text": "diagrams as code: ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https://tonsky.me/blog/diagrams/",
                                "text": "Where Should Visual Programming Go?"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Level 3: Diagrams are code\nThis is what the endgame should be IMO. Some things are better represented as text. Some are best understood visually. We should mix and match what works best on a case-by-case basis. Don\u2019t try to visualize simple code. Don\u2019t try to write code where a diagram is better."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHear, hear!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U06131CATV3",
                    "U8A5MS6R1",
                    "UFEQUBNNT",
                    "U05SU27S1M2",
                    "U079M43CQ31",
                    "U05UK5T7LPP",
                    "U0258UX5F1C",
                    "U06BUK2M2RH"
                ],
                "count": 9
            },
            {
                "name": "100",
                "users": [
                    "U06BUK2M2RH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1721317812.967029",
        "client_msg_id": "b04c5d17-9b0b-4528-b914-d7fc56a5dd1e",
        "text": "Fixed :)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z+GWJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fixed :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721317982.990349",
        "client_msg_id": "83382111-24b1-43c5-a8fc-cfcfc4ded0e8",
        "text": "Now I'm wondering what a _programming language_ looks like that makes it easy to create such visualizations and keep them updated over time.\n\nMy biases make me go first to Lisp, but in practice it's actually no easier to parse Lisp on a semantic level (e.g. detecting new variable scopes) than any other language.\n\nMaybe Glamorous Toolkit? <@UJBAJNFLK> <@UE1JQM9HQ>",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xm2xw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now I'm wondering what a "
                            },
                            {
                                "type": "text",
                                "text": "programming language",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " looks like that makes it easy to create such visualizations and keep them updated over time.\n\nMy biases make me go first to Lisp, but in practice it's actually no easier to parse Lisp on a semantic level (e.g. detecting new variable scopes) than any other language.\n\nMaybe Glamorous Toolkit? "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1721318365.599639",
        "client_msg_id": "CD657609-D9D9-4FC0-8792-3DADC3BB9B96",
        "text": "The visualizations you are talking about are first and foremost for reading, not for writing, which is indeed the most costly and painful problem in software engineering today. As such, this is not a programming language issue, but an environment issue. Moldable Development is a systematic method for doing exactly that. It turns out that reading needs are orthogonal with writing needs. Glamorous Toolkit is the most advanced and extensive environment that shows how far doing this systematically can get you. I do expect people will copy GT, and they very much should. My only worry is that they will not copy everything.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0o2Hl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The visualizations you are talking about are first and foremost for reading, not for writing, which is indeed the most costly and painful problem in software engineering today. As such, this is not a programming language issue, but an environment issue. Moldable Development is a systematic method for doing exactly that. It turns out that reading needs are orthogonal with writing needs. Glamorous Toolkit is the most advanced and extensive environment that shows how far doing this systematically can get you. I do expect people will copy GT, and they very much should. My only worry is that they will not copy everything."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721318460.246209",
        "client_msg_id": "0af93cf1-3110-4775-8ef2-acf4c2bfe285",
        "text": "Thanks! Does GT currently support visualizations like call graphs (I'm sure), automatically extracting from code visualizations like state machines, heat maps, time sequence diagrams? Any programming language..",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1H1Kh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! Does GT currently support visualizations like call graphs (I'm sure), automatically extracting from code visualizations like state machines, heat maps, time sequence diagrams? Any programming language.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1721320536.722489",
        "client_msg_id": "3FE7C321-F2BC-4DE5-AE3C-D313EBB7C0C5",
        "text": "The idea is to not restrict the specific visualizations, but rather to enable one to construct custom visualizations of arbitrary input data. It is many times more valuable and cheaper to build custom visualizations than generic ones. There patterns language and the components are reusable, but the specific visual representations are less interesting for reuse.\n\nThe question about programming languages is interesting. We can think of it as \u201care there parsers and semantic importers for language X\u201d. But we can also think of it as \u201chow do we build a parser and an importer for language X\u201d. The former will lead to a library of parsers (like that built around ANTLr). The latter will lead to a dedicated environment for building parsers and importers faster. In GT we show that it is possible to have both, but really the interesting one is how to adjust to a language that you might not know.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5veCu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The idea is to not restrict the specific visualizations, but rather to enable one to construct custom visualizations of arbitrary input data. It is many times more valuable and cheaper to build custom visualizations than generic ones. There patterns language and the components are reusable, but the specific visual representations are less interesting for reuse.\n\nThe question about programming languages is interesting. We can think of it as \u201care there parsers and semantic importers for language X\u201d. But we can also think of it as \u201chow do we build a parser and an importer for language X\u201d. The former will lead to a library of parsers (like that built around ANTLr). The latter will lead to a dedicated environment for building parsers and importers faster. In GT we show that it is possible to have both, but really the interesting one is how to adjust to a language that you might not know."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721331261.618579",
        "client_msg_id": "35a86adf-0663-4dcc-b8a3-23dafb6b6ee7",
        "text": "The path depends on the ongoing context as well. What specific hardware tech is available and feasible. What ideas click and get funding, or get picked up by a business that happens to take off due to market factors.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ciD8B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The path depends on the ongoing context as well. What specific hardware tech is available and feasible. What ideas click and get funding, or get picked up by a business that happens to take off due to market factors."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721331618.212089",
        "client_msg_id": "4b09c38c-998b-4e47-a722-989dacd4d6ca",
        "text": "&gt; Think of it as a game engine like Godot or Unity. In them, you can write normal text code, but you can also create and edit scenes. These scenes are stored in their own files, have specialized editors that know how to edit them, and have no code representation. Because why? The visual way _in this particular case_ is better.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OKu13",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Think of it as a game engine like Godot or Unity. In them, you can write normal text code, but you can also create and edit scenes. These scenes are stored in their own files, have specialized editors that know how to edit them, and have no code representation. Because why? The visual way "
                            },
                            {
                                "type": "text",
                                "text": "in this particular case",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is better."
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "text": "\u201cLevel 3\u201d, when it\u2019s not code & diagram as universal parallel representations but domain-specific _visual syntaxes_ (as <@UCYF51KT2> says he wants) has been explored a number of times. Here is the relevant section from <https://arxiv.org/pdf/2303.06777>, with some hopefully helpful citations.",
        "files": [
            {
                "id": "F07D2AT8ASZ",
                "created": 1721367981,
                "timestamp": 1721367981,
                "name": "Screenshot 2024-07-18 at 10.46.15\u202fPM.png",
                "title": "Screenshot 2024-07-18 at 10.46.15\u202fPM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 62578,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07D2AT8ASZ/screenshot_2024-07-18_at_10.46.15___pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07D2AT8ASZ/download/screenshot_2024-07-18_at_10.46.15___pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 60,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 80,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 120,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 133,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 159,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D2AT8ASZ-0020fcf455/screenshot_2024-07-18_at_10.46.15___pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 170,
                "original_w": 1192,
                "original_h": 198,
                "thumb_tiny": "AwAHADDQYZbpTce1PP3qSgBuDRg07vRQAlAHIpaB1oA//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F07D2AT8ASZ/screenshot_2024-07-18_at_10.46.15___pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07D2AT8ASZ-7545752d7b",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F07DU1RDQMN",
                "created": 1721367993,
                "timestamp": 1721367993,
                "name": "Screenshot 2024-07-18 at 10.46.31\u202fPM.png",
                "title": "Screenshot 2024-07-18 at 10.46.31\u202fPM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 299170,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07DU1RDQMN/screenshot_2024-07-18_at_10.46.31___pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07DU1RDQMN/download/screenshot_2024-07-18_at_10.46.31___pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 284,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 379,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 569,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 632,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 758,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07DU1RDQMN-b0a839ca1b/screenshot_2024-07-18_at_10.46.31___pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 809,
                "original_w": 1198,
                "original_h": 946,
                "thumb_tiny": "AwAlADDRYkMAB1600O/HA70rY3gknI9KXzB70AKpJXJGDS5pM5HFN49aAH0VFyXOSccYxSru8wYztxz9aAFYZPJ/WjaP8mkb7xpKAH9scEfWk2r602igB21fWlCqDxTKVfvCgBxXJzmk2e9PooAZs96NnvT6SgBuz3pQuDnNLS0Af//Z",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F07DU1RDQMN/screenshot_2024-07-18_at_10.46.31___pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07DU1RDQMN-c3aa6b7ade",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+1PyW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cLevel 3\u201d, when it\u2019s not code & diagram as universal parallel representations but domain-specific "
                            },
                            {
                                "type": "text",
                                "text": "visual syntaxes",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (as "
                            },
                            {
                                "type": "user",
                                "user_id": "UCYF51KT2"
                            },
                            {
                                "type": "text",
                                "text": " says he wants) has been explored a number of times. Here is the relevant section from "
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/pdf/2303.06777"
                            },
                            {
                                "type": "text",
                                "text": ", with some hopefully helpful citations."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721368073.990779",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1721368102.000000"
        },
        "client_msg_id": "dd5c8ee7-8f04-4f43-be4d-09b09d8fe3df",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UF6RLAL7J",
                    "U02E4DAQGSZ"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721377717.385419",
        "client_msg_id": "ee41f3c3-1e60-4ae0-9cc8-7c1670181662",
        "text": "That's indeed the main lesson learned (for me) from a few years in \"moldable development\" land. Support for situated development tools is much more valuable than generic development tools. The tools are better adapted to the specific task, and perhaps even more importantly, the user understands the situated tool perfectly well.\n\nI suspect that all this remains true if you cross out \"development\" - it should apply to any software tool. My near-term goal is \"moldable data science\".",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W43sY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's indeed the main lesson learned (for me) from a few years in \"moldable development\" land. Support for situated development tools is much more valuable than generic development tools. The tools are better adapted to the specific task, and perhaps even more importantly, the user understands the situated tool perfectly well.\n\nI suspect that all this remains true if you cross out \"development\" - it should apply to any software tool. My near-term goal is \"moldable data science\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UE1JQM9HQ",
                    "UCUSW7WVD",
                    "U05UK5T7LPP"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721378377.553849",
        "client_msg_id": "8a0f5b60-0ed7-4c1e-9fa0-b98a2d263489",
        "text": "If you look at complex social systems such as tax rules, big changes happen only after some major breakdown: after wars, revolutions, etc. Inversely, accumulated unsolved problems are the cause of such major breakdowns. The interesting fundamental question thus is if complex systems can undergo major change in an evolutionary rather then disruptive way. I don't know the answer.\n\nIn a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems.\n\nAn underappreciated concept in this space is the narrow waist (<https://www.oilshell.org/cross-ref.html?tag=narrow-waist#narrow-waist>): a system layer that permits independent evolution both above and below it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BNYC6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you look at complex social systems such as tax rules, big changes happen only after some major breakdown: after wars, revolutions, etc. Inversely, accumulated unsolved problems are the cause of such major breakdowns. The interesting fundamental question thus is if complex systems can undergo major change in an evolutionary rather then disruptive way. I don't know the answer.\n\nIn a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems.\n\nAn underappreciated concept in this space is the narrow waist ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.oilshell.org/cross-ref.html?tag=narrow-waist#narrow-waist"
                            },
                            {
                                "type": "text",
                                "text": "): a system layer that permits independent evolution both above and below it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1721381519.804989",
        "client_msg_id": "f5acd5c6-f02a-43c8-973e-89351605e463",
        "text": "Isn't the \"narrow waist\" part of the problem and not the solution? One could argue that CPU &lt;-&gt; GPU divide is a narrow waist. Both are developed independently, but at this point we're really putting a smaller supercomputer into a bigger computer.\nThe communication between the two is a big source of complexity in todays compute.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tQt4p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't the \"narrow waist\" part of the problem and not the solution? One could argue that CPU <-> GPU divide is a narrow waist. Both are developed independently, but at this point we're really putting a smaller supercomputer into a bigger computer.\nThe communication between the two is a big source of complexity in todays compute."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721383237.747189",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1721383299.000000"
        },
        "client_msg_id": "A3AC05CD-1C92-43BB-AF26-F8BEDB2A1205",
        "text": "I have also been struggling with the \u201cnarrow waist\u201d concept. I\u2019m not entirely sure how to properly distinguish it from or how it interacts with layer architectures (which seem to be the primary example) and separation between interface and implementation.\n\nThere is something important all of these point at, which has to do with stabilizing one part while allowing another to change. But the distinction isn\u2019t as clear as they all make it look.\n\nThe description I like most so far is the one Herbert Simon makes in _The Architecture of Complexity_, where he talks about \u201cnearly decomposable systems\u201d. That seems to capture the not quite clear boundary between what can change and what is stable best. \n\nAnd I have a suspicion that there is no clear boundary that can be drawn, and that the subtle interactions between different scales, what makes Simon call it _*nearly*_ decomposable, are actually not a bug but a feature.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6uCbe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have also been struggling with the \u201cnarrow waist\u201d concept. I\u2019m not entirely sure how to properly distinguish it from or how it interacts with layer architectures (which seem to be the primary example) and separation between interface and implementation.\n\nThere is something important all of these point at, which has to do with stabilizing one part while allowing another to change. But the distinction isn\u2019t as clear as they all make it look.\n\nThe description I like most so far is the one Herbert Simon makes in "
                            },
                            {
                                "type": "text",
                                "text": "The Architecture of Complexity",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where he talks about \u201cnearly decomposable systems\u201d. That seems to capture the not quite clear boundary between what can change and what is stable best. \n\nAnd I have a suspicion that there is no clear boundary that can be drawn, and that the subtle interactions between different scales, what makes Simon call it "
                            },
                            {
                                "type": "text",
                                "text": "nearly",
                                "style": {
                                    "bold": true,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " decomposable, are actually not a bug but a feature."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Yeah this is basically notebook programming. There are two levels to what you want to diagram too. 1. the program specification (e.g. the source or configuration) or 2. The runtime state. Text source code is just a narrow view of 1. I think that can be enhanced with diagrams across for both 1 and 2. <https://observablehq.com/plot/> is incredibly flexible for quite a huge range of visualizations (grammar of graphics). I use it for schematic like diagrams, but obviously it also does more recognisable mathy charts too.",
        "files": [
            {
                "id": "F07D6E4LGQ2",
                "created": 1721384526,
                "timestamp": 1721384526,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U02E4DAQGSZ",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 246590,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07D6E4LGQ2/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07D6E4LGQ2/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 337,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 450,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 674,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 749,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 899,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6E4LGQ2-261eb4b5cb/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 959,
                "original_w": 1990,
                "original_h": 1864,
                "thumb_tiny": "AwAsADDSVQvAz+JpaKM0AFFGRSdxzQAvNFFHegBD1paQ0fTNAC0UmPc0tABR3NFHegBD1paKQAUAGaOciloxQAUd6MCjFAH/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U02E4DAQGSZ/F07D6E4LGQ2/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07D6E4LGQ2-a4a8cc933f",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U02E4DAQGSZ",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G3ff2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah this is basically notebook programming. There are two levels to what you want to diagram too. 1. the program specification (e.g. the source or configuration) or 2. The runtime state. Text source code is just a narrow view of 1. I think that can be enhanced with diagrams across for both 1 and 2. "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/plot/"
                            },
                            {
                                "type": "text",
                                "text": " is incredibly flexible for quite a huge range of visualizations (grammar of graphics). I use it for schematic like diagrams, but obviously it also does more recognisable mathy charts too."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721384586.715049",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1721384626.000000"
        },
        "client_msg_id": "05db7533-7693-442b-96d4-361ca69d38f6",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721389030.240499",
        "client_msg_id": "b9c28ad9-eda0-49e8-89a5-b6aad1a3ae52",
        "text": "&gt; stabilizing one part while allowing another to change\nQuestion: Is the /bin/sh pipe operator `|` a (restricted) form of narrow waist?",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CGQ+Q",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "stabilizing one part while allowing another to change"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nQuestion: Is the /bin/sh pipe operator "
                            },
                            {
                                "type": "text",
                                "text": "|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a (restricted) form of narrow waist?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@U02E4DAQGSZ> This isn\u2019t \u201cbasically notebook programming\u201d if that\u2019s taken in the sense of notebook programming today, right? Notebooks today can\u2019t use graphics to define part of a program, only to visualize data. Here\u2019s another screenshot from my paper I linked above.",
        "files": [
            {
                "id": "F07D56L4XJR",
                "created": 1721403653,
                "timestamp": 1721403653,
                "name": "Screenshot 2024-07-19 at 8.40.06\u202fAM.png",
                "title": "Screenshot 2024-07-19 at 8.40.06\u202fAM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 277232,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07D56L4XJR/screenshot_2024-07-19_at_8.40.06___am.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07D56L4XJR/download/screenshot_2024-07-19_at_8.40.06___am.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 236,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 315,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 473,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 525,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 630,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D56L4XJR-1c223368a0/screenshot_2024-07-19_at_8.40.06___am_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 672,
                "original_w": 1672,
                "original_h": 1098,
                "thumb_tiny": "AwAfADDRfjoTTMn1P509+1NB+lABk+ppd5pM+woz7CgBdxoDEkUmfYUoPI4FACv2pg6809gTjFJsNACceho496XYaNh9qAE49DSjGR1o2n1pQpBFAH//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F07D56L4XJR/screenshot_2024-07-19_at_8.40.06___am.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07D56L4XJR-43e990fca9",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tkV++",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " This isn\u2019t \u201cbasically notebook programming\u201d if that\u2019s taken in the sense of notebook programming today, right? Notebooks today can\u2019t use graphics to define part of a program, only to visualize data. Here\u2019s another screenshot from my paper I linked above."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721403667.690699",
        "client_msg_id": "ac273e0d-4a66-446f-812a-8a70a13e4d90",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721403731.829909",
        "client_msg_id": "ee7700cd-eade-4f3f-91b0-d11c356a72d0",
        "text": "I begin to wonder whether my paper is relevant to this discussion and could perhaps provide a clarifying framework.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wXMZ8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I begin to wonder whether my paper is relevant to this discussion and could perhaps provide a clarifying framework."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UML4ZEKDK",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721405887.139429",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1721406410.000000"
        },
        "client_msg_id": "e997b778-a767-43eb-b271-312458637915",
        "text": "notebooks are definitely capable of reading external data and making dynamic, executable decisions based on it. The also have a ton of affordances for representing data visually, and for implementing UIs inline. So together all those things seem like level 3 to me, but some assembly is required. The browser itself has <https://observablehq.com/@tomlarkworthy/local-storage-view|local storage >and the env has internet access so I think persistence is a red herring if you consider the system as a whole.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eVG+l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "notebooks are definitely capable of reading external data and making dynamic, executable decisions based on it. The also have a ton of affordances for representing data visually, and for implementing UIs inline. So together all those things seem like level 3 to me, but some assembly is required. The browser itself has "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@tomlarkworthy/local-storage-view",
                                "text": "local storage "
                            },
                            {
                                "type": "text",
                                "text": "and the env has internet access so I think persistence is a red herring if you consider the system as a whole."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1721406666.662579",
        "client_msg_id": "ce0d0ea0-f2b2-4b37-9bc3-4c0bd327e71c",
        "text": "What <@UCYF51KT2> is arguing for in level 3, and what <@UBKNXPBAB> seems to be referring to, is the desire for such tools that _don't_ require \"some assembly\". The amount of assembly needed to go from notebook to programming-with-diagrams is about the same amount of assembly to go from smalltalk to programming-with-diagrams or the web platform to programming-with-diagrams. So while notebooks certainly are nice environments to work in, and while it would be nice if notebooks offered p-w-d out of the box, I don't think it's true that \"this is basically notebook programming\", unless it's also true that this is basically smalltalk or basically javascript.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RzRf8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What "
                            },
                            {
                                "type": "user",
                                "user_id": "UCYF51KT2"
                            },
                            {
                                "type": "text",
                                "text": " is arguing for in level 3, and what "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " seems to be referring to, is the desire for such tools that "
                            },
                            {
                                "type": "text",
                                "text": "don't",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " require \"some assembly\". The amount of assembly needed to go from notebook to programming-with-diagrams is about the same amount of assembly to go from smalltalk to programming-with-diagrams or the web platform to programming-with-diagrams. So while notebooks certainly are nice environments to work in, and while it would be nice if notebooks offered p-w-d out of the box, I don't think it's true that \"this is basically notebook programming\", unless it's also true that this is basically smalltalk or basically javascript."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721409850.042859",
        "client_msg_id": "b64a5c24-a421-4513-9618-35eed5168300",
        "text": "I appreciate the reminder to go reread <@UBKNXPBAB>'s paper. Very useful framework and I'd completely forgotten about it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XH8GS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I appreciate the reminder to go reread "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": "'s paper. Very useful framework and I'd completely forgotten about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            },
            {
                "name": "pray",
                "users": [
                    "UBKNXPBAB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721410128.690499",
        "client_msg_id": "f8930a78-440a-4240-9d0f-dbdf88cb6d99",
        "text": "&gt; In a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems.\nIndeed. Any foc style work or ideation we do should completely ignore the status quo for this reason. I feel if you think about product-market-fit you've already lost. Depends on your goals of course, I'm taking about research.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2F+xh",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIndeed. Any foc style work or ideation we do should completely ignore the status quo for this reason. I feel if you think about product-market-fit you've already lost. Depends on your goals of course, I'm taking about research."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721413560.288119",
        "client_msg_id": "d9290f00-874d-4737-9ac1-cf4622e5ba02",
        "text": "With great timing, somebody just showed me <https://holzer.online/articles/calculate-contrast-ratio/index.html> which manages in a very narrow way to be both live and rich (if I understand correctly).\n\nStill not composable, though..",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https://holzer.online/articles/calculate-contrast-ratio/index.html",
                "id": 1,
                "original_url": "https://holzer.online/articles/calculate-contrast-ratio/index.html",
                "fallback": "How to calculate the contrast ratio of two colors - Fabian's public notepad",
                "text": "Thoughts on topics like software engineering, web development, blogging and the web in general",
                "title": "How to calculate the contrast ratio of two colors - Fabian's public notepad",
                "title_link": "https://holzer.online/articles/calculate-contrast-ratio/index.html",
                "service_name": "holzer.online"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lXFr3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With great timing, somebody just showed me "
                            },
                            {
                                "type": "link",
                                "url": "https://holzer.online/articles/calculate-contrast-ratio/index.html"
                            },
                            {
                                "type": "text",
                                "text": " which manages in a very narrow way to be both live and rich (if I understand correctly).\n\nStill not composable, though.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721416401.970359",
        "client_msg_id": "ca144f6a-3dfe-4239-98d7-037594129b0b",
        "text": "<@U03U0SCU5LH> I wouldn't call CPU/GPU a narrow waist. CPU and GPU are not different technology layers. CPUs are not implemented in terms of GPUs, nor the other way round.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b+mS4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03U0SCU5LH"
                            },
                            {
                                "type": "text",
                                "text": " I wouldn't call CPU/GPU a narrow waist. CPU and GPU are not different technology layers. CPUs are not implemented in terms of GPUs, nor the other way round."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721416530.218349",
        "client_msg_id": "279850f6-46c4-4a8c-846f-14cf2ce8c3e6",
        "text": "<@U5STGTB3J> I agree that Simon's perspective is still a very useful one, though rarely adopted in practice. But I see this as distinct from the narrow waist context, which is about layers, not interacting modules.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hTzUK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I agree that Simon's perspective is still a very useful one, though rarely adopted in practice. But I see this as distinct from the narrow waist context, which is about layers, not interacting modules."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721418672.242329",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1721418791.000000"
        },
        "client_msg_id": "b5ae460e-522c-46c3-8be5-f5b1ad7087f9",
        "text": "Now I'm rereading <https://faculty.sites.iastate.edu/tesfatsi/archive/tesfatsi/ArchitectureOfComplexity.HSimon1962.pdf>\n\nI swear, sometimes I think I only read the first 5 pages of any paper. I very often have no memory of the rest.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tl1RD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now I'm rereading "
                            },
                            {
                                "type": "link",
                                "url": "https://faculty.sites.iastate.edu/tesfatsi/archive/tesfatsi/ArchitectureOfComplexity.HSimon1962.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI swear, sometimes I think I only read the first 5 pages of any paper. I very often have no memory of the rest."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "A good example of a narrow waist is in the internet architecture. TCP/IP is the waist with heterogeneity and evolution both above and below it.\n\nI believe the concept of a file is also a narrow waist. Not only do you have different filesystems underneath, you can also map it to different mediums (SSD, HDD, optical, remote). Of course there is the entire world of applications above it.",
        "files": [
            {
                "id": "F07D6H51KJR",
                "created": 1721419414,
                "timestamp": 1721419414,
                "name": "20240719_130236.jpg",
                "title": "20240719_130236.jpg",
                "mimetype": "image/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "U8A5MS6R1",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 905433,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07D6H51KJR/20240719_130236.jpg",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07D6H51KJR/download/20240719_130236.jpg",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_64.jpg",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_80.jpg",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_360.jpg",
                "thumb_360_w": 270,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_480.jpg",
                "thumb_480_w": 360,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_160.jpg",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_720.jpg",
                "thumb_720_w": 540,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_800.jpg",
                "thumb_800_w": 800,
                "thumb_800_h": 1067,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_960.jpg",
                "thumb_960_w": 720,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07D6H51KJR-5883640cda/20240719_130236_1024.jpg",
                "thumb_1024_w": 768,
                "thumb_1024_h": 1024,
                "original_w": 3000,
                "original_h": 4000,
                "thumb_tiny": "AwAwACSUWsK/wA+7GniGH/nmlObrR0NIYnkw/wBxKPIi7ItO5pe3FMQzyIv7g/OjyIv7g/OpKKAGHvR+tNPWjBz0NIBy9acBjuaaOtOAyOaYC0UDpxRQBCeT1pQPcVGTzTwaAH49xS8etMzS0APHSlpqniloA//Z",
                "permalink": "https://futureofcoding.slack.com/files/U8A5MS6R1/F07D6H51KJR/20240719_130236.jpg",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07D6H51KJR-888091e9f4",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U8A5MS6R1",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vbyq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A good example of a narrow waist is in the internet architecture. TCP/IP is the waist with heterogeneity and evolution both above and below it.\n\nI believe the concept of a file is also a narrow waist. Not only do you have different filesystems underneath, you can also map it to different mediums (SSD, HDD, optical, remote). Of course there is the entire world of applications above it."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721419619.271729",
        "client_msg_id": "7080527f-cd69-4052-9aab-441db7640b57",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420135.478359",
        "client_msg_id": "467aba81-ca3b-4c74-87c7-ef5663b944e5",
        "text": "<@U02E4DAQGSZ>: Notebooks are great at displaying runtime state. You can also use them to render UIs, with which you can modify transient state. But the persistent code that makes up a notebook can only be edited through the notebook\u2019s code editor. If I want to edit a state chart graphically and have that be part of the code my notebook runs, I can\u2019t do that with Observable or Jupyter or whatever without very awkward workflows (like copy-pasting text from an Observable output cell into a code cell). Interactions with graphical things rendered in a notebook don\u2019t survive a browser refresh. So they do not pull off the <@UCYF51KT2> level-3 thing.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sr63s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": ": Notebooks are great at displaying runtime state. You can also use them to render UIs, with which you can modify transient state. But the persistent code that makes up a notebook can only be edited through the notebook\u2019s code editor. If I want to edit a state chart graphically and have that be part of the code my notebook runs, I can\u2019t do that with Observable or Jupyter or whatever without very awkward workflows (like copy-pasting text from an Observable output cell into a code cell). Interactions with graphical things rendered in a notebook don\u2019t survive a browser refresh. So they do not pull off the "
                            },
                            {
                                "type": "user",
                                "user_id": "UCYF51KT2"
                            },
                            {
                                "type": "text",
                                "text": " level-3 thing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420174.061549",
        "client_msg_id": "6aa50ab0-34bc-4133-9193-98ac1c157cdf",
        "text": "(There are some Jupyter extensions like mage that partially fix this.)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mdM4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(There are some Jupyter extensions like mage that partially fix this.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420326.876539",
        "client_msg_id": "7013bebb-3188-4377-9084-8f23614ad19b",
        "text": "I roughly agree with <@UC2A2ARPT>\u2019s response, except that notebooks do have a slight advantage \u2013 if I\u2019m ok editing a \u201cdiagrammatic program\u201d through textual data, then I can do that in Observable, and also have Observable visualize the \u201cdiagrammatic program\u201d, live, in the place where I\u2019m editing it. Doing that in a trad dev environment would make it harder to see that visualization.\n\nMy issue is that I don\u2019t want to edit a diagrammatic program through textual data \u2013 I wanna edit it through a diagram!",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qGslF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I roughly agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s response, except that notebooks do have a slight advantage \u2013 if I\u2019m ok editing a \u201cdiagrammatic program\u201d through textual data, then I can do that in Observable, and also have Observable visualize the \u201cdiagrammatic program\u201d, live, in the place where I\u2019m editing it. Doing that in a trad dev environment would make it harder to see that visualization.\n\nMy issue is that I don\u2019t want to edit a diagrammatic program through textual data \u2013 I wanna edit it through a diagram!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420725.120529",
        "client_msg_id": "bb7b8b80-f56c-40d5-a680-d87194c83ea3",
        "text": "<@UCUSW7WVD> That website is an interesting case, because there we\u2019re not talking about a program-authoring environment being live and/or rich; we\u2019re talking about a (one-off) program-reading environment being live and/or rich. I agree that it\u2019s kinda live! (Wish it had a more fine-grained liveness tho \u2013 like don\u2019t you want to see the relativeLuminance values, not just the final output?) As a test rig of the code, it\u2019s kinda rich, in that you\u2019re editing the test inputs with a direct-manipulation editor\u2026 but it feels weird to call that rich, cuz we\u2019re not editing the _program_ in a rich way, just some test inputs. But I see where you\u2019re coming from.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Wxfi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " That website is an interesting case, because there we\u2019re not talking about a program-authoring environment being live and/or rich; we\u2019re talking about a (one-off) program-reading environment being live and/or rich. I agree that it\u2019s kinda live! (Wish it had a more fine-grained liveness tho \u2013 like don\u2019t you want to see the relativeLuminance values, not just the final output?) As a test rig of the code, it\u2019s kinda rich, in that you\u2019re editing the test inputs with a direct-manipulation editor\u2026 but it feels weird to call that rich, cuz we\u2019re not editing the "
                            },
                            {
                                "type": "text",
                                "text": "program",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a rich way, just some test inputs. But I see where you\u2019re coming from."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721422293.900169",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1721422588.000000"
        },
        "client_msg_id": "4652e2f0-5380-47b4-9689-9afb64c10722",
        "text": "Ok, I'm gonna do one more comment on the subject of how come I don't remember all this from _The architecture of complexity_. Hopefully it's not too off-topic.\n\nIn 2 pages from page 8 to page 10, the paper makes the statement that I think Stefan was pointing at above:\n\u2022 When subsystems are out of equilibrium, you can ignore macroscopic interactions between subsystems. They're in the noise compared to the churn going on within each subsystem.\n\u2022 When subsystems are in equilibrium, cross-subsystem interactions dominate. You can even summarize each subsystem with a few gross aggregate metrics.\nThis duality is really interesting! It connects up with Christopher Alexander's _A City is not a Tree_ (<https://www.patternlanguage.com/archive/cityisnotatree.html>)\n\nHowever, in the rest of the (17-page) paper Simon focuses exclusively on the second bullet. The result is to belabor something we moderns at least get told all the time: to manage complexity, divide and conquer. This is why I totally missed the gold.\n\nI think I'm saying I appreciate <@U5STGTB3J> for highlighting this point almost more than I appreciate Herb Simon :smile:\n\nPerhaps an alternative explanation is that Herb Simon had several thoughts on the subject and put them into a single paper. If so, a unitary introduction and conclusion feels counter-productive. This is a series of short stories, not a novella.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e2sis",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, I'm gonna do one more comment on the subject of how come I don't remember all this from "
                            },
                            {
                                "type": "text",
                                "text": "The architecture of complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Hopefully it's not too off-topic.\n\nIn 2 pages from page 8 to page 10, the paper makes the statement that I think Stefan was pointing at above:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "When subsystems are out of equilibrium, you can ignore macroscopic interactions between subsystems. They're in the noise compared to the churn going on within each subsystem."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "When subsystems are in equilibrium, cross-subsystem interactions dominate. You can even summarize each subsystem with a few gross aggregate metrics."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis duality is really interesting! It connects up with Christopher Alexander's "
                            },
                            {
                                "type": "text",
                                "text": "A City is not a Tree",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.patternlanguage.com/archive/cityisnotatree.html"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nHowever, in the rest of the (17-page) paper Simon focuses exclusively on the second bullet. The result is to belabor something we moderns at least get told all the time: to manage complexity, divide and conquer. This is why I totally missed the gold.\n\nI think I'm saying I appreciate "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " for highlighting this point almost more than I appreciate Herb Simon "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPerhaps an alternative explanation is that Herb Simon had several thoughts on the subject and put them into a single paper. If so, a unitary introduction and conclusion feels counter-productive. This is a series of short stories, not a novella."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721422571.053629",
        "client_msg_id": "293d6a23-7ab1-410b-8724-380d4bcc5e16",
        "text": "observable views are a UI + a data-channel and they can be 2-way bound to other UI components, composed <https://observablehq.com/@tomlarkworthy/view|hierarchically>, or *even bound to persistence [<https://observablehq.com/@tomlarkworthy/local-storage-view|local> view, <https://observablehq.com/@tomlarkworthy/shareview|shared> view]*. Diagrammatic editing is a little hard, and this conversation has made me try to see if Plot can be made editable (they do expose their grammar-of-graphics scales and an interactive <https://observablehq.com/plot/interactions/pointer|pointer> mark which seems relevant)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZE23u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "observable views are a UI + a data-channel and they can be 2-way bound to other UI components, composed "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@tomlarkworthy/view",
                                "text": "hierarchically"
                            },
                            {
                                "type": "text",
                                "text": ", or "
                            },
                            {
                                "type": "text",
                                "text": "even bound to persistence [",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@tomlarkworthy/local-storage-view",
                                "text": "local",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " view, ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@tomlarkworthy/shareview",
                                "text": "shared",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " view]",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Diagrammatic editing is a little hard, and this conversation has made me try to see if Plot can be made editable (they do expose their grammar-of-graphics scales and an interactive "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/plot/interactions/pointer",
                                "text": "pointer"
                            },
                            {
                                "type": "text",
                                "text": " mark which seems relevant)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721423535.695159",
        "client_msg_id": "CFDFA672-AF62-48C7-B0D5-4558A9E6BA11",
        "text": "<@U8A5MS6R1> That\u2019s the example I had in mind. So, ok, if that\u2019s a narrow waist, then is, say, LLVM also a narrow waist (between compiler front- and backends), or is that something else?",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jiZjW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "That\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " the example I had in mind"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " So, ok, if "
                            },
                            {
                                "type": "text",
                                "text": "that\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " a narrow waist, then is, say, LLVM also a narrow waist (between compiler front- and backends), or is that something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721423789.187259",
        "client_msg_id": "2b245483-5f89-440e-8edd-0c28e7905f2a",
        "text": "Yes LLVM is also a narrow waist.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xPUX/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes LLVM is also a narrow waist."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721423929.217909",
        "client_msg_id": "b1ae1692-aa65-4ba8-ace3-b490c59adea5",
        "text": "Layering is essential in narrow waists, but not vice versa. You can have layering without large ecosystems above and below a specific narrow layer. I create systems with layers, but they are no ecosystems above and below it - it's just a cylinder shape, not an hourglass.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9/Hms",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Layering is essential in narrow waists, but not vice versa. You can have layering without large ecosystems above and below a specific narrow layer. I create systems with layers, but they are no ecosystems above and below it - it's just a cylinder shape, not an hourglass."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721424094.712079",
        "client_msg_id": "843ca1b8-2d24-480e-bda9-852f14ed63f1",
        "text": "From the original link above\n&gt; The narrow waist (of an hourglass) is a software concept that solves an interoperability problem, avoiding an O(M \u00d7 N) explosion.\nSo LLVM certainly fits that definition. Without LLMV you'd have M \u00d7 N, specifically `(C, C++, Rust, Haskell, ...) \u00d7 (x86, arm, mips, ...)`",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aY4Js",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the original link above\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The narrow waist (of an hourglass) is a software concept that solves an interoperability problem, avoiding an O(M \u00d7 N) explosion."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So LLVM certainly fits that definition. Without LLMV you'd have M \u00d7 N, specifically "
                            },
                            {
                                "type": "text",
                                "text": "(C, C++, Rust, Haskell, ...) \u00d7 (x86, arm, mips, ...)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721424117.665379",
        "client_msg_id": "4cea0039-1b9e-456e-9c9e-c375f9980b7e",
        "text": "<@U02E4DAQGSZ> The only part of your comment which is relevant to what I\u2019m talking about is the part about local/shared persistence. I appreciate the effort you\u2019ve put into getting around Observable\u2019s lack of support for this stuff! But those approaches are limited and awkward:\n\n\u2022 If we\u2019re talking about using UI to edit your notebook\u2019s code, local persistence is a non-starter\u2026 the point of notebooks is to share code.\n\u2022 The shared view has no authentication. So if you used it to author part of the notebook\u2019s code, anyone with access to the notebook would be able to modify it\u2019s code. If you added authentication, you would then have two separate, parallel auth systems to keep synchronized \u2014 one for Observable &amp; one for your sharing system.\n\u2022 In both local + shared situations, you have to add IDs by hand whenever you want to persist something. If you clone a cell, it keeps the same ID, so it edits the same underlying (local or cloud) state. You gotta remember to change them or you\u2019ll clobber stuff. Same for cloning / forking notebooks.\nIn short, I think these approaches all get very awkward, arguably no less awkward than copy-pasting code into cells. I\u2019d be curious to hear whether you\u2019ve heard of them being used successfully in practice, in the face of these problems.\n\nPersonally, I\u2019d like it if Observable could add persistent UI-editable state, so we wouldn\u2019t have to make up work-arounds. But I don\u2019t see that happening, given that the company is no longer focusing on the notebook product. Perhaps some other notebook product could get in the game, maybe something open-source?",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gYaBf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " The only part of your comment which is relevant to what I\u2019m talking about is the part about local/shared persistence. I appreciate the effort you\u2019ve put into getting around Observable\u2019s lack of support for this stuff! But those approaches are limited and awkward:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If we\u2019re talking about using UI to edit your notebook\u2019s code, local persistence is a non-starter\u2026 the point of notebooks is to share code."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The shared view has no authentication. So if you used it to author part of the notebook\u2019s code, anyone with access to the notebook would be able to modify it\u2019s code. If you added authentication, you would then have two separate, parallel auth systems to keep synchronized \u2014 one for Observable & one for your sharing system."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In both local + shared situations, you have to add IDs by hand whenever you want to persist something. If you clone a cell, it keeps the same ID, so it edits the same underlying (local or cloud) state. You gotta remember to change them or you\u2019ll clobber stuff. Same for cloning / forking notebooks."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn short, I think these approaches all get very awkward, arguably no less awkward than copy-pasting code into cells. I\u2019d be curious to hear whether you\u2019ve heard of them being used successfully in practice, in the face of these problems.\n\nPersonally, I\u2019d like it if Observable could add persistent UI-editable state, so we wouldn\u2019t have to make up work-arounds. But I don\u2019t see that happening, given that the company is no longer focusing on the notebook product. Perhaps some other notebook product could get in the game, maybe something open-source?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721424249.754149",
        "client_msg_id": "d790a849-10f1-4952-9d69-b4b8a324877e",
        "text": "(As for interactivity in Observable Plot, which is besides any point I\u2019m making but a good question: I know that lack of good interactivity is one of the main reasons my advisor hasn\u2019t switched his data vis course to use Observable Plot.)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "URMyT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(As for interactivity in Observable Plot, which is besides any point I\u2019m making but a good question: I know that lack of good interactivity is one of the main reasons my advisor hasn\u2019t switched his data vis course to use Observable Plot.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721424507.264839",
        "client_msg_id": "DA1D9CF5-5B43-48AC-82B0-1C10B1E8D658",
        "text": "<@U8A5MS6R1> Thanks, that makes sense. Now I\u2019m wondering: What would be a good example for a layer architecture that doesn\u2019t have a narrow waist?",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jOUBB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, that makes sense"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Now "
                            },
                            {
                                "type": "text",
                                "text": "I\u2019m"
                            },
                            {
                                "type": "text",
                                "text": " wondering: What would be a good example for a layer architecture that "
                            },
                            {
                                "type": "text",
                                "text": "doesn\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " have a narrow waist?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721425153.871259",
        "client_msg_id": "b8c2982f-3f18-4193-853e-cb69e6e676e1",
        "text": "Layers are essential to narrow waist but not vice versa. I create systems all the time with layers, but no special narrow layer that has diversity above and below. I have a web app handing request above and an db access layer below, with an actual db underneath - it's like a cylinder. There are no ecosystems involved. You can say libraries like sqlalchemy orm try to do a narrow waist, but have not been as successful. The leaky abstraction principle also applies - some waists work better in their context than others.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C1wI7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Layers are essential to narrow waist but not vice versa. I create systems all the time with layers, but no special narrow layer that has diversity above and below. I have a web app handing request above and an db access layer below, with an actual db underneath - it's like a cylinder. There are no ecosystems involved. You can say libraries like sqlalchemy orm try to do a narrow waist, but have not been as successful. The leaky abstraction principle also applies - some waists work better in their context than others."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721425367.582499",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1721425441.000000"
        },
        "client_msg_id": "e42642c4-7afd-4b8b-97d5-c0eff5bc41fc",
        "text": "The downside of well established narrow waists is you cant move the waist because it is so deeply entrenched in systems and minds. So with TCP/IP, you have all different physical protocols designed and optimized to cater to its specific features. Same with LLVM backends. Similar to how \"and then our tools shape us\", language designers comfortable with LLVM may end up designing languages that can be easily mapped to it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Onadp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The downside of well established narrow waists is you cant move the waist because it is so deeply entrenched in systems and minds. So with TCP/IP, you have all different physical protocols designed and optimized to cater to its specific features. Same with LLVM backends. Similar to how \"and then our tools shape us\", language designers comfortable with LLVM may end up designing languages that can be easily mapped to it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721425372.942729",
        "client_msg_id": "081e4eeb-562b-440e-8e8e-8eadc7fc056e",
        "text": "Sounds like layers can have two purposes:\n\u2022 'vertically' to separate concerns\n\u2022 'horizontally' as a narrow waist",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i0PFj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like layers can have two purposes:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "'vertically' to separate concerns"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "'horizontally' as a narrow waist"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721425838.255409",
        "client_msg_id": "39DE7576-FDF4-4E27-99E3-1831C8CE048B",
        "text": "<@UCUSW7WVD> Thanks. I found the room temperature example useful to illustrate this.\n\nSimon also points out in that paper that it\u2019s not quite clear if we see hierarchies everywhere because they are everywhere, or just because we are adapted to see hierarchies. That\u2019s also pretty much just a sentence or paragraph at most, but in my view one of the most thoughtful observations in there.\n\nI\u2019ve mentioned Alicia Juarrero somewhere here before who wrote two books that take this idea of interactions across subsystems on different hierarchy levels much further with a comprehensive theory about constraints. In case you were looking for another rabbit hole\u2026 :)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "82iIW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks. I found the room temperature example useful to illustrate this."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Simon also points out in that paper that it\u2019s not quite clear if we see hierarchies everywhere because they are everywhere, or just because we are adapted to see hierarchies. That\u2019s also pretty much just a sentence or paragraph at most, but in my view one of the most thoughtful observations in there."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I\u2019ve mentioned Alicia Juarrero "
                            },
                            {
                                "type": "text",
                                "text": "somewhere "
                            },
                            {
                                "type": "text",
                                "text": "here before who wrote two books that take this idea of interactions across subsystems on different hierarchy levels much further with a "
                            },
                            {
                                "type": "text",
                                "text": "comprehensive "
                            },
                            {
                                "type": "text",
                                "text": "theory about constraints."
                            },
                            {
                                "type": "text",
                                "text": " In case you were looking for another rabbit hole\u2026 :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721426120.904779",
        "client_msg_id": "21004a94-51f8-460c-9132-96f9714002d5",
        "text": "Kartik - I didn't get the vertical vs horizontal - can you elaborate / give an example of vertical?",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XMT7p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kartik - I didn't get the vertical vs horizontal - can you elaborate / give an example of vertical?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721426510.861799",
        "client_msg_id": "2e467465-07a8-4da4-8db4-f128acce12cb",
        "text": "<@U8A5MS6R1> I was imagining the layers stacked one on another. So as you move vertically you cross layer boundaries.\n\nImagine you have a system. As you separate concerns it's often natural to have one concern treat another as a black box. Caller vs callee. You're basically creating a layer boundary here. So this is what I think of as 'vertical'.\n\nBut another reason to create a layer doesn't start from a system at all. Instead you have a bunch of systems of two kinds that want to talk across a requirement/provider boundary. I imagine these alternatives lined up horizontally in two lines, one above another (but here 'vertical' doesn't mean caller-callee, hehe. It's symmetric; either side can initiate a connection). In this case you form a new system \"fully formed from the brow of Zeus\" as it were, to intermediate the two sides. This is the thin waist. Before it existed there was cacophony. After it exists you suddenly find yourself in a layered architecture.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tCA4h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I was imagining the layers stacked one on another. So as you move vertically you cross layer boundaries.\n\nImagine you have a system. As you separate concerns it's often natural to have one concern treat another as a black box. Caller vs callee. You're basically creating a layer boundary here. So this is what I think of as 'vertical'.\n\nBut another reason to create a layer doesn't start from a system at all. Instead you have a bunch of systems of two kinds that want to talk across a requirement/provider boundary. I imagine these alternatives lined up horizontally in two lines, one above another (but here 'vertical' doesn't mean caller-callee, hehe. It's symmetric; either side can initiate a connection). In this case you form a new system \"fully formed from the brow of Zeus\" as it were, to intermediate the two sides. This is the thin waist. Before it existed there was cacophony. After it exists you suddenly find yourself in a layered architecture."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721427691.217549",
        "client_msg_id": "2d551219-07b7-4b13-aa11-806a6a8f13ce",
        "text": "yeah makes sense. \"interoperability standards\" often seem synonymous with narrow waists. it's not about a single system but an ecosystem.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y4+Ck",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah makes sense. \"interoperability standards\" often seem synonymous with narrow waists. it's not about a single system but an ecosystem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721427907.748439",
        "client_msg_id": "A98576A6-DE08-4182-A30C-663EFC91447B",
        "text": "<@UJBAJNFLK> About Simon\u2019s approach: What do you mean by \u201crarely adopted\u201d? Simon was trying to describe and explain complex systems. I\u2019m not sure there was anything to adopt?\n\nI think his observations do apply to layer architectures. First, in the form of leaky abstractions. But even if the interfaces are well specified and achieve good separation, which is incredibly difficult to achieve, there are still subtle effects that can be ignored most of the time, but then sometimes do shine through, like, I don\u2019t know, packet size constraints on the IP layer causing performance issues on the HTTP layer or something like that.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TqoMp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " About Simon\u2019s approach: What do you mean by \u201crarely adopted\u201d? Simon was trying to describe and explain complex systems. I\u2019m not sure there was anything to adopt?\n\nI think his observations do apply to layer architectures. First, in the form of leaky abstractions. But even if the interfaces are well specified and achieve good separation, which is incredibly difficult to achieve, there are still subtle effects that can be ignored most of the time, but then sometimes do shine through, like, I "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " know, packet size constraints on the IP layer causing performance issues on the HTTP layer or something like that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721428605.569979",
        "client_msg_id": "1412960f-58a1-4780-a3a4-5d9b865f3ad4",
        "text": "I have build several apps on Observable using these techniques\n\u2022 (commercial) <https://observablehq.com/@categorise/surveyslate-filler?username=demoResponder#FnMcjZO1pn1uqmMh%7Ccell-types>. &lt;-- magic link authentication to AWS, hosted on a custom domain, persistence is just S3. Whole application is a single cell assembled heirarchically and bound to S3\n\u2022 (fun) <https://thetarot.online/-O2C-4yex9ykAwoZ_Jvz|thetarot.online> no auth, custom domain, also embedded in a Medium article\n\u2022 (personal) <https://observablehq.com/@tomlarkworthy/minecraft-servers-be|minecraft server front end> Firebase login and backend\nThe things you say are true in that there are numerous annoying frictions, CORS being the worse one IMHO, but still, compared to setting up Jest on a Typescript project, or installing Numpy, these are not deal breakers, and the reactive environment makes up for all that, with surplus IMHO. There is a bit of a complexity/performance ceiling, but I would say that is true of Jupyter and Excel too, it doesn't stop them being incredibly useful internal micro-apps.\nThere are several open source Observable-likes in existence already\n\u2022 <https://github.com/asg017/dataflow>\n\u2022 <https://starboard.gg/>\nBuilding something that is good enough IDE/Visual Env/Ecosystem is basically too large a project to pull off. Even Observable hasn't really pulled it off! I don't think saving the state of the notebook is _the_ problem.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https://thetarot.online/-O2C-4yex9ykAwoZ_Jvz",
                "image_url": "https://storage.googleapis.com/download/storage/v1/b/larkworthy-dfb11.appspot.com/o/@tomlarkworthy%2Ftarot-backend%2Fimages%2F-O2C-4yex9ykAwoZ_Jvz?generation=1721426275938809&alt=media",
                "image_width": 800,
                "image_height": 406,
                "image_bytes": 365794,
                "id": 1,
                "original_url": "https://thetarot.online/-O2C-4yex9ykAwoZ_Jvz",
                "fallback": "Tarot Reading for Tom on behalf of Joshua Horowitz",
                "text": "Will Joshua have a realisation about the ability to develop faster on Observable reactive Notebooks?",
                "title": "Tarot Reading for Tom on behalf of Joshua Horowitz",
                "title_link": "https://thetarot.online/-O2C-4yex9ykAwoZ_Jvz",
                "service_name": "thetarot.online"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zpkn8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have build several apps on Observable using these techniques\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(commercial) "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://observablehq.com/@categorise/surveyslate-filler?username=demoResponder#FnMcjZO1pn1uqmMh%7Ccell-types"
                                    },
                                    {
                                        "type": "text",
                                        "text": ". <-- magic link authentication to AWS, hosted on a custom domain, persistence is just S3. Whole application is a single cell assembled heirarchically and bound to S3"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(fun) "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://thetarot.online/-O2C-4yex9ykAwoZ_Jvz",
                                        "text": "thetarot.online"
                                    },
                                    {
                                        "type": "text",
                                        "text": " no auth, custom domain, also embedded in a Medium article"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(personal) "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://observablehq.com/@tomlarkworthy/minecraft-servers-be",
                                        "text": "minecraft server front end"
                                    },
                                    {
                                        "type": "text",
                                        "text": " Firebase login and backend"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe things you say are true in that there are numerous annoying frictions, CORS being the worse one IMHO, but still, compared to setting up Jest on a Typescript project, or installing Numpy, these are not deal breakers, and the reactive environment makes up for all that, with surplus IMHO. There is a bit of a complexity/performance ceiling, but I would say that is true of Jupyter and Excel too, it doesn't stop them being incredibly useful internal micro-apps.\nThere are several open source Observable-likes in existence already\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://github.com/asg017/dataflow"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://starboard.gg/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Building something that is good enough IDE/Visual Env/Ecosystem is basically too large a project to pull off. Even Observable hasn't really pulled it off! I don't think saving the state of the notebook is "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UBKNXPBAB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721474362.047749",
        "client_msg_id": "df4f581d-47c2-4c71-b1dc-6777a3fb4343",
        "text": "Level 3 is straight-forward (and \u201ceasy\u201d) with currently-available technologies:\n1. use diagram editors that save diagrams in some kind of XML or JSON format (I use <http://draw.io|draw.io>, I use Kinopio, I\u2019ve used yEd in the past), then, use XML parsing libraries or OhmJS to inhale the info\n2. isolate software components from one another - make each unit of software be completely stand-alone - meaning data *and* control flow - [hint: closures, queues, avoid function-calling for inter-component communication (level-3 innovation is discouraged by function-calling-think (in fact, at one point, I used mostly Prolog for thinking along with Javascript and Bash and Lisp for clean-up))]\n3. think of current GPLs - Haskell, Python, Javascript, Rust, Lisp - as just *assembly* languages for level 3.\n(aside: meaning of \u201ceasy\u201d == Zac Nowicki of Kagi created a <http://draw.io|draw.io>+Odin based Level 3 DPL for me in less than a week)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YZAbR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Level 3 is straight-forward (and \u201ceasy\u201d) with currently-available technologies:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "use diagram editors that save diagrams in some kind of XML or JSON format (I use "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://draw.io",
                                        "text": "draw.io"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", I use Kinopio, I\u2019ve used yEd in the past), then, use XML parsing libraries or OhmJS to inhale the info"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "isolate software components from one another - make each unit of software be completely stand-alone - meaning data "
                                    },
                                    {
                                        "type": "text",
                                        "text": "and",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " control flow - [hint: closures, queues, avoid function-calling for inter-component communication (level-3 innovation is discouraged by function-calling-think (in fact, at one point, I used mostly Prolog for thinking along with Javascript and Bash and Lisp for clean-up))]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "think of current GPLs - Haskell, Python, Javascript, Rust, Lisp - as just "
                                    },
                                    {
                                        "type": "text",
                                        "text": "assembly",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " languages for level 3."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(aside: meaning of \u201ceasy\u201d == Zac Nowicki of Kagi created a "
                            },
                            {
                                "type": "link",
                                "url": "http://draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": "+Odin based Level 3 DPL for me in less than a week)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721485484.377879",
        "client_msg_id": "34088456-6207-4b5d-9181-ce361236b379",
        "text": "ok, interesting, just a prototype but if you click on the plot it adds a point there. The nice thing is that you can work in the coordinate space of the diagram, not pixels or viewport. Maybe plot can be an input :thinking_face:\n<https://observablehq.com/d/e627aaaaa9857257>",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "image_url": "https://static.observableusercontent.com/thumbnail/e057bdd4575e5260c4e76bb71b18b988a3bd968e649d8ed89558ea5cebb4c681.jpg",
                "image_width": 640,
                "image_height": 400,
                "image_bytes": 4713,
                "from_url": "https://observablehq.com/d/e627aaaaa9857257",
                "service_icon": "https://static.observablehq.com/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                "ts": 1721484997,
                "id": 1,
                "original_url": "https://observablehq.com/d/e627aaaaa9857257",
                "fallback": "Observable: Direct Manipulation Plot Experiment",
                "title": "Direct Manipulation Plot Experiment",
                "title_link": "https://observablehq.com/d/e627aaaaa9857257",
                "service_name": "Observable"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MuzQQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, interesting, just a prototype but if you click on the plot it adds a point there. The nice thing is that you can work in the coordinate space of the diagram, not pixels or viewport. Maybe plot can be an input "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/d/e627aaaaa9857257"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721491225.301399",
        "client_msg_id": "9da5f269-90b8-45f7-b3c4-7ecfb074e12c",
        "text": "<@U5STGTB3J> I meant rarely adopted when designing software systems. Simon's discussion is about both natural (evolved) systems and about human-made artifacts (and he says it's for the same reason of economy in construction). His artifact example, a watch, ends up made from nearly decomposable subsystems not through insight into complex systems, but because watchmakers are clever people and end up designing watches in a way that is easier for them to build. In software, I don't see this happening. On the contrary, it is very difficult to achieve such a design, because our toolboxes are set up for strong coupling of submodules via shared dependencies.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F1doE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I meant rarely adopted when designing software systems. Simon's discussion is about both natural (evolved) systems and about human-made artifacts (and he says it's for the same reason of economy in construction). His artifact example, a watch, ends up made from nearly decomposable subsystems not through insight into complex systems, but because watchmakers are clever people and end up designing watches in a way that is easier for them to build. In software, I don't see this happening. On the contrary, it is very difficult to achieve such a design, because our toolboxes are set up for strong coupling of submodules via shared dependencies."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1721593798.308779",
        "client_msg_id": "343e9c69-2e58-4fc3-b570-d008de08114e",
        "text": "FWIW I tend to think the ideal environment allows for all of them: code, dumb diagrams, code backed diagrams, diagrams that are 'code', and everything outside and between. If these coexist in a shared environment, we have the best chance at mutating them and ideally converging on the must useful representations for differing situations. (it is also of my personal opinion that diagrams as code will flourish in this kind of a environment)",
        "team": "T5TCAFTA9",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0B8QF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW I tend to think the ideal environment allows for all of them: code, dumb diagrams, code backed diagrams, diagrams that are 'code', and everything outside and between. If these coexist in a shared environment, we have the best chance at mutating them and ideally converging on the must useful representations for differing situations. (it is also of my personal opinion that diagrams as code will flourish in this kind of a environment)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]