[
    {
        "user": "U079M43CQ31",
        "type": "message",
        "ts": "1721406900.550659",
        "edited": {
            "user": "U079M43CQ31",
            "ts": "1721408936.000000"
        },
        "client_msg_id": "507ba7b7-b754-4ed5-b9a2-f41d8ae93b93",
        "text": "Just a random thought that has been rattling around in my head while listening through podcast episodes and Ivan\u2019s visual programing points. I am new here so apologies If all this has been said before, or covered in podcasts I haven\u2019t gotten to yet.\n\nI want to propose a slightly different framing for what it means to say that a representation of a program is visual / spatial or not\n\n*I think that textual programming is visual*. It\u2019s a series of symbols laid out on a screen in rows, and the spatial/visual relationship between the tokens does actually correspond to aspects of the operation of the program. For example an assignment statement has the thing being assigned to on the left, and the value on the right, parentheses group things together spatially on the screen, statements that appear above others within a block (usually) execute before the ones below (goto considered harmful breaks that down which I think you talked about). And good code formatting is mostly about making these visual analogies stronger. Zig plays with this by allowing you to release memory the line below where you have allocated it, which breaks down the time <-> up down analogy since the deallocation actually happens after the lines that follow, in favor of being able to spatially group two very semantically related statements in the program. That shows that there\u2019s a lot to be played with within the context of textual programming if you think about in terms of spatial analogies to your program.\n\nTo explore this more though, it\u2019s interesting to think about how a program could be represented completely *non-spatially* or *non-visually*, and how these two things might differ.\n\nYou could imagine being read the textual code for some program aloud, without seeing the text at all, that would be a non-spatial, and non-visual representation of the program\n\nYou could also imagine seeing a single visual element, like a black circle on a screen or something, blinking on and off in morse code to transmit the code to you. To me that would be a visual representation that is not spatial, since the spatial dimensions of that single visual element don\u2019t matter at all to the information being transmitted. It could be an array of dots or an image of some crazy person\u2019s pure data patch or anything at all blinking on and off and the program being transmitted would be the same.\n\nSo what would a representation of a program look like that is *minimally spatial*? Maybe you could imagine two dots on the screen that encode a two bit piece of a textual program encoded in unicode, one two bit portion at a time? They flash on with the first two bits for a second, then the second two bits for a second blah blah blah (so practical!) Is this spatial?\n\nThere is a lot to explore here actually I think. Technically the particular spatial relationships of the pixels on the screen _does_ need to be considered in order to decipher the program in the two dots scenario, and that is qualitatively different from the one dot scenario, where no information is gained from examining any spatial relationships.\n\nBut I am skeptical of whether or not this is actually minimally spatial. It seems like we should define a spatial representation of a program to mean that some _meaningful part of the program_ is represented spatially, and I don\u2019t think \u201ca two bit portion of a unicode character making up a textual program\u201d meets that criteria. But Is this \u201cmeaningful vs non meaningful part of a program representation\u201d a distinction that can even be clearly drawn? It seems obvious that there is at least a real quantitative difference if not a qualitative difference there. If the difference is only quantitative, then this two bit program would have to be a minimally (if highly unsatisfying) spatial representation of a program, but maybe there is some way to formally filter out non meaningful parts of a a program\u2019s representation that are only essential to the representation of the program and not to the program itself?\n\nBut like was pointed out in the No Silver Bullets episode, there are a huge number of different ways to visualize the same program. I think that we are stuck in a single way of visualizing our programs - which is the code, and to me the problem is not that code is bad, but that we are missing out on a huge number of different ways we could visualize and \u201creason about\u201d (lol) our programs, so I\u2019m not disagreeing with the actual takeaway, it\u2019s more a critique of the hard division between textual and visual programming.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "reply_count": 20,
        "reply_users_count": 10,
        "latest_reply": "1721595452.158329",
        "reply_users": [
            "U05GSC0B4A0",
            "U05UK5T7LPP",
            "UCUSW7WVD",
            "U079M43CQ31",
            "U05597GCDDK",
            "U03U0SCU5LH",
            "UN57U8V53",
            "U0791273STB",
            "UC2A2ARPT",
            "U06BUK2M2RH"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RbPPw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just a random thought that has been rattling around in my head while listening through podcast episodes and Ivan\u2019s visual programing points. I am new here so apologies If all this has been said before, or covered in podcasts I haven\u2019t gotten to yet.\n\nI want to propose a slightly different framing for what it means to say that a representation of a program is visual / spatial or not\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I think that textual programming is visual",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It\u2019s a series of symbols laid out on a screen in rows, and the spatial/visual relationship between the tokens does actually correspond to aspects of the operation of the program. For example an assignment statement has the thing being assigned to on the left, and the value on the right, parentheses group things together spatially on the screen, statements that appear above others within a block (usually) execute before the ones below (goto considered harmful breaks that down which I think you talked about). And good code formatting is mostly about making these visual analogies stronger. Zig plays with this by allowing you to release memory the line below where you have allocated it, which breaks down the time <-> up down analogy since the deallocation actually happens after the lines that follow, in favor of being able to spatially group two very semantically related statements in the program. That shows that there\u2019s a lot to be played with within the context of textual programming if you think about in terms of spatial analogies to your program.\n\nTo explore this more though, it\u2019s interesting to think about how a program could be represented completely "
                            },
                            {
                                "type": "text",
                                "text": "non-spatially",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "non-visually",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and how these two things might differ.\n\nYou could imagine being read the textual code for some program aloud, without seeing the text at all, that would be a non-spatial, and non-visual representation of the program\n\nYou could also imagine seeing a single visual element, like a black circle on a screen or something, blinking on and off in morse code to transmit the code to you. To me that would be a visual representation that is not spatial, since the spatial dimensions of that single visual element don\u2019t matter at all to the information being transmitted. It could be an array of dots or an image of some crazy person\u2019s pure data patch or anything at all blinking on and off and the program being transmitted would be the same.\n\nSo what would a representation of a program look like that is "
                            },
                            {
                                "type": "text",
                                "text": "minimally spatial",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Maybe you could imagine two dots on the screen that encode a two bit piece of a textual program encoded in unicode, one two bit portion at a time? They flash on with the first two bits for a second, then the second two bits for a second blah blah blah (so practical!) Is this spatial?\n\nThere is a lot to explore here actually I think. Technically the particular spatial relationships of the pixels on the screen "
                            },
                            {
                                "type": "text",
                                "text": "does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " need to be considered in order to decipher the program in the two dots scenario, and that is qualitatively different from the one dot scenario, where no information is gained from examining any spatial relationships.\n\nBut I am skeptical of whether or not this is actually minimally spatial. It seems like we should define a spatial representation of a program to mean that some "
                            },
                            {
                                "type": "text",
                                "text": "meaningful part of the program",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is represented spatially, and I don\u2019t think \u201ca two bit portion of a unicode character making up a textual program\u201d meets that criteria. But Is this \u201cmeaningful vs non meaningful part of a program representation\u201d a distinction that can even be clearly drawn? It seems obvious that there is at least a real quantitative difference if not a qualitative difference there. If the difference is only quantitative, then this two bit program would have to be a minimally (if highly unsatisfying) spatial representation of a program, but maybe there is some way to formally filter out non meaningful parts of a a program\u2019s representation that are only essential to the representation of the program and not to the program itself?\n\nBut like was pointed out in the No Silver Bullets episode, there are a huge number of different ways to visualize the same program. I think that we are stuck in a single way of visualizing our programs - which is the code, and to me the problem is not that code is bad, but that we are missing out on a huge number of different ways we could visualize and \u201creason about\u201d (lol) our programs, so I\u2019m not disagreeing with the actual takeaway, it\u2019s more a critique of the hard division between textual and visual programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U06131CATV3",
                    "U06BUK2M2RH"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05597GCDDK",
                    "U85HCL7JP"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1721409981.987829",
        "client_msg_id": "f306b8cc-c5bd-40d7-9957-c751b9b1d7d3",
        "text": "Going to need to take some time to digest this, but I wanted to say I really like thinking about \"how could a program be representated non-spacially or non-visually, and the comment that \"I think that textual programming is visual\"\n\nOne thing that comes to mind - there have been some esolangs that have explored this idea a bit, though I don't think it was from this particular starting point. Velato (<http://velato.net/>) for example, encodes programs as midi files, so you could have an audio representation of a program...",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nLic9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Going to need to take some time to digest this, but I wanted to say I really like thinking about \"how could a program be representated non-spacially or non-visually, and the comment that \"I think that textual programming is visual\"\n\nOne thing that comes to mind - there have been some esolangs that have explored this idea a bit, though I don't think it was from this particular starting point. Velato ("
                            },
                            {
                                "type": "link",
                                "url": "http://velato.net/"
                            },
                            {
                                "type": "text",
                                "text": ") for example, encodes programs as midi files, so you could have an audio representation of a program..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1721410348.005229",
        "client_msg_id": "680a6cf5-511c-429f-8f94-685c47b4dd6d",
        "text": "Fwiw, a relevant piece of math lore is the informal distinction between `algebraic thinkers' and `geometric thinkers'. All of the most useful mathematical machinery, of course, may be represented either algebraically in terms of symbols, or geometrically in terms of diagrams. So these two modes are isomorphic, but not trivially so. This yields many productive conceptual moves.\n\nYou've described a situation where _every representation_, I think, is both useful and arbitrary. So that at the limit you get that `minimally spatial' vision of the `essence' from which which the universe of diagrammatic, symbolic, etc. forms may arise.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZnfPk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fwiw, a relevant piece of math lore is the informal distinction between `algebraic thinkers' and `geometric thinkers'. All of the most useful mathematical machinery, of course, may be represented either algebraically in terms of symbols, or geometrically in terms of diagrams. So these two modes are isomorphic, but not trivially so. This yields many productive conceptual moves.\n\nYou've described a situation where "
                            },
                            {
                                "type": "text",
                                "text": "every representation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I think, is both useful and arbitrary. So that at the limit you get that `minimally spatial' vision of the `essence' from which which the universe of diagrammatic, symbolic, etc. forms may arise."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U079M43CQ31",
                    "U05597GCDDK",
                    "U06BUK2M2RH"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721410475.307239",
        "client_msg_id": "d30b804b-397a-489a-a08d-fde7df81465a",
        "text": "This overlaps a lot with some stuff I've been trying out recently to allow us to create new \"characters\" in our programming environments that string together more spatially than just a linear sequence.\n\nMy inspiration for a minimally spatial notation is the mathematical notation for summation: <https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation>. It's a character, and you have a few places to add characters above and below it (in addition to the right)\n\nThe direction my thoughts have been going with this is, what if we had a way to just draw new such characters, specify holes around them where other characters go. And then use them transparently in an otherwise textual screen of code.\n\nThe primary use case in my mind is function calls, making them more visually distinct.\n\nLinks to my posts, all in <#C03RR0W5DGC|devlog-together> over the past few weeks:\n<https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1719791347513999>\n\n<https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1720015836688779>\n\n<https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1720660021938839>\n\n<https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1720750642619629>",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xQjo/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This overlaps a lot with some stuff I've been trying out recently to allow us to create new \"characters\" in our programming environments that string together more spatially than just a linear sequence.\n\nMy inspiration for a minimally spatial notation is the mathematical notation for summation: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation"
                            },
                            {
                                "type": "text",
                                "text": ". It's a character, and you have a few places to add characters above and below it (in addition to the right)\n\nThe direction my thoughts have been going with this is, what if we had a way to just draw new such characters, specify holes around them where other characters go. And then use them transparently in an otherwise textual screen of code.\n\nThe primary use case in my mind is function calls, making them more visually distinct.\n\nLinks to my posts, all in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C03RR0W5DGC"
                            },
                            {
                                "type": "text",
                                "text": " over the past few weeks:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1719791347513999"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1720015836688779"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1720660021938839"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1720750642619629"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U079M43CQ31",
                    "U05UK5T7LPP",
                    "U05GSC0B4A0",
                    "U06131CATV3"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U079M43CQ31",
        "type": "message",
        "ts": "1721410487.879149",
        "client_msg_id": "3acc8753-b20f-4fd4-a005-f18e3dfb6e87",
        "text": "<@U05GSC0B4A0> this is a cool esolang! definitely an example of a completely non spatial representation if you were to listen to the midi",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N8+Vj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05GSC0B4A0"
                            },
                            {
                                "type": "text",
                                "text": " this is a cool esolang! definitely an example of a completely non spatial representation if you were to listen to the midi"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05GSC0B4A0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721411123.225029",
        "client_msg_id": "6dd2e6fa-f801-4d21-8c8a-7167efbd69a8",
        "text": "<@U05GSC0B4A0> on the subject of esolangs, one earworm I have never been able to free myself of is, \"what if Befunge but readable?\"\n\n<https://akkartik.name/archives/foc/thinking-together/1681698511.039269.html>\n\n<https://akkartik.name/post/2020-03-13-devlog>",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HHbss",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05GSC0B4A0"
                            },
                            {
                                "type": "text",
                                "text": " on the subject of esolangs, one earworm I have never been able to free myself of is, \"what if Befunge but readable?\"\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://akkartik.name/archives/foc/thinking-together/1681698511.039269.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://akkartik.name/post/2020-03-13-devlog"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U05GSC0B4A0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U079M43CQ31",
        "type": "message",
        "ts": "1721411256.359709",
        "client_msg_id": "11e4e6f6-84af-451c-97a2-b0213fedb2de",
        "text": "<@UCUSW7WVD> this is almost exactly where my thoughts went - that thinking about textual programming visually could give you a path to a sort of incrementalist way of getting more and better spatial metaphors from where we currently are with textual programing - I will have to read through some of these threads. there is a lot of cool discussion to read through in this slack",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qMu9e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " this is almost exactly where my thoughts went - that thinking about textual programming visually could give you a path to a sort of incrementalist way of getting more and better spatial metaphors from where we currently are with textual programing - I will have to read through some of these threads. there is a lot of cool discussion to read through in this slack"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U079M43CQ31",
        "type": "message",
        "ts": "1721411764.734199",
        "edited": {
            "user": "U079M43CQ31",
            "ts": "1721411808.000000"
        },
        "client_msg_id": "74ed3b44-0a44-4322-9d26-c5352f3855bc",
        "text": "<@U05UK5T7LPP> That divide in math does maps to what I am talking about here I think, I am reading through sipser\u2019s computation textbook right now and he gives the formal algebraic and graphical representations for finite automata, pushdown automata turing machines etc, and it\u2019s always easier and quicker to understand the graphs. But the algebraic definitions are still are spatial when written down on paper, in my mind, so maybe it\u2019s not exactly the same thing? not sure though",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ztd8v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05UK5T7LPP"
                            },
                            {
                                "type": "text",
                                "text": " That divide in math does maps to what I am talking about here I think, I am reading through sipser\u2019s computation textbook right now and he gives the formal algebraic and graphical representations for finite automata, pushdown automata turing machines etc, and it\u2019s always easier and quicker to understand the graphs. But the algebraic definitions are still are spatial when written down on paper, in my mind, so maybe it\u2019s not exactly the same thing? not sure though"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "spider_web",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1721411971.015699",
        "client_msg_id": "f90e16f7-5d27-4a84-ad6a-0900fe3f1b79",
        "text": "<@UCUSW7WVD> hah! First I loved this line: \"Now you can imagine a reduce operation as a series of solar systems that the spaceship visits one by one.\"...going to have to play with this a bit...I think there might be something here - I've been noodling around about new types of interfaces for AI agents...and a fully 2d/spatial metaphor for building/interacting/observing them seems worth digging in to...",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TcGHW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " hah! First I loved this line: \"Now you can imagine a reduce operation as a series of solar systems that the spaceship visits one by one.\"...going to have to play with this a bit...I think there might be something here - I've been noodling around about new types of interfaces for AI agents...and a fully 2d/spatial metaphor for building/interacting/observing them seems worth digging in to..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1721434191.367989",
        "client_msg_id": "18beb1d1-fa53-4e9e-92c8-d1156cc6fe99",
        "text": "This is really thought provoking. As someone who is a big fan of text, it's really interesting to think of it as a visual medium.\nIt reminds me of a friend who I did uni with, where we took a course programming 6800 microcontrollers in assembly. And of course being the types we were, we decided that we needed to build a better IDE for assembly to make the course tolerable. One of the first things we tried was just changing the lines' background colour at each <https://en.wikipedia.org/wiki/Basic_block|basic block> boundary. That's playing with the visual nature of the text representation.\nThere wasn't anything profound about that, I'm just reminiscing and saying thank you for this post!",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CB8Z1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is really thought provoking. As someone who is a big fan of text, it's really interesting to think of it as a visual medium.\nIt reminds me of a friend who I did uni with, where we took a course programming 6800 microcontrollers in assembly. And of course being the types we were, we decided that we needed to build a better IDE for assembly to make the course tolerable. One of the first things we tried was just changing the lines' background colour at each "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Basic_block",
                                "text": "basic block"
                            },
                            {
                                "type": "text",
                                "text": " boundary. That's playing with the visual nature of the text representation.\nThere wasn't anything profound about that, I'm just reminiscing and saying thank you for this post!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05GSC0B4A0",
                    "UCUSW7WVD",
                    "U079M43CQ31",
                    "U06131CATV3"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1721434907.794619",
        "client_msg_id": "356F6D7E-18E4-41FA-BABB-840625844B82",
        "text": "Ahh! That\u2019s a great point, that must be what resonated with me about the \u201ctext _is_ a visual medium\u201d line\u2026years ago I suggested to a new developer on my team that he turn syntax highlighting off on his ide for a few months to start to build the muscle of being able see the structure of the code he\u2019s working with rather than the details\u2026it\u2019s the inverse of what you\u2019re saying, but still points to this idea that we do treat text visually without really talking about that aspect of it",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6hXxo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ahh! "
                            },
                            {
                                "type": "text",
                                "text": "That\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " a great point, that must be what resonated with me about the \u201ctext "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " a visual medium\u201d line"
                            },
                            {
                                "type": "text",
                                "text": "\u2026"
                            },
                            {
                                "type": "text",
                                "text": "years ago I suggested to a new developer on my team that he turn syntax highlighting off on his ide for a few months to start to build the muscle of being able see the structure of the code "
                            },
                            {
                                "type": "text",
                                "text": "he\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " working with rather than the details"
                            },
                            {
                                "type": "text",
                                "text": "\u2026it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " the inverse of what "
                            },
                            {
                                "type": "text",
                                "text": "you\u2019re"
                            },
                            {
                                "type": "text",
                                "text": " saying, but still points to this idea that we do treat text visually without really talking about that aspect of it"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U05597GCDDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1721437606.570739",
        "edited": {
            "user": "U05597GCDDK",
            "ts": "1721437615.000000"
        },
        "client_msg_id": "33add44a-4ed5-463c-9bb7-7d3865874524",
        "text": "Syntax and code formatting is so often and hotly debated because it deeply affects the visual quality of our textual representation of the program!",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "47C0B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Syntax and code formatting is so often and hotly debated because it deeply affects the visual quality of our textual representation of the program!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "U05GSC0B4A0",
                    "U06131CATV3"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U079M43CQ31",
        "type": "message",
        "ts": "1721439431.034479",
        "client_msg_id": "8A338DCD-F31E-4F83-87B4-3B02DAACF692",
        "text": "Very true, it\u2019s a way we can have control over the visualization of the program within the textual paradigm",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aiL5J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very true, "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " a way we can have control over the visualization of the program within the textual paradigm"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1721457049.304169",
        "client_msg_id": "95883ba6-433c-479b-9670-15b3cfd40193",
        "text": "Don't forget syntax highlighting, Remove all colors from a piece of code and find yourself disoriented.\nquote: \".._meaningful part of the program_ is represented spatially_\"_\nI think that is exactly the question, what parts should be visually / spatially represented. The big one in textual code is, top to bottom is execution order. We are giving one dimension to basically procedural programming.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PcciC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don't forget syntax highlighting, Remove all colors from a piece of code and find yourself disoriented.\nquote: \".."
                            },
                            {
                                "type": "text",
                                "text": "meaningful part of the program ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "is represented spatially"
                            },
                            {
                                "type": "text",
                                "text": "\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nI think that is exactly the question, what parts should be visually / spatially represented. The big one in textual code is, top to bottom is execution order. We are giving one dimension to basically procedural programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721457693.089379",
        "client_msg_id": "e6c96c0b-5566-4507-a00c-9468ee9aea94",
        "text": "Not always, which complicates things. `a, b, c` executes from left to right, but `a(b(c))` executes from right to left. As those variables grow long they also take up the vertical axis (top to bottom and bottom to top respectively).",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "89nAI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not always, which complicates things. "
                            },
                            {
                                "type": "text",
                                "text": "a, b, c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " executes from left to right, but "
                            },
                            {
                                "type": "text",
                                "text": "a(b(c))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " executes from right to left. As those variables grow long they also take up the vertical axis (top to bottom and bottom to top respectively)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U03U0SCU5LH"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U05597GCDDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1721479891.416429",
        "client_msg_id": "1b1d83b3-afd4-4c7e-89d7-aef33be5978f",
        "text": "I had a similar question and reduced it down to \"what would an audio-only programming language sound like?\" My guess was a lot more <https://www.cs1subgoals.org/what-are-subgoals/#:~:text=To%20help%20instructors%20verbalize%20this,termination%20conditions%20for%20while%20loops.|subgoals>, markers for \"filling in later\", and fine scoped tests/examples.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "attachments": [
            {
                "from_url": "https://www.cs1subgoals.org/what-are-subgoals/#:~:text=To%20help%20instructors%20verbalize%20this,termination%20conditions%20for%20while%20loops.",
                "id": 1,
                "original_url": "https://www.cs1subgoals.org/what-are-subgoals/#:~:text=To%20help%20instructors%20verbalize%20this,termination%20conditions%20for%20while%20loops.",
                "fallback": "SUBGOALS: What are subgoals?, SUBGOALS",
                "text": "What are subgoals? A common problem in introductory programming courses is the expert-novice gap between instructors and students.",
                "title": "What are subgoals?, SUBGOALS",
                "title_link": "https://www.cs1subgoals.org/what-are-subgoals/#:~:text=To%20help%20instructors%20verbalize%20this,termination%20conditions%20for%20while%20loops.",
                "service_name": "SUBGOALS"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zqq2E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had a similar question and reduced it down to \"what would an audio-only programming language sound like?\" My guess was a lot more "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs1subgoals.org/what-are-subgoals/#:~:text=To%20help%20instructors%20verbalize%20this,termination%20conditions%20for%20while%20loops.",
                                "text": "subgoals"
                            },
                            {
                                "type": "text",
                                "text": ", markers for \"filling in later\", and fine scoped tests/examples."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U079M43CQ31"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0791273STB",
        "type": "message",
        "ts": "1721483630.986659",
        "edited": {
            "user": "U0791273STB",
            "ts": "1721486674.000000"
        },
        "client_msg_id": "92f8d959-37f3-4d07-ada9-572d342a52be",
        "text": "Loving all of the orthogonal thinking prompts throughout this thread. My perspective is that text-based programming is more characterized by the interaction model of essentially being equivalent to typesetting a document. Also worth considering is that many people interact with textual programming strictly non-visually through the use of text-to-speech. In my mind, things move to being more \"visual\" or \"spatial\" programming as the document interaction model goes away and the mapping to audio-only interface becomes less clear.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O4sNU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Loving all of the orthogonal thinking prompts throughout this thread. My perspective is that text-based programming is more characterized by the interaction model of essentially being equivalent to typesetting a document. Also worth considering is that many people interact with textual programming strictly non-visually through the use of text-to-speech. In my mind, things move to being more \"visual\" or \"spatial\" programming as the document interaction model goes away and the mapping to audio-only interface becomes less clear."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U079M43CQ31"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U079M43CQ31",
        "type": "message",
        "ts": "1721497220.585449",
        "client_msg_id": "28e521eb-71af-4d93-b74f-2b053cb9fc13",
        "text": "Ok so sorry for posting a super long thing again but what <@U05UK5T7LPP> brought up about Geometric vs Algebraic representations got me thinking. So if you define an \u201cAlgebraic\u201d representation to be a representation of some formal object that can be expressed as a sequence of symbols, and a \u201cGeometric\u201d representation to be one that has a set of symbols that can be oriented anywhere in 2d space in relation to one another, then I think you can actually draw a pretty clear distinction between the two. Maybe the distinction is better defined as 1 dimensional vs 2 dimensional, but I will stick with this Algebraic vs Geometric thing.\n\nsay the formal object we are representing is the fully connected graph of 3 nodes a, b, c. With a geometric representation, you can have three nodes laid out as an equilateral triangle, with 3 edges connecting them. Very simple. You have 4 different symbols, a, b, c, and &lt;line&gt;, which represents an edge. In the standard algebraic representation, where you have a pair (V,E) of vertices and edges, the representation is ({a,b,c},{(a,b),(b,c),(c,a)}). The symbols used are (, ), {, }, a, b, c, \u201c,\u201d, which is 8 different symbols. And the total number of symbols in the representation, counting repetitions is 29 (if I counted right).\n\nLet\u2019s say we just want a representation that can distinctly express any graph with just 3 nodes to simplify things a bit. For the fully connected graph you can think of a sequential representation that has the same number of symbols and symbol instances as the geometric representation: \u201ca-b-c-\u201d the \u201c-\u201d at the end could be interpreted to mean that there is a connection back to the first node in the sequence. Or you could simply do \u201cabca\u201d, where two nodes have an edge between them if they are next to each other in the sequence. In this case, we have a repeated symbol \u201ca\u201d, but fewer symbol types than in the graphical representation.\n\nBut then you could similarly eliminate the &lt;line&gt; symbol from the geometric representation by saying that nodes are connected if the symbols representing them are touching. Maybe you replace each symbol a, b, c with that symbol inside a circle to imagine this better. Now I think you reach a point where there is a real difference. In the case of the geometric representation, you can differentiate between the fully connected graph between nodes abc, with only 3 symbol types, and 3 symbol occurrences. Whereas in the sequential graph, there is no way to differentiate between the two with only three symbol types and 3 symbol instances. With only \u201cabc\u201d you don\u2019t know if the a is connected to the c or not.\n\nTextual programming is purely sequential in nature. No matter how you format your code visually, the one dimensional sequence of characters fully determines the program. So you will need either more symbol types, or more symbol occurrences to represent programs textually than we might if we use 2d space!!",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oVyOK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok so sorry for posting a super long thing again but what "
                            },
                            {
                                "type": "user",
                                "user_id": "U05UK5T7LPP"
                            },
                            {
                                "type": "text",
                                "text": " brought up about Geometric vs Algebraic representations got me thinking. So if you define an \u201cAlgebraic\u201d representation to be a representation of some formal object that can be expressed as a sequence of symbols, and a \u201cGeometric\u201d representation to be one that has a set of symbols that can be oriented anywhere in 2d space in relation to one another, then I think you can actually draw a pretty clear distinction between the two. Maybe the distinction is better defined as 1 dimensional vs 2 dimensional, but I will stick with this Algebraic vs Geometric thing.\n\nsay the formal object we are representing is the fully connected graph of 3 nodes a, b, c. With a geometric representation, you can have three nodes laid out as an equilateral triangle, with 3 edges connecting them. Very simple. You have 4 different symbols, a, b, c, and <line>, which represents an edge. In the standard algebraic representation, where you have a pair (V,E) of vertices and edges, the representation is ({a,b,c},{(a,b),(b,c),(c,a)}). The symbols used are (, ), {, }, a, b, c, \u201c,\u201d, which is 8 different symbols. And the total number of symbols in the representation, counting repetitions is 29 (if I counted right).\n\nLet\u2019s say we just want a representation that can distinctly express any graph with just 3 nodes to simplify things a bit. For the fully connected graph you can think of a sequential representation that has the same number of symbols and symbol instances as the geometric representation: \u201ca-b-c-\u201d the \u201c-\u201d at the end could be interpreted to mean that there is a connection back to the first node in the sequence. Or you could simply do \u201cabca\u201d, where two nodes have an edge between them if they are next to each other in the sequence. In this case, we have a repeated symbol \u201ca\u201d, but fewer symbol types than in the graphical representation.\n\nBut then you could similarly eliminate the <line> symbol from the geometric representation by saying that nodes are connected if the symbols representing them are touching. Maybe you replace each symbol a, b, c with that symbol inside a circle to imagine this better. Now I think you reach a point where there is a real difference. In the case of the geometric representation, you can differentiate between the fully connected graph between nodes abc, with only 3 symbol types, and 3 symbol occurrences. Whereas in the sequential graph, there is no way to differentiate between the two with only three symbol types and 3 symbol instances. With only \u201cabc\u201d you don\u2019t know if the a is connected to the c or not.\n\nTextual programming is purely sequential in nature. No matter how you format your code visually, the one dimensional sequence of characters fully determines the program. So you will need either more symbol types, or more symbol occurrences to represent programs textually than we might if we use 2d space!!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U06BUK2M2RH"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1721508437.355739",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1721508472.000000"
        },
        "client_msg_id": "D5787C91-1BBB-40DC-998B-3AE6F64B8622",
        "text": "Shorter version of the previous:\n\nIn visual programming, spatial arrangement of objects doesn't have to be meaningful. But it can be. That part is open to design.\n\nNow I'll add:\n\nIn a good system, the programmer would get to choose whether spatial arrangement is meaningful or not.\n\nIn a good system, the movement of objects through time is just as significant as relative positions, connections, visual representations, etc.\n\nThere are physical dimensions we haven't explored. If you live in text, you won't feel the pull to explore them.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AgUZA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shorter version of the previous:\n\nIn visual programming, spatial arrangement of objects doesn't have to be meaningful. But it can be"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " That part is open to design.\n\nNow I'll add:\n\nIn a good system, the programmer would get to choose whether spatial arrangement is meaningful or not.\n\nIn a good system, the movement of objects through time is just as significant as relative positions, connections, visual representations, etc.\n\nThere are physical dimensions we haven't explored. If you live in text, you won't feel the pull to explore them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U079M43CQ31",
                    "U06BUK2M2RH"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1721549441.347489",
        "client_msg_id": "971cb601-f944-4c90-98f2-7c29615905f7",
        "text": "<@U079M43CQ31> Reading your post,.. you know, writing down geometric and algebraic problems like this is sort of a prompt for an AI? That makes me realize why I dislike AI for coding, it's like we un-invented algebraic notation and went back to writing prose. Instead I want to go into the other direction.",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dLig6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U079M43CQ31"
                            },
                            {
                                "type": "text",
                                "text": " Reading your post,.. you know, writing down geometric and algebraic problems like this is sort of a prompt for an AI? That makes me realize why I dislike AI for coding, it's like we un-invented algebraic notation and went back to writing prose. Instead I want to go into the other direction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1721595452.158329",
        "client_msg_id": "81b51c37-3683-4b5a-bf2f-5669c6821d17",
        "text": "Love this train of thought. I like to think of visual programming as a 'superset' of textual programming.\n\n\nIn general the following roots my thinking in a broader context but beware: This definitely has im14andthisisdeep energy:\n\nPerhaps the stark divide between computation and physicality is an illusion as all computation is physical in nature, with much of it being observable- some through a representation on an interface (the 'visual' component), or some so hidden in patterns of electricity. So we might say minimizing the visio-spatial element of a computation is either compressing the representation of the code (Now you don't need semicolons!) or leaving information out (No more writing explicit types!).",
        "team": "T5TCAFTA9",
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ybrs9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Love this train of thought. I like to think of visual programming as a 'superset' of textual programming.\n\n\nIn general the following roots my thinking in a broader context but beware: This definitely has im14andthisisdeep energy:\n\nPerhaps the stark divide between computation and physicality is an illusion as all computation is physical in nature, with much of it being observable- some through a representation on an interface (the 'visual' component), or some so hidden in patterns of electricity. So we might say minimizing the visio-spatial element of a computation is either compressing the representation of the code (Now you don't need semicolons!) or leaving information out (No more writing explicit types!)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]