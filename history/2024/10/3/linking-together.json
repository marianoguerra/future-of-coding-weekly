[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1727918572.802539",
        "client_msg_id": "a8480e43-5cf6-42df-bead-6c6c0c0e03d1",
        "text": "<https://www.youtube.com/watch?v=MJlBGZ-kpg0|A rare and precious video walking us through Boxer.>",
        "team": "T5TCAFTA9",
        "thread_ts": "1727918572.802539",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1727995250.418579",
        "reply_users": [
            "UC2A2ARPT",
            "UCUSW7WVD"
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=MJlBGZ-kpg0",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/MJlBGZ-kpg0/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/MJlBGZ-kpg0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Boxer demo by Michael Ballantyne\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=MJlBGZ-kpg0",
                "fallback": "YouTube Video: Boxer demo by Michael Ballantyne",
                "title": "Boxer demo by Michael Ballantyne",
                "title_link": "https://www.youtube.com/watch?v=MJlBGZ-kpg0",
                "author_name": "William Byrd",
                "author_link": "https://www.youtube.com/@WilliamEByrd",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5qqPz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=MJlBGZ-kpg0",
                                "text": "A rare and precious video walking us through Boxer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UJBAJNFLK",
                    "U02B6FQKZK8",
                    "U013ZLJARC7"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1727919851.676289",
        "client_msg_id": "4BDA04F6-CF84-4C56-950C-8AB1995D1B82",
        "text": "<https://forkingpaths.dev/posts/24-10-02/wheel_reinvention_jam_writeup.html|A little wheel invention jam making a realtalk like environment. >Super neat project. Love some of the implementation questions at the end as well. ",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bHk3v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://forkingpaths.dev/posts/24-10-02/wheel_reinvention_jam_writeup.html",
                                "text": "A little wheel invention jam making a realtalk like environment. "
                            },
                            {
                                "type": "text",
                                "text": "Super neat project"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Love some of the implementation questions at the end as well"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "UMQ6LR9NZ"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1727920709.718179",
        "client_msg_id": "237d967f-ee51-49d4-852a-1e3c7dab53ae",
        "text": "Oh wow, so there were two Dynamicland homages in the jam! I was following <@U036E056ZSP>'s project.\n\n<https://handmade.network/p/590/bret-victor-s-worst-nightmare/|Bret Victor's Worst Nightmare>",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dr+6S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh wow, so there were two Dynamicland homages in the jam! I was following "
                            },
                            {
                                "type": "user",
                                "user_id": "U036E056ZSP"
                            },
                            {
                                "type": "text",
                                "text": "'s project.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://handmade.network/p/590/bret-victor-s-worst-nightmare/",
                                "text": "Bret Victor's Worst Nightmare"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "U85HCL7JP",
                    "UK3LH8CF5",
                    "UMQ6LR9NZ"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1727928632.882609",
        "client_msg_id": "2d551b17-7bfb-4c44-a6dc-beec9fcacdc2",
        "text": "This is fascinating. I've heard of boxer so many times, but never actually seen it before. It's funny to me that they bumped up against many of the same issues / questions we're grappling with in my current Ink &amp; Switch project:\n\u2022 When duplicating canvas objects that have behaviour, should those duplicates be a deep copy with no shared internals, or should there be some amount of sharing? How do you approach masters/instances? How do the answers change as a result of this taking place in a spatial environment? How do these answers relate to scoping?\n\u2022 What about names? Where do names live? Why do you give things a name? How do you refer to things that don't have a name?\n\u2022 How do you connect things together? How do you multiplex / split? How and when do you see the connections?\n\u2022 Where do values live? If you're going to execute some smaller part of a larger program, how do you feed it values? When do you see those values?\n\u2022 How do components nest? How do you expand / contract components? How does information flow across component boundaries?\n\u2022 What interface elements need to be big because they need to be easy to see, and which ones need to be big so you can touch them, and when are these in tension?\netc etc.\n\nThese are all common questions when designing a visual programming system, naturally. But what's funny to me is just how damn similar Boxer looks to some of the hacky / placeholder prototype work we're doing right now, and the small handful of differences. (Wish I could link to it.)",
        "team": "T5TCAFTA9",
        "thread_ts": "1727918572.802539",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0x+G+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is fascinating. I've heard of boxer so many times, but never actually seen it before. It's funny to me that they bumped up against many of the same issues / questions we're grappling with in my current Ink & Switch project:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "When duplicating canvas objects that have behaviour, should those duplicates be a deep copy with no shared internals, or should there be some amount of sharing? How do you approach masters/instances? How do the answers change as a result of this taking place in a spatial environment? How do these answers relate to scoping?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What about names? Where do names live? Why do you give things a name? How do you refer to things that don't have a name?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "How do you connect things together? How do you multiplex / split? How and when do you see the connections?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Where do values live? If you're going to execute some smaller part of a larger program, how do you feed it values? When do you see those values?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "How do components nest? How do you expand / contract components? How does information flow across component boundaries?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What interface elements need to be big because they need to be easy to see, and which ones need to be big so you can touch them, and when are these in tension?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\netc etc.\n\nThese are all common questions when designing a visual programming system, naturally. But what's funny to me is just how damn similar Boxer looks to some of the hacky / placeholder prototype work we're doing right now, and the small handful of differences. (Wish I could link to it.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK"
                ],
                "count": 2
            },
            {
                "name": "writing_hand",
                "users": [
                    "U02B6FQKZK8"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1727974413.801719",
        "client_msg_id": "19e4a36c-9a77-4962-98c6-c6148d6f3c98",
        "text": "<https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/>",
        "team": "T5TCAFTA9",
        "thread_ts": "1727974413.801719",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1728035378.090709",
        "reply_users": [
            "UCUSW7WVD",
            "U05UK5T7LPP",
            "UBKNXPBAB"
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https://dam-prod2.media.mit.edu/thumb/2022/04/02/PXL_20220302_203150013.jpg.1400x1400.jpg",
                "image_width": 1400,
                "image_height": 1050,
                "image_bytes": 164502,
                "from_url": "https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/",
                "service_icon": "https://www.media.mit.edu/static/images/icons/apple-icon-57x57.1737f411eb73.png",
                "id": 1,
                "original_url": "https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/",
                "fallback": "MIT Media Lab: Project Overview \u2039 \u03bb-2D: An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus \u2013 MIT Media Lab",
                "text": "&amp;nbsp;An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus",
                "title": "Project Overview \u2039 \u03bb-2D: An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus \u2013 MIT Media Lab",
                "title_link": "https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/",
                "service_name": "MIT Media Lab"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UWpod",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U06131CATV3",
                    "U05UF5P8PT8"
                ],
                "count": 3
            },
            {
                "name": "eyes",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1727982095.188849",
        "client_msg_id": "bd8ef257-463b-4078-9f4a-659e23fec90a",
        "text": "I ended up spinning up a page on the FoC wiki for <https://wiki.futureofcoding.org/visual-lambda-calculus/|Visual representations of the Lambda Calculus>.",
        "team": "T5TCAFTA9",
        "thread_ts": "1727974413.801719",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sn8Fu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I ended up spinning up a page on the FoC wiki for "
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.futureofcoding.org/visual-lambda-calculus/",
                                "text": "Visual representations of the Lambda Calculus"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP",
                    "U06131CATV3",
                    "U013ZLJARC7"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1727982255.528489",
        "client_msg_id": "4290e4b1-5d5a-4d5d-9635-8e3b903aef13",
        "text": "Now I really want to circle back to getting thumbnails on the wiki (using a relative path to the assets directory) later this month.",
        "team": "T5TCAFTA9",
        "thread_ts": "1727974413.801719",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Ih63",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now I really want to circle back to getting thumbnails on the wiki (using a relative path to the assets directory) later this month."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1727995250.418579",
        "client_msg_id": "f6811899-c9de-4dab-88b8-ba5c913430f6",
        "text": "<@U02B6FQKZK8> Call out to unit.land at the end!",
        "team": "T5TCAFTA9",
        "thread_ts": "1727918572.802539",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nj3w/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02B6FQKZK8"
                            },
                            {
                                "type": "text",
                                "text": " Call out to unit.land at the end!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "yellow_heart",
                "users": [
                    "U02B6FQKZK8"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1728035378.090709",
        "client_msg_id": "9028f8d0-388f-4c9f-adb4-0a9ce5c3b1bb",
        "text": "See <https://github.com/prathyvsh/lambda-calculus-visualizations> for a larger list.",
        "team": "T5TCAFTA9",
        "thread_ts": "1727974413.801719",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+bxsk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/prathyvsh/lambda-calculus-visualizations"
                            },
                            {
                                "type": "text",
                                "text": " for a larger list."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U85HCL7JP",
                    "U05UK5T7LPP",
                    "UJBAJNFLK",
                    "U05SU27S1M2"
                ],
                "count": 5
            }
        ]
    }
]