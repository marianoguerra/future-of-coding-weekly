[
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714250050.851589",
        "client_msg_id": "357412f9-5d23-495a-a3c7-f39e7894bfd6",
        "text": "Random thought/question. I've noticed canvas based design tools have converged on a panel configuration of \"Layers | Canvas | Properties | (and sometimes Timeline)\"-- as opposed solving the underlying needs another way. Is this pattern the end-all-be-all? Or a local maxima? I tend to think the later.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "reply_count": 11,
        "reply_users_count": 4,
        "latest_reply": "1714316685.548039",
        "reply_users": [
            "U5STGTB3J",
            "U06BUK2M2RH",
            "UC2A2ARPT",
            "U023V63MF6V"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MbNyw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Random thought/question. I've noticed canvas based design tools have converged on a panel configuration of \"Layers | Canvas | Properties | (and sometimes Timeline)\"-- as opposed solving the underlying needs another way. Is this pattern the end-all-be-all? Or a local maxima? I tend to think the later."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1714252802.812989",
        "client_msg_id": "A312486A-7082-42FA-81F7-99E355257B43",
        "text": "I like to think most of how we do programming/computing these days is stuck in local maxima. It becomes the end-all-be-all because it\u2019s too difficult, risky, and takes too much effort to reinvent lower levels of the stack to leap elsewhere in the solution space. \n\nAnd the incentive structures we have in place focus on short term value extraction, which favors innovation at the edges, ie. \u201cLet\u2019s see what we can do with this\u201d instead of \u201cIs this the right approach? Do we need to rethink it?\u201d\n\nGenerally speaking, if it works, the odds are more in your favor if you use it to invent something new on top of it where you get to define your own category instead of investing your time trying to invent something better that has to compete in an established category.\n\nPersonally I think there is a lot of interesting concepts from cognitive science on how we think, categorize, and mentally model interactions with embodied and enacted cognition that would be super useful for designers and developers in the design tools space to utilize, but that\u2019s a whole different domain and once you\u2019re in the \u201clet\u2019s build stuff, throw it at the wall and see what sticks\u201d mode it\u2019s hard to make room for exploring such ideas as it will take some time to make the connections to software design, which cognitive scientists naturally don\u2019t care about.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b8WOP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like to think most of how we do programming/computing these days is stuck in local maxima"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It becomes the end-all-be-all because "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " too difficult, risky, and takes too much effort to reinvent lower levels of the stack to leap elsewhere in the solution space. \n\nAnd the incentive structures we have in place focus on short term value extraction, which favors innovation at the edges, ie. \u201c"
                            },
                            {
                                "type": "text",
                                "text": "Let\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " see what we can do with this\u201d instead of \u201cIs this the right approach? Do we need to rethink it?\u201d\n\nGenerally speaking, if it works, the odds are more in your favor if you use it to invent something new on top of it where you get to define your own category instead of investing your time trying to invent something better that has to compete in an established category"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nPersonally I think there is a lot of interesting concepts from cognitive science on how we think, categorize, and mentally model interactions with embodied and enacted cognition that would be super useful for designers and developers in the design tools space to utilize, but "
                            },
                            {
                                "type": "text",
                                "text": "that\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " a whole different domain and once "
                            },
                            {
                                "type": "text",
                                "text": "you\u2019re"
                            },
                            {
                                "type": "text",
                                "text": " in the \u201c"
                            },
                            {
                                "type": "text",
                                "text": "let\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " build stuff, throw it at the wall and see what sticks\u201d mode "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " hard to make room for exploring such ideas as it will take some time to make the connections to software design, which cognitive scientists naturally "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " care about"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U06SAHMJCG2",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714256024.672029",
        "client_msg_id": "3d6d483a-e225-4867-bbda-b6d1a31bdea4",
        "text": "Thanks for the response. I agree. Taking the time to design the primitives 'right' rather than doing anything immediately useful is very risky- not just financially but socially, emotionally, psychologically, etc. I get the idea of turning towards more immediate utility. But like the frustration of being stuck in paradigms like the layer/canvas/properties and many others is a persistent driving force for probably most of us here. I agree that it be worth it if new categories are created- but the vision is sufficiently unclear that unless one enjoys the road they risk suffering with no reward.\n\nAlso, I do agree with your personal anecdote. I believe any generalize software primitives that can give rise to new categories would emerge fundamentally directly properties of human cognition (spacial reasoning, categorization, etc). I find asking myself \"How would I most like to design X\" gets me closer to that.\n\nAt the end of the day progress will be made when people are dead-set on making it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zorT6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the response. I agree. Taking the time to design the primitives 'right' rather than doing anything immediately useful is very risky- not just financially but socially, emotionally, psychologically, etc. I get the idea of turning towards more immediate utility. But like the frustration of being stuck in paradigms like the layer/canvas/properties and many others is a persistent driving force for probably most of us here. I agree that it be worth it if new categories are created- but the vision is sufficiently unclear that unless one enjoys the road they risk suffering with no reward.\n\nAlso, I do agree with your personal anecdote. I believe any generalize software primitives that can give rise to new categories would emerge fundamentally directly properties of human cognition (spacial reasoning, categorization, etc). I find asking myself \"How would I most like to design X\" gets me closer to that.\n\nAt the end of the day progress will be made when people are dead-set on making it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1714263074.406639",
        "client_msg_id": "8B331E86-5C3E-452F-8C3A-3A42B6E39D31",
        "text": "In the interest of finding a root cause beyond just \"it's a local maximum\", can you list every app that comes to mind when thinking of this convergence? Like, don't go looking for more examples, just name all the ones that are already top of mind for you. (I have a hunch.)",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s/Y3G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the interest of finding a root cause beyond just \"it's a local maximum\", can you list every app that comes to mind when thinking of this convergence? Like, don't go looking for more examples, just name all the ones that are already top of mind for you"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " (I have a hunch.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1714263191.747039",
        "client_msg_id": "164785C5-8F9B-4EC1-A200-D366C14A4D60",
        "text": "(Just to avoid making you feel like I'm setting you up \u2014 I want to understand what you mean when you say \"canvas-based design tools\")",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wJUqz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Just to avoid making you feel like I'm setting you up \u2014 I want to understand what you mean when you say \"canvas-based design tools\")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U023V63MF6V",
        "type": "message",
        "ts": "1714263429.794129",
        "client_msg_id": "56fb5474-455b-4081-adc8-1a2040e8808d",
        "text": "The no/lowcode shelf -- webflow, wix (etc) bubble, adalo, softr, glide (etc), builder, bildr, sketch, Figma (etc), framer x, a few more I can picture but can't immediately name",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E7qs9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The no/lowcode shelf -- webflow, wix (etc) bubble, adalo, softr, glide (etc), builder, bildr, sketch, Figma (etc), framer x, a few more I can picture but can't immediately name"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714263656.335379",
        "edited": {
            "user": "U06BUK2M2RH",
            "ts": "1714263735.000000"
        },
        "client_msg_id": "E4DDCF7A-0E17-490B-94A4-DD880C41CFC2",
        "text": "Was mostly newer tools that seem promising and marry a wider array of digital creation functionality. Lots of time they look like a \u201cFigma for X\u201d: Plasticity (CAD), Fable, Vectary, Spline, Modyfi, Rive*",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fSneL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Was mostly newer tools that seem promising and marry a wider array of digital creation functionality. Lots of time they look like a \u201cFigma for X\u201d: Plasticity (CAD), Fable, Vectary, Spline, Modyfi, Rive*"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714263697.411389",
        "edited": {
            "user": "U06BUK2M2RH",
            "ts": "1714263791.000000"
        },
        "client_msg_id": "19ABAB0A-32D3-4BB2-842D-55732B1A5FAE",
        "text": "<@U023V63MF6V> no-code stuff also are big ones that fit the mold- tho perhaps less \u201ccanvas based\u201d per-se*",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nX3TA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U023V63MF6V"
                            },
                            {
                                "type": "text",
                                "text": " no-code stuff also are big ones that fit the mold- tho perhaps less \u201ccanvas based\u201d per-se*"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U023V63MF6V"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U023V63MF6V",
        "type": "message",
        "ts": "1714264405.706359",
        "client_msg_id": "2c12aaa7-c21f-4346-9390-030e75642c0f",
        "text": "I get the feeling this thread is relevant: \n<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1709980143296959?thread_ts=1709980143.296959&amp;cid=C5T9GPWFL|https://futureofcoding.slack.com/archives/C5T9GPWFL/p1709980143296959?thread_ts=1709980143.296959&amp;cid=C5T9GPWFL>\n\nIt's about designing the right \"physics\" for the task, and I do think the local maxima you described stopped short somewhere. They give you final design but not interstitials and states or the temporality that connects these things, or they might give you actionability, even predicate based sequences, but no crafting of complex branching logic, for example.\n\nDisclosure: I'm a node-wire live-prog buff. I thought Yahoo Pipes was the cats whiskers way back when. And today I know we can do even better (I'm working on it!)",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1709980143296959?thread_ts=1709980143.296959&amp;cid=C5T9GPWFL",
                "ts": "1709980143.296959",
                "author_id": "U03GBV8B58V",
                "channel_id": "C5T9GPWFL",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5T9GPWFL",
                        "ts": "1709980143.296959",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "gLmKS",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Software products are physical products. That's why they're hard to design and engineer!\n\nThe physicality of software is kept at arms-length in a vector-based design tool. Here, the strength and focus is on surface level aesthetics and exploration though mocks \u2014 many, many mocks. All needed. All useful. But a mock does not a product make. A mock is an incomplete story of software physics. Which brings us the other side of the spectrum...\n\nThe IDEs \u2014 the code editors. The product you ship is here, so \"I guess someone has to go there\". First challenge: To most people it's walls of inexplicable symbols and weird (even hostile?) punctuation. Then, with code, you're essentially play-acting as a computer. You have to \"speak computer\" fluently to feel at home here. It's a love/hate relationship of running programs in your head. Mostly failing to do so. Then learning to get better at debugging. Eureka moments of finally solving the puzzle that unlocks a bugfix! Endlessly restarting programs to reset state. Today, even after multiple decades of investment in IDEs, coding is still 100 times harder and less fun than it should be! How can we truly move the needle?\n\nA traditional IDE deals with the how to fully describe the physics of a software system. Writing and editing algorithms. Managing data flows. Figuring out logic. Painting pixels. Sending data at the speed of light over the network. But the IDE doesn't actually let you "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "see",
                                                    "style": {
                                                        "italic": true
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " the program as it manifests to the user in the final medium. It's running somewhere else \u2014 the browser, on your phone. This is where vector-tools have the IDEs at least partially beat. Yes, they're just mocks, but the vector-tool tool "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "sees",
                                                    "style": {
                                                        "italic": true
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " the mocks alongside you. This changes your relationship with the tool. Thinking and touching \u2014 moving, dragging, scaling, rotating, duplicating \u2014 seamlessly blends on a canvas, and it just "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "feels",
                                                    "style": {
                                                        "italic": true
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "good, even fun!",
                                                    "style": {
                                                        "italic": true
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " IDEs and editing code as text offers none of those things with today's tools, and it just feels like... friction!\n\nSo the letter to Santa reads as follows:\n\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "Dear Santa, give me the best parts of a vector-based design tool, plus the best parts of an IDE, rolled into one \u2014 but with none of the downsides. Thanks!",
                                                    "style": {
                                                        "italic": true
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n\nChristmas can't get here fast enough."
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1709980143296959?thread_ts=1709980143.296959&amp;cid=C5T9GPWFL",
                "fallback": "[March 9th, 2024 2:29 AM] jimkyndemeyer: Software products are physical products. That's why they're hard to design and engineer!\n\nThe physicality of software is kept at arms-length in a vector-based design tool. Here, the strength and focus is on surface level aesthetics and exploration though mocks \u2014 many, many mocks. All needed. All useful. But a mock does not a product make. A mock is an incomplete story of software physics. Which brings us the other side of the spectrum...\n\nThe IDEs \u2014 the code editors. The product you ship is here, so \"I guess someone has to go there\". First challenge: To most people it's walls of inexplicable symbols and weird (even hostile?) punctuation. Then, with code, you're essentially play-acting as a computer. You have to \"speak computer\" fluently to feel at home here. It's a love/hate relationship of running programs in your head. Mostly failing to do so. Then learning to get better at debugging. Eureka moments of finally solving the puzzle that unlocks a bugfix! Endlessly restarting programs to reset state. Today, even after multiple decades of investment in IDEs, coding is still 100 times harder and less fun than it should be! How can we truly move the needle?\n\nA traditional IDE deals with the how to fully describe the physics of a software system. Writing and editing algorithms. Managing data flows. Figuring out logic. Painting pixels. Sending data at the speed of light over the network. But the IDE doesn't actually let you _see_ the program as it manifests to the user in the final medium. It's running somewhere else \u2014 the browser, on your phone. This is where vector-tools have the IDEs at least partially beat. Yes, they're just mocks, but the vector-tool tool _sees_ the mocks alongside you. This changes your relationship with the tool. Thinking and touching \u2014 moving, dragging, scaling, rotating, duplicating \u2014 seamlessly blends on a canvas, and it just _feels_ _good, even fun!_ IDEs and editing code as text offers none of those things with today's tools, and it just feels like... friction!\n\nSo the letter to Santa reads as follows:\n\n_Dear Santa, give me the best parts of a vector-based design tool, plus the best parts of an IDE, rolled into one \u2014 but with none of the downsides. Thanks!_\n\nChristmas can't get here fast enough.",
                "text": "Software products are physical products. That's why they're hard to design and engineer!\n\nThe physicality of software is kept at arms-length in a vector-based design tool. Here, the strength and focus is on surface level aesthetics and exploration though mocks \u2014 many, many mocks. All needed. All useful. But a mock does not a product make. A mock is an incomplete story of software physics. Which brings us the other side of the spectrum...\n\nThe IDEs \u2014 the code editors. The product you ship is here, so \"I guess someone has to go there\". First challenge: To most people it's walls of inexplicable symbols and weird (even hostile?) punctuation. Then, with code, you're essentially play-acting as a computer. You have to \"speak computer\" fluently to feel at home here. It's a love/hate relationship of running programs in your head. Mostly failing to do so. Then learning to get better at debugging. Eureka moments of finally solving the puzzle that unlocks a bugfix! Endlessly restarting programs to reset state. Today, even after multiple decades of investment in IDEs, coding is still 100 times harder and less fun than it should be! How can we truly move the needle?\n\nA traditional IDE deals with the how to fully describe the physics of a software system. Writing and editing algorithms. Managing data flows. Figuring out logic. Painting pixels. Sending data at the speed of light over the network. But the IDE doesn't actually let you _see_ the program as it manifests to the user in the final medium. It's running somewhere else \u2014 the browser, on your phone. This is where vector-tools have the IDEs at least partially beat. Yes, they're just mocks, but the vector-tool tool _sees_ the mocks alongside you. This changes your relationship with the tool. Thinking and touching \u2014 moving, dragging, scaling, rotating, duplicating \u2014 seamlessly blends on a canvas, and it just _feels_ _good, even fun!_ IDEs and editing code as text offers none of those things with today's tools, and it just feels like... friction!\n\nSo the letter to Santa reads as follows:\n\n_Dear Santa, give me the best parts of a vector-based design tool, plus the best parts of an IDE, rolled into one \u2014 but with none of the downsides. Thanks!_\n\nChristmas can't get here fast enough.",
                "author_name": "Jim Meyer",
                "author_link": "https://futureofcoding.slack.com/team/U03GBV8B58V",
                "author_icon": "https://avatars.slack-edge.com/2022-05-21/3558879757875_3e8345518ba82b825c6d_48.jpg",
                "author_subname": "Jim Meyer",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GiDXg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I get the feeling this thread is relevant: \n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1709980143296959?thread_ts=1709980143.296959&cid=C5T9GPWFL",
                                "text": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1709980143296959?thread_ts=1709980143.296959&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's about designing the right \"physics\" for the task, and I do think the local maxima you described stopped short somewhere. They give you final design but not interstitials and states or the temporality that connects these things, or they might give you actionability, even predicate based sequences, but no crafting of complex branching logic, for example.\n\nDisclosure: I'm a node-wire live-prog buff. I thought Yahoo Pipes was the cats whiskers way back when. And today I know we can do even better (I'm working on it!)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06BUK2M2RH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714278682.325069",
        "client_msg_id": "BCABEDA4-24FE-4404-848C-18C2CBA3F2CE",
        "text": "Great thread. Never heard of yahoo pipes- very cool. I agree that the \u201cwhat are the new physics\u201d is the right question to be asking. To be honest- I think the canvas is the right approach because it really just means a physical space. Like as if you are god, starting with a canvas is saying \u201clet there be light\u201d. To me, everything can and should be derived from the physicality of the canvas, even panels like layers and properties (if they are needed at all!). If the primitive elements on the canvas are flexible enough, you could compose  node-wire type software- but with more flexibility on how it operates, naturally. ",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Scc7K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great thread. Never heard of yahoo pipes- very cool. I agree that the \u201cwhat are the new physics\u201d is the right question to be asking. To be honest- I think the canvas is the right approach because it really just means a physical space. Like as if you are god, starting with a canvas is saying \u201clet there be light\u201d. To me, everything can and should be derived from the physicality of the canvas, even panels like layers and properties (if they are needed at all!). If the primitive elements on the canvas are flexible enough, you could compose  node-wire type software- but with more flexibility on how it operates, naturally. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U023V63MF6V",
        "type": "message",
        "ts": "1714315833.302559",
        "client_msg_id": "ab0e27da-eebc-4192-bf15-c030a656f3dd",
        "text": "Yes! In fact, I think the node-wire paradigm naturally exists in an infinite canvas almost by definition, you have various node primitives you can add to the canvas, position, and inter-link and there's physics in the linkage (data flow, action sequences, temporality, nesting, 2D position etc.)\n\nWhat I can't (haven't) wrapped my head around yet is how we'd design a higher order node-wire paradigm (in all the complexity it deserves) into the blank canvas using even lower order canvas-based primitives/physics! Right now I'm working with a node-wire live programming infinite canvas as the base layer, underneath which is ye olde textual code\n\n(OK, I shalln't mention node-wire again for fear of sidetracking a thread about the future of canvas)",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CV6AO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! In fact, I think the node-wire paradigm naturally exists in an infinite canvas almost by definition, you have various node primitives you can add to the canvas, position, and inter-link and there's physics in the linkage (data flow, action sequences, temporality, nesting, 2D position etc.)\n\nWhat I can't (haven't) wrapped my head around yet is how we'd design a higher order node-wire paradigm (in all the complexity it deserves) into the blank canvas using even lower order canvas-based primitives/physics! Right now I'm working with a node-wire live programming infinite canvas as the base layer, underneath which is ye olde textual code\n\n(OK, I shalln't mention node-wire again for fear of sidetracking a thread about the future of canvas)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714316685.548039",
        "client_msg_id": "8FA729F4-866B-481E-9385-59206347A15C",
        "text": "No I think you brought up a great point actually about the need to find a higher order representation (between node wire and code) and to be honest I think you answered you question with what you said in the first paragraph: \u201cadd to the canvas, position and interlink\u201d. It\u2019s my hypothesis that enabling the addition of any kind of object (numbers, text, geometry with dimensions) and linking them directly on the canvas might enable just that. If you add the ability to toggle visibility as a property and toggle links on and off themselves and add some form of dynamic repetition I believe you can make anything (though there\u2019s a lot of nuance i haven\u2019t quite figured out). Obligatory _I have no idea if this will actually work_ tag",
        "team": "T5TCAFTA9",
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "13Uf0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No I think you brought up a great point actually about the need to find a higher order representation (between node wire and code) and to be honest I think you answered you question with what you said in the first paragraph: \u201cadd to the canvas, position and interlink\u201d. "
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " my hypothesis that enabling the addition of any kind of object (numbers, text, geometry with dimensions) and linking them directly on the canvas might enable just "
                            },
                            {
                                "type": "text",
                                "text": "that"
                            },
                            {
                                "type": "text",
                                "text": ". If you add the ability to toggle visibility as a property and toggle links on and off themselves and add some form of dynamic repetition I believe you can make anything (though "
                            },
                            {
                                "type": "text",
                                "text": "there\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " a lot of nuance i "
                            },
                            {
                                "type": "text",
                                "text": "haven\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " quite figured out). Obligatory "
                            },
                            {
                                "type": "text",
                                "text": "I have no idea if this will actually work",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " tag"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]