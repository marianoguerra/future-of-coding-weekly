[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713318208.682589",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1713318259.000000"
        },
        "client_msg_id": "35d0550e-1a38-4bf5-9606-cc4f53697a34",
        "text": "I <https://mastodon.social/@spiralganglion/112282956696254310|shared> some <https://mastodon.social/@spiralganglion/112284014138207711|thoughts> about _my personal definition of_ reversible computing over on Mastodon today. (Yeah, I slightly mangled the example of a surjective function \u2014 should have said _nonnegative_ integers.)",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "reply_count": 26,
        "reply_users_count": 5,
        "latest_reply": "1713591339.411189",
        "reply_users": [
            "UC2A2ARPT",
            "UBKNXPBAB",
            "UFEQUBNNT",
            "U03U0SCU5LH",
            "U05M5A8E0NT"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iohvs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "link",
                                "url": "https://mastodon.social/@spiralganglion/112282956696254310",
                                "text": "shared"
                            },
                            {
                                "type": "text",
                                "text": " some "
                            },
                            {
                                "type": "link",
                                "url": "https://mastodon.social/@spiralganglion/112284014138207711",
                                "text": "thoughts"
                            },
                            {
                                "type": "text",
                                "text": " about "
                            },
                            {
                                "type": "text",
                                "text": "my personal definition of",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reversible computing over on Mastodon today. (Yeah, I slightly mangled the example of a surjective function \u2014 should have said "
                            },
                            {
                                "type": "text",
                                "text": "nonnegative",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " integers.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Images here, in case you dun wan go to Masto.",
        "files": [
            {
                "id": "F06UN9HJ32P",
                "created": 1713318293,
                "timestamp": 1713318293,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UC2A2ARPT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 386046,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06UN9HJ32P/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06UN9HJ32P/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 244,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 325,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 488,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 542,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 650,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UN9HJ32P-9930d9315a/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 694,
                "original_w": 2480,
                "original_h": 1680,
                "thumb_tiny": "AwAgADDQOQ33/wAMUmGwP3n6U4/XFKelADcHrv4+gpMNj/WfoKdzto520AN5IyH/AEpVBzneSPpR/DSr0oAXrQRmiigAI+XFA6UHp3oHSgAIz1ooooA//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UC2A2ARPT/F06UN9HJ32P/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06UN9HJ32P-374514a96b",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F06UND2QVC2",
                "created": 1713318297,
                "timestamp": 1713318297,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UC2A2ARPT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 324634,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06UND2QVC2/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06UND2QVC2/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 302,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 402,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 604,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 671,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 805,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06UND2QVC2-39d61fdc6e/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 858,
                "original_w": 2054,
                "original_h": 1722,
                "thumb_tiny": "AwAoADDPqToPuxn8aYAD1zQQB60APwOMhPzoIGfup+JpgAI70DGeelADnHy9EH0NMp2F7ZpDt96AEGe1FFKoz2zQADI7UmKdx6CmkUAA47UUUUAFFFFADsj1pDj1ptFAC0UUUAf/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UC2A2ARPT/F06UND2QVC2/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06UND2QVC2-2f0dc442c5",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HeR6Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Images here, in case you dun wan go to Masto."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1713318301.099399",
        "client_msg_id": "0744df6e-2b55-4cdd-a679-0c9e7c435a62",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713319111.937689",
        "client_msg_id": "36763261-898b-4c2e-86d3-84a5af5ea7a1",
        "text": "Not to be a total nerd about this, but what you want sorta feels like a \u201chomotopy equivalence\u201d.\n\nf : X \u2192 Y and g : Y \u2192 X form a homotopy equivalence if g(f(x)) is \u201cpretty much\u201d like x and f(g(y)) is \u201cpretty much\u201d like y.* So it\u2019s a weakening of the typical definition of inverse functions.\n\nA reason I don\u2019t think this is a great metaphor for you: It actually says something pretty interesting about the relationship between X and Y for there to be any homotopy equivalence at all between them. (We call X and Y \u201chomotopy equivalent\u201d in this situation.) I think you want to be able to reverse functions between very dissimilar / arbitrary domains. So IDK.\n\n* It\u2019s actually not that g(f(x)) is \u201cpretty much\u201d like x for every x; it\u2019s that the function g \u2218 f is, holistically, \u201cpretty much\u201d like the identity function. (Homotopic.)",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+e4YI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to be a total nerd about this, but what you want sorta feels like a \u201chomotopy equivalence\u201d.\n\nf : X \u2192 Y and g : Y \u2192 X form a homotopy equivalence if g(f(x)) is \u201cpretty much\u201d like x and f(g(y)) is \u201cpretty much\u201d like y.* So it\u2019s a weakening of the typical definition of inverse functions.\n\nA reason I don\u2019t think this is a great metaphor for you: It actually says something pretty interesting about the relationship between X and Y for there to be any homotopy equivalence at all between them. (We call X and Y \u201chomotopy equivalent\u201d in this situation.) I think you want to be able to reverse functions between very dissimilar / arbitrary domains. So IDK.\n\n* It\u2019s actually not that g(f(x)) is \u201cpretty much\u201d like x for every x; it\u2019s that the function g \u2218 f is, holistically, \u201cpretty much\u201d like the identity function. (Homotopic.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "U05M5A8E0NT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713319549.627229",
        "client_msg_id": "37317fc9-12ea-444b-b483-b8ace56b4b15",
        "text": "You'll have to hold my hand a bit here \u2014 I'm way beyond my comfort zone wrt properties n shit \u2014 but I'm really interested here in terminology, theory, prior art, etc.\n\nHow does this homotopy equivalence work if f and/or g are non-injective, non-surjective, partial, multivalued, etc.? In other words, how close to bijective do these functions need to be for this property of homotopy equivalence to hold? Do f and g both need to be equally \"close\" to bijective? Or can one of them be made, say, only injective, and the other made multivalued? (Hopefully I said that correctly, or at least that you can intuit my questions)",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rp+YX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You'll have to hold my hand a bit here \u2014 I'm way beyond my comfort zone wrt properties n shit \u2014 but I'm really interested here in terminology, theory, prior art, etc.\n\nHow does this homotopy equivalence work if f and/or g are non-injective, non-surjective, partial, multivalued, etc.? In other words, how close to bijective do these functions need to be for this property of homotopy equivalence to hold? Do f and g both need to be equally \"close\" to bijective? Or can one of them be made, say, only injective, and the other made multivalued? (Hopefully I said that correctly, or at least that you can intuit my questions)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713319705.525409",
        "client_msg_id": "d25652f4-662b-4eea-85b4-63db90cbccca",
        "text": "&gt; I think you want to be able to reverse functions between very dissimilar / arbitrary domains.\nYeah, this exactly. I want to largely disregard the relationship between X and Y (in either direction) if that allows me to achieve something that _feels_ reversible in more situations.\n\nLike, for the cases where X and Y are 1-to-1 in f and g, then the reversibility is trivial. But what about the cases where they're not? I want to fake it, with as convincing a fake as I can manage with low-to-medium effort ;)",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I4V3q",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you want to be able to reverse functions between very dissimilar / arbitrary domains."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, this exactly. I want to largely disregard the relationship between X and Y (in either direction) if that allows me to achieve something that "
                            },
                            {
                                "type": "text",
                                "text": "feels",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reversible in more situations.\n\nLike, for the cases where X and Y are 1-to-1 in f and g, then the reversibility is trivial. But what about the cases where they're not? I want to fake it, with as convincing a fake as I can manage with low-to-medium effort ;)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1713320124.991859",
        "client_msg_id": "12F18296-1459-4F85-94EE-02CBE401CE3E",
        "text": "What makes this your favorite definition of reversible computing?",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VoNMX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What makes this your favorite definition of reversible computing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713320395.683039",
        "client_msg_id": "c2959c7a-d859-4f7e-89c1-3294559732d2",
        "text": "I'm looking for ways to make \"reversible\" versions of, basically, everything in JavaScript. So I'm trying to figure out what properties would enable the best-feeling version of this.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SnFW2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm looking for ways to make \"reversible\" versions of, basically, everything in JavaScript. So I'm trying to figure out what properties would enable the best-feeling version of this."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "UML4ZEKDK",
                    "U05M5A8E0NT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322524.776679",
        "client_msg_id": "7fc10578-ddd2-4df9-9d23-55e628c71499",
        "text": "Yeah sounds like you\u2019re interested so I\u2019m happy to elaborate!\n\nAll this homotopy equivalence stuff is coming from topology. Hopefully you know some of the basic topology spiel: we\u2019re talking about squishy squashy spaces where we don\u2019t care about exact shape, just sorta the way the spaces are connected. So a doughnut is the same as a coffee mug (with a handle).\n\nThe classic example of a homotopy equivalence, as far as I\u2019m concerned, is the equivalence between a circle C (like points in the plane distance 1 from the origin) and an annulus A (like points in the plane distance 0.9 to 1.1 from the origin).\n\nThese two objects are topologically different! For instance: Removing a single point from C will \u201ccut\u201d it, producing something that you can unwrap to turn it into a little line segment. But removing a single point from A just gives you, like, an annulus with an extra tiny extra hole in it.\n\nBut there\u2019s a looser sense in which C and A have the same structure \u2014 they\u2019re both things with a hole in them \u2014 and that sameness is captured by the fact that there\u2019s a homotopy equivalence connecting them.\n\nMaking a map f: C \u2192 A is easy \u2014 C is already a subset of A, so you just map it in there. This is an injective function.\n\nMaking a map g: A \u2192 C is less obvious, but still pretty straightforward. For instance, you can map each point of the annulus to the point of the circle at the same angle. Which is also the closest point of the circle, FWIW. This is a surjective function.\n\nInterestingly, in this situation, f and g are inverses of each other in one of the two directions. If I start on the circle, do f, and then do g, I get back to my original point. But no way are they going to be inverses of each other the other way around. You lose information going from A to C. So if I start with a point a \u2208 A, do g, and do f, I\u2019m going to (generally speaking) end up at a different place in A.\n\nBut it turns out (and this is where I\u2019m gonna get very sketchy), that f \u2218 g (the map that takes a to f(g(a))) is not that far off from the identity function. In particular, it\u2019s \u201chomotopic\u201d to the identity: it can be continuously deformed to the identity. So that\u2019s what makes f &amp; g a special homotopy equivalence pair.\n\nNow that I\u2019ve given you the whole spiel, let me look more carefully at what you wrote there\u2026",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a+oUC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah sounds like you\u2019re interested so I\u2019m happy to elaborate!\n\nAll this homotopy equivalence stuff is coming from topology. Hopefully you know some of the basic topology spiel: we\u2019re talking about squishy squashy spaces where we don\u2019t care about exact shape, just sorta the way the spaces are connected. So a doughnut is the same as a coffee mug (with a handle).\n\nThe classic example of a homotopy equivalence, as far as I\u2019m concerned, is the equivalence between a circle C (like points in the plane distance 1 from the origin) and an annulus A (like points in the plane distance 0.9 to 1.1 from the origin).\n\nThese two objects are topologically different! For instance: Removing a single point from C will \u201ccut\u201d it, producing something that you can unwrap to turn it into a little line segment. But removing a single point from A just gives you, like, an annulus with an extra tiny extra hole in it.\n\nBut there\u2019s a looser sense in which C and A have the same structure \u2014 they\u2019re both things with a hole in them \u2014 and that sameness is captured by the fact that there\u2019s a homotopy equivalence connecting them.\n\nMaking a map f: C \u2192 A is easy \u2014 C is already a subset of A, so you just map it in there. This is an injective function.\n\nMaking a map g: A \u2192 C is less obvious, but still pretty straightforward. For instance, you can map each point of the annulus to the point of the circle at the same angle. Which is also the closest point of the circle, FWIW. This is a surjective function.\n\nInterestingly, in this situation, f and g are inverses of each other in one of the two directions. If I start on the circle, do f, and then do g, I get back to my original point. But no way are they going to be inverses of each other the other way around. You lose information going from A to C. So if I start with a point a \u2208 A, do g, and do f, I\u2019m going to (generally speaking) end up at a different place in A.\n\nBut it turns out (and this is where I\u2019m gonna get very sketchy), that f \u2218 g (the map that takes a to f(g(a))) is not that far off from the identity function. In particular, it\u2019s \u201chomotopic\u201d to the identity: it can be continuously deformed to the identity. So that\u2019s what makes f & g a special homotopy equivalence pair.\n\nNow that I\u2019ve given you the whole spiel, let me look more carefully at what you wrote there\u2026"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322684.191979",
        "client_msg_id": "970de2d8-2db7-42c4-aad9-dcfb1c7ccea0",
        "text": "Ok so you were curious about how close f &amp; g have to be to being bijective. The example I gave above was a very classic sort of example, in which neither are bijective, but one is injective and the other is surjective. The image is that you have two spaces, one of which sits inside the other, and there\u2019s a \u201cprojection\u201d operator that sends the larger space down onto the smaller space.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ltq2c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok so you were curious about how close f & g have to be to being bijective. The example I gave above was a very classic sort of example, in which neither are bijective, but one is injective and the other is surjective. The image is that you have two spaces, one of which sits inside the other, and there\u2019s a \u201cprojection\u201d operator that sends the larger space down onto the smaller space."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "This is related to the idea of \u201cdeformation retraction\u201d, illustrated here.",
        "files": [
            {
                "id": "F06V19CR75X",
                "created": 1713322719,
                "timestamp": 1713322719,
                "name": "Screenshot 2024-04-16 at 7.58.35\u202fPM.png",
                "title": "Screenshot 2024-04-16 at 7.58.35\u202fPM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 66692,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06V19CR75X/screenshot_2024-04-16_at_7.58.35___pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06V19CR75X/download/screenshot_2024-04-16_at_7.58.35___pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 67,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 89,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 134,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 149,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 178,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06V19CR75X-1efdf3f99d/screenshot_2024-04-16_at_7.58.35___pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 190,
                "original_w": 1302,
                "original_h": 242,
                "thumb_tiny": "AwAIADDQfdxtzjvjrQm7J3Zx2z1p9FAETebuOMY7UHzeMY6c/WpaKAIj5u0dM06Pfzv/AAp9FAH/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F06V19CR75X/screenshot_2024-04-16_at_7.58.35___pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06V19CR75X-62f6fe1ace",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S+PaG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is related to the idea of \u201cdeformation retraction\u201d, illustrated here."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1713322730.046299",
        "client_msg_id": "a07f3d4c-acca-468d-9d90-609d612b15eb",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322774.480529",
        "client_msg_id": "ef1a86c8-6b22-42d4-9a5d-021386bdc661",
        "text": "(That\u2019s from Allen Hatcher\u2019s textbook, which is free online, very good, and well-illustrated, tho it is almost certainly impenetrable without a lot more preparation: <https://pi.math.cornell.edu/~hatcher/AT/AT.pdf.>)",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49qZ/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(That\u2019s from Allen Hatcher\u2019s textbook, which is free online, very good, and well-illustrated, tho it is almost certainly impenetrable without a lot more preparation: "
                            },
                            {
                                "type": "link",
                                "url": "https://pi.math.cornell.edu/~hatcher/AT/AT.pdf."
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322823.630219",
        "client_msg_id": "142ad62a-3706-4eb8-852c-478c4bc59145",
        "text": "But homotopy equivalences themselves don\u2019t require this structure; they\u2019re much more general. You can come up with homotopy equivalences where neither map is injective or surjective, they\u2019re just two sloppy mappings that happen to sort of almost invert each other in this sloppy topological way.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EM9Ng",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But homotopy equivalences themselves don\u2019t require this structure; they\u2019re much more general. You can come up with homotopy equivalences where neither map is injective or surjective, they\u2019re just two sloppy mappings that happen to sort of almost invert each other in this sloppy topological way."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322905.143559",
        "client_msg_id": "4e84e9f6-6514-4bde-aeb2-42a462de0ecd",
        "text": "As for multi-valued maps: Mathematicians basically don\u2019t fuck with multi-valued maps. Anything you\u2019d want to represent as a multi-valued map from X to Y, mathematicians prefer to see as a single-valued map from X to P(Y) (the power set, consisting of all subsets of Y).",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FZVD/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for multi-valued maps: Mathematicians basically don\u2019t fuck with multi-valued maps. Anything you\u2019d want to represent as a multi-valued map from X to Y, mathematicians prefer to see as a single-valued map from X to P(Y) (the power set, consisting of all subsets of Y)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322960.738919",
        "client_msg_id": "e81e429f-a830-48d5-8bf9-cd89a93d169a",
        "text": "Ok that\u2019s definitely enough gotta go. :pray:",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GFdyM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok that\u2019s definitely enough gotta go. "
                            },
                            {
                                "type": "emoji",
                                "name": "pray",
                                "unicode": "1f64f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1713326275.312469",
        "client_msg_id": "BC101C70-FE9E-4506-9A74-518C1C01F65E",
        "text": "I just lol\u2019d working out how to sloppy-reverse `sin(x) &gt; 0` evaluating to `true`. glhf, man, this is gonna be wild.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BS2jc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just lol\u2019d working out how to sloppy-reverse "
                            },
                            {
                                "type": "text",
                                "text": "sin(x) > 0",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " evaluating to "
                            },
                            {
                                "type": "text",
                                "text": "true",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". glhf, man, this is gonna be wild."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713329565.009479",
        "client_msg_id": "79036DCD-5449-4CEC-A438-51B44AE7BAD2",
        "text": "Yeah, that's a great example <@UFEQUBNNT>. I'd be perfectly happy if that produced, say, `1` when reversed \u2014 even if the original `x` was something totally different \u2014 because `1` gets you another `true` when you go forward again.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WWKy+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's a great example "
                            },
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": ". I'd be perfectly happy if that produced, say, "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when reversed \u2014 even if the original "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was something totally different \u2014 because "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " gets you another "
                            },
                            {
                                "type": "text",
                                "text": "true",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when you go forward again"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1713330013.443849",
        "client_msg_id": "9DCF66FA-EBD5-4B3D-8558-3020508E5F85",
        "text": "Does it matter to what you\u2019re working on that `x` might be used in another expression that doesn\u2019t have `1` in its domain? Is rocking forward after a rock backward going to be sloppy too?",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "85kDK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does it matter to what you\u2019re working on that "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might be used in another expression that "
                            },
                            {
                                "type": "text",
                                "text": "doesn\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " have "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in its domain? Is rocking forward after a rock backward going to be sloppy too?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713330253.154719",
        "client_msg_id": "E877F1CD-C27B-43F8-8E18-5BF6C30600AA",
        "text": "Yes, potentially! In addition to non-injective, non-surjective, and multivalued, I'm also interested in a notion of \"reversible function\" that is loose enough to cover partial functions. But I don't have any strong examples yet to help me feel out sensibilities for how I'd like them to behave.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mqm+z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, potentially! In addition to non-injective, non-surjective, and multivalued, I'm also interested in a notion of \"reversible function\" that is loose enough to cover partial functions"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But I don't have any strong examples yet to help me feel out sensibilities for how I'd like them to behave"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713330394.188529",
        "client_msg_id": "642646E1-DC39-4559-9358-7CE5D30E65BD",
        "text": "Like, the reverse of a non-surjective function is very likely a partial function, so I feel like one answer might be to treat a forward partial function with similar techniques (so that you can meaningfully reverse it and get something useful back).",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ItdWq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like, the reverse of a non-surjective function is very likely a partial function, so I feel like one answer might be to treat a forward partial function with similar techniques (so that you can meaningfully reverse it and get something useful back)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1713423835.628819",
        "client_msg_id": "03d9d4e1-dd56-4cc5-96cf-e62d89d5d1d8",
        "text": "Can't you just use matrices? I think of a matrix as basically a couple of transform (functions) put into a neat grid. Inverting them is possible, albeit costly. So couldn't you use a really high order matrix and fit your function as close as possible. Than invert it. This coming from an armchair math expert. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vKgeW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can't you just use matrices? I think of a matrix as basically a couple of transform (functions) put into a neat grid. Inverting them is possible, albeit costly. So couldn't you use a really high order matrix and fit your function as close as possible. Than invert it. This coming from an armchair math expert. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713444561.751939",
        "client_msg_id": "7A60EAC5-A269-46C1-8205-70492EBFA1CF",
        "text": "I'm interested in functions on other data types too. Also, non-affine math functions. So matrices are a great example of a bijective function, but I can't see how they'd apply to, say, array.splice()",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hYuYj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm interested in functions on other data types too."
                            },
                            {
                                "type": "text",
                                "text": " Also, non-affine math functions. So matrices are a great example of a bijective function, but I can't see how they'd apply to, say, array.splice()"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713586666.762849",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1713586770.000000"
        },
        "client_msg_id": "d6fc5519-f15e-4b74-ae41-99d8cf0cf408",
        "text": "I'm working on a similar, more manual approach to the problem of reversing functions with my <https://vezwork.github.io/polylab/dist/demo/bidirectionalParse/> bidirectional language project. My approach, up until this point, has been to manually write the reverses of JS functions, and pair them up to form isomorphisms/multidirectional functions. i.e. I manually write three cases for plus: c = a + b, a = c - b, b = c - a. I was going to continue this approach with other data types like array.splice etc.\nI like this approach because it is quite doable, and while the simple multidirectional functions themselves are not so expressive to use, once you start composing a bunch of them, you can pretty quickly build up some pretty interesting multidirectional functions, and you kind of get it for free because you can write code as if it were just normal functions, but then call them forward and sideways and backwards.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kLULJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm working on a similar, more manual approach to the problem of reversing functions with my "
                            },
                            {
                                "type": "link",
                                "url": "https://vezwork.github.io/polylab/dist/demo/bidirectionalParse/"
                            },
                            {
                                "type": "text",
                                "text": " bidirectional language project. My approach, up until this point, has been to manually write the reverses of JS functions, and pair them up to form isomorphisms/multidirectional functions. i.e. I manually write three cases for plus: c = a + b, a = c - b, b = c - a. I was going to continue this approach with other data types like array.splice etc.\nI like this approach because it is quite doable, and while the simple multidirectional functions themselves are not so expressive to use, once you start composing a bunch of them, you can pretty quickly build up some pretty interesting multidirectional functions, and you kind of get it for free because you can write code as if it were just normal functions, but then call them forward and sideways and backwards."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713587032.295439",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1713587068.000000"
        },
        "client_msg_id": "7726b150-9a05-4988-b681-6b71d5ccd10a",
        "text": "While I was learning about bidirectionality, I tried out MiniKanren. Its really cool because everything you write in it is a relation, which is incredibly powerful -- for example, given an output to a relation, you can get back ALL the possible inputs -- but at the cost of anything complex being hella slow. even something with a relatively simple definition like relational multiplication can get slow for reasonable size numbers I seem to remember.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8opX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While I was learning about bidirectionality, I tried out MiniKanren. Its really cool because everything you write in it is a relation, which is incredibly powerful -- for example, given an output to a relation, you can get back ALL the possible inputs -- but at the cost of anything complex being hella slow. even something with a relatively simple definition like relational multiplication can get slow for reasonable size numbers I seem to remember."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713588712.852449",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1713589413.000000"
        },
        "client_msg_id": "3840775d-0d47-4e34-86a7-7b63455128f1",
        "text": "Relating in concept to what <@UBKNXPBAB> talked about: I think one thing to check your intuition on is *continuity.* What I mean is, it might be worth asking yourself these questions:\ndo you have some sense of \"closeness\" of input values to your function?\n\u2022 numbers have an obvious sense of closeness that we learn in school. |a - b| is the distance between a and b.\n\u2022 you can have a sense of closeness of strings by an \"edit distance\" such as \"<https://en.wikipedia.org/wiki/Levenshtein_distance|Levenshtein distance>\".\n\u2022 arrays also could have an edit distance. Maybe array distance is sort of defined in terms of the distance of its entries? Is ['a',1,2] close to ['ab',1,2]? It probably depends on what array modifications you expect.\n\u2022 git diffs are a sort of measure of the difference between source files.\n\u2022 etc.\nand do you have a sense of closeness of output values to your function?\n\nif a function is continuous, that means that if you \"move\" your original input value to a new close input value, then the new output of your function should also be close to your original output.\nIs the function you are trying to reverse continuous?\nThe reverse of your function is also a function, is the reverse function continuous?\n\u2022 For an example, what about a reverse of the square function? the square of 4 could be 2 or -2, and generally the square root of any positive number could be positive or negative. If you want the reverse to be continuous and be single-valued then (I'm pretty sure) maybe you should definite square root to always be positive or always be negative OR you can make square root return a pair of both positive and negative and imagine that the pair lives in a 2d space. Both of these options make for a continuous reverse of the square function:\n    \u25e6 example 1: \n    \u25e6 4 -sqrt-> 2\n    \u25e6 4.1 -sqrt-> 2.02 :white_check_mark: 4.1 is close to 4 and 2.02 is close to 2 by number distance\n    \u25e6 example 2: \n    \u25e6 4 -sqrt-> [-2,2]\n    \u25e6 4.1 -sqrt-> [-2.02,2.02] :white_check_mark: 4.1 is close to 4 and  [-2.02,2.02] is close to [-2,2] by distance of 2d points\nContinuity is useful for thinking about user experience because as time slowly changes, or user input slowly changes, or values slowly change, continuity says that related things don't \"jump around\".",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hwDvj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Relating in concept to what "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " talked about: I think one thing to check your intuition on is "
                            },
                            {
                                "type": "text",
                                "text": "continuity. ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "What I mean is, it might be worth asking yourself these questions:\ndo you have some sense of \"closeness\" of input values to your function?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "numbers have an obvious sense of closeness that we learn in school. |a - b| is the distance between a and b."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "you can have a sense of closeness of strings by an \"edit distance\" such as \""
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Levenshtein_distance",
                                        "text": "Levenshtein distance"
                                    },
                                    {
                                        "type": "text",
                                        "text": "\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "arrays also could have an edit distance. Maybe array distance is sort of defined in terms of the distance of its entries? Is ['a',1,2] close to ['ab',1,2]? It probably depends on what array modifications you expect."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "git diffs are a sort of measure of the difference between source files."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "etc."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and do you have a sense of closeness of output values to your function?\n\nif a function is continuous, that means that if you \"move\" your original input value to a new close input value, then the new output of your function should also be close to your original output.\nIs the function you are trying to reverse continuous?\nThe reverse of your function is also a function, is the reverse function continuous?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "For an example, what about a reverse of the square function? the square of 4 could be 2 or -2, and generally the square root of any positive number could be positive or negative. If you want the reverse to be continuous and be single-valued then (I'm pretty sure) maybe you should definite square root to always be positive or always be negative OR you can make square root return a pair of both positive and negative and imagine that the pair lives in a 2d space. Both of these options make for a continuous reverse of the square function:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "example 1: "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4 -sqrt-> 2"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4.1 -sqrt-> 2.02 "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "white_check_mark",
                                        "unicode": "2705"
                                    },
                                    {
                                        "type": "text",
                                        "text": " 4.1 is close to 4 and 2.02 is close to 2 by number distance"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "example 2: "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4 -sqrt-> [-2,2]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "4.1 -sqrt-> [-2.02,2.02] "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "white_check_mark",
                                        "unicode": "2705"
                                    },
                                    {
                                        "type": "text",
                                        "text": " 4.1 is close to 4 and  [-2.02,2.02] is close to [-2,2] by distance of 2d points"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nContinuity is useful for thinking about user experience because as time slowly changes, or user input slowly changes, or values slowly change, continuity says that related things don't \"jump around\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713590248.138629",
        "client_msg_id": "f9b37755-feaa-4db7-97f1-d564422fd6e1",
        "text": "Continuity could be helpful for automating reversal of functions too. If you define some sense of closeness on a datatype, then given an original input and ouput, and given a new output thats close to the original output (maybe assuming the user nudged the output value or something) then you can search only close around the original input value to find a new input.\nThis could potentially narrow down the search space a lot.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nagwC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Continuity could be helpful for automating reversal of functions too. If you define some sense of closeness on a datatype, then given an original input and ouput, and given a new output thats close to the original output (maybe assuming the user nudged the output value or something) then you can search only close around the original input value to find a new input.\nThis could potentially narrow down the search space a lot."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05M5A8E0NT",
        "type": "message",
        "ts": "1713590303.938349",
        "client_msg_id": "d492a99d-0329-4b50-9f87-c6935cbe29c6",
        "text": "This is still pretty theoretical though. I'll try to think about more concrete ways to approach this in JS. I'll also try to think about more concepts that can help constrain or reason about bidirectionality.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YoZu6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is still pretty theoretical though. I'll try to think about more concrete ways to approach this in JS. I'll also try to think about more concepts that can help constrain or reason about bidirectionality."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713591339.411189",
        "client_msg_id": "A987615C-90BB-4D86-B4B3-4C7FABA01BA7",
        "text": "That idea of manually writing bidirectional versions of functions actually lines up with what I have in mind. Like, my plan is to start with the simplest / dumbest thing that'll work, then gradually (likely manually) add better behaviour where it's most useful. So for instance, the \"automatic\" reverse version of a math function could just return 0 (or 1, or NaN), for string functions return empty string, etc. Just return values that are likely to be a fixed point, even if it's totally wrong. It'll be a useful (and quick) enabler for what I want to explore.\n\nAnd then yeah, on top of that I can begin layering in different improvements. A little gradient descent here, maybe minikanren there, maybe sprinkle some GPT bullshit on top. Anything will be an improvement. The suggestions you have about nudging values and treating the error as a point on 2D space are appreciated, since that's the fuzzy frontier of my understanding for how to do a good job of this. Like, my gut says that making x + y = z reversible could be done nicely by creating a special pair of values for x and y that preserve the constraint that they must add to z. But exactly how to do that, I'm not sure yet.",
        "team": "T5TCAFTA9",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r1YsY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That idea of manually writing bidirectional versions of functions actually lines up with what I have in mind. Like, my plan is to start with the simplest / dumbest thing that'll work, then gradually (likely manually) add better behaviour where it's most useful. So for instance, the \"automatic\" reverse version of a math function could just return 0 (or 1, or NaN), for string functions return empty string, etc. Just return values that are likely to be a fixed point, even if it's totally wrong"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It'll be a useful (and quick) enabler for what I want to explore.\n\nAnd then yeah, on top of that I can begin layering in different improvements"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " A little gradient descent here, maybe minikanren there, maybe sprinkle some GPT bullshit on top"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Anything will be an improvement. The suggestions you have about nudging values and treating the error as a point on 2D space are appreciated, since that's the fuzzy frontier of my understanding for how to do a good job of this"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Like, my gut says that making x + y = z reversible could be done nicely by creating a special pair of values for x and y that preserve the constraint that they must add to z. But exactly how to do that, I'm not sure yet"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    }
]