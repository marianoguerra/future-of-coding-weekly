[
    {
        "user": "U04JY2BF24E",
        "type": "message",
        "ts": "1714062480.601149",
        "client_msg_id": "a98736ec-edd5-47ff-a7a5-f74c6db73e9d",
        "text": "Does anyone else think of \"configuring\" as distinct from \"programming\"? Some activities I consider \"configuring\" and not \"programming\": much devops work such as Terraform, YML files for build pipelines, even commonly labeled \"programming\" of a VCR/DVR.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "reply_count": 13,
        "reply_users_count": 7,
        "latest_reply": "1714142207.870779",
        "reply_users": [
            "U04JY2BF24E",
            "UK3LH8CF5",
            "U5STGTB3J",
            "U06H4766K42",
            "U03U0SCU5LH",
            "UP00ZLX6G",
            "UCS1K3QTH"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2BCzi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone else think of \"configuring\" as distinct from \"programming\"? Some activities I consider \"configuring\" and not \"programming\": much devops work such as Terraform, YML files for build pipelines, even commonly labeled \"programming\" of a VCR/DVR."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04JY2BF24E",
        "type": "message",
        "ts": "1714062600.597209",
        "client_msg_id": "0bad6f95-e25a-40c1-9c6d-061570db2fb0",
        "text": "This question prompted by latest FoC podcast. Maybe my distinction is not academically interesting. But personally, I find \"configuring\" activities inherently unsatisfying, while \"programming\" demands enough creativity to keep me interested.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vJIlF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This question prompted by latest FoC podcast. Maybe my distinction is not academically interesting. But personally, I find \"configuring\" activities inherently unsatisfying, while \"programming\" demands enough creativity to keep me interested."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UDQBTJ211",
                    "UCS1K3QTH"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1714063576.189149",
        "client_msg_id": "87C16F24-BC73-4C2D-9EAE-F643EB3BAE8D",
        "text": "I think many times the distinction for me ends up being a matter of interface. I feel much more like I\u2019m programming when doing the CDK vs doing Cloudformation. Yet, I\u2019m accomplishing the same task. I don\u2019t think it is because one is TS and one yaml, but the kinds of concepts I have to think about and the ability to build abstractions. \n\nConfiguration, to me, ends up being a fill in the blank rather than a crafting. It\u2019s like painting by numbers. Even though in the cdk, I am given a bunch of material to work with, and constraints on it, I still get to put that material together. I still can look at how it was implemented, I can still tear it apart and do something different. I can\u2019t with configuration. I\u2019m stuck listing details I don\u2019t want to list. \n\nI definitely find all configuration tasks deeply unsatisfying and it\u2019s one of the things I don\u2019t like about \u201clow code\u201d tools as they are generally made. They are just configuration. No way to dive in, no way to remix, to take parts apart and make them do something new.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R1t7O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think many times the distinction for me ends up being a matter of interface. I feel much more like I\u2019m programming when doing the CDK vs doing Cloudformation. Yet, I\u2019m accomplishing the same task. I "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " think it is because one is TS and one "
                            },
                            {
                                "type": "text",
                                "text": "y"
                            },
                            {
                                "type": "text",
                                "text": "aml, but the kinds of concepts I have to think about and the ability to build abstractions. \n\nConfiguration, to me, ends up being a fill in the blank rather than a crafting. It\u2019s like painting by numbers. Even though in the cdk, I am given a bunch of material to work with, and constraints on it, I still get to put that material together. I still can look at how it was implemented, I can still tear it apart and do something different. I can\u2019t with configuration. I\u2019m stuck listing details I don\u2019t want to list. \n\nI definitely find all configuration tasks deeply unsatisfying and "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " one of the things I "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " like about \u201clow code\u201d tools as they are generally made. They are just configuration. No way to dive in, no way to remix, to take parts apart and make them do something new."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "URKQXRCAC",
                    "UP00ZLX6G",
                    "U06SAHMJCG2",
                    "U0112C10V4Y"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U04JY2BF24E",
        "type": "message",
        "ts": "1714064387.211259",
        "client_msg_id": "0b88e804-077d-41be-a3c9-72af2cb29aff",
        "text": "Yes! This relates to the very end of the episode, where (if I interpret correctly) Ivan imagines a world where general purpose programming languages are replaced (or supplanted) by domain-specific tooling. To reach that point, it seems we need to constrain the problem space to the point where the activity of programming becomes less interesting. Maybe I focus my attention elsewhere, though, to the output of the activity rather than the activity itself.\n\nAnother small distinction in my mind is the addition of boolean logic and branching. I know, there are plenty of programming languages that don't involve branching. I know I shouldn't be constraining myself to the Von Neumann architecture. Still, branching offers freedom that makes the activity of programming more intellectually interesting.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G8ypZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! This relates to the very end of the episode, where (if I interpret correctly) Ivan imagines a world where general purpose programming languages are replaced (or supplanted) by domain-specific tooling. To reach that point, it seems we need to constrain the problem space to the point where the activity of programming becomes less interesting. Maybe I focus my attention elsewhere, though, to the output of the activity rather than the activity itself.\n\nAnother small distinction in my mind is the addition of boolean logic and branching. I know, there are plenty of programming languages that don't involve branching. I know I shouldn't be constraining myself to the Von Neumann architecture. Still, branching offers freedom that makes the activity of programming more intellectually interesting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1714065055.059049",
        "client_msg_id": "7B98BDD2-88AC-4378-ADD7-BC09276EB54F",
        "text": "My naive distinction between programming and configuration is that the former is specifying dynamic behavior of a system while the latter is providing initial values to it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "twHAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My naive distinction between programming and configuration is that the former is specifying dynamic behavior of a system while the latter is providing initial values to it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCS1K3QTH",
                    "U06SAHMJCG2"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1714081240.001419",
        "client_msg_id": "05025E5C-7B8C-49C4-8121-A0607F5CC62C",
        "text": "For what it\u2019s worth Ivan\u2019s definition of domain specific includes things like Elm. So I\u2019d assume he\u2019d imagine not a less powerful setup, but a tailor made approach. I definitely think there is a danger in going the direction of configuration though. ",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FSERA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For what it\u2019s worth Ivan\u2019s definition of domain specific includes things like Elm. So I\u2019d assume he\u2019d imagine not a less powerful setup, but a tailor made approach. I definitely think there is a danger in going the direction of configuration though. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06H4766K42",
        "type": "message",
        "ts": "1714081458.372869",
        "client_msg_id": "C85EB00A-8F94-462B-B607-37917CF290FD",
        "text": "Sounds like Racket Lang could be a solid bet if they can withstand the elites knocking performance and distribution issues out. I do know someone was playing with emitting web assembly from Racket for distribution and runtimes. ",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+INcT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like Racket Lang could be a solid bet if they can withstand the elites knocking performance and distribution issues out"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I do know someone was playing with emitting web assembly from Racket for distribution and runtimes"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1714112592.470409",
        "client_msg_id": "2a2b6de8-6069-4d96-af41-625298be096d",
        "text": "I see it the same way as <@U5STGTB3J>. The configuration is declarative programming that defines constant values (like HTML / CSS..). I think a PL should be able to do both (and distinguish between the two). You can have branching in a declarative PL, but it will be resolved at compile time.\nOne could argue that an executable is also a \"constant\", so all programming is configuration, but I think the difference is that the interactions are defined in the executable, if you have a constant, they are defined in the player.\nMy last blog post touches on this.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JHQZC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see it the same way as "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": ". The configuration is declarative programming that defines constant values (like HTML / CSS..). I think a PL should be able to do both (and distinguish between the two). You can have branching in a declarative PL, but it will be resolved at compile time.\nOne could argue that an executable is also a \"constant\", so all programming is configuration, but I think the difference is that the interactions are defined in the executable, if you have a constant, they are defined in the player.\nMy last blog post touches on this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP00ZLX6G",
        "type": "message",
        "ts": "1714116893.449839",
        "client_msg_id": "fdd951c5-ee50-412f-904e-238b9412193f",
        "text": "I agree with <@UK3LH8CF5> in that it\u2019s all about the interface. Configuration done badly, feels like bureaucracy eg, filling in a tax form - you don\u2019t know what to put in a lot of the times and it\u2019s very tedious. Yaml/Json interfaces encourage this type of interface. When designed well, it\u2019s part of the system eg, games that make you \u201cconfigure\u201d the game by playing the game",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k4RTk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " in that it\u2019s all about the interface. Configuration done badly, feels like bureaucracy eg, filling in a tax form - you don\u2019t know what to put in a lot of the times and it\u2019s very tedious. Yaml/Json interfaces encourage this type of interface. When designed well, it\u2019s part of the system eg, games that make you \u201cconfigure\u201d the game by playing the game"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCS1K3QTH",
        "type": "message",
        "ts": "1714139131.472379",
        "client_msg_id": "19076412-2927-40a8-8f52-ebc4c0d9ee77",
        "text": "&gt; Ivan imagines a world where general purpose programming languages are replaced (or supplanted) by domain-specific tooling.\n\nIn some ways I think we are already there: javascript on the client, backend in C/C++/java/Python/C# etc. Shell scripting for OS, YML for build pipelines.\n\nIn other ways, we are a long way off. An example:\n\u2022 say you are a nurse manager running a new service you have staff you know the laws relating to healthcare provision, safety, there are agree services, metrics and tariffs. How do you do this?  what you do is run it on a bunch of spreadsheets.  Why - even low code tools require you to bring in a consultant to get it working acceptably - if you are running a large service that is widespread you may eventually put together a business case to procure a system. (assuming there is a vendor for what your need). When the service winds down that patient information is lost.\n",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VX9BI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> Ivan imagines a world where general purpose programming languages are replaced (or supplanted) by domain-specific tooling.\n\nIn some ways I think we are already there: javascript on the client, backend in C/C++/java/Python/C# etc. Shell scripting for OS, YML for build pipelines.\n\nIn other ways, we are a long way off. An example:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "say you are a nurse manager running a new service you have staff you know the laws relating to healthcare provision, safety, there are agree services, metrics and tariffs. How do you do this?  what you do is run it on a bunch of spreadsheets.  Why - even low code tools require you to bring in a consultant to get it working acceptably - if you are running a large service that is widespread you may eventually put together a business case to procure a system. (assuming there is a vendor for what your need). When the service winds down that patient information is lost."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UCS1K3QTH",
        "type": "message",
        "ts": "1714139216.639929",
        "client_msg_id": "2201ffb7-102d-4ce5-9dc9-9c390da761ab",
        "text": "there are limited options for professionals who are not programmers to get systems that do what they need.  Current low code systems come with a bunch of compromises and assumptions they may cost more than they are worth.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yk3MW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there are limited options for professionals who are not programmers to get systems that do what they need.  Current low code systems come with a bunch of compromises and assumptions they may cost more than they are worth."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04JY2BF24E",
        "type": "message",
        "ts": "1714139773.335279",
        "edited": {
            "user": "U04JY2BF24E",
            "ts": "1714139806.000000"
        },
        "client_msg_id": "5044f84c-bfaa-4c94-b046-e220ece906a4",
        "text": "Another potential distinction here, from the discussion above: some freedom to define relationships between different parts of the program. If we lock the user into a pre-defined schema with pre-defined relationships, then we fall squarely on the side of \"configuration\".",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0KkxU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another potential distinction here, from the discussion above: some freedom to define relationships between different parts of the program. If we lock the user into a pre-defined schema with pre-defined relationships, then we fall squarely on the side of \"configuration\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCS1K3QTH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCS1K3QTH",
        "type": "message",
        "ts": "1714139808.780739",
        "client_msg_id": "80660dc7-bc49-46d4-a7d6-51055d6f934e",
        "text": "&gt;  Sounds like Racket Lang could be a solid bet if they can withstand the elites knocking performance and distribution issues out.\nRacket is interesting because the metaprogramming facilities open the doors to building a wider variety of programming languages.\n\nThe performance question is interesting, because Racket has excellent performance, but it isn't a system programming language like Rust or C++ - and doesn't pretend to be.\n\nSo you wouldn't run Racket on a large scale - but DSL's for professionals - the machines they use are mostly idle - the size and speed of the Racket is just not noticeable.\n\nWhat is missing is DSL's(future of coding!) that support the needs of the users.\n\nRacket has tools to help make those DSL's (as do many other languages) - but the DSL's for non-programmers don't exist yet.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qIPOR",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Sounds like Racket Lang could be a solid bet if they can withstand the elites knocking performance and distribution issues out."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Racket is interesting because the metaprogramming facilities open the doors to building a wider variety of programming languages.\n\nThe performance question is interesting, because Racket has excellent performance, but it isn't a system programming language like Rust or C++ - and doesn't pretend to be.\n\nSo you wouldn't run Racket on a large scale - but DSL's for professionals - the machines they use are mostly idle - the size and speed of the Racket is just not noticeable.\n\nWhat is missing is DSL's(future of coding!) that support the needs of the users.\n\nRacket has tools to help make those DSL's (as do many other languages) - but the DSL's for non-programmers don't exist yet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCS1K3QTH",
        "type": "message",
        "ts": "1714142207.870779",
        "client_msg_id": "b6278ece-0742-4deb-ade8-1961e7fd4ca8",
        "text": "Some of the most interesting programmers I can think of are from other professions. I know a number of doctors who were licensed professionals with years of experience who taught themselves to program to solve problems that mattered to them. (I'll acknowledge survivor bias because I only know ones who succeeded.)\n\nAs programmers they are quite varied, but unlike a professional programmer, designing DSL's to suit their professional needs never occurred to them.",
        "team": "T5TCAFTA9",
        "thread_ts": "1714062480.601149",
        "parent_user_id": "U04JY2BF24E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/u8bi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of the most interesting programmers I can think of are from other professions. I know a number of doctors who were licensed professionals with years of experience who taught themselves to program to solve problems that mattered to them. (I'll acknowledge survivor bias because I only know ones who succeeded.)\n\nAs programmers they are quite varied, but unlike a professional programmer, designing DSL's to suit their professional needs never occurred to them."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]