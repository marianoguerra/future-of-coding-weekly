[
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1722801785.237119",
        "client_msg_id": "3d1ada7d-2d1d-4502-8b01-74a9439fcd24",
        "text": "Hi, Because I want to understand better how neural networks work and can be trained, the best way to do is, is by building a small one from scratch myself and training it.\nIn this video <https://youtu.be/TG9TGqM9HCs> I show creating and connecting a few neural-nodes together and a show a very small prebuilt neural network.\n\nTo be able to do this, I've created 4 new node-types in my visual programming system: neural-input-node, neural-bias-node, neural-node and neural-output-node.. the first 3 output weighted connections. This means that a weight property is attached to the connection and can be changed.. the neural-node and neural-output-node use these weights in there respective calculations.\n\nThe neural-node currently uses sigmoid as its activation function.\nThe neural-bias-node only outputs a value of 1 and the output value of a neural-input-node can be changed. When any of these values are changed, they propagate forward through the network.\nIn the current example flow, an error is also calculated using an expression node-type depending on the output and expected value.\nThe white object-node is also a new node-type and can be used to obtain multiple values and output them in a single object.\n\nIn the near future I hope to implement a neural network that can be trained with the mnist digit dataset, but I have to do a lot more work before I am at that stage I think.",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/TG9TGqM9HCs",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/TG9TGqM9HCs/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/TG9TGqM9HCs?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"work in progress: building a neural network using code-flow-canvas\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/TG9TGqM9HCs",
                "fallback": "YouTube Video: work in progress: building a neural network using code-flow-canvas",
                "title": "work in progress: building a neural network using code-flow-canvas",
                "title_link": "https://youtu.be/TG9TGqM9HCs",
                "author_name": "Maikel van de Lisdonk",
                "author_link": "https://www.youtube.com/@maikelvandelisdonk7024",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x/KeE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, Because I want to understand better how neural networks work and can be trained, the best way to do is, is by building a small one from scratch myself and training it.\nIn this video "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/TG9TGqM9HCs"
                            },
                            {
                                "type": "text",
                                "text": " I show creating and connecting a few neural-nodes together and a show a very small prebuilt neural network.\n\nTo be able to do this, I've created 4 new node-types in my visual programming system: neural-input-node, neural-bias-node, neural-node and neural-output-node.. the first 3 output weighted connections. This means that a weight property is attached to the connection and can be changed.. the neural-node and neural-output-node use these weights in there respective calculations.\n\nThe neural-node currently uses sigmoid as its activation function.\nThe neural-bias-node only outputs a value of 1 and the output value of a neural-input-node can be changed. When any of these values are changed, they propagate forward through the network.\nIn the current example flow, an error is also calculated using an expression node-type depending on the output and expected value.\nThe white object-node is also a new node-type and can be used to obtain multiple values and output them in a single object.\n\nIn the near future I hope to implement a neural network that can be trained with the mnist digit dataset, but I have to do a lot more work before I am at that stage I think."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]