[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723718770.309809",
        "client_msg_id": "a01f1d37-de03-4474-aa1e-e394ae686749",
        "text": "I\u2019ve been pointed at the Kronark YouTube channel which is only a few days old and purports to show how to build software using nodes. <https://www.youtube.com/watch?v=qM2mtAPEmd4>\n\nSeveral things jump out at me: (1) nodes do NOT need to return a value (unlike functions, which must always return something ; does the need to return something lead to bloat???) (2) undefined behaviour is allowed (does over-defining of ALL behaviour lead to bloat???) (3) encapsulation and abstraction - 0D defines Container components which encapsulate and elide layers, 0D does this encapsulation at runtime ; Kronark compiles out encapsulation at compile time (AOT). I feel uneasy about this, when taken to the extreme. Maybe 0D should be described as\u201cstructured concurrency\u201d (???) Whereas Kronark is just more-of-the-same linear composition (???) that works in a feed-forward, single-threaded manner. It will be interesting to see examples of concurrency and feedback in Kronark. (FTR, \u201cfeedback\u201d is not the same as \u201crecursion\u201d).",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "reply_count": 9,
        "reply_users_count": 2,
        "latest_reply": "1723950949.499959",
        "reply_users": [
            "UC2A2ARPT",
            "UGWUJUZHT"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q3QmP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve been pointed at the Kronark YouTube channel which is only a few days old and purports to show how to build software using nodes. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=qM2mtAPEmd4"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSeveral things jump out at me: (1) nodes do NOT need to return a value (unlike functions, which must always return something ; does the need to return something lead to bloat???) (2) undefined behaviour is allowed (does over-defining of ALL behaviour lead to bloat???) (3) encapsulation and abstraction - 0D defines Container components which encapsulate and elide layers, 0D does this encapsulation at runtime ; Kronark compiles out encapsulation at compile time (AOT). I feel uneasy about this, when taken to the extreme. Maybe 0D should be described as\u201cstructured concurrency\u201d (???) Whereas Kronark is just more-of-the-same linear composition (???) that works in a feed-forward, single-threaded manner. It will be interesting to see examples of concurrency and feedback in Kronark. (FTR, \u201cfeedback\u201d is not the same as \u201crecursion\u201d)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06BUK2M2RH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723731944.159049",
        "client_msg_id": "17FADD30-8CF7-457C-874A-E418067A4060",
        "text": "Oh, this channel is neat! Thanks for sharing it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QMzMQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, this channel is neat! Thanks for sharing it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U06BUK2M2RH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723732192.995229",
        "client_msg_id": "3C726B28-5EF1-46AA-A502-16178FF0649E",
        "text": "<@UK3LH8CF5> they did the dang thing: <https://youtube.com/watch?v=Tu_K2DPCteU|https://youtube.com/watch?v=Tu_K2DPCteU>",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gW9Vw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " they did the dang thing: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtube.com/watch?v=Tu_K2DPCteU",
                                "text": "https://youtube.com/watch?v=Tu_K2DPCteU"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723746559.206399",
        "client_msg_id": "BBE3D293-314E-41E2-A2B9-9DAA4AEDD703",
        "text": "On the point of feedback, are you referring to things like \"backpressure\" where the flow of information across each wire is bidirectional? Or something else?",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vwf0e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the point of feedback, are you referring to things like \"backpressure\" where the flow of information across each wire is bidirectional? Or something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723750605.705219",
        "client_msg_id": "508aa862-137e-4dc2-9753-9c98039bdba4",
        "text": "<@UC2A2ARPT> not backpressure. Feedback is a loop from output back to input. Seen in EE op-amp designs, I've never seen it in software (other than when I use it).  It ain't like recursion, since there is a \"propagation delay\" involved (FIFO queuing instead of LIFO callstack). Fig.1 and Fig. 2, of this note that I think I posted some time ago, shows feedback with the possibility of intervening messages (i.e. not naturally recursion). <https://programmingsimplicity.substack.com/publish/post/147186037?back=%2Fpublish%2Fposts> . I would be happy to explain further, if I can think of what to say about it...",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "image_url": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e0ca86d-7f69-46c1-8836-6052d14ab89b_1094x501.png",
                "image_width": 1094,
                "image_height": 501,
                "image_bytes": 38230,
                "from_url": "https://programmingsimplicity.substack.com/publish/post/147186037?back=%2Fpublish%2Fposts",
                "service_icon": "https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https://programmingsimplicity.substack.com/publish/post/147186037?back=%2Fpublish%2Fposts",
                "fallback": "2024-07-30-Diagram Compiler Status",
                "text": "This project creates a working \u201cLarson scanner\u201d (seen on the T.V.",
                "title": "2024-07-30-Diagram Compiler Status",
                "title_link": "https://programmingsimplicity.substack.com/publish/post/147186037?back=%2Fpublish%2Fposts",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0qQ+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " not backpressure. Feedback is a loop from output back to input. Seen in EE op-amp designs, I've never seen it in software (other than when I use it).  It ain't like recursion, since there is a \"propagation delay\" involved (FIFO queuing instead of LIFO callstack). Fig.1 and Fig. 2, of this note that I think I posted some time ago, shows feedback with the possibility of intervening messages (i.e. not naturally recursion). "
                            },
                            {
                                "type": "link",
                                "url": "https://programmingsimplicity.substack.com/publish/post/147186037?back=%2Fpublish%2Fposts"
                            },
                            {
                                "type": "text",
                                "text": " . I would be happy to explain further, if I can think of what to say about it..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723751938.175479",
        "client_msg_id": "ED414CB8-9B1C-4173-A544-1EA647EF4037",
        "text": "Oh, that sort of feedback. Of course :face_palm: ",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MIB7O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, that sort of feedback. Of course "
                            },
                            {
                                "type": "emoji",
                                "name": "face_palm",
                                "unicode": "1f926"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723762158.568149",
        "client_msg_id": "0c171985-baff-4162-ba06-eef7ef588cc5",
        "text": "Maybe restating the obvious...\n\nLook at pin 9 of Decode. It goes to 2 places.\n\nIn a function-based programming language, you have to pick an order, say first to the red box then to the J input of the Reverser box.\n\nOr v.v.\n\nIn a message-based system, though, you don\u2019t have to pick an order. You plunk an event onto the red box\u2019s queue and you plunk an event onto the Reverser\u2019s input queue. They (red box and Reverser box) get around to processing their input events some time in the future.\n\nFeedback is more of the same, plunking events into input queues, but not guaranteeing when they will be processed, only that the events will be processed in order of arrival. (Recursion guarantees the opposite - a recursive call gets to jump to the head of the queue).\n\nThis is a subtle difference, but, makes a huge difference in design mentality. Kinda like a butterfly in Japan affecting the weather in North America.",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xYtRc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe restating the obvious...\n\nLook at pin 9 of Decode. It goes to 2 places.\n\nIn a function-based programming language, you have to pick an order, say first to the red box then to the J input of the Reverser box.\n\nOr v.v.\n\nIn a message-based system, though, you don\u2019t have to pick an order. You plunk an event onto the red box\u2019s queue and you plunk an event onto the Reverser\u2019s input queue. They (red box and Reverser box) get around to processing their input events some time in the future.\n\nFeedback is more of the same, plunking events into input queues, but not guaranteeing when they will be processed, only that the events will be processed in order of arrival. (Recursion guarantees the opposite - a recursive call gets to jump to the head of the queue).\n\nThis is a subtle difference, but, makes a huge difference in design mentality. Kinda like a butterfly in Japan affecting the weather in North America."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723763184.658979",
        "client_msg_id": "ed8ddd30-5682-485b-86d4-68776a3c922e",
        "text": "Yeah, it always frustrated me that you can't naively create feedback loops in Max/MSP. The irony! But I understand the tradeoffs.",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lh3CT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it always frustrated me that you can't naively create feedback loops in Max/MSP. The irony! But I understand the tradeoffs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723809333.182369",
        "client_msg_id": "e10d8008-2728-4568-a338-4d5e4aa723cb",
        "text": "<@UC2A2ARPT> I've never used Max/MSP. Why can't you create feedback loops? What are the tradeoffs?",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vA2o9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I've never used Max/MSP. Why can't you create feedback loops? What are the tradeoffs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723950949.499959",
        "client_msg_id": "2ee2cc47-9400-4011-98cc-a21a5ef27135",
        "text": "<@UGWUJUZHT> Roughly, logic nodes trigger evaluation immediately when they receive input on their primary (leftmost) port. So you can have a feedback loop that goes to a non-primary port, but not a loop that goes to a primary port (because that's just an infinite loop). Audio nodes behave a little differently, and there are some means for creating feedback (let setting up delay taps). I remember it all being a bit confusing, and less expressive than I wanted.",
        "team": "T5TCAFTA9",
        "thread_ts": "1723718770.309809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D5/ru",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " Roughly, logic nodes trigger evaluation immediately when they receive input on their primary (leftmost) port. So you can have a feedback loop that goes to a non-primary port, but not a loop that goes to a primary port (because that's just an infinite loop). Audio nodes behave a little differently, and there are some means for creating feedback (let setting up delay taps). I remember it all being a bit confusing, and less expressive than I wanted."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]