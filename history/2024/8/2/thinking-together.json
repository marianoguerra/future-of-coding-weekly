[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1722636399.108109",
        "client_msg_id": "2b74ef59-01e4-4179-9628-a4cd3110d10b",
        "text": "Falsifiable theory\u2026\nTheory: Function-based thinking greatly restricts thinking about FoC.\nTest: if this theory is true, then examination of the source code for The Mother Of All Demos will reveal that not all parts of the demo system were tightly inter-connected into a single synchronous, functional blob of design.\nHow?: Where can we find the source code for TMOAD? If we obtain the source, how can we reverse-engineer the design out from the implementation details? If we can get at the design, we should look for how the sub-units of software are interconnected. We need to examine if the code is designed as many islands of synchrony vs. being designed as just one big blob of synchrony.\nCorollary: if TMOAD was designed as many islands of software and hardware, then it is unlikely that anything as interesting as TMOAD can come of building software on computers using only synchronous languages, like Python, Haskell, using concepts such as thread libraries, theorem-provers,  etc. [Thread libraries are but assembler-level work-arounds that enable the use of the function-based programming paradigm with languages like Python, Haskell, etc. Theorem provers need single islands of synchronous code, to work]",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "reply_count": 7,
        "reply_users_count": 3,
        "latest_reply": "1722781442.980299",
        "reply_users": [
            "U05PY5AQCA2",
            "UGWUJUZHT",
            "U5STGTB3J"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5iVEW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Falsifiable theory\u2026\nTheory: Function-based thinking greatly restricts thinking about FoC.\nTest: if this theory is true, then examination of the source code for The Mother Of All Demos will reveal that not all parts of the demo system were tightly inter-connected into a single synchronous, functional blob of design.\nHow?: Where can we find the source code for TMOAD? If we obtain the source, how can we reverse-engineer the design out from the implementation details? If we can get at the design, we should look for how the sub-units of software are interconnected. We need to examine if the code is designed as many islands of synchrony vs. being designed as just one big blob of synchrony.\nCorollary: if TMOAD was designed as many islands of software and hardware, then it is unlikely that anything as interesting as TMOAD can come of building software on computers using only synchronous languages, like Python, Haskell, using concepts such as thread libraries, theorem-provers,  etc. [Thread libraries are but assembler-level work-arounds that enable the use of the function-based programming paradigm with languages like Python, Haskell, etc. Theorem provers need single islands of synchronous code, to work]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1722639918.852579",
        "client_msg_id": "d6f3344a-5f81-4b82-9a79-e065100312f6",
        "text": "I take the success of Excel as evidence that functional programming is the most natural way to express programming for non-programmers.",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ysllI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I take the success of Excel as evidence that functional programming is the most natural way to express programming for non-programmers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1722654278.395489",
        "client_msg_id": "6df1fdf4-9118-4b11-a7ab-dd89fc8b4863",
        "text": "How is Excel equivalent to functional programming?",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kpPUu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How is Excel equivalent to functional programming?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1722663878.958829",
        "client_msg_id": "2F2E2924-3073-4E39-84D7-E03657498B9B",
        "text": "Excel *is* a functional programming language. The cells contain either values or functions of those values.\n\nIt is a lazy, partially spatial (as opposed to purely textual) functional programming language.\n\nThe latest version even has user-defined functions (a *major* update to its functionality that went largely unremarked).",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+sF7/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excel "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true,
                                    "italic": false,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " a functional programming language. The cells contain either values or functions of those values.\n\nIt is a lazy, partially spatial (as opposed to purely textual) functional programming language.\n\nThe latest version even has user-defined functions (a "
                            },
                            {
                                "type": "text",
                                "text": "major",
                                "style": {
                                    "bold": true,
                                    "italic": false,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " update to its functionality that went largely unremarked)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1722663961.085459",
        "client_msg_id": "9E4214D5-12D5-443C-89C7-7BACE0DC03F3",
        "text": "Excel is perhaps the most successful example of the sort of thing that this group is about.",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ycM3w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excel is perhaps the most successful example of the sort of thing that this group is about."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1722694399.142209",
        "client_msg_id": "91596092-3D6F-4E6E-BDBD-BCD0C813625E",
        "text": "I have a feeling that you, <@UGWUJUZHT>, have a very specific definition of what you call \u201cfunctional\u201d in mind, that may not fully overlap with what many of us here think it means. My interpretation is that you think of functional more in terms of structured programming perhaps? I also don\u2019t think \u201cfunctional programming\u201d is particularly well defined either. I think Conal Elliott is known for criticizing this.",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ahDj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a feeling that you, "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": ", have a very specific definition of what you call \u201cfunctional\u201d in mind, that may not fully overlap with what many of us here think it means"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " My interpretation is that you think of functional more in terms of structured programming perhaps? I also "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " think \u201cfunctional programming\u201d is particularly well defined either"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I think Conal Elliott is known for criticizing this"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1722743499.506089",
        "client_msg_id": "66fb5021-ed49-4717-a5d7-be51a680744c",
        "text": "I wonder if the issue might be with the word \u201cprogramming\u201d. I try to be careful to use the phrase \u201cfunction-based programming\u201d instead of \u201cfunctional programming\u201d. Function-based programming covers many more programming languages than functional-programming covers. I think of \u201cprogramming\u201d to mean solderless - quick and easy - reconfiguration of reprogrammable machines. At that low level, functions are not inherently supported by hardware - you have to /add/ software and hardware to make \u201cprograms\u201d work like \u201cfunctions\u201d, i.e. you have to add lots of inefficiency to allow manipulation of reprogrammable hardware to make the hardware expressible as mathematical equations written on paper. I think that the paradigm of functions-grafted-onto-hardware is inappropriate for many modern problems, like internet, robotics, gaming, GUIs, etc. as witnessed by the invention of extreme gyrations and work-arounds such as thread libraries, promises, monads, etc. Early FORTRANs and BASICs did not express hardware manipulation as mathematical functions. Early Lisps showed that grafting functions onto hardware was viable and was a productive /paradigm/. Sector Lisp shows just how clean and small this can be when the paradigm is respected. Yet, early games showed that this kind of thinking was /not/ necessary. I feel that so-called \u201ccomputer science\u201d ran with only the one paradigm - i.e. inefficient, function-based thinking mapped onto hardware manipulation - at the expense of cutting off many avenues of problem-solving. For the record, C and Pascal and Haskell and Python and JS and WASM and ..., are function-based, while PROLOG is not function-based, and, StateCharts are not function-based. I think that the function-based mentality deeply affects developers and, therefore, affects what developers can invent for non-programmers. I think that spreadsheets are just a stop-gap technology. Spreadsheets are \u201cthe best\u201d that programmers can provide for non-programmers given developers\u2019 function-based mentality. Mathematical 2D notation is OK for use with papyrus and clay-tablet media, but, is not necessarily the most appropriate way to think about reprogrammable electronic machines in 2024. So, in my mind, we need to change the culture of /developers/ before even trying to imagine FoP (Future of Programming). I think that TMOAD (The Mother Of All Demos) was not bound by the function-based paradigm and that function-based programmers hold TMOAD in awe because it looks non-understandable - like magic - from a mono-paradigmatic perspective. I think that it would behoove modern programming researchers to delve deeply into TMOAD and to see how it differs from function-based thinking.",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lAQYH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if the issue might be with the word \u201cprogramming\u201d. I try to be careful to use the phrase \u201cfunction-based programming\u201d instead of \u201cfunctional programming\u201d. Function-based programming covers many more programming languages than functional-programming covers. I think of \u201cprogramming\u201d to mean solderless - quick and easy - reconfiguration of reprogrammable machines. At that low level, functions are not inherently supported by hardware - you have to /add/ software and hardware to make \u201cprograms\u201d work like \u201cfunctions\u201d, i.e. you have to add lots of inefficiency to allow manipulation of reprogrammable hardware to make the hardware expressible as mathematical equations written on paper. I think that the paradigm of functions-grafted-onto-hardware is inappropriate for many modern problems, like internet, robotics, gaming, GUIs, etc. as witnessed by the invention of extreme gyrations and work-arounds such as thread libraries, promises, monads, etc. Early FORTRANs and BASICs did not express hardware manipulation as mathematical functions. Early Lisps showed that grafting functions onto hardware was viable and was a productive /paradigm/. Sector Lisp shows just how clean and small this can be when the paradigm is respected. Yet, early games showed that this kind of thinking was /not/ necessary. I feel that so-called \u201ccomputer science\u201d ran with only the one paradigm - i.e. inefficient, function-based thinking mapped onto hardware manipulation - at the expense of cutting off many avenues of problem-solving. For the record, C and Pascal and Haskell and Python and JS and WASM and ..., are function-based, while PROLOG is not function-based, and, StateCharts are not function-based. I think that the function-based mentality deeply affects developers and, therefore, affects what developers can invent for non-programmers. I think that spreadsheets are just a stop-gap technology. Spreadsheets are \u201cthe best\u201d that programmers can provide for non-programmers given developers\u2019 function-based mentality. Mathematical 2D notation is OK for use with papyrus and clay-tablet media, but, is not necessarily the most appropriate way to think about reprogrammable electronic machines in 2024. So, in my mind, we need to change the culture of /developers/ before even trying to imagine FoP (Future of Programming). I think that TMOAD (The Mother Of All Demos) was not bound by the function-based paradigm and that function-based programmers hold TMOAD in awe because it looks non-understandable - like magic - from a mono-paradigmatic perspective. I think that it would behoove modern programming researchers to delve deeply into TMOAD and to see how it differs from function-based thinking."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1722781442.980299",
        "client_msg_id": "7642459e-f509-4e5d-8ab2-248700ceb0aa",
        "text": "(FTR, I fleshed this out some more into a longer essay and posted it to my substack <https://programmingsimplicity.substack.com/p/2024-08-03-functional-vs-function?r=1egdky>)",
        "team": "T5TCAFTA9",
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https://programmingsimplicity.substack.com/p/2024-08-03-functional-vs-function?r=1egdky",
                "service_icon": "https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "thumb_url": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d69eba9-d5d3-4387-a046-9b881b00bd45_131x131.png",
                "thumb_width": 131,
                "thumb_height": 131,
                "id": 1,
                "original_url": "https://programmingsimplicity.substack.com/p/2024-08-03-functional-vs-function?r=1egdky",
                "fallback": "2024-08-03-Functional vs. Function-Based Thinking and Mono-paradigmatic Programming",
                "text": "I am more focussed on developers than on non-programmers.",
                "title": "2024-08-03-Functional vs. Function-Based Thinking and Mono-paradigmatic Programming",
                "title_link": "https://programmingsimplicity.substack.com/p/2024-08-03-functional-vs-function?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5T5eA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(FTR, I fleshed this out some more into a longer essay and posted it to my substack "
                            },
                            {
                                "type": "link",
                                "url": "https://programmingsimplicity.substack.com/p/2024-08-03-functional-vs-function?r=1egdky"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]