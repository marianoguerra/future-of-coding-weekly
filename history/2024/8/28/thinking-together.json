[
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1724823323.121549",
        "edited": {
            "user": "U05PY5AQCA2",
            "ts": "1724823349.000000"
        },
        "client_msg_id": "4EDE1E50-41F1-447C-968B-0CCE3D3F1018",
        "text": "I just had a thought.\n\nIs anyone aware of any work on a non-programmer-friendly UI for editing pattern matching? Semantically, I\u2019m looking for Datalog. So I guess a Datalog query UI, although I could imagine a pattern matching UI being developed outside of a use with Datalog.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724823323.121549",
        "reply_count": 5,
        "reply_users_count": 5,
        "latest_reply": "1724917977.812419",
        "reply_users": [
            "U0296ACR13M",
            "UP28ETUSE",
            "UGWUJUZHT",
            "U05PY5AQCA2",
            "U07BD7U4S4R"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XPfFd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just had a thought.\n\nIs anyone aware of any work on a non-programmer-friendly UI for editing pattern matching? Semantically, I\u2019m looking for Datalog. So I guess a Datalog query UI, although I could imagine a pattern matching UI being developed outside of a use with Datalog."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0296ACR13M",
        "type": "message",
        "ts": "1724834552.079969",
        "client_msg_id": "1da7e492-7de4-425b-84f2-7d1ff0f6ad90",
        "text": "I have been thinking about creating one with <https://levlo.com>, but not sure who would use it and for what reason.. Did you have an use-case in mind?",
        "team": "T5TCAFTA9",
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G2dov",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been thinking about creating one with "
                            },
                            {
                                "type": "link",
                                "url": "https://levlo.com"
                            },
                            {
                                "type": "text",
                                "text": ", but not sure who would use it and for what reason.. Did you have an use-case in mind?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1724835540.036889",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1724835546.000000"
        },
        "client_msg_id": "2208866e-d786-41ee-a7a4-92f769233802",
        "text": "I've recently come across Query by Example (QBE), which seems related to what you're asking? <https://en.m.wikipedia.org/wiki/Query_by_Example>",
        "team": "T5TCAFTA9",
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/8/8a/Requ%C3%AAte_QBE_dans_Paradox.jpg",
                "image_width": 556,
                "image_height": 334,
                "image_bytes": 44433,
                "from_url": "https://en.m.wikipedia.org/wiki/Query_by_Example",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.m.wikipedia.org/wiki/Query_by_Example",
                "fallback": "wikipedia: Query by Example",
                "text": "Query by Example (QBE) is a database query language for relational databases. It was devised by Mosh\u00e9 M. Zloof at IBM Research during the mid-1970s, in parallel to the development of SQL. It is the first graphical query language, using visual tables where the user would enter commands, example elements and conditions. Many graphical front-ends for databases use the ideas from QBE today. Originally limited only for the purpose of retrieving data, QBE was later extended to allow other operations, such as inserts, deletes and updates, as well as creation of temporary tables.\nThe motivation behind QBE is that a parser can convert the user's actions into statements expressed in a database manipulation language, such as SQL.  Behind the scenes, it is this statement that is actually executed. A suitably comprehensive front-end can minimize the burden on the user to remember the finer details of SQL, and it is easier and more productive for end-users (and even programmers) to select tables and columns by selecting them rather than typing in their names.\nIn the context of information retrieval, QBE has a somewhat different meaning. The user can submit a document, or several documents, and ask for \"similar\" documents to be retrieved from a document database [see search by multiple examples]. Similarity search is based comparing document vectors (see Vector Space Model).\nQBE represents seminal work in end-user development, frequently cited in research papers as an early example of this topic.\nCurrently, QBE is supported in several relational database front ends, notably Microsoft Access, which implements \"Visual Query by Example\", as well as Microsoft SQL Server Enterprise Manager. It is also implemented in several object-oriented databases (e.g. in db4o).\nQBE is based on the logical formalism called tableau query, although QBE adds some extensions to that, much like SQL is based on the relational algebra.",
                "title": "Query by Example",
                "title_link": "https://en.m.wikipedia.org/wiki/Query_by_Example",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s66yl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've recently come across Query by Example (QBE), which seems related to what you're asking? "
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/Query_by_Example"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724835855.463379",
        "client_msg_id": "d726e6bc-690d-4b64-9dcf-ed645ae7ebf7",
        "text": "I am unaware of such UIs, but, I have fooled around with slapping little DSLs together that combine Prolog and JS together in a markdown-inspired syntax using a bash script. An example of live code that I used:\n\n```# connection\n## parameters\n  Parent\n  Edge\n  Sender\n  Receiver\n## imports\n  shapes\n  names\n  connection\n## query\n  das_fact(kind,Edge,edge)\n  sourceof(Edge,Sender)\n  targetof(Edge,Receiver)\n  das_fact(direct_contains,Parent,Edge)\n## display\ndas_fact(connection, ${Parent}, ${Edge}).\ndas_fact(sender, ${Edge}, sender{component:\"${Sender.component}\",port:\"${Sender.port}\"}).\ndas_fact(receiver, ${Edge}, receiver{component:\"${Receiver.component}\",port:\"${Receiver.port}\"}).```\nWhy markdown? Because emacs then lets me collapse each section and imagine that these are layers.\n[I would be glad to explain further, if this is of interest]",
        "team": "T5TCAFTA9",
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bIBc7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am unaware of such UIs, but, I have fooled around with slapping little DSLs together that combine Prolog and JS together in a markdown-inspired syntax using a bash script. An example of live code that I used:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# connection\n## parameters\n  Parent\n  Edge\n  Sender\n  Receiver\n## imports\n  shapes\n  names\n  connection\n## query\n  das_fact(kind,Edge,edge)\n  sourceof(Edge,Sender)\n  targetof(Edge,Receiver)\n  das_fact(direct_contains,Parent,Edge)\n## display\ndas_fact(connection, ${Parent}, ${Edge}).\ndas_fact(sender, ${Edge}, sender{component:\"${Sender.component}\",port:\"${Sender.port}\"}).\ndas_fact(receiver, ${Edge}, receiver{component:\"${Receiver.component}\",port:\"${Receiver.port}\"})."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why markdown? Because emacs then lets me collapse each section and imagine that these are layers.\n[I would be glad to explain further, if this is of interest]"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1724861978.355539",
        "client_msg_id": "607DE5DB-8D27-403F-9498-D33287C84E7D",
        "text": "I very much have a use case in mind: <https://frest.substack.com/p/what-is-frest|https://frest.substack.com/p/what-is-frest>\n\nAlso, it just occurred to me that dataflow graph without loops is a really nice sort of construction. It would be a great way to present say a non-recursive Datalog query, or many other sorts of logic, in a manner that is friendly to non-programmers.\n\nEven without the graphical presentation, a friendly presentation of the non-recursive part of Datalog would be cool.\n\nBut then, you can make it recursive, and present that in a stepwise fashion. Stepping between the same, or other, sets of pattern matches and conditions.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "attachments": [
            {
                "image_url": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5fd9d106-47e9-4c50-a15f-707b11ec91ae_550x550.png",
                "image_width": 550,
                "image_height": 550,
                "image_bytes": 15258,
                "from_url": "https://frest.substack.com/p/what-is-frest",
                "service_icon": "https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d74e329-6c40-4882-92d4-c2176a0ffceb%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https://frest.substack.com/p/what-is-frest",
                "fallback": "What is FREST?",
                "text": "FREST is simpler computing for ordinary folks and programmers alike.",
                "title": "What is FREST?",
                "title_link": "https://frest.substack.com/p/what-is-frest",
                "service_name": "frest.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cdGIQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I very much have a use case in mind: "
                            },
                            {
                                "type": "link",
                                "url": "https://frest.substack.com/p/what-is-frest",
                                "text": "https://frest.substack.com/p/what-is-frest"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso, it just occurred to me that dataflow graph without loops is a really nice sort of construction. It would be a great way to present say a non-recursive Datalog query, or many other sorts of logic, in a manner that is friendly to non-programmers.\n\nEven without the graphical presentation, a friendly presentation of the non-recursive part of Datalog would be cool.\n\nBut then, you can make it recursive, and present that in a stepwise fashion. Stepping between the same, or other, sets of pattern matches and conditions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I\u2019m trying to figure out why you (<@UC2A2ARPT>) think that using OhmJS to produce the wiki would create a dependency, while I (<@UGWUJUZHT>) don\u2019t think so.  Here\u2019s a diagram of how I understand the situation...",
        "files": [
            {
                "id": "F07JYNX5FFU",
                "created": 1724871242,
                "timestamp": 1724871242,
                "name": "tonedown.png",
                "title": "tonedown.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UGWUJUZHT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 1910703,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07JYNX5FFU/tonedown.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07JYNX5FFU/download/tonedown.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 345,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 460,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 691,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 767,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 921,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JYNX5FFU-704045b456/tonedown_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 982,
                "original_w": 3055,
                "original_h": 2930,
                "thumb_tiny": "AwAuADDRLc9RQWxS457UhXIoAUNmk3ClC+tIVFACBTnPan0zcQcYFPoATNLUZxu5BzSnhfWgB9FNU4HSk3GgB2RmlpoXPNOoAaQN2c80oHp0pjD5s08dKAFoI/OiigBm05p9FFAH/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UGWUJUZHT/F07JYNX5FFU/tonedown.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07JYNX5FFU-d7845a932c",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rf7p7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m trying to figure out why you ("
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ") think that using OhmJS to produce the wiki would create a dependency, while I ("
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": ") don\u2019t think so.  Here\u2019s a diagram of how I understand the situation..."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1724871289.168219",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1724873749.000000"
        },
        "client_msg_id": "996c1aa0-0838-4f7e-a4f0-da363116edc7",
        "thread_ts": "1724871289.168219",
        "reply_count": 7,
        "reply_users_count": 3,
        "latest_reply": "1725121374.752729",
        "reply_users": [
            "UJBAJNFLK",
            "UGWUJUZHT",
            "UC2A2ARPT"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724871397.593629",
        "client_msg_id": "5ab4eb24-a63c-489b-a2c7-14ae9b25fc49",
        "text": "(by \"a bunch of these\" I mean 1 for Python, 1 for JS, 1 for WASM, 1 for ???, etc.)",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zkV6/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(by \"a bunch of these\" I mean 1 for Python, 1 for JS, 1 for WASM, 1 for ???, etc.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724911421.182709",
        "client_msg_id": "8300944c-f587-4103-89a3-95fdcb8f47a9",
        "text": "In such discussions, always make the distinction between runtime dependencies and build dependencies. Basic example: for a C program, gcc (or whatever other compiler) is a build dependency: you need it to create a binary, but then you can throw it away. But glibc (under Linux) is a runtime dependency: you must have it to run the compiled C program.\n\nIn your diagram, OhmJS is a build dependency for tonedown.py.\n\nThe main insight behind the latest generation of package managers (Nix, Guix) is that build dependencies matter just as much as runtime dependencies for auditable and reproducible provenance tracking. In your example, any change to the specs requires rebuilding tonedown.py, so OhmJS is an important dependency, even if it is not required every time someone changes a Wiki page.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5evrm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In such discussions, always make the distinction between runtime dependencies and build dependencies. Basic example: for a C program, gcc (or whatever other compiler) is a build dependency: you need it to create a binary, but then you can throw it away. But glibc (under Linux) is a runtime dependency: you must have it to run the compiled C program.\n\nIn your diagram, OhmJS is a build dependency for tonedown.py.\n\nThe main insight behind the latest generation of package managers (Nix, Guix) is that build dependencies matter just as much as runtime dependencies for auditable and reproducible provenance tracking. In your example, any change to the specs requires rebuilding tonedown.py, so OhmJS is an important dependency, even if it is not required every time someone changes a Wiki page."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724911676.621719",
        "client_msg_id": "ffa6e8b9-2411-4cf5-b27b-b6b3bd022587",
        "text": "Of course, that also holds for programming languages, which <@UC2A2ARPT> tried to play down yesterday. Compilers and interpreters can be nasty dependencies. Bugs and backwards-incompatible changes in them are a real pain. As an example, I see computational scientists slowly moving away from their pet language, Python, because they are fed up with the slow but steady stream of compatibility-breaking changes (in the interpreter and the foundational libraries) that make their complex programs return somewhat different results with each new version.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CNfU6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, that also holds for programming languages, which "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " tried to play down yesterday. Compilers and interpreters can be nasty dependencies. Bugs and backwards-incompatible changes in them are a real pain. As an example, I see computational scientists slowly moving away from their pet language, Python, because they are fed up with the slow but steady stream of compatibility-breaking changes (in the interpreter and the foundational libraries) that make their complex programs return somewhat different results with each new version."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724912111.871079",
        "client_msg_id": "9ea2af7d-01c9-47f8-b549-ff11328a5cd1",
        "text": "So far for theory. In practice, some dependencies are more acceptable than others for pragmatic reasons. A C compiler is rarely critical: they tend to be stable, and there are lots of them. Stick to standard C and you can expect little trouble. Same for other standardized languages with multiple implementations (C++, Fortran, Common Lisp, ECMAScript ...).\n\nNext are languages with only one major implementation, but backed by a team/community focused on stability. That covers Java, Clojure, and Lua, and possibly Ruby (which I don't know well).\n\nOther uncritical dependencies are small convenience utilities that you could maintain yourself, or even rewrite if necessary.\n\nThere's of course another cost to dependencies: the cognitive effort for learning how to use them correctly.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "njVEq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So far for theory. In practice, some dependencies are more acceptable than others for pragmatic reasons. A C compiler is rarely critical: they tend to be stable, and there are lots of them. Stick to standard C and you can expect little trouble. Same for other standardized languages with multiple implementations (C++, Fortran, Common Lisp, ECMAScript ...).\n\nNext are languages with only one major implementation, but backed by a team/community focused on stability. That covers Java, Clojure, and Lua, and possibly Ruby (which I don't know well).\n\nOther uncritical dependencies are small convenience utilities that you could maintain yourself, or even rewrite if necessary.\n\nThere's of course another cost to dependencies: the cognitive effort for learning how to use them correctly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F07JV03HNDC",
                "created": 1724917929,
                "timestamp": 1724917929,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U07BD7U4S4R",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 56086,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07JV03HNDC/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07JV03HNDC/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JV03HNDC-80b3df9159/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JV03HNDC-80b3df9159/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JV03HNDC-80b3df9159/image_360.png",
                "thumb_360_w": 300,
                "thumb_360_h": 168,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07JV03HNDC-80b3df9159/image_160.png",
                "original_w": 300,
                "original_h": 168,
                "thumb_tiny": "AwAaADC3imMMOMs2Dk+1TYprBtwwRjB4PequTYixjILtgAHJxQF+8CzcHHNS4fJ6YxwPegB9x6Y7UXAjQA5wxb60/FKobnIA9MU7FFwsOxTWVdwJHIBp9FZ3KsR5G5iQcBc59aFOGb5SMY59akoouAg5oxS0UXA//9k=",
                "permalink": "https://futureofcoding.slack.com/files/U07BD7U4S4R/F07JV03HNDC/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07JV03HNDC-9bf3866592",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U07BD7U4S4R",
        "display_as_bot": false,
        "type": "message",
        "ts": "1724917977.812419",
        "client_msg_id": "747ad601-9ff9-458d-a366-ca0d41c17176",
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2"
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724926070.022919",
        "client_msg_id": "93cc76f9-0673-4e12-ad10-edd50e42a78d",
        "text": "Thanks! I might add:\n\nThere is a third kind of dependency - hidden runtime dependency. For example \u2018f(x)\u2019 implies that the given lump of code can *only* be used in systems that supply a function called \u201cf\u201d. This (deeply) impacts multiple-use of the lump of code and testability of the lump of code. The lump of code cannot be tested in a test jig unless \u201cf\u201d is supplied or stubbed out, i.e. the unit of code cannot be considered to be a \u201ccomponent\u201d. Hardware designs get this more right through the use of very independent / isolated ICs. Unit tests in hardware documentation tend to be more concise and focussed and meaningful than software equivalents. [The ensuing question \"Why?\" interests me].\n\nThe cost of learning how a system works before maintaining it. This includes understanding all dependencies in the system (runtime, compile-time, hidden) and all paradigms used in the system. I am of the opinion that this cost is greater than the cost of learning multiple notations and convenience tools that are used for building the system. I am drawn to emphasizing (a) reduction of this kind of learning curve (b) dividing and conquering this kind of information, allowing one to understand everything about only *parts* of the system before performing maintenance without any surprises. Hidden dependencies tend to oppose the dividability / composability of such learning. Fundamentally, you have to know *everything* about a system before making any changes, or, you end up playing whack-a-mole with unexpected gotchas that are triggered by your changes. I have formed the opinion that you can best fix this problem by starting out with isolated units instead of backing isolation in later. (Analogy: \u201cHow do you build a light airplane? Build an airplane, then, add lightness.\u201d - an overly difficult approach which tends not to work).",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5a16r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! I might add:\n\nThere is a third kind of dependency - hidden runtime dependency. For example \u2018f(x)\u2019 implies that the given lump of code can "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be used in systems that supply a function called \u201cf\u201d. This (deeply) impacts multiple-use of the lump of code and testability of the lump of code. The lump of code cannot be tested in a test jig unless \u201cf\u201d is supplied or stubbed out, i.e. the unit of code cannot be considered to be a \u201ccomponent\u201d. Hardware designs get this more right through the use of very independent / isolated ICs. Unit tests in hardware documentation tend to be more concise and focussed and meaningful than software equivalents. [The ensuing question \"Why?\" interests me].\n\nThe cost of learning how a system works before maintaining it. This includes understanding all dependencies in the system (runtime, compile-time, hidden) and all paradigms used in the system. I am of the opinion that this cost is greater than the cost of learning multiple notations and convenience tools that are used for building the system. I am drawn to emphasizing (a) reduction of this kind of learning curve (b) dividing and conquering this kind of information, allowing one to understand everything about only "
                            },
                            {
                                "type": "text",
                                "text": "parts",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the system before performing maintenance without any surprises. Hidden dependencies tend to oppose the dividability / composability of such learning. Fundamentally, you have to know "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " about a system before making any changes, or, you end up playing whack-a-mole with unexpected gotchas that are triggered by your changes. I have formed the opinion that you can best fix this problem by starting out with isolated units instead of backing isolation in later. (Analogy: \u201cHow do you build a light airplane? Build an airplane, then, add lightness.\u201d - an overly difficult approach which tends not to work)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724932909.709209",
        "client_msg_id": "4f0b81ff-ac0b-45d6-ba44-bbb224745046",
        "text": "Why do you call this a hidden dependency? In statically linked binaries, it is very explicit: the linker will tell you \"missing symbol f\" if f(x) is missing. In more dynamic languages, the error message may be deferred to runtime, but it's still very explicit, as in Python's \"NameError: name 'f' is not defined\".\n\nBut I fully agree on the second part. In terms of cognitive load, it's not the number of dependencies nor the size of the codebase (dependencies included) that matters.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OG/bH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why do you call this a hidden dependency? In statically linked binaries, it is very explicit: the linker will tell you \"missing symbol f\" if f(x) is missing. In more dynamic languages, the error message may be deferred to runtime, but it's still very explicit, as in Python's \"NameError: name 'f' is not defined\".\n\nBut I fully agree on the second part. In terms of cognitive load, it's not the number of dependencies nor the size of the codebase (dependencies included) that matters."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724935164.231319",
        "client_msg_id": "464e77f8-0a3a-4f42-a43f-dac353aa5123",
        "text": "&gt; Why do you call this a hidden dependency?\nProbably because I haven\u2019t found the words to express what I mean :slightly_smiling_face: . To me, \u2018f(x)\u2019 produces a mindset where it is OK to call outside of your \u201cscope\u201d, and, one tends not to even notice, i.e. it\u2019s \u201chidden\u201d (unrecognized) , AND, it is a (psychological?) dependency that you don't even notice that you're using. ... [working on an example as a way to further explain] ...",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oirkL",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why do you call this a hidden dependency?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nProbably because I haven\u2019t found the words to express what I mean "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " . To me, \u2018f(x)\u2019 produces a mindset where it is OK to call outside of your \u201cscope\u201d, and, one tends not to even notice, i.e. it\u2019s \u201chidden\u201d (unrecognized) , AND, it is a (psychological?) dependency that you don't even notice that you're using. ... [working on an example as a way to further explain] ..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1725121374.752729",
        "client_msg_id": "7B22F5E7-DFA6-4A16-9A66-86C12EFB33F4",
        "text": "Backing up:\n\nThe primary goal of the project is to make a wiki that is nice to read. To that end, there's a build script that adds things like indexes and backlinks, maybe more stuff in the future.\n\nThe secondary goal is to make a wiki that is easy enough to write, for now, via GitHub. It doesn't have to be perfect, it's fine if it's a bit clunky. This will probably change \u2014 later.\n\nThe (distant) third goal is that people can check out the repo locally, and run the build script on their own machine. They might want to see how their writing will be processed without having to loop through GitHub. Or they might want to hack on the stylesheet, or the build script, or add some new dimension to the project that I haven't conceived of.\n\nThe (even more distant) fourth goal is to allow people to do stuff from the third goal without needing to run the \"canonical\" build script. One possibility here is that, if the build script is really simple, people might be able to rewrite the build script in other languages. The original build script would still be canonical \u2014 it's the one that GitHub runs, after all \u2014 but if a 90% (or 50%) port sufficed for whatever \"third goal\" thing someone wanted to do, that'd be cool and good and fun.\n\nI have been sharing my thoughts about that distant fourth goal because I find it winsome. There's a Rosetta Code quality to it that makes me wonder a bit. It puts interesting pressure on how I think about the canonical build script, which I've found oddly productive.\n\nWhat I haven't communicated very well is that I'm still trying to get the primary and secondary goals accomplished, and I'm not ready to get bogged down in considering the fourth goal. I mustn't let myself get distracted by it, because \u2014 and I can't stress this enough \u2014 the third and fourth goals are not essential to the success of the project.\n\nSo by all means, I love that you're playing in the space of that fourth goal. I'd just invite you to treat it as play, and not feel like you need to, say, change my mind about any of it. I don't have a strong sense of what's going on at that level yet, because I'm still trying to achieve the top two goals. Also, when considering that fourth goal, I invite you to think of the build script as a throwaway thing. I'd like there to be a canonical _social_ understanding of the build script. If we somehow lost all the implementations, we'd just build a new one that did mostly the same thing. If it didn't quite work, we'd tweak it. I have no interest in treating the code or its execution as a source of truth, because the truth is just \"do we like reading this wiki?\" and that's going to change over time, and it's not a single concrete thing.",
        "team": "T5TCAFTA9",
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zzdkZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Backing up:\n\nThe primary goal of the project is to make a wiki that is nice to read. To that end, there's a build script that adds things like indexes and backlinks, maybe more stuff in the future"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe secondary goal is to make a wiki that is easy enough to write, for now, via GitHub. It doesn't have to be perfect, it's fine if it's a bit clunky. This will probably change \u2014 later"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe (distant) third goal is that people can check out the repo locally, and run the build script on their own machine. They might want to see how their writing will be processed without having to loop through GitHub. Or they might want to hack on the stylesheet, or the build script, or add some new dimension to the project that I haven't conceived of"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe (even more distant) fourth goal is to allow people to do stuff from the third goal without needing to run the \"canonical\" build script. One possibility here is that, if the build script is really simple, people might be able to rewrite the build script in other languages"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " The original build script would still be canonical \u2014 it's the one that GitHub runs, after all \u2014 but if a 90% (or 50%) port sufficed for whatever \"third goal\" thing someone wanted to do, that'd be cool and good and fun"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have been sharing my thoughts about that distant fourth goal because I find it winsome"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " There's a Rosetta Code quality to it that makes me wonder a bit"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It puts interesting pressure on how I think about the canonical build script, which I've found oddly productive"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhat I haven't communicated very well is that I'm still trying to get the primary and secondary goals accomplished, and I'm not ready to get bogged down in considering the fourth goal. I mustn't let myself get distracted by it, because \u2014 and I can't stress this enough \u2014 the third and fourth goals are not essential to the success of the project.\n\nSo by all means, I love that you're playing in the space of that fourth goal"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I'd just invite you to treat it as play, and not feel like you need to, say, change my mind about any of it. I don't have a strong sense of what's going on at that level yet, because I'm still trying to achieve the top two goals. Also, when considering that fourth goal, I invite you to think of the build script as a throwaway thing"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I'd like there to be a canonical "
                            },
                            {
                                "type": "text",
                                "text": "social",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " understanding of the build script"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " If we somehow lost all the implementations, we'd just build a new one that did mostly the same thing"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " If it didn't quite work, we'd tweak it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I have no interest in treating the code or its execution as a source of truth, because the truth is just \"do we like reading this wiki?\" and that's going to change over time, and it's not a single concrete thing"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]