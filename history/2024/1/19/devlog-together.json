[
    {
        "type": "message",
        "text": "Integrating a little game with a sprite editor and a maze editor, all on a touch-screen.\n\n<https://akkartik.itch.io/carousel/devlog/668072/a-little-game-integrated-with-its-tools>",
        "files": [
            {
                "id": "F06EJAAQ66S",
                "created": 1705684500,
                "timestamp": 1705684500,
                "name": "sprite-game.webm",
                "title": "sprite-game.webm",
                "mimetype": "video/webm",
                "filetype": "webm",
                "pretty_type": "WebM",
                "user": "UCUSW7WVD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 828479,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "transcription": {
                    "status": "none"
                },
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06EJAAQ66S/sprite-game.webm",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06EJAAQ66S/download/sprite-game.webm",
                "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F06EJAAQ66S-a074b1d934/file.m3u8?_xcb=b0f89",
                "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9NDQ0OTg5LEFWRVJBR0UtQkFORFdJRFRIPTMzNDg2OSxDT0RFQ1M9ImF2YzEuNjQwMDFmLG1wNGEuNDAuNSIsUkVTT0xVVElPTj02OTJ4MTA4MCxGUkFNRS1SQVRFPTI5Ljk3MApkYXRhOmFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsO2Jhc2U2NCxJMFZZVkUwelZRb2pSVmhVTFZndFZrVlNVMGxQVGpvekNpTkZXRlF0V0MxVVFWSkhSVlJFVlZKQlZFbFBUam8zQ2lORldGUXRXQzFOUlVSSlFTMVRSVkZWUlU1RFJUb3hDaU5GV0ZRdFdDMVFURUZaVEVsVFZDMVVXVkJGT2xaUFJBb2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd05rVktRVUZSTmpaVExXRXdOelJpTVdRNU16UXZabWxzWlY5SVh6STJORjh4T1RJd2VERXdPREJmTmpVd01FdENVRk5mTjFGV1FsSmZNREF3TURFdWRITUtJMFZZVkVsT1JqbzJMakF3Tml3S2FIUjBjSE02THk5bWFXeGxjeTV6YkdGamF5NWpiMjB2Wm1sc1pYTXRkRzFpTDFRMVZFTkJSbFJCT1MxR01EWkZTa0ZCVVRZMlV5MWhNRGMwWWpGa09UTTBMMlpwYkdWZlNGOHlOalJmTVRreU1IZ3hNRGd3WHpZMU1EQkxRbEJUWHpkUlZrSlNYekF3TURBeUxuUnpDaU5GV0ZSSlRrWTZOaTR3TURZc0NtaDBkSEJ6T2k4dlptbHNaWE11YzJ4aFkyc3VZMjl0TDJacGJHVnpMWFJ0WWk5VU5WUkRRVVpVUVRrdFJqQTJSVXBCUVZFMk5sTXRZVEEzTkdJeFpEa3pOQzltYVd4bFgwaGZNalkwWHpFNU1qQjRNVEE0TUY4Mk5UQXdTMEpRVTE4M1VWWkNVbDh3TURBd015NTBjd29qUlZoVVNVNUdPall1TURBMkxBcG9kSFJ3Y3pvdkwyWnBiR1Z6TG5Oc1lXTnJMbU52YlM5bWFXeGxjeTEwYldJdlZEVlVRMEZHVkVFNUxVWXdOa1ZLUVVGUk5qWlRMV0V3TnpSaU1XUTVNelF2Wm1sc1pWOUlYekkyTkY4eE9USXdlREV3T0RCZk5qVXdNRXRDVUZOZk4xRldRbEpmTURBd01EUXVkSE1LSTBWWVZFbE9Sam8yTGpBd05pd0thSFIwY0hNNkx5OW1hV3hsY3k1emJHRmpheTVqYjIwdlptbHNaWE10ZEcxaUwxUTFWRU5CUmxSQk9TMUdNRFpGU2tGQlVUWTJVeTFoTURjMFlqRmtPVE0wTDJacGJHVmZTRjh5TmpSZk1Ua3lNSGd4TURnd1h6WTFNREJMUWxCVFh6ZFJWa0pTWHpBd01EQTFMblJ6Q2lORldGUkpUa1k2Tmk0d01EWXNDbWgwZEhCek9pOHZabWxzWlhNdWMyeGhZMnN1WTI5dEwyWnBiR1Z6TFhSdFlpOVVOVlJEUVVaVVFUa3RSakEyUlVwQlFWRTJObE10WVRBM05HSXhaRGt6TkM5bWFXeGxYMGhmTWpZMFh6RTVNakI0TVRBNE1GODJOVEF3UzBKUVUxODNVVlpDVWw4d01EQXdOaTUwY3dvalJWaFVTVTVHT2pZdU1EQTJMQXBvZEhSd2N6b3ZMMlpwYkdWekxuTnNZV05yTG1OdmJTOW1hV3hsY3kxMGJXSXZWRFZVUTBGR1ZFRTVMVVl3TmtWS1FVRlJOalpUTFdFd056UmlNV1E1TXpRdlptbHNaVjlJWHpJMk5GOHhPVEl3ZURFd09EQmZOalV3TUV0Q1VGTmZOMUZXUWxKZk1EQXdNRGN1ZEhNS0kwVllWRWxPUmpvMkxqQXdOaXdLYUhSMGNITTZMeTltYVd4bGN5NXpiR0ZqYXk1amIyMHZabWxzWlhNdGRHMWlMMVExVkVOQlJsUkJPUzFHTURaRlNrRkJVVFkyVXkxaE1EYzBZakZrT1RNMEwyWnBiR1ZmU0Y4eU5qUmZNVGt5TUhneE1EZ3dYelkxTURCTFFsQlRYemRSVmtKU1h6QXdNREE0TG5SekNpTkZXRlJKVGtZNk1pNHpNellzQ21oMGRIQnpPaTh2Wm1sc1pYTXVjMnhoWTJzdVkyOXRMMlpwYkdWekxYUnRZaTlVTlZSRFFVWlVRVGt0UmpBMlJVcEJRVkUyTmxNdFlUQTNOR0l4WkRrek5DOW1hV3hsWDBoZk1qWTBYekU1TWpCNE1UQTRNRjgyTlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3T1M1MGN3b2pSVmhVTFZndFJVNUVURWxUVkFvPQojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9MzE5MjgwLEFWRVJBR0UtQkFORFdJRFRIPTI2MTU5MSxDT0RFQ1M9ImF2YzEuNjQwMDFlLG1wNGEuNDAuNSIsUkVTT0xVVElPTj00NjB4NzIwLEZSQU1FLVJBVEU9MjkuOTcwCmh0dHBzOi8vZmlsZXMuc2xhY2suY29tL2ZpbGVzLXRtYi9UNVRDQUZUQTktRjA2RUpBQVE2NlMtYTA3NGIxZDkzNC9maWxlX0hfMjY0XzEyODB4NzIwXzM1MDBLQlBTXzdRVkJSLm0zdTgK",
                "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F06EJAAQ66S-a074b1d934/file_trans.mp4",
                "duration_ms": 50383,
                "media_display_type": "video",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F06EJAAQ66S-a074b1d934/sprite-game_thumb_video.jpeg",
                "thumb_video_w": 720,
                "thumb_video_h": 1126,
                "permalink": "https://futureofcoding.slack.com/files/UCUSW7WVD/F06EJAAQ66S/sprite-game.webm",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06EJAAQ66S-43024585e1",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "ts": "1705684506.713779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YGyTt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Integrating a little game with a sprite editor and a maze editor, all on a touch-screen.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://akkartik.itch.io/carousel/devlog/668072/a-little-game-integrated-with-its-tools"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "65b04b98-4dd5-4fe8-9450-27962c84bd6d",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U85HCL7JP",
                    "U0123H7JRDM"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "86477f01-e1ad-4880-acba-5f092a6bbd51",
        "type": "message",
        "text": "When working on my language I've been frustrated by the lack of symbols and extra information for my JIT compiled code. There is a way to get this kind of information, but it involves building an elf binary in memory. Way too much overhead for this point in my development.\n\nSo I started building my own debugger frontend to lldb. Not much to show right now. But the idea is to specifically tailor it to my language. So you'll get a compiler explorer like experience, but also be able to view the stack and heap and all of that live. See the language level values stored in there.\n\nThe fun part to for me was how to convey the information I need to the debugger. The answer came from the standard JIT interface. How do you tell your debugger things? You make a function that the debugger has a breakpoint in. The function does nothing in the body. You just pass some args that tells the debugger where in memory to get the information it needs. Super clever. So now I'm working on passing all my compiler metadata to the debugger frontend so it can know how to render things intelligently.",
        "user": "UK3LH8CF5",
        "ts": "1705689867.572269",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YfAVd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When working on my language I've been frustrated by the lack of symbols and extra information for my JIT compiled code. There is a way to get this kind of information, but it involves building an elf binary in memory. Way too much overhead for this point in my development.\n\nSo I started building my own debugger frontend to lldb. Not much to show right now. But the idea is to specifically tailor it to my language. So you'll get a compiler explorer like experience, but also be able to view the stack and heap and all of that live. See the language level values stored in there.\n\nThe fun part to for me was how to convey the information I need to the debugger. The answer came from the standard JIT interface. How do you tell your debugger things? You make a function that the debugger has a breakpoint in. The function does nothing in the body. You just pass some args that tells the debugger where in memory to get the information it needs. Super clever. So now I'm working on passing all my compiler metadata to the debugger frontend so it can know how to render things intelligently."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02U0AS3J49",
                    "U0123H7JRDM"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]