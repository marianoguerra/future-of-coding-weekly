[
    {
        "client_msg_id": "9d822a40-6413-43e5-848a-bc19916cd756",
        "type": "message",
        "text": "I really like TodePond's video \"Screens in Screens in Screens\". I've been wanting to do the same kinda thing with mathematical formulas instead of shapes, a kind of \"formulas in formulas in formulas\", but I'm an awful programmer so I'll describe some math you can do to that effect. Apologies in advance for the shoddy explanation though.\n\nHere's a thing you can do with \"screens\". You can name screens. Start with some screens A B C. Then if C is inside A, and A and B are the same color, then there is a copy of C inside B. What do you call this copy? \"The copy of B from A to C\"? It will be convenient if we give it a symbolic name. Call it (A->B)C. Or if you are really hardcore you can call it just t(A,B,C) where t is a ternary operator describing the result of copying C from A to B. You may think to only consider (A->B)C when C is inside A, but the math becomes tractable if you consider all screens at once. Then we can stipulate some axioms:\n1. (A->A)B = B\n2. (A->B)A=B\n3. (B->C)(A->B)=(A->C)\n3. (A->(X->Y)A)=(X->Y)\nThe first axiom means if you are copying a screen from one screen to itself, you aren't changing anything. The second axiom is \"obvious\" except for considering (A->B)A in the first place. The third axiom means if you copy a screen from A to B and then from B to C that is the same as if you were to copy it from A to C directly. It is also shorthand for (B->C)((A->B)D) = (A->C)D for all screens D. The fourth axiom takes a bit more explaining. Basically we want this equation to be true whenever A is in X, and both sides are being used to copy something from A. But our theory at this point doesn't have a predicate for \"A is contained in X\" so we say it holds in all cases.\n\nWith these axioms you can show the operators (A->B) form an algebraic structure called a group: You can multiply them by performing one copy after the other (C->D)(A->B). This operation is associative (I mean, it must be), and has an identity element and inverses. The identity being (A->A) and the inverse of (A->B) being (B->A).\n\nAnother perspective is to view screens as points in an affine space (i.e. vector space without a specified origin). Then (A->B)C can be thought of as (B-A)+C, and each of the axioms above can be interpreted as vector equations. This isn't a good model though because it ends up saying some screens are the same when they should be different. You can still take the above axioms and show that screens form a generalization of affine spaces called torsors.\n\nI'll share more if anybody is interested. It really needs a much longer write up, but I thought somebody might know if its already been done before.",
        "user": "UFPRPSA4S",
        "ts": "1704349378.649339",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X8Scb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like TodePond's video \"Screens in Screens in Screens\". I've been wanting to do the same kinda thing with mathematical formulas instead of shapes, a kind of \"formulas in formulas in formulas\", but I'm an awful programmer so I'll describe some math you can do to that effect. Apologies in advance for the shoddy explanation though.\n\nHere's a thing you can do with \"screens\". You can name screens. Start with some screens A B C. Then if C is inside A, and A and B are the same color, then there is a copy of C inside B. What do you call this copy? \"The copy of B from A to C\"? It will be convenient if we give it a symbolic name. Call it (A->B)C. Or if you are really hardcore you can call it just t(A,B,C) where t is a ternary operator describing the result of copying C from A to B. You may think to only consider (A->B)C when C is inside A, but the math becomes tractable if you consider all screens at once. Then we can stipulate some axioms:\n1. (A->A)B = B\n2. (A->B)A=B\n3. (B->C)(A->B)=(A->C)\n3. (A->(X->Y)A)=(X->Y)\nThe first axiom means if you are copying a screen from one screen to itself, you aren't changing anything. The second axiom is \"obvious\" except for considering (A->B)A in the first place. The third axiom means if you copy a screen from A to B and then from B to C that is the same as if you were to copy it from A to C directly. It is also shorthand for (B->C)((A->B)D) = (A->C)D for all screens D. The fourth axiom takes a bit more explaining. Basically we want this equation to be true whenever A is in X, and both sides are being used to copy something from A. But our theory at this point doesn't have a predicate for \"A is contained in X\" so we say it holds in all cases.\n\nWith these axioms you can show the operators (A->B) form an algebraic structure called a group: You can multiply them by performing one copy after the other (C->D)(A->B). This operation is associative (I mean, it must be), and has an identity element and inverses. The identity being (A->A) and the inverse of (A->B) being (B->A).\n\nAnother perspective is to view screens as points in an affine space (i.e. vector space without a specified origin). Then (A->B)C can be thought of as (B-A)+C, and each of the axioms above can be interpreted as vector equations. This isn't a good model though because it ends up saying some screens are the same when they should be different. You can still take the above axioms and show that screens form a generalization of affine spaces called torsors.\n\nI'll share more if anybody is interested. It really needs a much longer write up, but I thought somebody might know if its already been done before."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1704382991.000000"
        },
        "thread_ts": "1704349378.649339",
        "reply_count": 23,
        "reply_users_count": 3,
        "latest_reply": "1704589961.469679",
        "reply_users": [
            "U03R0B9U1GD",
            "UFPRPSA4S",
            "U05M5A8E0NT"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "star",
                "users": [
                    "U03R0B9U1GD",
                    "U05M5A8E0NT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "1cab9cff-6c19-4aa7-b55a-8e252bd8049d",
        "type": "message",
        "text": "hey interesting! I'm not sure I completely understand, but it's nice to see how different people might model this sort of thing. i know <@U05M5A8E0NT> has been working on a screens-like thing recently, and he modelled it completely differently from me. \n\nI'd love to write up a blog post explaining how I model it. it would be nice to see what people think of it",
        "user": "U03R0B9U1GD",
        "ts": "1704355077.598169",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1dx8x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey interesting! I'm not sure I completely understand, but it's nice to see how different people might model this sort of thing. i know "
                            },
                            {
                                "type": "user",
                                "user_id": "U05M5A8E0NT"
                            },
                            {
                                "type": "text",
                                "text": " has been working on a screens-like thing recently, and he modelled it completely differently from me. \n\nI'd love to write up a blog post explaining how I model it. it would be nice to see what people think of it"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ca0b4b48-1c53-4cca-bfe8-56ba661b62ae",
        "type": "message",
        "text": "If you do write up that post that would be awesome!",
        "user": "UFPRPSA4S",
        "ts": "1704385213.395399",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WgoKb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you do write up that post that would be awesome!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "type": "message",
        "text": "Cool! I really like screens too. I also like this mathematical modeling of screens! I like the idea to model screens as a group. I have been trying out some models related to the following model: screens as a category: the objects are screens and the arrows mean \"contains\".",
        "files": [
            {
                "id": "F06C275PT7Z",
                "created": 1704389063,
                "timestamp": 1704389063,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U05M5A8E0NT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 18055,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06C275PT7Z/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06C275PT7Z/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C275PT7Z-c528b301b0/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C275PT7Z-c528b301b0/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C275PT7Z-c528b301b0/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 321,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C275PT7Z-c528b301b0/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 427,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C275PT7Z-c528b301b0/image_160.png",
                "original_w": 620,
                "original_h": 552,
                "thumb_tiny": "AwAqADDSJABJOAOpqE3KgbtjlP72OKdOhkhZV6npnvTZNksa70HJ6OOlAEqOrjKkEZxkUtNiI2YAAA446U6gAooooAKCAcZ7UUUAMePPKsVbOcj/AAoSTJ2Pw/p2PuKfTJk3JwMsOVwcEGgB9FQRPIi4mUl2JOF5wKmVg4yM+hyKAsLRRRQAUUUUARyxl2UjHAPUkfypYk8tMZzzmn0UDvpY/9k=",
                "permalink": "https://futureofcoding.slack.com/files/U05M5A8E0NT/F06C275PT7Z/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06C275PT7Z-764e8dfcb8",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F06CK729SJY",
                "created": 1704389103,
                "timestamp": 1704389103,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U05M5A8E0NT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 44937,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06CK729SJY/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06CK729SJY/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 180,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 240,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 361,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 401,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 481,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CK729SJY-50d70650b8/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 513,
                "original_w": 1306,
                "original_h": 654,
                "thumb_tiny": "AwAYADCiBmjFOTqfpTTQIKKD1o7UxiUUUUALRSUUCFopKKBhS0lFAH//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U05M5A8E0NT/F06CK729SJY/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06CK729SJY-33aad83fcb",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U05M5A8E0NT",
        "ts": "1704389118.658819",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uoivV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool! I really like screens too. I also like this mathematical modeling of screens! I like the idea to model screens as a group. I have been trying out some models related to the following model: screens as a category: the objects are screens and the arrows mean \"contains\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704389140.000000"
        },
        "client_msg_id": "abbca5e2-4733-45d8-af52-ac00f8213b47",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "bcc2133d-e102-4622-9817-03c278f54edb",
        "type": "message",
        "text": "I originally thought about this model when I was using it to solve some puzzles in \"Patrick's Parabox\" which also involves some recursive box stuff :slightly_smiling_face:",
        "user": "U05M5A8E0NT",
        "ts": "1704389195.880639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q8/G3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I originally thought about this model when I was using it to solve some puzzles in \"Patrick's Parabox\" which also involves some recursive box stuff "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704390176.000000"
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "16066359-deb8-4b48-94bb-a3fb292cf589",
        "type": "message",
        "text": "<https://marianoguerra.org/msite/human-server-protocol/|Don't strip the meaning away from your runtime>: Exploring extending programming languages to include descriptions in the domain of the problem and solution\n\nSpoiler alert: interactive example inside :slightly_smiling_face:\n\nFirst draft, feedback welcome!",
        "user": "UBN9AFS0N",
        "ts": "1704389263.636049",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eS+ws",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://marianoguerra.org/msite/human-server-protocol/",
                                "text": "Don't strip the meaning away from your runtime"
                            },
                            {
                                "type": "text",
                                "text": ": Exploring extending programming languages to include descriptions in the domain of the problem and solution\n\nSpoiler alert: interactive example inside "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFirst draft, feedback welcome!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://marianoguerra.org/msite/human-server-protocol/img/site-image.jpg",
                "image_width": 1502,
                "image_height": 797,
                "image_bytes": 79551,
                "from_url": "https://marianoguerra.org/msite/human-server-protocol/",
                "service_icon": "https://marianoguerra.org/favicon.ico",
                "id": 1,
                "original_url": "https://marianoguerra.org/msite/human-server-protocol/",
                "fallback": "Don't strip the meaning away from your runtime",
                "text": "Exploring extending programming languages to include descriptions in the domain of the problem and solution",
                "title": "Don't strip the meaning away from your runtime",
                "title_link": "https://marianoguerra.org/msite/human-server-protocol/",
                "service_name": "marianoguerra.org"
            }
        ],
        "thread_ts": "1704389263.636049",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1704442442.099289",
        "reply_users": [
            "U03LJBR6THT",
            "UMV4B97GT",
            "UJBAJNFLK"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1704442442.099289",
        "reactions": [
            {
                "name": "the_horns",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "U05UK5T7LPP",
                    "UD3AK9JRF",
                    "U02U0AS3J49",
                    "UMV4B97GT",
                    "UJBAJNFLK"
                ],
                "count": 7
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "84c7ed15-1efa-4598-99fc-a21729359532",
        "type": "message",
        "text": "You can turn this category into a groupoid by adding in an inverse arrow for every \"contains\" arrow. The inverse arrows mean \"contained by\".",
        "user": "U05M5A8E0NT",
        "ts": "1704389410.919749",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "38EwN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can turn this category into a groupoid by adding in an inverse arrow for every \"contains\" arrow. The inverse arrows mean \"contained by\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704389464.000000"
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "608ff743-a9c1-4ea9-8a1b-97f9c3657bff",
        "type": "message",
        "text": "damn, this is really cool!",
        "user": "U03LJBR6THT",
        "ts": "1704389517.694569",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uz+4G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "damn, this is really cool!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704389263.636049",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "b48c5406-b748-4eb8-b39a-29ee344c3849",
        "type": "message",
        "text": "The spatial relationships between screens is a functor from this category (or groupoid) to spatial transformations like Affine Transformations (Although <@U03R0B9U1GD> told me that screens actually uses a different type of spatial transformation).\n\nThe functor is really just saying \"write down a specific transformation next to each arrow\"",
        "user": "U05M5A8E0NT",
        "ts": "1704389743.164229",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DAKme",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The spatial relationships between screens is a functor from this category (or groupoid) to spatial transformations like Affine Transformations (Although "
                            },
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " told me that screens actually uses a different type of spatial transformation).\n\nThe functor is really just saying \"write down a specific transformation next to each arrow\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704390191.000000"
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F06C29Y3GT1",
                "created": 1704390019,
                "timestamp": 1704390019,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U05M5A8E0NT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 75930,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06C29Y3GT1/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06C29Y3GT1/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 177,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 237,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 355,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 394,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 473,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06C29Y3GT1-09dfd0afcb/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 505,
                "original_w": 1408,
                "original_h": 694,
                "thumb_tiny": "AwAXADC/J8qltzcdgaapfzNrAgY6hqlIBGDyKbsH8JxjpQAu3/ab86AMdyfrTd7A7SBn64Bp2X/uj86AFopMt/dH50Zb+6PzoAWiiigBrorgbhnByOe9JFvwd/4U+gdKACiiigD/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U05M5A8E0NT/F06C29Y3GT1/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06C29Y3GT1-22111b9df3",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U05M5A8E0NT",
        "display_as_bot": false,
        "ts": "1704390022.195949",
        "client_msg_id": "96aac4b6-f481-44b3-a891-c54d2628d8ee",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "3559f45b-1aff-404a-976a-338ca1ee4863",
        "type": "message",
        "text": "IRT your axioms: I have trouble understanding 2 and 4. I can't figure out how to interpret (A -> B)A. I guess it would be \"The copy of A from A to B\" based on your paragraph above the axioms, but I'm not sure what that means.",
        "user": "U05M5A8E0NT",
        "ts": "1704390798.776629",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eItKC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IRT your axioms: I have trouble understanding 2 and 4. I can't figure out how to interpret (A -> B)A. I guess it would be \"The copy of A from A to B\" based on your paragraph above the axioms, but I'm not sure what that means."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704390830.000000"
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "c2c3bf69-1800-4afd-ad0b-7357bb10ab43",
        "type": "message",
        "text": "I think axiom 2 is hard to picture because in the expression (A-&gt;B)C you normally think of C as lying inside A. But in the case of (A-&gt;B)A, where C is A, C is no longer strictly inside A, since it coincides with A.    Maybe a better way to think of it is to let C vary in size and shape inside A, and let it \"tend to A\", making the size shape and position approach that of A. Then in the limit as C approaches A in size shape and position, the copy (A-&gt;B)C approaches B in size shape and position. Then if copying is a continuous function we are justified in inferring (A-&gt;B)A=B. Sorry for the math-speak.",
        "user": "UFPRPSA4S",
        "ts": "1704413844.540969",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SZBJl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think axiom 2 is hard to picture because in the expression (A->B)C you normally think of C as lying inside A. But in the case of (A->B)A, where C is A, C is no longer strictly inside A, since it coincides with A.    Maybe a better way to think of it is to let C vary in size and shape inside A, and let it \"tend to A\", making the size shape and position approach that of A. Then in the limit as C approaches A in size shape and position, the copy (A->B)C approaches B in size shape and position. Then if copying is a continuous function we are justified in inferring (A->B)A=B. Sorry for the math-speak."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "type": "message",
        "text": "Some diagrams will probably help. This is what (A-&gt;B)C looks like in the normal case when C is inside A:",
        "files": [
            {
                "id": "F06D7DYL9HN",
                "created": 1704413986,
                "timestamp": 1704413986,
                "name": "autodraw 1_4_2024.png",
                "title": "autodraw 1_4_2024.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 66600,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06D7DYL9HN/autodraw_1_4_2024.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06D7DYL9HN/download/autodraw_1_4_2024.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 257,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 342,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 513,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 570,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 685,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D7DYL9HN-f4e1ef555c/autodraw_1_4_2024_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 730,
                "original_w": 1638,
                "original_h": 1168,
                "thumb_tiny": "AwAiADDTopijIJJPU96CACMHv60APoprkFSPpS7F/uj8qAFoqMhOCuM5HSpKAGKwAwc9T2qPIBAOOf8AGp6CM0ARlV2llHX0pxYY7/kaUAKuAOB2FRmVgmfLagBM8gY5AHY+tTAgjIOajQhgV/XPWnqoUYFAC0UUUAFFFFABRRRQB//Z",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F06D7DYL9HN/autodraw_1_4_2024.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06D7DYL9HN-75cb0d2553",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "ts": "1704413999.032539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RsIge",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some diagrams will probably help. This is what (A->B)C looks like in the normal case when C is inside A:"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "65e1a7eb-b93a-488d-ab31-039f2a4ffccc",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "type": "message",
        "text": "Then when C=A, this is the mental image I have for axiom 2:",
        "files": [
            {
                "id": "F06CFP3EFAR",
                "created": 1704414451,
                "timestamp": 1704414451,
                "name": "autodraw 1_4_2024 (1).png",
                "title": "autodraw 1_4_2024 (1).png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 72868,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06CFP3EFAR/autodraw_1_4_2024__1_.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06CFP3EFAR/download/autodraw_1_4_2024__1_.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 257,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 342,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 513,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 570,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 685,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CFP3EFAR-32cc815435/autodraw_1_4_2024__1__1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 730,
                "original_w": 1638,
                "original_h": 1168,
                "thumb_tiny": "AwAiADDTopgUNkkt1Pc0jKFKYz19aAJKKZKRsI70vlp/dH5UAOophVQQQMHNPoAYjcEEHOT296SRlIAz3HFSUhUHrQAx0XYWUZJHanbx6N/3yaUAAYAwPakKZHU0wGs+RwG6j+E1ICCMg5pvlgjBP5cUqqFGBSAWiiigAooooAKKKKAP/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F06CFP3EFAR/autodraw_1_4_2024__1_.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06CFP3EFAR-1200209fd7",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "ts": "1704414488.950119",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PBHDy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then when C=A, this is the mental image I have for axiom 2:"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "cd469f99-054a-49ec-81cc-4a5bb87e3e6b",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c2335bec-dcb3-448b-8c5d-f9fdfd66fff3",
        "type": "message",
        "text": "Ah I see! It is maybe quite different than how I've been thinking about things! Can you share how you came up with these axioms? It's starting to make sense but I'm wondering what your intuition was when you were making them.",
        "user": "U05M5A8E0NT",
        "ts": "1704414661.414389",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kh/o1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah I see! It is maybe quite different than how I've been thinking about things! Can you share how you came up with these axioms? It's starting to make sense but I'm wondering what your intuition was when you were making them."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U05M5A8E0NT",
            "ts": "1704414679.000000"
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFPRPSA4S"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "we have done something similar in SplootCode (we refer to them as runtime annotations :slightly_smiling_face:\n\n<https://app.splootcode.io/shared/mattia/for-loops-example/EPdLhGOx7p1SbPDIDisgbfpV>",
        "files": [
            {
                "id": "F06CY10CN0Z",
                "created": 1704431131,
                "timestamp": 1704431131,
                "name": "Screenshot 2024-01-05 at 4.05.29\u202fpm.png",
                "title": "Screenshot 2024-01-05 at 4.05.29\u202fpm.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMV4B97GT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 69844,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06CY10CN0Z/screenshot_2024-01-05_at_4.05.29___pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06CY10CN0Z/download/screenshot_2024-01-05_at_4.05.29___pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 95,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 127,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 191,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 212,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 254,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CY10CN0Z-27d6d9b6f0/screenshot_2024-01-05_at_4.05.29___pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 271,
                "original_w": 1208,
                "original_h": 320,
                "thumb_tiny": "AwAMADDO3H0pQfUYpoYgUbzQAE80n4UpJJzSUAOjYq4YcYp8khfGTnHtUQpaYH//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UMV4B97GT/F06CY10CN0Z/screenshot_2024-01-05_at_4.05.29___pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06CY10CN0Z-b70c8be389",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UMV4B97GT",
        "display_as_bot": false,
        "ts": "1704431173.816249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ipvfC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we have done something similar in SplootCode (we refer to them as runtime annotations "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://app.splootcode.io/shared/mattia/for-loops-example/EPdLhGOx7p1SbPDIDisgbfpV"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "cea2a43e-50d5-40b4-870d-3f40f3ff2cad",
        "thread_ts": "1704389263.636049",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "UBN9AFS0N",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "type": "message",
        "text": "Oh, that question is so open ended, I love it but I'm really stumped on how to answer it! There is a lot of context I haven't shared, but much of it would be only marginally useful. Maybe I can say this though. A key component of the system I am trying to build are one way live copies. These copies would not only reflect the contents of their source but also the 'behavior' at their source. For instance in the image below the arrows indicate that we are copying from X to Y, from A to C, and from C to B. Then from the point of view of X, we are effectively copying from A to B, so this should be reflected in their copies in Y. One way to ensure this is to also formally copy C from X to Y, even though C isn't inside X, and ensure we copy from (X->Y)A to (X->Y)C, and from (X->Y)C to (X->Y)B. This was my motivation for considering all copies (A->B)C even if C isn't in A.  This example also illustrates how my model really only answers how to name the different copies, and not how it is carried out in practice.\n\nI don't know if that is all useful to you, but I'm curious, in your implementation of screens is everything two way copies (plus transforms), or are there one way copies too? Is this the difference taking the category as is or making it into a groupoid first makes?",
        "files": [
            {
                "id": "F06CKDWK0LT",
                "created": 1704435403,
                "timestamp": 1704435403,
                "name": "Screenshot 2024-01-04 at 10.16.38 PM.png",
                "title": "Screenshot 2024-01-04 at 10.16.38 PM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 45106,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06CKDWK0LT/screenshot_2024-01-04_at_10.16.38_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06CKDWK0LT/download/screenshot_2024-01-04_at_10.16.38_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 185,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 247,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 371,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 412,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 495,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CKDWK0LT-6063c57467/screenshot_2024-01-04_at_10.16.38_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 527,
                "original_w": 1324,
                "original_h": 682,
                "thumb_tiny": "AwAYADDSJwM0BskjjI96ikAdWDfd7gnrRtCuzAjGOeaAJqDUZbGcEnOMEc0YJK5Jxn1oAkFFRgMAxzxmnr0oAQxhgQeh7Unlrt29umKfRQAwRBehO3GMUuwZznmnUUAN8se9ATDA5OPT3p1FAH//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F06CKDWK0LT/screenshot_2024-01-04_at_10.16.38_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06CKDWK0LT-e610251978",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "ts": "1704436238.745949",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1hA6D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, that question is so open ended, I love it but I'm really stumped on how to answer it! There is a lot of context I haven't shared, but much of it would be only marginally useful. Maybe I can say this though. A key component of the system I am trying to build are one way live copies. These copies would not only reflect the contents of their source but also the 'behavior' at their source. For instance in the image below the arrows indicate that we are copying from X to Y, from A to C, and from C to B. Then from the point of view of X, we are effectively copying from A to B, so this should be reflected in their copies in Y. One way to ensure this is to also formally copy C from X to Y, even though C isn't inside X, and ensure we copy from (X->Y)A to (X->Y)C, and from (X->Y)C to (X->Y)B. This was my motivation for considering all copies (A->B)C even if C isn't in A.  This example also illustrates how my model really only answers how to name the different copies, and not how it is carried out in practice.\n\nI don't know if that is all useful to you, but I'm curious, in your implementation of screens is everything two way copies (plus transforms), or are there one way copies too? Is this the difference taking the category as is or making it into a groupoid first makes?"
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1704437724.000000"
        },
        "client_msg_id": "a6612c0e-f042-46eb-a6e4-4ca29586757a",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "46f055e0-003e-480b-ae00-1f978331546f",
        "type": "message",
        "text": "also, how have I never heard of Patricks Parabox before?",
        "user": "UFPRPSA4S",
        "ts": "1704436312.827949",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T8WtF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also, how have I never heard of Patricks Parabox before?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "f8dc2e7d-6f24-40cc-940d-913d789464bb",
        "type": "message",
        "text": "That's indeed a very nice feature to have. I know, because I use it regularly.\n\n&gt; I think we should expand the definition of code in a language to include some of the tools and conventions that currently surround it.\nThat's pretty much the philosophy of Smalltalk-80 and its descendants, the quote by Dan Ingalls you cite is an illustration.\n\nSo, not suprisingly, the Smalltalk community has come up with a very similar mechanism: beacons (<https://github.com/pharo-project/pharo-beacon>). This is a logging framework designed to make sure that emitting log entries is very cheap if there is no listener. You can leave the emitting code in production software.\n\nBeacons are even more powerful because they can be combined with all the other interactive and reflective features of Smalltalk. My favorite example is logging the call stack. You can collect the call stack for each iteration of a loop, and then run the debugger on, say, the 5th iteration.",
        "user": "UJBAJNFLK",
        "ts": "1704442442.099289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8PuUj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's indeed a very nice feature to have. I know, because I use it regularly.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we should expand the definition of code in a language to include some of the tools and conventions that currently surround it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's pretty much the philosophy of Smalltalk-80 and its descendants, the quote by Dan Ingalls you cite is an illustration.\n\nSo, not suprisingly, the Smalltalk community has come up with a very similar mechanism: beacons ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/pharo-project/pharo-beacon"
                            },
                            {
                                "type": "text",
                                "text": "). This is a logging framework designed to make sure that emitting log entries is very cheap if there is no listener. You can leave the emitting code in production software.\n\nBeacons are even more powerful because they can be combined with all the other interactive and reflective features of Smalltalk. My favorite example is logging the call stack. You can collect the call stack for each iteration of a loop, and then run the debugger on, say, the 5th iteration."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704389263.636049",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "text": "Okay, I've been thinking how my more abstract ideas can be applied to model screens, like the actual kind that make for cool looking programs and videos. I've described how screens can be modeled using four axioms. Pictures seem useful so I'll give a picture for axiom 4 first.",
        "files": [
            {
                "id": "F06CNLMLEJZ",
                "created": 1704576135,
                "timestamp": 1704576135,
                "name": "Screenshot 2024-01-06 at 1.22.09 PM.png",
                "title": "Screenshot 2024-01-06 at 1.22.09 PM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 96897,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06CNLMLEJZ/screenshot_2024-01-06_at_1.22.09_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06CNLMLEJZ/download/screenshot_2024-01-06_at_1.22.09_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 255,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 340,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 510,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 566,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 679,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CNLMLEJZ-6fead4acc2/screenshot_2024-01-06_at_1.22.09_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 725,
                "original_w": 1512,
                "original_h": 1070,
                "thumb_tiny": "AwAhADDTppOG7/lxTWPznJPTsaUKCMhjj60ADNtBJLAZ9KUHAydx+opAPmKnJGO9MI+Yjc3X1oAkDgnjJ96dUUacHOQM8U4DDjk0AH8ZPHbrTsn2/OlIB6gUm0egoAaM+YcjtQAckjHWnbR24+lG0egoAPm9qYCS4OOPWlcLgDAGe9KAnQbaAHUUUUAFFFFADX6UfxCh+lH8QoA//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F06CNLMLEJZ/screenshot_2024-01-06_at_1.22.09_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06CNLMLEJZ-80199d76b9",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "ts": "1704576235.796659",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6uS5v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Okay, I've been thinking how my more abstract ideas can be applied to model screens, like the actual kind that make for cool looking programs and videos. I've described how screens can be modeled using four axioms. Pictures seem useful so I'll give a picture for axiom 4 first."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "a5e5828f-642d-40dd-936f-cca35d95e132",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "e9feda5d-6eda-42dc-9067-6058647f3d4a",
        "type": "message",
        "text": "Explanation: Axiom 4 given above said that (A-&gt;(X-&gt;Y)A) = (X-&gt;Y). This was shorthand for (A-&gt;(X-&gt;Y)A)M=(X-&gt;Y)M for all screens M. You can also make this look a little nicer by giving the name B to (X-&gt;Y)A. Then axiom 4 just states (A-&gt;B)M=(X-&gt;Y)M. The case where M is in A and A is in X is depicted in the image. Then the axiom says you only get one little square inside B by copying M. Whether you are copying from A to B or from X to Y, it doesn't make a difference.",
        "user": "UFPRPSA4S",
        "ts": "1704576633.212429",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MINzI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Explanation: Axiom 4 given above said that (A->(X->Y)A) = (X->Y). This was shorthand for (A->(X->Y)A)M=(X->Y)M for all screens M. You can also make this look a little nicer by giving the name B to (X->Y)A. Then axiom 4 just states (A->B)M=(X->Y)M. The case where M is in A and A is in X is depicted in the image. Then the axiom says you only get one little square inside B by copying M. Whether you are copying from A to B or from X to Y, it doesn't make a difference."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "eaaa6720-6502-4b6c-bf58-9f4bfec95b67",
        "type": "message",
        "text": "Hopefully that clears up axiom 4. Now if you take all these axioms you find that the this formal algebra comprises a structure called a torsor. If you stipulate there are no additional relations except those implied by the four axioms then you can probably term the structure a free torsor. The significance of this is that the actual visual objects and transformations between them (rectangles of different sizes and affine maps, and I would expect Lu's transformation group also) form torsors and you can map from free objects very easily by giving a handful of shapes. That's the birds eye view and takes a bit of unpacking.",
        "user": "UFPRPSA4S",
        "ts": "1704577800.995279",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dewND",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hopefully that clears up axiom 4. Now if you take all these axioms you find that the this formal algebra comprises a structure called a torsor. If you stipulate there are no additional relations except those implied by the four axioms then you can probably term the structure a free torsor. The significance of this is that the actual visual objects and transformations between them (rectangles of different sizes and affine maps, and I would expect Lu's transformation group also) form torsors and you can map from free objects very easily by giving a handful of shapes. That's the birds eye view and takes a bit of unpacking."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "type": "message",
        "text": "The idea of torsors is essential so I'll start with that. Rectangles in the plane almost form a torsor. For any two rectangles you can map one to the other by an affine transformation (the composition of a translation and a linear map). This isn't quite unique though because you can always then flip the target rectangle across its major or minor axis, resulting in a distinct transformation.",
        "files": [
            {
                "id": "F06D49VG22D",
                "created": 1704580156,
                "timestamp": 1704580156,
                "name": "Screenshot 2024-01-06 at 2.29.12 PM.png",
                "title": "Screenshot 2024-01-06 at 2.29.12 PM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 67559,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06D49VG22D/screenshot_2024-01-06_at_2.29.12_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06D49VG22D/download/screenshot_2024-01-06_at_2.29.12_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 249,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 333,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 499,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 554,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 665,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06D49VG22D-5ee3a5141f/screenshot_2024-01-06_at_2.29.12_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 710,
                "original_w": 1492,
                "original_h": 1034,
                "thumb_tiny": "AwAhADDRbrnB4GeKQcnHzDin0UAAGABnNN3jODwc0b/mIxn6UzaxkyxwD2FAEvWim4xyv5U4HI4oAQkjGO9I27aegpW6g4pGOVIwfyoAUAAYFNb5zhTwOp/pSlAepJ9s0oAB4FACZ28N09aFHJPTNOooAKKKKACiiigAooooA//Z",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F06D49VG22D/screenshot_2024-01-06_at_2.29.12_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06D49VG22D-386dc351a1",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "ts": "1704580174.556329",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EFbW0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The idea of torsors is essential so I'll start with that. Rectangles in the plane almost form a torsor. For any two rectangles you can map one to the other by an affine transformation (the composition of a translation and a linear map). This isn't quite unique though because you can always then flip the target rectangle across its major or minor axis, resulting in a distinct transformation."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "3817ddcc-d24d-4989-970b-51af20b98af8",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "type": "message",
        "text": "However, if the rectangles are \"framed\", by specifying a corner and an orientation then there is a unique affine map from one to the other. The flip map F changes the orientation to in the example above T no longer maps to the same framed rectangle as S. A framed rectangle can be formally specified by a point (designating a corner) and an ordered pair of vectors (designating the two sides to the corner, and the order giving the orientation). Call the framed rectangles A and B. We can think of the transformation turning A into B as a difference B-A and think of applying this transformation to A as adding it to A, so formally B=(B-A)+A.",
        "files": [
            {
                "id": "F06CU5MJKLL",
                "created": 1704582325,
                "timestamp": 1704582325,
                "name": "Screenshot 2024-01-06 at 3.05.21 PM.png",
                "title": "Screenshot 2024-01-06 at 3.05.21 PM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 57653,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06CU5MJKLL/screenshot_2024-01-06_at_3.05.21_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06CU5MJKLL/download/screenshot_2024-01-06_at_3.05.21_pm.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 229,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 306,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 459,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 510,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 612,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F06CU5MJKLL-ab826abfb3/screenshot_2024-01-06_at_3.05.21_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 653,
                "original_w": 1434,
                "original_h": 914,
                "thumb_tiny": "AwAeADDTooooAKCcUUxjiThSTjmgBwJ6MMGlpOGX2oB5wetACEAtz6UMoAyBzSkc5BxSEE9/0oAPnPov60ICo5xTh065ooAaQQcr19KVQRnPWlooA//Z",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F06CU5MJKLL/screenshot_2024-01-06_at_3.05.21_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06CU5MJKLL-89bfdf690d",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "ts": "1704582353.834549",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T0uZy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, if the rectangles are \"framed\", by specifying a corner and an orientation then there is a unique affine map from one to the other. The flip map F changes the orientation to in the example above T no longer maps to the same framed rectangle as S. A framed rectangle can be formally specified by a point (designating a corner) and an ordered pair of vectors (designating the two sides to the corner, and the order giving the orientation). Call the framed rectangles A and B. We can think of the transformation turning A into B as a difference B-A and think of applying this transformation to A as adding it to A, so formally B=(B-A)+A."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "cb52a378-7942-46ef-8c29-e9f4434ebdfe",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "f10bcab6-e976-413a-905e-4c088df49c1d",
        "type": "message",
        "text": "Because the transformation from A to B was unique the difference B-A is well defined, and we can apply it to any other framed rectangle C to get a transformed rectangle (B-A)+C.  This is I think the main point of torsors: You can subtract any two elements of a torsor to get a transformation mapping one to the other. In general this transformation is an element of a group (abstract algebra) and that is called the structure group of the torsor. In the case of framed rectangles I think the structure group is all affine transformations. The other point of torsors is you can apply the transformation B-A to any other element C of the torsor to get a new element (B-A)+C. In the context of framed rectangles, if B is inside A then the transform B-A can be applied to B to get another rectangle (B-A)+B inside B, and you can apply B-A again to get another rectangle inside that.",
        "user": "UFPRPSA4S",
        "ts": "1704583617.944179",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r9Vw9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Because the transformation from A to B was unique the difference B-A is well defined, and we can apply it to any other framed rectangle C to get a transformed rectangle (B-A)+C.  This is I think the main point of torsors: You can subtract any two elements of a torsor to get a transformation mapping one to the other. In general this transformation is an element of a group (abstract algebra) and that is called the structure group of the torsor. In the case of framed rectangles I think the structure group is all affine transformations. The other point of torsors is you can apply the transformation B-A to any other element C of the torsor to get a new element (B-A)+C. In the context of framed rectangles, if B is inside A then the transform B-A can be applied to B to get another rectangle (B-A)+B inside B, and you can apply B-A again to get another rectangle inside that."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "2dbf1198-2fed-42a5-ab17-d6a931b8ba1c",
        "type": "message",
        "text": "I hope that explains torsors, at least enough to make my next point. I've mentioned that a system satisfying the four axioms I gave form a torsor. I don't know a simple rigorous proof of this. (I know how to show it forms a <https://ncatlab.org/nlab/show/heap|heap> which is a known equivalent of torsors). But we can also give some intuition for this. To distinguish this from the more visual system, let us call elements of a system to which the axioms apply 'places' rather than 'screens'.  Then for any places A B C you can form a new place (A-&gt;B)C. Then the set of places forms a torsor whose structure group consists of all transformations A-&gt;B. The expression A-&gt;B stands for an abstract operator mapping A to B, and this operator can be applied to any other place. You can also think of A-&gt;B as the difference B-A. So this abstract system at least has the main features of torsors. The structure group can also be verified to be a group, with A-&gt;A being the identity and B-&gt;A being the inverse of A-&gt;B.",
        "user": "UFPRPSA4S",
        "ts": "1704586189.082389",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7jXj6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope that explains torsors, at least enough to make my next point. I've mentioned that a system satisfying the four axioms I gave form a torsor. I don't know a simple rigorous proof of this. (I know how to show it forms a "
                            },
                            {
                                "type": "link",
                                "url": "https://ncatlab.org/nlab/show/heap",
                                "text": "heap"
                            },
                            {
                                "type": "text",
                                "text": " which is a known equivalent of torsors). But we can also give some intuition for this. To distinguish this from the more visual system, let us call elements of a system to which the axioms apply 'places' rather than 'screens'.  Then for any places A B C you can form a new place (A->B)C. Then the set of places forms a torsor whose structure group consists of all transformations A->B. The expression A->B stands for an abstract operator mapping A to B, and this operator can be applied to any other place. You can also think of A->B as the difference B-A. So this abstract system at least has the main features of torsors. The structure group can also be verified to be a group, with A->A being the identity and B->A being the inverse of A->B."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "9ed6cf81-f077-47fa-a98f-d3777f4200b3",
        "type": "message",
        "text": "Now suppose you start with some places A B C and consider the set of all places you can build up from those, so you have A, B, C, (A-&gt;B)C, (A-&gt;(A-&gt;B)C)A, (B-&gt;A)C, to name a few at random. If the only relations (equalities) between these are those implied by the axioms then I think the resulting algebraic object can be described as a free torsor on the set {A, B, C}. I imagine this notion could be made precise but I can't find it anywhere in the mathematical literature. The key property of a free torsor on a set X (in this case X={A,B,C}) should be that for any torsor T, any function from X to T extends to a homomorphism of torsors from the free torsor on X to T. In particular if T is the torsor of framed rectangles then by assigning framed rectangles to A, B, and C we automatically get framed rectangles for all places  A, B, C, (A-&gt;B)C, (A-&gt;(A-&gt;B)C)A, (B-&gt;A)C, etc. that you can think of. These represent all possible copies and transforms of rectangles or more general shapes, not only those that display because one box is in another.",
        "user": "UFPRPSA4S",
        "ts": "1704588287.617459",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cosLT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now suppose you start with some places A B C and consider the set of all places you can build up from those, so you have A, B, C, (A->B)C, (A->(A->B)C)A, (B->A)C, to name a few at random. If the only relations (equalities) between these are those implied by the axioms then I think the resulting algebraic object can be described as a free torsor on the set {A, B, C}. I imagine this notion could be made precise but I can't find it anywhere in the mathematical literature. The key property of a free torsor on a set X (in this case X={A,B,C}) should be that for any torsor T, any function from X to T extends to a homomorphism of torsors from the free torsor on X to T. In particular if T is the torsor of framed rectangles then by assigning framed rectangles to A, B, and C we automatically get framed rectangles for all places  A, B, C, (A->B)C, (A->(A->B)C)A, (B->A)C, etc. that you can think of. These represent all possible copies and transforms of rectangles or more general shapes, not only those that display because one box is in another."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "client_msg_id": "c311c7f1-1636-4c02-afb0-827ed8b75021",
        "type": "message",
        "text": "The last point I want to make is what I expect these free torsors look like. Briefly, I expect both the structure group and the torsor itself embed in the free group on X, with the structure group being the subgroup of the free group generated by all elements xy^{-1} with x and y in X, and the torsor itself consisting of all products tx with t in the structure group and x in X. And (A-&gt;B)C is represented as AB^{-1}C. If this is indeed isomorphic to the free torsor on X, then it gives us a much more convenient way of establishing algebraic identities of places without appealing directly to the axioms. For instance, try proving ((X-&gt;Y)A-&gt;B) = (A-&gt;B)(Y-&gt;X) from the axioms. You can do it, but it is much easier writing each side as words in A,B,X,Y, and their inverses, and simplifying.\n\nAnyway, <@U03R0B9U1GD> and <@U05M5A8E0NT>, this gets a bit closer to actual screens, so you might find it interesting.",
        "user": "UFPRPSA4S",
        "ts": "1704589961.469679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YJDbe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The last point I want to make is what I expect these free torsors look like. Briefly, I expect both the structure group and the torsor itself embed in the free group on X, with the structure group being the subgroup of the free group generated by all elements xy^{-1} with x and y in X, and the torsor itself consisting of all products tx with t in the structure group and x in X. And (A->B)C is represented as AB^{-1}C. If this is indeed isomorphic to the free torsor on X, then it gives us a much more convenient way of establishing algebraic identities of places without appealing directly to the axioms. For instance, try proving ((X->Y)A->B) = (A->B)(Y->X) from the axioms. You can do it, but it is much easier writing each side as words in A,B,X,Y, and their inverses, and simplifying.\n\nAnyway, "
                            },
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U05M5A8E0NT"
                            },
                            {
                                "type": "text",
                                "text": ", this gets a bit closer to actual screens, so you might find it interesting."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    }
]