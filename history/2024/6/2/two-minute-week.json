[
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1717350275.870779",
        "client_msg_id": "8985c46e-77f7-476f-bb13-32ad29a54ee3",
        "text": "In this video <https://youtu.be/VLf9slgin5Y>, I start with building a simple flow which counts the sum of all received values on the input ports using the new node-type \"merge sum\". New ports can be added dynamically from within the UI.\n\nThis is used to simplify the PID-controller example, which now much more reflects the algorithm that is shown on the wiki-page <https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller>.\n\nI've also started integrating the monaco-editor (which is the base for vs.code) into code-flow-canvas.. and in the video you can see that it is used for editing the code behind the iframe-html-node.\n\nAnother small change, is that flows now start automatically when they are loaded or after a refresh.",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/VLf9slgin5Y",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/VLf9slgin5Y/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/VLf9slgin5Y?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Adding ports dynamically, new sum node and integrating a basic Monaco editor\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/VLf9slgin5Y",
                "fallback": "YouTube Video: Adding ports dynamically, new sum node and integrating a basic Monaco editor",
                "title": "Adding ports dynamically, new sum node and integrating a basic Monaco editor",
                "title_link": "https://youtu.be/VLf9slgin5Y",
                "author_name": "Maikel van de Lisdonk",
                "author_link": "https://www.youtube.com/@maikelvandelisdonk7024",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xCeVB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In this video "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/VLf9slgin5Y"
                            },
                            {
                                "type": "text",
                                "text": ", I start with building a simple flow which counts the sum of all received values on the input ports using the new node-type \"merge sum\". New ports can be added dynamically from within the UI.\n\nThis is used to simplify the PID-controller example, which now much more reflects the algorithm that is shown on the wiki-page "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI've also started integrating the monaco-editor (which is the base for vs.code) into code-flow-canvas.. and in the video you can see that it is used for editing the code behind the iframe-html-node.\n\nAnother small change, is that flows now start automatically when they are loaded or after a refresh."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]