[
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1718511602.536409",
        "client_msg_id": "974dd71b-0e6f-4ebb-a7f6-a8d9e3375dbe",
        "text": "we keep telling computers how to work instead of what they should do",
        "team": "T5TCAFTA9",
        "thread_ts": "1718511602.536409",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1718540082.564119",
        "reply_users": [
            "U03CEGR3HSL",
            "UJBAJNFLK",
            "U05SU27S1M2"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pHhtf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we keep telling computers how to work instead of what they should do"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1718511940.032639",
        "client_msg_id": "03202738-945e-465c-85f9-1bed39850aa4",
        "text": "Prolog and Haskell users might disagree with you. Now if we could only figure out why neither one took over the world...",
        "team": "T5TCAFTA9",
        "thread_ts": "1718511602.536409",
        "parent_user_id": "UN57U8V53",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fkabg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Prolog and Haskell users might disagree with you. Now if we could only figure out why neither one took over the world..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1718527192.376279",
        "client_msg_id": "0feb2894-b966-4809-b4b1-35d3b57988cd",
        "text": "There are quite different expectations about telling computers \"what they should do\". One is \"let me give instructions in plain English, with the computer knowing the context as well as any person I might talk to\". The other extreme is \"let me write a formal specification, and have the computer derive a provably correct implementation from it\".\n\nProlog and Haskell are in this camp, but they haven't achieved the goal so far. Prolog accepts the formal specification but then solves it for a specific problem by trial and error, rather than deriving once and for all a suitable algorithm that works for many inputs. Haskell does nothing more than any other programming language. It cannot do anything with just a specification. But functional code looks more similar to specifications, so there is the illusion of progress.\n\nAs for the first version of the goal, it has been the holy grail of AI for a few decades. Recently we have discovered that stating a goal informally entails the risk of the computer filling in the blanks in ways that we don't like.",
        "team": "T5TCAFTA9",
        "thread_ts": "1718511602.536409",
        "parent_user_id": "UN57U8V53",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5oTeX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are quite different expectations about telling computers \"what they should do\". One is \"let me give instructions in plain English, with the computer knowing the context as well as any person I might talk to\". The other extreme is \"let me write a formal specification, and have the computer derive a provably correct implementation from it\".\n\nProlog and Haskell are in this camp, but they haven't achieved the goal so far. Prolog accepts the formal specification but then solves it for a specific problem by trial and error, rather than deriving once and for all a suitable algorithm that works for many inputs. Haskell does nothing more than any other programming language. It cannot do anything with just a specification. But functional code looks more similar to specifications, so there is the illusion of progress.\n\nAs for the first version of the goal, it has been the holy grail of AI for a few decades. Recently we have discovered that stating a goal informally entails the risk of the computer filling in the blanks in ways that we don't like."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1718540082.564119",
        "client_msg_id": "15377e32-b5cc-4cef-a9a2-76660a001c9d",
        "text": "I think using a computer should be more about asking 'what if' than telling it what or how",
        "team": "T5TCAFTA9",
        "thread_ts": "1718511602.536409",
        "parent_user_id": "UN57U8V53",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l3UOu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think using a computer should be more about asking 'what if' than telling it what or how"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]