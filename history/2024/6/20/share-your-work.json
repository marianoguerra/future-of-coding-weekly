[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1718874784.469279",
        "client_msg_id": "08f163e3-2b7c-4264-ab84-d2d0c660a246",
        "text": "<https://marianoguerra.org/posts/make-your-self/|Make Your Self: In Search for Maxwell's equations of OOP>\n\nMy attempt at growing the smallest object oriented language step by step, let me know what you think!",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "reply_count": 17,
        "reply_users_count": 6,
        "latest_reply": "1718950580.910629",
        "reply_users": [
            "U013ZLJARC7",
            "UBN9AFS0N",
            "UCUSW7WVD",
            "U03LJBR6THT",
            "U8A5MS6R1",
            "U5STGTB3J"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1718950580.910629",
        "attachments": [
            {
                "from_url": "https://marianoguerra.org/posts/make-your-self/",
                "ts": 1718825365,
                "id": 1,
                "original_url": "https://marianoguerra.org/posts/make-your-self/",
                "fallback": "Mariano Guerra's Log: Make Your Self",
                "text": "In Search for Maxwell's equations of Object Oriented Software",
                "title": "Make Your Self",
                "title_link": "https://marianoguerra.org/posts/make-your-self/",
                "service_name": "Mariano Guerra's Log"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LZjs+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://marianoguerra.org/posts/make-your-self/",
                                "text": "Make Your Self: In Search for Maxwell's equations of OOP"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMy attempt at growing the smallest object oriented language step by step, let me know what you think!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U03LJBR6THT",
                    "U075U25QC00",
                    "U0123H7JRDM",
                    "U8A5MS6R1",
                    "UML4ZEKDK"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1718880446.163229",
        "client_msg_id": "63F98255-8E0F-4438-A49F-C56185C770CC",
        "text": "From a different angle (that would likely displease Kay):\n<https://jackrusher.com/journal/on-object-orientation.html|https://jackrusher.com/journal/on-object-orientation.html>",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "image_url": "http://jackrusher.com/images/preview.png",
                "image_width": 758,
                "image_height": 606,
                "image_bytes": 81122,
                "from_url": "https://jackrusher.com/journal/on-object-orientation.html",
                "id": 1,
                "original_url": "https://jackrusher.com/journal/on-object-orientation.html",
                "fallback": "Jack Rusher: On Object Orientation",
                "text": "A different perspective on object orientation.",
                "title": "On Object Orientation",
                "title_link": "https://jackrusher.com/journal/on-object-orientation.html",
                "service_name": "Jack Rusher"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "byADw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From a different angle (that would likely displease Kay):\n"
                            },
                            {
                                "type": "link",
                                "url": "https://jackrusher.com/journal/on-object-orientation.html",
                                "text": "https://jackrusher.com/journal/on-object-orientation.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1718881893.115199",
        "client_msg_id": "0b2bc0ed-c20f-4bd3-a6cd-ead19ccae2af",
        "text": "my main problem with the current take on OO and the idea that OO is just a vtable is that the benefit of real world message passing is that the subject can react to the same message differently depending on context, that's why I put the vtable in the environment :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JXvbn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my main problem with the current take on OO and the idea that OO is just a vtable is that the benefit of real world message passing is that the subject can react to the same message differently depending on context, that's why I put the vtable in the environment "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1718882083.706179",
        "client_msg_id": "21cf1076-4325-41d5-a541-76c648fc7e2d",
        "text": "what does it mean to display? in the functional case there is a module with a function called display and we all call it? in current OO we can say, each object knows how to display itself. ok, fine, but display itself when and where? in a screen? big, small, for edition, read only, for printing, in the body of an email as a preview, when viewed by the owner? someone else? does the object have to know about all possible contexts? does the caller? how do we pass around all the contextual information?",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ObJ1o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what does it mean to display? in the functional case there is a module with a function called display and we all call it? in current OO we can say, each object knows how to display itself. ok, fine, but display itself when and where? in a screen? big, small, for edition, read only, for printing, in the body of an email as a preview, when viewed by the owner? someone else? does the object have to know about all possible contexts? does the caller? how do we pass around all the contextual information?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U075U25QC00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1718882087.075289",
        "client_msg_id": "74fe085f-47f8-487b-8bfd-885b6da2e602",
        "text": "I can keep ranting :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gzt96",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can keep ranting "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1718882815.654959",
        "client_msg_id": "86635032-543e-431c-9ad9-02aab4d9e37e",
        "text": "<https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering>",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c1kQE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1718882876.308299",
        "client_msg_id": "b06f14a5-7d86-4505-afa7-71f33c292b74",
        "text": "<https://x.com/jackrusher/status/1505475272937816067>",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https://x.com/jackrusher/status/1505475272937816067",
                "image_url": "https://pbs.twimg.com/media/FOSCtUfXIAQqbH1.png:large",
                "image_width": 551,
                "image_height": 793,
                "image_bytes": 121672,
                "service_icon": "http://abs.twimg.com/favicons/twitter.3.ico",
                "id": 1,
                "original_url": "https://x.com/jackrusher/status/1505475272937816067",
                "fallback": "X (formerly Twitter): Jack Rusher (@jackrusher) on X",
                "text": "Morning poster meditation. File under: advice too often taken to heart by programmers.\n\nFigure generated with #clojure code.",
                "title": "Jack Rusher (@jackrusher) on X",
                "title_link": "https://x.com/jackrusher/status/1505475272937816067",
                "service_name": "X (formerly Twitter)"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VO45r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://x.com/jackrusher/status/1505475272937816067"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1718882937.114889",
        "client_msg_id": "71976e19-bebb-4b9f-b1a4-791b3f36a41a",
        "text": "it's the last one, I promise!",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vloNu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's the last one, I promise!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "the other side be like: just one more d to cadddddddddr, I need it!",
        "files": [
            {
                "id": "F078ZEFKC1H",
                "created": 1718883234,
                "timestamp": 1718883234,
                "name": "Screenshot 2024-06-20 at 13.33.27.png",
                "title": "Screenshot 2024-06-20 at 13.33.27.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBN9AFS0N",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 173775,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F078ZEFKC1H/screenshot_2024-06-20_at_13.33.27.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F078ZEFKC1H/download/screenshot_2024-06-20_at_13.33.27.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 306,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 408,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 612,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 680,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 815,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F078ZEFKC1H-c0367167b8/screenshot_2024-06-20_at_13.33.27_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 870,
                "original_w": 1116,
                "original_h": 948,
                "thumb_tiny": "AwAoADDTpj53Dr+tPpj/AHhx/n86AF539/1pnOe/X3p38fSmEc9O/p/9egB3Oe/61JUeOen6f/XqSgAqOTG4Zx+lSUx87hjP60AHG/t+lMOM9R19RUnO/v8ArTDnPfr70ABxnt+YqWo+c9/1qSgApjglhxn8P/r0+igBmPn6fpTSpz93v6f/AF6looAjIOen6f8A16koooA//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UBN9AFS0N/F078ZEFKC1H/screenshot_2024-06-20_at_13.33.27.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F078ZEFKC1H-3027d539c4",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBN9AFS0N",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HAOO4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the other side be like: just one more d to cadddddddddr, I need it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1718883239.178699",
        "client_msg_id": "a9b5ebdb-2278-4a77-b10e-3c0cccc9e6f9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1718893320.666729",
        "client_msg_id": "a49e8392-fd3e-49cf-ae26-865b8514a156",
        "text": "What is a message reply definition?",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SGOlB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What is a message reply definition?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1718893477.011819",
        "client_msg_id": "786abbdf-e0eb-4366-a155-93d553106d0d",
        "text": "I don't follow upLimit and leftLimit. Is it a way to implement lexical vs dynamic scope? Because if it's a way to implement inheritance I don't understand why you'd ever want a limit..",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IMfg4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow upLimit and leftLimit. Is it a way to implement lexical vs dynamic scope? Because if it's a way to implement inheritance I don't understand why you'd ever want a limit.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1718898072.733629",
        "edited": {
            "user": "U03LJBR6THT",
            "ts": "1718898205.000000"
        },
        "client_msg_id": "411a62b6-0f81-4099-ab63-7bf0c9f49408",
        "text": "> in current OO we can say, each object knows how to display itself. ok, fine, but display itself when and where? in a screen? big, small, for edition, read only, for printing ...\nI feel like a relational system has a unique advantage here.\n\nTo me the basic problem is that objects can only have 1 classification (inheritance doesn't really help this).\n\nSo it might be useful to have a notion of a user, admin-user, student-user, ... I don't want to have a class called `admin-student-user` defined explicitly but.. that type of user might exist.\n\nInstead I'd like to just have data globally available, & classification functions/predicates, and operations check the predicates in a prolog-ish way.\n\n--\n\nI also think css selector system is another interesting way to tackle the problem of hyper specialized functionality for complex data.",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PWRx5",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in current OO we can say, each object knows how to display itself. ok, fine, but display itself when and where? in a screen? big, small, for edition, read only, for printing ..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI feel like a relational system has a unique advantage here.\n\nTo me the basic problem is that objects can only have 1 classification (inheritance doesn't really help this).\n\nSo it might be useful to have a notion of a user, admin-user, student-user, ... I don't want to have a class called "
                            },
                            {
                                "type": "text",
                                "text": "admin-student-user",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " defined explicitly but.. that type of user might exist.\n\nInstead I'd like to just have data globally available, & classification functions/predicates, and operations check the predicates in a prolog-ish way.\n\n--\n\nI also think css selector system is another interesting way to tackle the problem of hyper specialized functionality for complex data."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1718930780.170019",
        "client_msg_id": "9d8b5f03-57b6-4491-bb85-f08170cf828c",
        "text": "What's a good example of a domain where OOP is a burden?",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W6Lfm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's a good example of a domain where OOP is a burden?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1718931429.037519",
        "client_msg_id": "efc218bb-6b4b-4fd1-9ab3-0aca8c6fd217",
        "text": "Also OOP is so broad and vague now - we should talk about specific aspects that are associated with OOP. For instance:\n1. encapsulation - internal details of objects are hidden and they only allow inspection or modification via a limited set of messages. this is fairly common practice. distributed \"services\" are just these large objects. even in other programming methods, interfaces come into play.\n2. correspondence to domain objects (modeling)  - eg a `Window` instance maps to an actual window on the screen, a `User` maps to a user, etc. On one hand you get to map business concepts to code objects. OTOH, you must map business concepts to code objects.\n3. inheritance - an occasionally useful implementation pattern for code reuse, i guess. \n4. polymorphism - related to encapsulation, allows switching out one object for another because the coupling shape remains the same\n5. ...?",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jzHum",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also OOP is so broad and vague now - we should talk about specific aspects that are associated with OOP. For instance:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "encapsulation - internal details of objects are hidden and they only allow inspection or modification via a limited set of messages. this is fairly common practice. distributed \"services\" are just these large objects. even in other programming methods, interfaces come into play."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "correspondence to domain objects (modeling)  - eg a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Window",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " instance maps to an actual window on the screen, a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "User",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " maps to a user, etc. On one hand you get to map business concepts to code objects. OTOH, you must map business concepts to code objects."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "inheritance - an occasionally useful implementation pattern for code reuse, i guess. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "polymorphism - related to encapsulation, allows switching out one object for another because the coupling shape remains the same"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "...?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1718931857.398199",
        "client_msg_id": "f9c782bd-b991-4349-b793-9d86ced428ae",
        "text": "I see OOP as a trajectory with many unexplored paths. For instance:\n\u2022 must objects communicate via direct references or can they emit and react to messages in a containing pool (think biological cells, or tuplespaces)\n\u2022 should objects state changes be versioned? can they evolve deterministically by consuming messages? this is idea in the functional style. croquet implements this allowing distributed replicated state.\n\u2022 while state is organized in bundles, control flow is all over the place in oop models. can this be organized differently?",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Rr5I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see OOP as a trajectory with many unexplored paths. For instance:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "must objects communicate via direct references or can they emit and react to messages in a containing pool (think biological cells, or tuplespaces)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "should objects state changes be versioned? can they evolve deterministically by consuming messages? this is idea in the functional style. croquet implements this allowing distributed replicated state."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "while state is organized in bundles, control flow is all over the place in oop models. can this be organized differently?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1718932080.657809",
        "client_msg_id": "1a493f77-a162-4050-b5aa-2c1731d28799",
        "text": "the current oop langs have been backed into a corner also because they exist within the unix process model. for instance,  if i define a `class User` I'm really only defining a detail that is very local - within a single unix process. if you zoom out and look at the system with multiple processes and data stores, you see a bajillion `class User` definitions, each defining a partial, local model. to flip this around, if we have an OOP system top to bottom, can we define one system wise `User` while also being able to map these objects to local partial models for pragmatic reasons?",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sxEhL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the current oop langs have been backed into a corner also because they exist within the unix process model. for instance,  if i define a "
                            },
                            {
                                "type": "text",
                                "text": "class User",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I'm really only defining a detail that is very local - within a single unix process. if you zoom out and look at the system with multiple processes and data stores, you see a bajillion "
                            },
                            {
                                "type": "text",
                                "text": "class User",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " definitions, each defining a partial, local model. to flip this around, if we have an OOP system top to bottom, can we define one system wise "
                            },
                            {
                                "type": "text",
                                "text": "User",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " while also being able to map these objects to local partial models for pragmatic reasons?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1718932270.269319",
        "client_msg_id": "e06a2567-ff6b-437d-8668-7a2e601bfaa2",
        "text": "to emphasize that \"i see OO everywhere\", isn't running a unix program like instantiating a class? the process has hidden internal state, can only be interacted via stdin/out or other apis, you can run multiple instances of the same class (executable) concurrently, etc.",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vj5V0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to emphasize that \"i see OO everywhere\", isn't running a unix program like instantiating a class? the process has hidden internal state, can only be interacted via stdin/out or other apis, you can run multiple instances of the same class (executable) concurrently, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1718950580.910629",
        "client_msg_id": "0EE8E65E-AD7E-45F0-8DC3-C5805AC465C9",
        "text": "&gt; \u201cI see OO everywhere\u201d\nOOP has some peculiar ways to \u201chack\u201d into our cognitive system. The way we categorize things when we talk (and think) about them, feels very much like modeling a domain with OOP. And we categorize things all the time.\n\nWhen you casually bring up your neighbor\u2019s dog in a conversation, you say \u201c_dog_\u201d. It would be weird to talk about your neighbor\u2019s _mammal_. And although possible, if you are super into dogs yourself, you would likely not talk about your neighbor\u2019s _cocker spaniel_. You pick _dog_ \u2014 a natural category that\u2019s not too generic and not too specific, it just feels right. That all happens subconsciously. You don\u2019t really think about it.\n\nWhen modeling a domain we do something very similar. Without much experience, it\u2019s easy to fall into the trap to believe that good natural categories make good classes in OOP. But experienced programmers tend to pick up that modeling domains for programming seems to work better with superordinate categories that are more abstract.\n\nApplied to the analogy, programming usually works better if you\u2019d refer to your neighbor\u2019s _mammal_, or even better to your neighbor\u2019s _animal_, or even better to your neighbor\u2019s _living being_, as often as that\u2019s sufficient. That\u2019s how you can reap the benefits of polymorphism best later. You pick the most abstract type class or interface available that models the behavior you want. That, however, is usually much more abstract than what intuitively feels right and is therefore in conflict with your intuitive cognitive categorization. It also requires more abstract thinking when discussing the design with fellow programmers.\n\nI think OOP became so popular because it hooks into our cognitive categorization facility so effectively. And it became misunderstood and used \u201cwrongly\u201d because most programmers designed classes to feel like good natural categories that work well in conversation, but then cause problems later because they are too specific for getting the benefits of polymorphism. You can\u2019t really blame them for that. It\u2019s very natural to do exactly that. Literally \u201c_natural_\u201d.\n\nNow, _dog_ is a category or class or type. There are many dogs. But when you tell a story about your neighbor\u2019s dog, you use that category as a shorthand to refer to a very specific thing that is unique. Unless your neighbor has several dogs, there is only one instance (and if your neighbor has several dogs, you would\u2019ve qualified it more to refer to one of them). \nIt\u2019s easy to mix up what we\u2019re doing here: We use an abstract category (class) to refer to a specific thing (instance). Human language is super ambiguous, but we usually get the level of abstraction right so we can understand each other. And we don\u2019t really think about that distinction between a category and a unique thing either. We (usually) tend to just know what we mean.\n\nIn programming we need to be more precise. The colloquial understanding of OOP is that behavior is modeled in classes (because we want to reuse it), while state is modeled in objects (because we need to distinguish different instances). The confusion with what Alan Kay really meant comes from that. Because in Smalltalk both behavior and state are modeled in objects, and it is kind of understandable why he called it \u201cobject-oriented\u201d and why he dislikes classes. And message passing was so important because that was the universal interface for any kind of object to interact with any other kind of object. Message passing was the most abstract behavior that applied to all state \u2014 maximally efficient polymorphism, if you will.\n\nClass-focused OOP happens, pretty much _naturally_, if we just apply our unreflected naive understanding of how we categorize things and model our domains like that.\n\nI haven\u2019t worked out if all that makes OOP a good or bad approach to modeling domains. It\u2019s obviously beneficial to hook into stuff that comes easy to us, but then it seems as if in this case we get lead down the wrong path too easily and what we need for good design is somewhat opposed to what feels right intuitively. But then if you\u2019re aware of that, you can make it work quite well. :thinking_face: ",
        "team": "T5TCAFTA9",
        "thread_ts": "1718874784.469279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hcxq4",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cI see OO everywhere\u201d"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOOP has some peculiar ways to \u201chack\u201d into our cognitive system"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " The way we categorize things when we talk (and think) about them, feels very much like modeling a domain with OOP. And we categorize things all the time"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhen you casually bring up your neighbor\u2019s dog in a conversation, you say \u201c"
                            },
                            {
                                "type": "text",
                                "text": "dog",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u201d. It would be weird to talk about your "
                            },
                            {
                                "type": "text",
                                "text": "neighbor\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "mammal",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ". And although possible, if you are super into dogs yourself, you would likely not talk about your neighbor\u2019s "
                            },
                            {
                                "type": "text",
                                "text": "cocker spaniel",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " You pick "
                            },
                            {
                                "type": "text",
                                "text": "dog",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " \u2014 a natural category "
                            },
                            {
                                "type": "text",
                                "text": "that\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " not too generic and not too specific, it just feels right"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " That all happens subconsciously. You "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " really think about it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhen modeling a domain we do something very similar"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Without much experience, "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " easy to fall into the trap to believe that good natural categories make good classes in OOP. But experienced programmers tend to pick up that modeling domains for programming seems to work better with superordinate categories that are more abstract.\n\nApplied to the analogy, programming usually works better if you\u2019d refer to your "
                            },
                            {
                                "type": "text",
                                "text": "neighbor\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "mammal",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or even better to your "
                            },
                            {
                                "type": "text",
                                "text": "neighbor\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "animal",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or even better to your "
                            },
                            {
                                "type": "text",
                                "text": "neighbor\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "living being",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", as often as "
                            },
                            {
                                "type": "text",
                                "text": "that\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " sufficient. "
                            },
                            {
                                "type": "text",
                                "text": "That\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " how you can reap the benefits of polymorphism best later"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " You pick the most abstract type class or interface available that models the behavior you want"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " That, however, is usually much more abstract than what intuitively feels right and is therefore in conflict with your intuitive cognitive categorization. It also requires more abstract thinking when discussing the design with fellow programmers.\n\nI think OOP became so popular because it hooks into our cognitive categorization facility so effectively"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " And it became misunderstood and used \u201cwrongly\u201d because most programmers designed classes to feel like good natural categories that work well in conversation, but then cause problems later because they are too specific for getting the benefits of polymorphism"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " You "
                            },
                            {
                                "type": "text",
                                "text": "can\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " really blame them for that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " very natural to do exactly that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Literally \u201c"
                            },
                            {
                                "type": "text",
                                "text": "natural",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u201d"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nNow, "
                            },
                            {
                                "type": "text",
                                "text": "dog",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a category or class or type"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " There are many dogs"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But when you tell a story about your "
                            },
                            {
                                "type": "text",
                                "text": "neighbor\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " dog, you use that category as a shorthand to refer to a very specific thing that is unique"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Unless your neighbor has several dogs, there is only one instance (and if your neighbor has several dogs, "
                            },
                            {
                                "type": "text",
                                "text": "you"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "would\u2019ve"
                            },
                            {
                                "type": "text",
                                "text": " qualified it more to refer to one of them)"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " \n"
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " easy to mix up what "
                            },
                            {
                                "type": "text",
                                "text": "we\u2019re"
                            },
                            {
                                "type": "text",
                                "text": " doing here: We use an abstract category (class) to refer to a specific thing (instance). Human language is super ambiguous, but we usually get the level of abstraction right so we can understand each other. And we "
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " really think about that distinction between a category and a unique thing either. We (usually) tend to just know what we mean.\n\nIn programming we need to be more precise. The colloquial understanding of OOP is that behavior is modeled in classes (because we want to reuse it), while state is modeled in objects (because we need to distinguish different instances). The confusion with what Alan Kay really meant comes from that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Because in Smalltalk both behavior and state are modeled in objects, and it is kind of understandable why he called it \u201cobject-oriented\u201d and why he dislikes classes"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " And message passing was so important because that was the universal interface for any kind of object to interact with any other kind of object. Message passing was the most abstract behavior that applied to all state \u2014 maximally efficient polymorphism, if you will.\n\nClass-focused OOP happens, pretty much "
                            },
                            {
                                "type": "text",
                                "text": "naturally",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", if we just apply our unreflected naive understanding of how we categorize things and model our domains like that.\n\nI "
                            },
                            {
                                "type": "text",
                                "text": "haven\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " worked out if all that makes OOP a good or bad approach to modeling domains"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " obviously beneficial to hook into stuff that comes easy to us, but then it seems as if in this case we get lead down the wrong path too easily and what we need for good design is somewhat opposed to what feels right intuitively"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But then if "
                            },
                            {
                                "type": "text",
                                "text": "you\u2019re"
                            },
                            {
                                "type": "text",
                                "text": " aware of that, you can make it work quite well"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "U02QC0PPER3"
                ],
                "count": 2
            }
        ]
    }
]