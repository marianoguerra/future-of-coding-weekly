[
    {
        "client_msg_id": "f85f01c8-e69d-4ba0-9438-6cd65f6aee83",
        "type": "message",
        "text": "Hey all, I shared this idea a few months ago over in <#C5T9GPWFL|thinking-together>: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1700418506013839>\n\nWe just open sourced this concept we've been working on for programming with LLMs we're calling Blueprints. It is kind of an alternative to coding copilots. It allows you to capture patterns/sections/chunks/classes/etc of your code to store as a \"blueprint\" then use those blueprints as a base template for generating something new - in your particular style. Think about it similarly to how when you work on a new feature, a lot of the time there's similar code in your codebase that you look at and modify for this new use case you're working on.\n\nThe way it works is that when you capture a blueprint, the server generates a description with GPT4 along with vector embeddings of that description so that the next time you want to do something you just need to describe it, it finds the closest description, and uses the description+code to prompt for the new code generation.\n\nWould love feedback or to chat if this sounds interesting to anyone!\n\nRepo here: <https://github.com/sublayerapp/blueprints>\nShort demo of it in action here: <https://www.loom.com/share/727e449a764e4362b28a74460db84655>",
        "user": "U05GSC0B4A0",
        "ts": "1706821702.453349",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "asfLA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey all, I shared this idea a few months ago over in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1700418506013839"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWe just open sourced this concept we've been working on for programming with LLMs we're calling Blueprints. It is kind of an alternative to coding copilots. It allows you to capture patterns/sections/chunks/classes/etc of your code to store as a \"blueprint\" then use those blueprints as a base template for generating something new - in your particular style. Think about it similarly to how when you work on a new feature, a lot of the time there's similar code in your codebase that you look at and modify for this new use case you're working on.\n\nThe way it works is that when you capture a blueprint, the server generates a description with GPT4 along with vector embeddings of that description so that the next time you want to do something you just need to describe it, it finds the closest description, and uses the description+code to prompt for the new code generation.\n\nWould love feedback or to chat if this sounds interesting to anyone!\n\nRepo here: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/sublayerapp/blueprints"
                            },
                            {
                                "type": "text",
                                "text": "\nShort demo of it in action here: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.loom.com/share/727e449a764e4362b28a74460db84655"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1706821702.453349",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1706889367.360309",
        "reply_users": [
            "U04JY2BF24E",
            "U05GSC0B4A0"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "0ce4efbf-de49-4244-9742-6fb7f0fb3dc2",
        "type": "message",
        "text": "A few of thoughts: it would be interesting to learn if the user's prompt for \"a new class\" can be more complex, potentially relying on multiple blueprints at once. Here's a concrete example: for infrastructure-as-code (i.e. Terraform), a prompt could serve as a sketch for an architecture: \"I want a web service in Azure connected to a serverless function via an API gateway\", for example. Imagine blueprints for each of those major abstractions (web service, serverless function, API gateway) that could be combined automatically by the LLM. Not sure how close we are to that, but it would be very cool to see in action!",
        "user": "U04JY2BF24E",
        "ts": "1706845314.145539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ALYG7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A few of thoughts: it would be interesting to learn if the user's prompt for \"a new class\" can be more complex, potentially relying on multiple blueprints at once. Here's a concrete example: for infrastructure-as-code (i.e. Terraform), a prompt could serve as a sketch for an architecture: \"I want a web service in Azure connected to a serverless function via an API gateway\", for example. Imagine blueprints for each of those major abstractions (web service, serverless function, API gateway) that could be combined automatically by the LLM. Not sure how close we are to that, but it would be very cool to see in action!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1706821702.453349",
        "parent_user_id": "U05GSC0B4A0"
    },
    {
        "client_msg_id": "9864d99a-e02e-48f7-a013-8d559a51dfec",
        "type": "message",
        "text": "Yes! I think so...that's one of the things I'm exploring now... essentially a blueprint that is made out of blueprints",
        "user": "U05GSC0B4A0",
        "ts": "1706889228.907659",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k6ege",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! I think so...that's one of the things I'm exploring now... essentially a blueprint that is made out of blueprints"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1706821702.453349",
        "parent_user_id": "U05GSC0B4A0"
    },
    {
        "client_msg_id": "33a20eb4-463a-43e6-bf92-47b964188a5e",
        "type": "message",
        "text": "I struggle to get out of the philosophical side of things sometimes...but I'm kind of thinking about it from an Alexander-style pattern language...patterns are made up of smaller patterns kind of thing...",
        "user": "U05GSC0B4A0",
        "ts": "1706889346.546789",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0/fyK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I struggle to get out of the philosophical side of things sometimes...but I'm kind of thinking about it from an Alexander-style pattern language...patterns are made up of smaller patterns kind of thing..."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1706821702.453349",
        "parent_user_id": "U05GSC0B4A0"
    },
    {
        "client_msg_id": "5a419bb4-8186-40b7-b4c3-7ad988ac6bc2",
        "type": "message",
        "text": "but Terraform/infrastructure as code might be a great test case for getting that to work",
        "user": "U05GSC0B4A0",
        "ts": "1706889367.360309",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mfD5+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but Terraform/infrastructure as code might be a great test case for getting that to work"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1706821702.453349",
        "parent_user_id": "U05GSC0B4A0"
    }
]