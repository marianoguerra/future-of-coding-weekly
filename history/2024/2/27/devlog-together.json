[
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1708992943.623279",
        "client_msg_id": "a73e0c25-392a-4e78-b20c-cbc0be07bcad",
        "text": "Hi everyone,\nI have a big question about a programming-related problem I only partly understand, hoping not to get an answer, but rather pointers to where I should be looking. Here it goes.\n\nFor the past two years I have been working on SplootCode wanting to make code more accessible to non-engineers. The initial product (as is today) is basically a structured editor with drag and drop a-la-Scratch capabilities, and some other things to help non-engineers see and understand what the code is doing. You can see an example tiny program <https://app.splootcode.io/shared/mattia/for-loops-example/EPdLhGOx7p1SbPDIDisgbfpV|here>.\n\nDuring the interviews I conducted with several people, I bumped into a non-native English speaker who revealed their frustrations with having to learn English in order to code.\n\nAfter speaking to another dozen non-native speakers - some of whom teach programming in non-English speaking countries using their native language - I figured that this is a really big problem for a lot people, and I want to solve it.\n\nSince I have been deep into SplootCode for over two years, I am sure that I am suffering from sunk cost fallacy like crazy, thus the reason I am asking the question here is to get some outside perspective.\n---\nSo, to solve the problem for people, I am wanting to address the nested problem that \u2013 AFAIK \u2013 the vast majority of programming languages, with the exclusion of any purely symbolic ones, are effectively a subset of the English language.\n\nMy first train of thoughts was: \u201cperfect use case for building on top of SplootCode! The structured editing part means half the work is done already since I can label keywords however I want\u201d.\nFollowed by: \u201cbut wait! how can this be actually solved so that anyone can use their own tool of choice, which is what people will need?\u201d\n---\nThus my question is:\nI believe that the proper solution is to add a _layer_* to code \u2013 call the `tongue` layer \u2013 that defines the _label_** for each `tongue`.\n*What do I need to understand thoroughly, in order to build such a solution? Who should I speak to?*\n\n*_layer_ intended as a standalone structure that doesn\u2019t interact with anything but the semantic label of any literal, variable, operator, or function (or any other atomic structure that may exist within a programming language)\n\n**_label_ intended as the human-readable part of an atomic structure of a program. For example, the `if` in the structure `if () {}` in javascript, would be `se` in Italian, and `\u3082\u3057` in Japanese.",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "reply_count": 10,
        "reply_users_count": 6,
        "latest_reply": "1709067566.352219",
        "reply_users": [
            "UCUSW7WVD",
            "UGWUJUZHT",
            "UMV4B97GT",
            "U04E5QAD6DD",
            "UEP7RL0HX",
            "UBN9AFS0N"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1709067566.352219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xabwf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone,\nI have a big question about a programming-related problem I only partly understand, hoping not to get an answer, but rather pointers to where I should be looking. Here it goes.\n\nFor the past two years I have been working on SplootCode wanting to make code more accessible to non-engineers. The initial product (as is today) is basically a structured editor with drag and drop a-la-Scratch capabilities, and some other things to help non-engineers see and understand what the code is doing. You can see an example tiny program "
                            },
                            {
                                "type": "link",
                                "url": "https://app.splootcode.io/shared/mattia/for-loops-example/EPdLhGOx7p1SbPDIDisgbfpV",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nDuring the interviews I conducted with several people, I bumped into a non-native English speaker who revealed their frustrations with having to learn English in order to code.\n\nAfter speaking to another dozen non-native speakers - some of whom teach programming in non-English speaking countries using their native language - I figured that this is a really big problem for a lot people, and I want to solve it.\n\nSince I have been deep into SplootCode for over two years, I am sure that I am suffering from sunk cost fallacy like crazy, thus the reason I am asking the question here is to get some outside perspective.\n---\nSo, to solve the problem for people, I am wanting to address the nested problem that \u2013 AFAIK \u2013 the vast majority of programming languages, with the exclusion of any purely symbolic ones, are effectively a subset of the English language.\n\nMy first train of thoughts was: \u201cperfect use case for building on top of SplootCode! The structured editing part means half the work is done already since I can label keywords however I want\u201d.\nFollowed by: \u201cbut wait! how can this be actually solved so that anyone can use their own tool of choice, which is what people will need?\u201d\n---\nThus my question is:\nI believe that the proper solution is to add a "
                            },
                            {
                                "type": "text",
                                "text": "layer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* to code \u2013 call the "
                            },
                            {
                                "type": "text",
                                "text": "tongue",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " layer \u2013 that defines the "
                            },
                            {
                                "type": "text",
                                "text": "label",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "** for each "
                            },
                            {
                                "type": "text",
                                "text": "tongue",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n"
                            },
                            {
                                "type": "text",
                                "text": "What do I need to understand thoroughly, in order to build such a solution? Who should I speak to?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n*"
                            },
                            {
                                "type": "text",
                                "text": "layer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " intended as a standalone structure that doesn\u2019t interact with anything but the semantic label of any literal, variable, operator, or function (or any other atomic structure that may exist within a programming language)\n\n**"
                            },
                            {
                                "type": "text",
                                "text": "label",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " intended as the human-readable part of an atomic structure of a program. For example, the "
                            },
                            {
                                "type": "text",
                                "text": "if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the structure "
                            },
                            {
                                "type": "text",
                                "text": "if () {}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in javascript, would be "
                            },
                            {
                                "type": "text",
                                "text": "se",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Italian, and "
                            },
                            {
                                "type": "text",
                                "text": "\u3082\u3057",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Japanese."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1708998758.312289",
        "client_msg_id": "9b3ccf78-c1d4-4a87-adb9-04f5d34c7420",
        "text": "One thought: maybe you need to understand the internalization process. As I understand it, there are libraries that let you wrap all string literals in your program in an annotation and then look up the literal in a language-specific list of translations.\n\nSo one lens here is that you \"just\" need to perform this internationalization process to a compiler codebase..",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jia+w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thought: maybe you need to understand the internalization process. As I understand it, there are libraries that let you wrap all string literals in your program in an annotation and then look up the literal in a language-specific list of translations.\n\nSo one lens here is that you \"just\" need to perform this internationalization process to a compiler codebase.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1709000096.346619",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1709000279.000000"
        },
        "client_msg_id": "28871bb4-473d-40b8-ae89-855231d76e23",
        "text": "It sounds - from my very biased perspective - like you are describing text-to-text translation. If so, then you want to dig into technologies that make text-to-text-transformation easy, e.g. PEG parsing, LLMs (large language models \"AI\"), macros (you can learn about macros in Lisp, but lisp uses Lists instead of Text for macros). For PEG, I would suggest OhmJS (pdubroy on ohmland discord <https://discord.gg/7FqKRZdv>, and <http://ohmjs.org|ohmjs.org>) and LLMs (elimisteve on ohmland and programming simplicity discords (<https://discord.gg/ZEy2ajN3XQ>)) (and, TXL (Source Transformation Language by James Cordy) <http://txl.ca|txl.ca>) and the fields of Program Transformation and meta-programming. I have been dabbling in this sort of stuff and would be happy to elucidate (including a DSL for t2t for use alongside OhmJS). (REGEX and CFGs look tantalizingly close, but aren't as good at this as Ohm and PEG and LLMs). Note that OhmJS can do more than just t2t transformation.",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "attachments": [
            {
                "from_url": "https://discord.gg/7FqKRZdv",
                "id": 1,
                "original_url": "https://discord.gg/7FqKRZdv",
                "fallback": "Discord: Join the Ohm Land Discord Server!",
                "text": "Check out the Ohm Land community on Discord - hang out with 142 other members and enjoy free voice and text chat.",
                "title": "Join the Ohm Land Discord Server!",
                "title_link": "https://discord.gg/7FqKRZdv",
                "service_name": "Discord"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eQjLc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It sounds - from my very biased perspective - like you are describing text-to-text translation. If so, then you want to dig into technologies that make text-to-text-transformation easy, e.g. PEG parsing, LLMs (large language models \"AI\"), macros (you can learn about macros in Lisp, but lisp uses Lists instead of Text for macros). For PEG, I would suggest OhmJS (pdubroy on ohmland discord "
                            },
                            {
                                "type": "link",
                                "url": "https://discord.gg/7FqKRZdv"
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "link",
                                "url": "http://ohmjs.org",
                                "text": "ohmjs.org"
                            },
                            {
                                "type": "text",
                                "text": ") and LLMs (elimisteve on ohmland and programming simplicity discords ("
                            },
                            {
                                "type": "link",
                                "url": "https://discord.gg/ZEy2ajN3XQ"
                            },
                            {
                                "type": "text",
                                "text": ")) (and, TXL (Source Transformation Language by James Cordy) "
                            },
                            {
                                "type": "link",
                                "url": "http://txl.ca",
                                "text": "txl.ca"
                            },
                            {
                                "type": "text",
                                "text": ") and the fields of Program Transformation and meta-programming. I have been dabbling in this sort of stuff and would be happy to elucidate (including a DSL for t2t for use alongside OhmJS). (REGEX and CFGs look tantalizingly close, but aren't as good at this as Ohm and PEG and LLMs). Note that OhmJS can do more than just t2t transformation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709000418.776099",
        "client_msg_id": "45252daf-486e-48b8-8ad0-af9fd57a722e",
        "text": "Thanks <@UCUSW7WVD>, sounds inline with it, I\u2019ll deep dive!",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L6Nji",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ", sounds inline with it, I\u2019ll deep dive!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709000882.534809",
        "client_msg_id": "4c802c63-7787-4190-8d8d-a1b088efae22",
        "text": "Indeed <@UGWUJUZHT> , I will definitely leverage LLMs for the text-to-text translation part.\nThanks for the links on the transformations too, I\u2019ll look dive into Ohm and read up on PEG parsing as well!",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Crz/9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " , I will definitely leverage LLMs for the text-to-text translation part.\nThanks for the links on the transformations too, I\u2019ll look dive into Ohm and read up on PEG parsing as well!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1709001752.032089",
        "client_msg_id": "4f149474-f907-4c9f-8174-edda7f0eedf2",
        "text": "You might be interested in this thread: <https://futureofcoding.slack.com/archives/C5U3SEW6A/p1706212534780349>\n\nThe language there has a graphical symbolic representation and a text representation that, as far as I can tell, is not language-specific.\n\nI think <https://github.com/wordplaydev/wordplay/blob/main/LANGUAGE.md|WordPlay> is also designed to be natural-language-agnostic?\n\nNone of that is probably all that useful to you for your own language except for inspiration. :-)",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zNvnr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might be interested in this thread: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1706212534780349"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe language there has a graphical symbolic representation and a text representation that, as far as I can tell, is not language-specific.\n\nI think "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/wordplaydev/wordplay/blob/main/LANGUAGE.md",
                                "text": "WordPlay"
                            },
                            {
                                "type": "text",
                                "text": " is also designed to be natural-language-agnostic?\n\nNone of that is probably all that useful to you for your own language except for inspiration. :-)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709014343.854129",
        "client_msg_id": "25505BC9-604C-48D4-8D30-2591C88917CE",
        "text": "Thank you <@U04E5QAD6DD> , inspiration is always awesome :)",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iV0+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank"
                            },
                            {
                                "type": "text",
                                "text": " you "
                            },
                            {
                                "type": "user",
                                "user_id": "U04E5QAD6DD"
                            },
                            {
                                "type": "text",
                                "text": " , inspiration is always awesome :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEP7RL0HX",
        "type": "message",
        "ts": "1709021653.916759",
        "client_msg_id": "d6b76533-816a-4f8c-94fe-46b3dbfd1474",
        "text": "I'm not sure that \"their own tool of choice...is what people need\". A billion spreadsheet programmers are just fine with their spreadsheet editor and can always export their spreadsheets if they want to use a different one. The point of your structured editor is to make programming _easier_ by the very fact that it is a different _kind_ of editor. If someone wants to program with a non-structured editor, you can give them their standard code without the tongue layer and they can go. And if someone else develops a different structured editor with something like your tongue layer, you can decide whether to export to their format.",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kVBjv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure that \"their own tool of choice...is what people need\". A billion spreadsheet programmers are just fine with their spreadsheet editor and can always export their spreadsheets if they want to use a different one. The point of your structured editor is to make programming "
                            },
                            {
                                "type": "text",
                                "text": "easier",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by the very fact that it is a different "
                            },
                            {
                                "type": "text",
                                "text": "kind",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of editor. If someone wants to program with a non-structured editor, you can give them their standard code without the tongue layer and they can go. And if someone else develops a different structured editor with something like your tongue layer, you can decide whether to export to their format."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1709023849.326489",
        "client_msg_id": "2b2a3254-d8f8-4e5b-b39a-90aee3e99fd1",
        "text": "Blockly and hedy are the best at translation that I know of:\n\n\u2022 <https://developers.google.com/blockly/guides/create-custom-blocks/localize-blocks>\n\u2022 <https://www.hedycode.com/>",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "attachments": [
            {
                "image_url": "https://www.gstatic.com/devrel-devsite/prod/v937c5f592532c0ad2ebbf299686fcceed4f5934a648172aa45e00618ae0982d7/developers/images/opengraph/google-blue.png",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 16144,
                "from_url": "https://developers.google.com/blockly/guides/create-custom-blocks/localize-blocks",
                "service_icon": "https://www.gstatic.com/devrel-devsite/prod/v937c5f592532c0ad2ebbf299686fcceed4f5934a648172aa45e00618ae0982d7/developers/images/touchicon-180-new.png",
                "id": 1,
                "original_url": "https://developers.google.com/blockly/guides/create-custom-blocks/localize-blocks",
                "fallback": "Google for Developers: Localize Blocks \u00a0|\u00a0 Blockly \u00a0|\u00a0 Google for Developers",
                "text": "How to define blocks that are easy to localize.",
                "title": "Localize Blocks \u00a0|\u00a0 Blockly \u00a0|\u00a0 Google for Developers",
                "title_link": "https://developers.google.com/blockly/guides/create-custom-blocks/localize-blocks",
                "service_name": "Google for Developers"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nPl56",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Blockly and hedy are the best at translation that I know of:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://developers.google.com/blockly/guides/create-custom-blocks/localize-blocks"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://www.hedycode.com/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UMV4B97GT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709025853.428819",
        "client_msg_id": "91280A26-2AD0-4EC5-8D5B-31E842EE5BA9",
        "text": "Didn't know they did <@UBN9AFS0N> ! Thanks for sharing!",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mAJcv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Didn't"
                            },
                            {
                                "type": "text",
                                "text": " know they did "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " ! Thanks for sharing!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Where are the nibbles?",
        "files": [
            {
                "id": "F06MHDSQ7NU",
                "created": 1709041994,
                "timestamp": 1709041994,
                "name": "binvm-bytes-shorts-ints.gif",
                "title": "binvm-bytes-shorts-ints.gif",
                "mimetype": "image/gif",
                "filetype": "gif",
                "pretty_type": "GIF",
                "user": "UBN9AFS0N",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 974881,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06MHDSQ7NU/binvm-bytes-shorts-ints.gif",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06MHDSQ7NU/download/binvm-bytes-shorts-ints.gif",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 350,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 467,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 700,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 778,
                "thumb_360_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_360.gif",
                "thumb_480_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_480.gif",
                "original_w": 928,
                "original_h": 902,
                "deanimate": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_deanimate.png",
                "deanimate_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F06MHDSQ7NU-a4b23badaa/binvm-bytes-shorts-ints_deanimate_gif.png",
                "thumb_tiny": "AwAuADDTpD170tB+lACZz6/nR+Boz7UDj1oAM+1LSZ9qWgAoNFIc56UAGfagfjR+FFABn2paT8KWgApCOe1LRQAnHtQPcijFAHrigBePWikxS0Af/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UBN9AFS0N/F06MHDSQ7NU/binvm-bytes-shorts-ints.gif",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06MHDSQ7NU-a6db76b395",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBN9AFS0N",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xRa7d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where are the nibbles?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1709042001.975309",
        "client_msg_id": "b2ac4b2d-7812-4485-9077-84641c4357e4",
        "reactions": [
            {
                "name": "point_up::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "clap",
                "users": [
                    "U0217A6C4KW",
                    "U0123H7JRDM"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "UMV4B97GT"
                ],
                "count": 3
            },
            {
                "name": "see-it",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709067566.352219",
        "client_msg_id": "e1684934-c28d-42c5-8b15-acd328329521",
        "text": "<@UEP7RL0HX> that\u2019s one of the strongest conviction I had before seeing how people interact with computers :sweat_smile:",
        "team": "T5TCAFTA9",
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7rU+R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEP7RL0HX"
                            },
                            {
                                "type": "text",
                                "text": " that\u2019s one of the strongest conviction I had before seeing how people interact with computers "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]