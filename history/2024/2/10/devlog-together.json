[
    {
        "client_msg_id": "87BB1324-1515-483B-932C-31517B7C399C",
        "type": "message",
        "text": "Hi, in this video (<https://youtu.be/iFga2bfptBk|https://youtu.be/iFga2bfptBk>) I show the progress on a new feature that I really wanted for quite some time: combining nodes into reusable compositions. This helps in making flows smaller. The compositions can be accessed from within the node-type selector so they can be added to the flow. One thing that I really like is how the inputs and outputs to compositions are created based on the connections which cross the bounds of the selected area. I've also finally added a way to copy & paste nodes which is a nice productivity improvement. \n\nIn the video I demonstrate my other flow engine instance with which you can create fragment shaders in webgl and here I've recreated a shader form shadertoy made by kishimisu (see <https://www.shadertoy.com/view/mtyGWy|https://www.shadertoy.com/view/mtyGWy> ). I had to extend the node-types to make this possible. Currently I cant yet create nested compositions but once that is possible I hope it will help decrease the \"node-spaghetti\" further. Because I do think that the textual shadertoy code is still easier to read then my visual version. Which obviously I want to improve. \n\nI am almost ready to send out a link to my visual editor but decided to work on it a little bit more for ar least this month. I want to extend and improve some features and create more example flows.\n",
        "user": "U0123H7JRDM",
        "ts": "1707577006.843849",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "82Z+z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, in this video ("
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/iFga2bfptBk",
                                "text": "https://youtu.be/iFga2bfptBk"
                            },
                            {
                                "type": "text",
                                "text": ") I show the progress on a new feature that I really wanted for quite some time: combining nodes into reusable compositions. This helps in making flows smaller. The compositions can be accessed from within the node-type selector so they can be added to the flow. One thing that I really like is how the inputs and outputs to compositions are created based on the connections which cross the bounds of the selected area. I've also finally added a way to copy & paste nodes which is a nice productivity improvement. \n\nIn the video I demonstrate my other flow engine instance with which you can create fragment shaders in webgl and here I've recreated a shader form shadertoy made by kishimisu (see "
                            },
                            {
                                "type": "link",
                                "url": "https://www.shadertoy.com/view/mtyGWy",
                                "text": "https://www.shadertoy.com/view/mtyGWy"
                            },
                            {
                                "type": "text",
                                "text": " ). I had to extend the node-types to make this possible. Currently I cant yet create nested compositions but once that is possible I hope it will help decrease the \"node-spaghetti\" further. Because I do think that the textual shadertoy code is still easier to read then my visual version. Which obviously I want to improve. \n\nI am almost ready to send out a link to my visual editor but decided to work on it a little bit more for ar least this month. I want to extend and improve some features and create more example flows.\n"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0123H7JRDM",
            "ts": "1707579103.000000"
        },
        "thread_ts": "1707577006.843849",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1707642969.944659",
        "reply_users": [
            "UGWUJUZHT",
            "U0123H7JRDM"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "I wanted to make a pit stop at this tug-of-war example from <https://probmods.org/chapters/conditioning.html|ProbMods> before I moved on to working on the code editor because it's one of the most eye-opening in terms of what's possible in PPLs, and because _this_ is the visual I wanted that I couldn't get in WebPPL, in two ways: 1) all the plots, arranged how I wanted them, and 2) always-on plots that let me see the samples as they come in, with the charts getting smoother and smoother the longer I'm willing to wait.",
        "files": [
            {
                "id": "F06J750JQ0K",
                "created": 1707578484,
                "timestamp": 1707578484,
                "name": "2024-02-10 tug-of-war.gif",
                "title": "2024-02-10 tug-of-war.gif",
                "mimetype": "image/gif",
                "filetype": "gif",
                "pretty_type": "GIF",
                "user": "UFEQUBNNT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 530402,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F06J750JQ0K/2024-02-10_tug-of-war.gif",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06J750JQ0K/download/2024-02-10_tug-of-war.gif",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 207,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 277,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 415,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 461,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 553,
                "thumb_360_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_360.gif",
                "thumb_480_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_480.gif",
                "original_w": 960,
                "original_h": 553,
                "deanimate": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_deanimate.png",
                "deanimate_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F06J750JQ0K-8672241b36/2024-02-10_tug-of-war_deanimate_gif.png",
                "thumb_tiny": "AwAbADDNIIxkUEEAZFIe3NL2FADkAK8inFF7CmqQBzn86XcPU/nQAm0e35004Hp+dKWPrTSSetACnHbNBxgYzSGjPFAABnpSlaSg0AFFFFAH/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UFEQUBNNT/F06J750JQ0K/2024-02-10_tug-of-war.gif",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06J750JQ0K-8b38965fe5",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "ts": "1707578806.420899",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TtP9p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wanted to make a pit stop at this tug-of-war example from "
                            },
                            {
                                "type": "link",
                                "url": "https://probmods.org/chapters/conditioning.html",
                                "text": "ProbMods"
                            },
                            {
                                "type": "text",
                                "text": " before I moved on to working on the code editor because it's one of the most eye-opening in terms of what's possible in PPLs, and because "
                            },
                            {
                                "type": "text",
                                "text": "this",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the visual I wanted that I couldn't get in WebPPL, in two ways: 1) all the plots, arranged how I wanted them, and 2) always-on plots that let me see the samples as they come in, with the charts getting smoother and smoother the longer I'm willing to wait."
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1707578850.000000"
        },
        "client_msg_id": "37e2e5e6-f08c-482d-a497-7e89e42c6106"
    },
    {
        "type": "message",
        "text": "FYI - a trick I use for cleaning up diagrams...",
        "files": [
            {
                "id": "F06JW5Q32LQ",
                "created": 1707584060,
                "timestamp": 1707584060,
                "name": "Screen Recording 2024-02-10 at 11.45.08\u202fAM.mov",
                "title": "Screen Recording 2024-02-10 at 11.45.08\u202fAM.mov",
                "mimetype": "video/quicktime",
                "filetype": "mov",
                "pretty_type": "QuickTime Movie",
                "user": "UGWUJUZHT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 32412845,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "transcription": {
                    "status": "none"
                },
                "mp4": "https://files.slack.com/files-tmb/T5TCAFTA9-F06JW5Q32LQ-8f33f5a67f/screen_recording_2024-02-10_at_11.45.08___am.mp4",
                "url_private": "https://files.slack.com/files-tmb/T5TCAFTA9-F06JW5Q32LQ-8f33f5a67f/screen_recording_2024-02-10_at_11.45.08___am.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06JW5Q32LQ/download/screen_recording_2024-02-10_at_11.45.08___am.mov",
                "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F06JW5Q32LQ-8f33f5a67f/file.m3u8?_xcb=dcd64",
                "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9ODMzMTM0LEFWRVJBR0UtQkFORFdJRFRIPTc2MDczNixDT0RFQ1M9ImF2YzEuNjQwMDI4LG1wNGEuNDAuNSIsUkVTT0xVVElPTj0xMzgyeDEwODAsRlJBTUUtUkFURT0yOS45NzAKZGF0YTphcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybDtiYXNlNjQsSTBWWVZFMHpWUW9qUlZoVUxWZ3RWa1ZTVTBsUFRqb3pDaU5GV0ZRdFdDMVVRVkpIUlZSRVZWSkJWRWxQVGpvM0NpTkZXRlF0V0MxTlJVUkpRUzFUUlZGVlJVNURSVG94Q2lORldGUXRXQzFRVEVGWlRFbFRWQzFVV1ZCRk9sWlBSQW9qUlZoVVNVNUdPall1TURBMkxBcG9kSFJ3Y3pvdkwyWnBiR1Z6TG5Oc1lXTnJMbU52YlM5bWFXeGxjeTEwYldJdlZEVlVRMEZHVkVFNUxVWXdOa3BYTlZFek1reFJMVGhtTXpObU5XRTJOMll2Wm1sc1pWOUlYekkyTkY4eE9USXdlREV3T0RCZk5qVXdNRXRDVUZOZk4xRldRbEpmTURBd01ERXVkSE1LSTBWWVZFbE9Sam8yTGpBd05pd0thSFIwY0hNNkx5OW1hV3hsY3k1emJHRmpheTVqYjIwdlptbHNaWE10ZEcxaUwxUTFWRU5CUmxSQk9TMUdNRFpLVnpWUk16Sk1VUzA0WmpNelpqVmhOamRtTDJacGJHVmZTRjh5TmpSZk1Ua3lNSGd4TURnd1h6WTFNREJMUWxCVFh6ZFJWa0pTWHpBd01EQXlMblJ6Q2lORldGUkpUa1k2Tmk0d01EWXNDbWgwZEhCek9pOHZabWxzWlhNdWMyeGhZMnN1WTI5dEwyWnBiR1Z6TFhSdFlpOVVOVlJEUVVaVVFUa3RSakEyU2xjMVVUTXlURkV0T0dZek0yWTFZVFkzWmk5bWFXeGxYMGhmTWpZMFh6RTVNakI0TVRBNE1GODJOVEF3UzBKUVUxODNVVlpDVWw4d01EQXdNeTUwY3dvalJWaFVTVTVHT2pZdU1EQTJMQXBvZEhSd2N6b3ZMMlpwYkdWekxuTnNZV05yTG1OdmJTOW1hV3hsY3kxMGJXSXZWRFZVUTBGR1ZFRTVMVVl3TmtwWE5WRXpNa3hSTFRobU16Tm1OV0UyTjJZdlptbHNaVjlJWHpJMk5GOHhPVEl3ZURFd09EQmZOalV3TUV0Q1VGTmZOMUZXUWxKZk1EQXdNRFF1ZEhNS0kwVllWRWxPUmpvMkxqQXdOaXdLYUhSMGNITTZMeTltYVd4bGN5NXpiR0ZqYXk1amIyMHZabWxzWlhNdGRHMWlMMVExVkVOQlJsUkJPUzFHTURaS1Z6VlJNekpNVVMwNFpqTXpaalZoTmpkbUwyWnBiR1ZmU0Y4eU5qUmZNVGt5TUhneE1EZ3dYelkxTURCTFFsQlRYemRSVmtKU1h6QXdNREExTG5SekNpTkZXRlJKVGtZNk5pNHdNRFlzQ21oMGRIQnpPaTh2Wm1sc1pYTXVjMnhoWTJzdVkyOXRMMlpwYkdWekxYUnRZaTlVTlZSRFFVWlVRVGt0UmpBMlNsYzFVVE15VEZFdE9HWXpNMlkxWVRZM1ppOW1hV3hsWDBoZk1qWTBYekU1TWpCNE1UQTRNRjgyTlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3Tmk1MGN3b2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd05rcFhOVkV6TWt4UkxUaG1Nek5tTldFMk4yWXZabWxzWlY5SVh6STJORjh4T1RJd2VERXdPREJmTmpVd01FdENVRk5mTjFGV1FsSmZNREF3TURjdWRITUtJMFZZVkVsT1JqbzJMakF3Tml3S2FIUjBjSE02THk5bWFXeGxjeTV6YkdGamF5NWpiMjB2Wm1sc1pYTXRkRzFpTDFRMVZFTkJSbFJCT1MxR01EWktWelZSTXpKTVVTMDRaak16WmpWaE5qZG1MMlpwYkdWZlNGOHlOalJmTVRreU1IZ3hNRGd3WHpZMU1EQkxRbEJUWHpkUlZrSlNYekF3TURBNExuUnpDaU5GV0ZSSlRrWTZOaTR3TURZc0NtaDBkSEJ6T2k4dlptbHNaWE11YzJ4aFkyc3VZMjl0TDJacGJHVnpMWFJ0WWk5VU5WUkRRVVpVUVRrdFJqQTJTbGMxVVRNeVRGRXRPR1l6TTJZMVlUWTNaaTltYVd4bFgwaGZNalkwWHpFNU1qQjRNVEE0TUY4Mk5UQXdTMEpRVTE4M1VWWkNVbDh3TURBd09TNTBjd29qUlZoVVNVNUdPakF1TXpNMExBcG9kSFJ3Y3pvdkwyWnBiR1Z6TG5Oc1lXTnJMbU52YlM5bWFXeGxjeTEwYldJdlZEVlVRMEZHVkVFNUxVWXdOa3BYTlZFek1reFJMVGhtTXpObU5XRTJOMll2Wm1sc1pWOUlYekkyTkY4eE9USXdlREV3T0RCZk5qVXdNRXRDVUZOZk4xRldRbEpmTURBd01UQXVkSE1LSTBWWVZDMVlMVVZPUkV4SlUxUUsKI0VYVC1YLVNUUkVBTS1JTkY6QkFORFdJRFRIPTUyOTEyOSxBVkVSQUdFLUJBTkRXSURUSD00NzgyOTUsQ09ERUNTPSJhdmMxLjY0MDAxZixtcDRhLjQwLjUiLFJFU09MVVRJT049OTIyeDcyMCxGUkFNRS1SQVRFPTI5Ljk3MApodHRwczovL2ZpbGVzLnNsYWNrLmNvbS9maWxlcy10bWIvVDVUQ0FGVEE5LUYwNkpXNVEzMkxRLThmMzNmNWE2N2YvZmlsZV9IXzI2NF8xMjgweDcyMF8zNTAwS0JQU183UVZCUi5tM3U4Cg==",
                "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F06JW5Q32LQ-8f33f5a67f/screen_recording_2024-02-10_at_11.45.08___am_trans.mp4",
                "duration_ms": 54387,
                "media_display_type": "video",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F06JW5Q32LQ-8f33f5a67f/screen_recording_2024-02-10_at_11.45.08___am_thumb_video.jpeg",
                "thumb_video_w": 1152,
                "thumb_video_h": 900,
                "permalink": "https://futureofcoding.slack.com/files/UGWUJUZHT/F06JW5Q32LQ/screen_recording_2024-02-10_at_11.45.08___am.mov",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06JW5Q32LQ-2af3518326",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "ts": "1707584149.867699",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fwpL/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FYI - a trick I use for cleaning up diagrams..."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "582cc0fb-9052-47d0-b234-fcdae5f3296f",
        "thread_ts": "1707577006.843849",
        "parent_user_id": "U0123H7JRDM"
    },
    {
        "client_msg_id": "E2D7709B-08C6-4546-AD7C-AED299DA47F6",
        "type": "message",
        "text": "Unfortunately I currently only have bezier and quadratic curves and straight lines without an option to add extra control points",
        "user": "U0123H7JRDM",
        "ts": "1707584299.585239",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LP3bB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unfortunately I currently only have bezier and quadratic curves and straight lines without an option to add extra control points"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1707577006.843849",
        "parent_user_id": "U0123H7JRDM",
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1F6C9813-53C4-4AB4-8FAD-28D7F5DF652B",
        "type": "message",
        "text": "I was thinking a bit more about this, I think I can automate this.. when a node has multiple connections from a port to other nodes.. simply create overlapping svg paths to the end nodes. I already do something similar for nodes that connect to nodes that have a smaller X position. If possible I want to prevent extra user actions ",
        "user": "U0123H7JRDM",
        "ts": "1707589424.925219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zb3SX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was thinking a bit more about this, I think I can automate this.. when a node has multiple connections from a port to other nodes.. simply create overlapping svg paths to the end nodes. I already do something similar for nodes that connect to nodes that have a smaller X position. If possible I want to prevent extra user actions "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1707577006.843849",
        "parent_user_id": "U0123H7JRDM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "F7A9686F-A4B1-4549-9631-DBB66AAE9644",
        "type": "message",
        "text": "Here's a link to a small video demonstrating the above: <https://youtu.be/QrFnzhhHzD8|https://youtu.be/QrFnzhhHzD8>\n\nConnections that have the same output have their svg path calculated using the distance from the closest node to that output.\n\nI've also changed the way value-nodes are handled by the shader : instead of recompiling the shader after changing the value, now direct uniform parameters into the shader are used which is a much smoother experience.",
        "user": "U0123H7JRDM",
        "ts": "1707642969.944659",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "asIni",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a link to a small video demonstrating the above: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/QrFnzhhHzD8",
                                "text": "https://youtu.be/QrFnzhhHzD8"
                            },
                            {
                                "type": "text",
                                "text": "\n\nConnections that have the same output have their svg path calculated using the distance from the closest node to that output.\n\nI've also changed the way value-nodes are handled by the shader : instead of recompiling the shader after changing the value, now direct uniform parameters into the shader are used which is a much smoother experience."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/QrFnzhhHzD8",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/QrFnzhhHzD8/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/QrFnzhhHzD8?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Auto layout connections from same output for visual programming\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/QrFnzhhHzD8",
                "fallback": "YouTube Video: Auto layout connections from same output for visual programming",
                "title": "Auto layout connections from same output for visual programming",
                "title_link": "https://youtu.be/QrFnzhhHzD8",
                "author_name": "Maikel van de Lisdonk",
                "author_link": "https://www.youtube.com/@maikelvandelisdonk7024",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1707577006.843849",
        "parent_user_id": "U0123H7JRDM"
    }
]