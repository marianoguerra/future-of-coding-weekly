[
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1710665671.072109",
        "client_msg_id": "DE7E1135-C463-495F-ACB0-67954EFCE339",
        "text": "Yes, the time has finally come! I'll share a link to my visual programming project online! I've been mainly showing some video's on the devlog channel about the project.\n\nWarning upfront: Although I've been working on this for quite some time (I even started from the ground up last year after working on my previous visual programming project for multiple years).. there's still a lot of work to be done and bugs to be fixed. The UI/UX is far from perfect but it is demo-able enough I think. However, it's still just in \"demo-stage\" and not usable by other projects (I haven't build any npm packages for integrating or vs-code extension for example).\n\nMy goal is to make a generic visual programming system (VPS) with which domain or application specific vpl's can be made. For now I am implementing 2 vpl's on top of the current base: a flow-based-programming inspired system and a \"visual shader-toy\".\n\nSince the tool is an infinite canvas, you can zoom and drag the canvas using mouse/wheel/touchpad. I've spend some time getting touchscreen support, but more work definitely needs to be done there.\n\nWhen you open up one of the editors, you can use the dropdown in the top-menu to load an example flow.\n\nWithout further ado, here's the link: <https://codeflowcanvas.io|https://codeflowcanvas.io> : there are 2 demo playgrounds in which you can play around.\n\nI'll post some more details in the :thread:.\n\nThanks for some feedback!",
        "team": "T5TCAFTA9",
        "thread_ts": "1710665671.072109",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1710665742.219779",
        "reply_users": [
            "U0123H7JRDM"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "duDNw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, the time has finally come! I'll share a link to my visual programming project online! I've been mainly showing some video's on the devlog channel about the project.\n\nWarning upfront: Although I've been working on this for quite some time (I even started from the ground up last year after working on my previous visual programming project for multiple years).. there's still a lot of work to be done and bugs to be fixed. The UI/UX is far from perfect but it is demo-able enough I think. However, it's still just in \"demo-stage\" and not usable by other projects (I haven't build any npm packages for integrating or vs-code extension for example).\n\nMy goal is to make a generic visual programming system (VPS) with which domain or application specific vpl's can be made. For now I am implementing 2 vpl's on top of the current base: a flow-based-programming inspired system and a \"visual shader-toy\".\n\nSince the tool is an infinite canvas, you can zoom and drag the canvas using mouse/wheel/touchpad. I've spend some time getting touchscreen support, but more work definitely needs to be done there.\n\nWhen you open up one of the editors, you can use the dropdown in the top-menu to load an example flow.\n\nWithout further ado, here's the link: "
                            },
                            {
                                "type": "link",
                                "url": "https://codeflowcanvas.io",
                                "text": "https://codeflowcanvas.io"
                            },
                            {
                                "type": "text",
                                "text": " : there are 2 demo playgrounds in which you can play around.\n\nI'll post some more details in the "
                            },
                            {
                                "type": "emoji",
                                "name": "thread",
                                "unicode": "1f9f5"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThanks for some feedback!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "U85HCL7JP",
                    "U0296ACR13M"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1710665742.219779",
        "client_msg_id": "31C7C718-BFE6-4064-A0D5-31C89A663D2F",
        "text": "My VPS is build using vanilla javascript which makes it pretty small.. 100KB gzipped and minified (which will only grow in the future I expect, although I want to try and keep the core small). It currently runs only in the browser without any backend. The flow json data is stored in indexeddb storage. So when the browser gets refeshed it's loaded from there (storage happens automatically).\nThe flow json can be exported and loaded back.\n\n\nThe core VPS has support for composite nodes which contain a flow themselves and these can be nested and place multiple times on the canvas. This provides more flexibility then just grouping nodes in a group.\nThere's also support for containers, which are groups of nodes but in a container which is visible on the canvas. These containers can have different implementations like a state machine in the flow-based flow engine or a for-node or condition-node in the gl-flow (in the examples this can be seen).\n\nThe flow-based-programming inspired engine shows the program counter flowing through the flow when it gets executed (this is not available in the gl-flow). This is especially fun to watch in the quicksort-example flow because it has parallel paths and recursion (speed can be varied). You can use the timeline slider after the flow has run to do basic time-travelling.\n",
        "team": "T5TCAFTA9",
        "thread_ts": "1710665671.072109",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s5SXR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My VPS is build using vanilla javascript which makes it pretty small.. 100KB gzipped and minified (which will only grow in the future I expect, although I want to try and keep the core small). It currently runs only in the browser without any backend. The flow json data is stored in indexeddb storage. So when the browser gets refeshed it's loaded from there (storage happens automatically).\nThe flow json can be exported and loaded back.\n\n\nThe core VPS has support for composite nodes which contain a flow themselves and these can be nested and place multiple times on the canvas. This provides more flexibility then just grouping nodes in a group.\nThere's also support for containers, which are groups of nodes but in a container which is visible on the canvas. These containers can have different implementations like a state machine in the flow-based flow engine or a for-node or condition-node in the gl-flow (in the examples this can be seen).\n\nThe flow-based-programming inspired engine shows the program counter flowing through the flow when it gets executed (this is not available in the gl-flow). This is especially fun to watch in the quicksort-example flow because it has parallel paths and recursion (speed can be varied). You can use the timeline slider after the flow has run to do basic time-travelling.\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]