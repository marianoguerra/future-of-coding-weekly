[
    {
        "user": "U04FWD3SA90",
        "type": "message",
        "ts": "1711632768.082289",
        "edited": {
            "user": "U04FWD3SA90",
            "ts": "1711633964.000000"
        },
        "client_msg_id": "ffd07c6a-21ef-45bc-a265-3bf79d0fe279",
        "text": "A co-worker and I published a post / overview  on some stuff we\u2019re working on. It\u2019s about writing functions, compiling them to Wasm components, and combining them into a multi-language (Rust, Python, Javascript) workflow to run on the Everywhere Computer (a platform we\u2019ve developed at Fission): <https://fission.codes/blog/functions-everywhere-only-once/>.",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1711671951.615089",
        "reply_users": [
            "U01AD80KMLK",
            "U04FWD3SA90"
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https://fission.codes/resized-images/Vf6HK3boXg-2000.webp",
                "image_width": 2000,
                "image_height": 1000,
                "image_bytes": 30150,
                "from_url": "https://fission.codes/blog/functions-everywhere-only-once/",
                "id": 1,
                "original_url": "https://fission.codes/blog/functions-everywhere-only-once/",
                "fallback": "Fission: Functions Everywhere, Only Once: Writing Functions for the Everywhere Computer \u2013 Fission",
                "text": "Writing functions for the Everywhere Computer in Rust, JavaScript, and Python, and compiling to Wasm components with WIT and WASI to run everywhere",
                "title": "Functions Everywhere, Only Once: Writing Functions for the Everywhere Computer \u2013 Fission",
                "title_link": "https://fission.codes/blog/functions-everywhere-only-once/",
                "service_name": "Fission"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6en2f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A co-worker and I published a post / overview  on some stuff we\u2019re working on. It\u2019s about writing functions, compiling them to Wasm components, and combining them into a multi-language (Rust, Python, Javascript) workflow to run on the Everywhere Computer (a platform we\u2019ve developed at Fission): "
                            },
                            {
                                "type": "link",
                                "url": "https://fission.codes/blog/functions-everywhere-only-once/"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U04BZ21V2NQ",
                    "U06H4BGRBM2",
                    "U06BUK2M2RH"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "U06H4766K42"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1711670706.957199",
        "client_msg_id": "443f9eac-0359-4442-b0c3-9188f91962d5",
        "text": "How do you compile the Python and JavaScript functions? The best we figured so far was to compile a Python and JavaScript interpreter and then use the interpreter to evaluate Python and JavaScript sourcecode, but it needs a huge WASM runtime and isn't particularly fast.",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "parent_user_id": "U04FWD3SA90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sRAh3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do you compile the Python and JavaScript functions? The best we figured so far was to compile a Python and JavaScript interpreter and then use the interpreter to evaluate Python and JavaScript sourcecode, but it needs a huge WASM runtime and isn't particularly fast."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04FWD3SA90",
        "type": "message",
        "ts": "1711671196.276319",
        "client_msg_id": "720935BD-7984-46A4-A720-3A27ABF18532",
        "text": "The post discusses the tools. The underlying pieces are componentizeJs and componentise-py. Tradeoffs abound to your points tho. ",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "parent_user_id": "U04FWD3SA90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zgP4M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The post discusses the tools. The underlying pieces are componentizeJs and componentise-py. Tradeoffs abound to your points tho. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04FWD3SA90",
        "type": "message",
        "ts": "1711671428.905569",
        "client_msg_id": "EFBFE0D8-0440-423A-A4F7-241D516AE503",
        "text": "The Javascript one embeds spider monkey which means it\u2019s interpreted  ",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "parent_user_id": "U04FWD3SA90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GnyVI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Javascript one embeds spider monkey which means "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " interpreted  "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04FWD3SA90",
        "type": "message",
        "ts": "1711671440.896599",
        "client_msg_id": "8D679E8B-9B2E-4489-8E3A-78A8415A22BF",
        "text": "Python uses py03",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "parent_user_id": "U04FWD3SA90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6cagt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Python uses py03"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1711671870.173129",
        "client_msg_id": "a0f79c61-24dc-4f3b-b029-763919e7e1bd",
        "text": "Thanks! I should read the post first before asking questions, sorry! :smile:",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "parent_user_id": "U04FWD3SA90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IopP+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! I should read the post first before asking questions, sorry! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04FWD3SA90",
        "type": "message",
        "ts": "1711671951.615089",
        "client_msg_id": "A91E6C16-0963-437B-8EE4-4D865B5BA09B",
        "text": "Np! We built a tool atop all this for JS, currently called Wasmify. Python is stock componentize. After you gander, down to chat more in detail! ",
        "team": "T5TCAFTA9",
        "thread_ts": "1711632768.082289",
        "parent_user_id": "U04FWD3SA90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9uSO8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Np! We built a tool atop all this for JS, currently called Wasmify. Python is stock componentize. After you gander, down to chat more in detail! "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thank-you",
                "users": [
                    "U01AD80KMLK"
                ],
                "count": 1
            }
        ]
    }
]