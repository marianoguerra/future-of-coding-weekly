[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1709521905.644279",
        "client_msg_id": "7261ec63-be5b-4dce-aa4f-7bbc8bf2b595",
        "text": "<https://futureofcoding.org/episodes/070|Future of Coding 70 \u2022 Beyond Efficiency> by <@UKLV35EEM>\n\nDave Ackley\u2019s paper Beyond Efficiency is three pages long. With just these three pages, he mounts a compelling argument against the conventional way we engineer software. Instead of inflexibly insisting upon correctness, maybe allow a lil slop? Instead of chasing peak performance with cache and clever tricks, maybe measure many times before you cut. So in this episode, we\u2019re putting every CEO in the guillotine\u2026 (oh, that stands for \u201ccorrectness and efficiency only\u201d, don\u2019t put us on a list)\u2026 and considering when, where, and how to do the robust thing.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "reply_count": 16,
        "reply_users_count": 8,
        "latest_reply": "1710120685.544579",
        "reply_users": [
            "U03CEGR3HSL",
            "U05597GCDDK",
            "UFEQUBNNT",
            "U04Q53X6P7W",
            "UC2A2ARPT",
            "UA14TGLTC",
            "U02LHNW0VLP",
            "UP69Y6VJ7"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "scwAW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/070",
                                "text": "Future of Coding 70 \u2022 Beyond Efficiency"
                            },
                            {
                                "type": "text",
                                "text": " by "
                            },
                            {
                                "type": "user",
                                "user_id": "UKLV35EEM"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDave Ackley\u2019s paper Beyond Efficiency is three pages long. With just these three pages, he mounts a compelling argument against the conventional way we engineer software. Instead of inflexibly insisting upon correctness, maybe allow a lil slop? Instead of chasing peak performance with cache and clever tricks, maybe measure many times before you cut. So in this episode, we\u2019re putting every CEO in the guillotine\u2026 (oh, that stands for \u201ccorrectness and efficiency only\u201d, don\u2019t put us on a list)\u2026 and considering when, where, and how to do the robust thing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "U03CEGR3HSL",
                    "UCUSW7WVD",
                    "UFPRPSA4S",
                    "UMQ6LR9NZ",
                    "U05597GCDDK",
                    "U03R0B9U1GD",
                    "UA14TGLTC",
                    "U065G31NJ7Q",
                    "U06JCQL6ERJ",
                    "UP00ZLX6G",
                    "UMV4B97GT"
                ],
                "count": 11
            },
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "U05597GCDDK",
                    "U03R0B9U1GD",
                    "U0123H7JRDM",
                    "U06JCQL6ERJ",
                    "U04Q53X6P7W"
                ],
                "count": 6
            },
            {
                "name": "cake",
                "users": [
                    "U05597GCDDK",
                    "U03R0B9U1GD",
                    "U013ZLJARC7"
                ],
                "count": 3
            },
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U5STGTB3J",
        "thread_ts": "1704567764.240209",
        "root": {
            "user": "U5STGTB3J",
            "type": "message",
            "ts": "1704567764.240209",
            "client_msg_id": "49255280-6225-45b2-9c3a-99369120466f",
            "text": "A few weeks ago I started a new series of blog posts (or \u201cnewsletters\u201d, in Substack parlance) about *simplicity*:\n\n1 \u2022 _<https://stefanlesser.substack.com/p/on-simplicity|On simplicity>_ introduces the series with how my thinking about simplicity has changed over the years.\n2 \u2022 _<https://stefanlesser.substack.com/p/on-simplicity-2-meaning-ful-design|Meaning-ful design>_ connects simplicity to meaning making and coherence.\n3 \u2022 _<https://stefanlesser.substack.com/p/on-simplicity-3-familiarity|Familiarity>_ explores how complex things can be surprisingly simple and why we can\u2019t ignore context.\n4 \u2022 _<https://stefanlesser.substack.com/p/on-simplicity-4-reciprocal-realization|Reciprocal realization>_ frames design as a complex dynamic process of mutual adaptation between designer and designed object.\n\u2026 _I expect about four or five more posts coming after that, but I haven\u2019t written them yet, so I have no idea._ :slightly_smiling_face:\n\nA lot of this draws on 4E cognitive science, design theory, and philosophy. As such it may perhaps be less technical than you would expect it to be, although I try much harder in this series to relate it more directly to programming and software development than in <https://stefanlesser.substack.com/p/previously-a-recap|my last>.\n\nAnd that\u2019s why I post it here, today. I\u2019m hoping to learn if this resonates at all with a technical audience, or if this is still too abstract. I know we\u2019re all craving for the easily applicable _Top 10 Things to Make Things Simple_ (and number 6 will surprise you), but I have reason to believe that it\u2019s just not that\u2026 well\u2026 simple. But I think I\u2019m slowly making progress towards synthesizing something valuable, even if I can\u2019t express it as beautifully as I would like to. Yet.\n\nLet me know what you think, and please ask any questions you may have (in thread or via DM). Appreciate your feedback!",
            "team": "T5TCAFTA9",
            "thread_ts": "1704567764.240209",
            "reply_count": 3,
            "reply_users_count": 1,
            "latest_reply": "1709565265.469589",
            "reply_users": [
                "U5STGTB3J"
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "iSrt+",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "A few weeks ago I started a new series of blog posts (or \u201cnewsletters\u201d, in Substack parlance) about "
                                },
                                {
                                    "type": "text",
                                    "text": "simplicity",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ":\n\n1 \u2022 "
                                },
                                {
                                    "type": "link",
                                    "url": "https://stefanlesser.substack.com/p/on-simplicity",
                                    "text": "On simplicity",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " introduces the series with how my thinking about simplicity has changed over the years.\n2 \u2022 "
                                },
                                {
                                    "type": "link",
                                    "url": "https://stefanlesser.substack.com/p/on-simplicity-2-meaning-ful-design",
                                    "text": "Meaning-ful design",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " connects simplicity to meaning making and coherence.\n3 \u2022 "
                                },
                                {
                                    "type": "link",
                                    "url": "https://stefanlesser.substack.com/p/on-simplicity-3-familiarity",
                                    "text": "Familiarity",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " explores how complex things can be surprisingly simple and why we can\u2019t ignore context.\n4 \u2022 "
                                },
                                {
                                    "type": "link",
                                    "url": "https://stefanlesser.substack.com/p/on-simplicity-4-reciprocal-realization",
                                    "text": "Reciprocal realization",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " frames design as a complex dynamic process of mutual adaptation between designer and designed object.\n\u2026 "
                                },
                                {
                                    "type": "text",
                                    "text": "I expect about four or five more posts coming after that, but I haven\u2019t written them yet, so I have no idea. ",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "emoji",
                                    "name": "slightly_smiling_face",
                                    "unicode": "1f642"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nA lot of this draws on 4E cognitive science, design theory, and philosophy. As such it may perhaps be less technical than you would expect it to be, although I try much harder in this series to relate it more directly to programming and software development than in "
                                },
                                {
                                    "type": "link",
                                    "url": "https://stefanlesser.substack.com/p/previously-a-recap",
                                    "text": "my last"
                                },
                                {
                                    "type": "text",
                                    "text": ".\n\nAnd that\u2019s why I post it here, today. I\u2019m hoping to learn if this resonates at all with a technical audience, or if this is still too abstract. I know we\u2019re all craving for the easily applicable "
                                },
                                {
                                    "type": "text",
                                    "text": "Top 10 Things to Make Things Simple",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " (and number 6 will surprise you), but I have reason to believe that it\u2019s just not that\u2026 well\u2026 simple. But I think I\u2019m slowly making progress towards synthesizing something valuable, even if I can\u2019t express it as beautifully as I would like to. Yet.\n\nLet me know what you think, and please ask any questions you may have (in thread or via DM). Appreciate your feedback!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1709565265.469589",
        "client_msg_id": "9cb4916f-2747-4341-a051-12abb1ecc427",
        "text": "As I keep writing my article series _<https://stefanlesser.substack.com|On Simplicity\u2026>_ I\u2019d like to further improve it with feedback and have now set up a first online discussion for it.\nOn *Thursday, March 14th* we\u2019ll start with discussing the first post in the series. You don\u2019t need to be familiar with the whole series; just reading the first post is recommended but not required. Have a look at the <https://lu.ma/p1p4b52k|Luma invite> for the exact time in your time zone and to sign up (it\u2019s a free event via Zoom).\nWould be great to have some of you there!",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OTRiU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As I keep writing my article series "
                            },
                            {
                                "type": "link",
                                "url": "https://stefanlesser.substack.com",
                                "text": "On Simplicity\u2026",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I\u2019d like to further improve it with feedback and have now set up a first online discussion for it.\nOn "
                            },
                            {
                                "type": "text",
                                "text": "Thursday, March 14th",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we\u2019ll start with discussing the first post in the series. You don\u2019t need to be familiar with the whole series; just reading the first post is recommended but not required. Have a look at the "
                            },
                            {
                                "type": "link",
                                "url": "https://lu.ma/p1p4b52k",
                                "text": "Luma invite"
                            },
                            {
                                "type": "text",
                                "text": " for the exact time in your time zone and to sign up (it\u2019s a free event via Zoom).\nWould be great to have some of you there!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1709581263.015259",
        "client_msg_id": "b3020a97-c876-407f-b756-6c1c99090ec9",
        "text": "I was unaware of the Knuth response to Naur. Thanks for mentioning it! I found a copy at\n<https://tug.org/TUGboat/tb10-4/tb26complete.pdf|https://tug.org/TUGboat/tb10-4/tb26complete.pdf>\n\nKnuth invented a new kind of documentation, one that hardly anyone uses, but that is specifically designed for communicating how a program works to other human beings.\n\nKnuth has also expended great effort in the study of other people's code and programs, including code written in long dead programming languages.\n\nIf there is anyone in the world capable of transcending the limits described by Peter Naur, both by transmitting the theory of a program and by recreating it, it would be Donald Knuth. I see no reason to doubt the truth of Knuth's claims, but I also don't see them as contradicting Naur.\n\nNaur does not claim it is impossible to revive a program in practical terms, only that it is difficult, frustrating, and time-consuming, and \"may lead to a revived theory that differs from the one originally had by the program authors and so may contain discrepancies with the program text.\" I believe his point is that you cannot be certain the revived theory is the same as the original theory, however I do not have enough experience with literate programming to judge Knuth's claim that a well-written literate program might have a good chance of being accurately revived.\n\nCalling the stored program computer a \"von Neumann model\" does a tremendous disservice to J. Presper Eckert who invented and wrote up the idea around 6 months before von Neumann joined the ENIAC project. See the book A History of Computing in the\nTwentieth Century for a copy of the original memo.\n\nvon Neumann wrote a draft report that was widely shared informally (<https://en.m.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC|https://en.m.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC>), but to the best of my knowledge he never claimed the ideas were his. He was writing up the ENIAC team's plans for the EDVAC.\n\nY'all may also enjoy von Neumann's paper \"PROBABILISTIC LOGICS AND THE SYNTHESIS OF RELIABLE\nORGANISMS FROM UNRELIABLE COMPONENTS.\" <https://static.ias.edu/pitp/archive/2012files/Probabilistic_Logics.pdf|https://static.ias.edu/pitp/archive/2012files/Probabilistic_Logics.pdf>",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tbbu3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was unaware of the Knuth response to Naur. Thanks for mentioning it! I found a copy at\n"
                            },
                            {
                                "type": "link",
                                "url": "https://tug.org/TUGboat/tb10-4/tb26complete.pdf",
                                "text": "https://tug.org/TUGboat/tb10-4/tb26complete.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nKnuth invented a new kind of documentation, one that hardly anyone uses, but that is specifically designed for communicating how a program works to other human beings.\n\nKnuth has also expended great effort in the study of other people's code and programs, including code written in long dead programming languages.\n\nIf there is anyone in the world capable of transcending the limits described by Peter Naur, both by transmitting the theory of a program and by recreating it, it would be Donald Knuth. I see no reason to doubt the truth of Knuth's claims, but I also don't see them as contradicting Naur.\n\nNaur does not claim it is impossible to revive a program in practical terms, only that it is difficult, frustrating, and time-consuming, and \"may lead to a revived theory that differs from the one originally had by the program authors and so may contain discrepancies with the program text.\" I believe his point is that you cannot be certain the revived theory is the same as the original theory, however I do not have enough experience with literate programming to judge Knuth's claim that a well-written literate program might have a good chance of being accurately revived.\n\nCalling the stored program computer a \"von Neumann model\" does a tremendous disservice to J. Presper Eckert who invented and wrote up the idea around 6 months before von Neumann joined the ENIAC project. See the book A History of Computing in the\rTwentieth Century for a copy of the original memo.\n\nvon Neumann wrote a draft report that was widely shared informally ("
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC",
                                "text": "https://en.m.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC"
                            },
                            {
                                "type": "text",
                                "text": "), but to the best of my knowledge he never claimed the ideas were his. He was writing up the ENIAC team's plans for the EDVAC.\n\nY'all may also enjoy von Neumann's paper \"PROBABILISTIC LOGICS AND THE SYNTHESIS OF RELIABLE\nORGANISMS FROM UNRELIABLE COMPONENTS.\" "
                            },
                            {
                                "type": "link",
                                "url": "https://static.ias.edu/pitp/archive/2012files/Probabilistic_Logics.pdf",
                                "text": "https://static.ias.edu/pitp/archive/2012files/Probabilistic_Logics.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1709586600.804779",
        "client_msg_id": "a7d2bc73-0482-4fd1-b1ab-bf388adb2e8c",
        "text": "I was glad to hear the new discussion generated by Programming as Theory Building - both the episode and the paper. It is my favourite episode and was very influential on me!",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/ZaHg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was glad to hear the new discussion generated by Programming as Theory Building - both the episode and the paper. It is my favourite episode and was very influential on me!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1709606317.008129",
        "client_msg_id": "D3F0561E-7E52-4B78-B193-DE08F1822FD5",
        "text": "I appreciated the examples of non-distributed systems that benefit from robustness that had to do with being robust to _programmer error_. That type of error is harder to characterize than the random bit-flipping of cosmic rays because it\u2019s so human, but it\u2019s the type of error that I most often think of robustness in terms of.\n\nI didn\u2019t have as good a word for it before. \u201cDefensive programming\u201d doesn\u2019t really capture it.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hWuA+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I appreciated the examples of non-distributed systems that benefit from robustness that had to do with being robust to "
                            },
                            {
                                "type": "text",
                                "text": "programmer error",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ". That type of error is harder to characterize than the random bit-flipping of cosmic rays because it\u2019s so human, but it\u2019s the type of error that I most often think of robustness in terms of.\n\nI didn\u2019t have as good a word for it before. \u201cDefensive programming\u201d doesn\u2019t really capture it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04Q53X6P7W"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1709606916.754259",
        "client_msg_id": "D39C12E6-87D6-41A8-80C4-ED99CCB555B9",
        "text": "Implementing invariants directly like Jimmy mentioned. Sort the thing every time if it\u2019s supposed to be sorted, rather than trying to maintain that property indirectly. It\u2019s not just about doing the easiest thing first, or avoiding premature optimization. It\u2019s like, when I mess up code elsewhere, how do I make sure that this part won\u2019t make it worse.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NPozx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Implementing invariants directly like Jimmy mentioned. Sort the thing every time if it\u2019s supposed to be sorted, rather than trying to maintain that property indirectly. "
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " not just about doing the easiest thing first, or avoiding premature optimization"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It\u2019s like, when I mess up code elsewhere, how do I make sure that this part "
                            },
                            {
                                "type": "text",
                                "text": "won\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " make it worse."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1709606934.486319",
        "client_msg_id": "44550BB2-F8EC-46B7-8D61-30F2887B4A8D",
        "text": "I dunno, good episode.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9n1D5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I dunno, good episode."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U03R0B9U1GD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U04Q53X6P7W",
        "type": "message",
        "ts": "1709701992.163029",
        "client_msg_id": "6AA0C45E-5C7D-43BE-97F1-418B659135FE",
        "text": "I still haven\u2019t read the paper but one aspect of the episode I found interesting was that having simpler software avoids bugs. It seems like this is being conflated with the idea of sacrificing efficiency for robustness. Where sometimes the simpler code/algorithm is in fact less robust and the more robust implementation requires more code (and potentially more bugs).",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T42BB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I still haven\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " read the paper but one aspect of the episode I found interesting was that having simpler software avoids bugs. It seems like this is being conflated with the idea of sacrificing efficiency for robustness"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Where sometimes the simpler code/algorithm is in fact less robust and the more robust implementation requires more code (and potentially more bugs)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05BRNRAC4V"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04Q53X6P7W",
        "type": "message",
        "ts": "1709702334.819469",
        "client_msg_id": "DAF8D64C-C294-4558-91F7-FAAE706A3081",
        "text": "I\u2019d be interested in trying to disentangle the robustness from the simplicity dimensions when making tradeoffs. So finding new ways to structure software to be inherently more robust to bugs seems compelling yet difficult.\n\nOverall the contention between correctness, efficiency, and robustness seems to arise from the viewpoint that correctness is a binary proposition rather than a probabilistic measurement of the values we want our software to achieve. If we have a myopic view of correctness we\u2019re leaving all the tradeoffs off the table.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RMH+H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019d be interested in trying to disentangle the robustness from the simplicity dimensions when making tradeoffs. So finding new ways to structure software to be inherently more robust to bugs seems compelling yet difficult.\n\nOverall the contention between correctness, efficiency, and robustness seems to arise from the viewpoint that correctness is a binary proposition rather than a probabilistic measurement of the values we want our software to achieve. If we have a myopic view of correctness "
                            },
                            {
                                "type": "text",
                                "text": "we\u2019re"
                            },
                            {
                                "type": "text",
                                "text": " leaving all the tradeoffs off the table."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05BRNRAC4V"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1709702451.625319",
        "client_msg_id": "665A04E4-6296-4074-9A69-8EF06FE1351D",
        "text": "Something we ought to consider \u2014 was <https://en.m.wikipedia.org/wiki/Stuxnet|stuxnet> robust-first?",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "95tsF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something we ought to consider \u2014 was "
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/Stuxnet",
                                "text": "stuxnet"
                            },
                            {
                                "type": "text",
                                "text": " robust-first?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "radioactive_sign",
                "users": [
                    "U04Q53X6P7W"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1709702527.989889",
        "client_msg_id": "A42EE6D4-9253-4480-9594-AE0437C219E7",
        "text": "And yeah \u2014 I'm no friend to binary views of correctness! Glad to be reminded of that.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ymMZH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And yeah \u2014 I'm no friend to binary views of correctness! Glad to be reminded of that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "coin",
                "users": [
                    "U04Q53X6P7W"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1709713087.015829",
        "client_msg_id": "89cebf73-b810-491a-943f-8f7bdc7407f2",
        "text": "<@UC2A2ARPT> loved the musical interlude and the mix on the quotation effect seemed perfectly dialed in.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M548V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " loved the musical interlude and the mix on the quotation effect seemed perfectly dialed in."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02LHNW0VLP",
        "type": "message",
        "ts": "1709865940.709629",
        "client_msg_id": "E2337A67-B97A-4C6B-8ABB-D1205B1720BA",
        "text": "Reminds me of how analog computers can be more robust because they arent susceptible to things like accidental, cosmic ray style, bit flips causing a major change in the value of the computation. ",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Hzfk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of how analog computers can be more robust because they arent susceptible to things like accidental, cosmic ray style, bit flips causing a major change in the value of the computation. "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04Q53X6P7W",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1709867278.877809",
        "client_msg_id": "F25C7265-8CA7-4C88-A903-58332011AE5A",
        "text": "Right. Though they then need to be robust against, say, results being influenced by ambient temperature :)",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kflAm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Though they then need to be robust against, say, results being influenced by ambient temperature :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1709867704.323789",
        "client_msg_id": "d4a76127-9056-4f75-b8e9-7a339e1d5858",
        "text": "Deutsch discusses digital versus analogue at length in _The Beginning Of Infinity_, here's a bit from that chapter-\n&gt; ... during lengthy computations, the accumulation of errors due to things like imperfectly constructed components, thermal fluctuations, and random outside influences makes analogue computers wander off the intended computational path. This may sound like a minor or parochial consideration. But it is quite the opposite. Without error-correction all information processing, and hence all knowledge-creation, is necessarily bounded. ... So all universal computers are digital; and all use error-correction with the same basic logic that I have just described, though with many different implementations. Thus Babbage\u2019s computers assigned only ten different meanings to the whole continuum of angles at which a cogwheel might be oriented. Making the representation digital in that way allowed the cogs to carry out error-correction automatically: after each step, any slight drift in the orientation of the wheel away from its ten ideal positions would immediately be corrected back to the nearest one as it clicked into place. Assigning meanings to the whole continuum of angles would nominally have allowed each wheel to carry (infinitely) more information; but, in reality, information that cannot be reliably retrieved is not really being stored.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/c6ty",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Deutsch discusses digital versus analogue at length in "
                            },
                            {
                                "type": "text",
                                "text": "The Beginning Of Infinity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", here's a bit from that chapter-\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... during lengthy computations, the accumulation of errors due to things like imperfectly constructed components, thermal fluctuations, and random outside influences makes analogue computers wander off the intended computational path. This may sound like a minor or parochial consideration. But it is quite the opposite. Without error-correction all information processing, and hence all knowledge-creation, is necessarily bounded. ... So all universal computers are digital; and all use error-correction with the same basic logic that I have just described, though with many different implementations. Thus Babbage\u2019s computers assigned only ten different meanings to the whole continuum of angles at which a cogwheel might be oriented. Making the representation digital in that way allowed the cogs to carry out error-correction automatically: after each step, any slight drift in the orientation of the wheel away from its ten ideal positions would immediately be corrected back to the nearest one as it clicked into place. Assigning meanings to the whole continuum of angles would nominally have allowed each wheel to carry (infinitely) more information; but, in reality, information that cannot be reliably retrieved is not really being stored."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1709888955.862329",
        "client_msg_id": "9ed42ec9-8c12-4153-95c7-5fadcb36c57c",
        "text": "An analog virtue / limitation is that you cannot have a huge tower of abstraction because noise accumulates: indirection has a direct cost!",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "le08w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An analog virtue / limitation is that you cannot have a huge tower of abstraction because noise accumulates: indirection has a direct cost!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1709907617.349939",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1709907659.000000"
        },
        "client_msg_id": "FE3877D0-E34B-4CC1-A908-460287C4497B",
        "text": "Relevant reading folks might enjoy: <https://arxiv.org/pdf/1811.09989.pdf|The dry history of liquid computers> ",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sLiAl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Relevant reading folks might enjoy: "
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/pdf/1811.09989.pdf",
                                "text": "The dry history of liquid computers"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP69Y6VJ7",
        "type": "message",
        "ts": "1710120685.544579",
        "client_msg_id": "99eebc41-07b4-4abf-8c6f-1cc1ab9eb3b7",
        "text": "Thanks for the great episode. \"The Fiverr Vaccine\" was super funny. And I loved reading the paper.\n\nI started out robustbrained. I was ready to salute the robustness flag. I started memorizing the robustness national anthem (which is twice as long as it needs to be).\n\nBut now it feels like that's missing the point...\n\nI should be saluting the local first flag! I should sing the permacomputing national anthem and get my hair done at the convivial computing salon! These are actual value systems that imagine a different world and say \"this would be better\". Robustness is a means to an end, just like efficiency.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709521905.644279",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9A2fo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the great episode. \"The Fiverr Vaccine\" was super funny. And I loved reading the paper.\n\nI started out robustbrained. I was ready to salute the robustness flag. I started memorizing the robustness national anthem (which is twice as long as it needs to be).\n\nBut now it feels like that's missing the point...\n\nI should be saluting the local first flag! I should sing the permacomputing national anthem and get my hair done at the convivial computing salon! These are actual value systems that imagine a different world and say \"this would be better\". Robustness is a means to an end, just like efficiency."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]