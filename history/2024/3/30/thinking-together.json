[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1711793448.647909",
        "client_msg_id": "1286d7b3-fc9c-4cf6-bc0a-d81f72a39a29",
        "text": "My sister asked whether her middle-school son should pick the choice of a block programming language (like Scratch), JavaScript, or C# for a class he's in.  I claimed that he'll learn the same fundamentals with blocks minus the frustration, tedium, tea ceremony, and incantations associated with the others.  To prove that the block program has the real creativity and that moving to the others is practically automatable, I took may favorite Scratch program <https://scratch.mit.edu/projects/605658/> and had Chat translate it into JavaScript and C# <https://chat.openai.com/share/02215935-c0b8-4fc9-9bf9-94f0b3fab613>.  The results seemed promising.  Chat even made helpful observations:\n&gt; Translating the same Scratch program to C# requires a different approach because C# is often used in desktop applications, and there's no direct equivalent of the Canvas API like in web technologies. However, you can use Windows Forms or WPF (Windows Presentation Foundation) for graphical applications in C#. Here, I'll provide an example using Windows Forms to create a simple drawing application that mimics the Scratch program's behavior.\nIf you check my conversation, you'll see I start asking what a \"partial class\" is having never heard the term.  Chat parroted:\n&gt; Using partial classes in this way provides flexibility. You can start with all your code in one file for simplicity. Then, if the class grows or you decide to use the designer, you can easily refactor the designer-generated code into its own file without changing the class's functionality. This approach keeps your custom code separate from the auto-generated code, making it easier to read and maintain.\nI explained that every language, every tool has many such conventions. You learn the ones reverent to whatever you're doing right now, but learning them all is impossible. Instead the real skill is knowing that you don't know and being able to find out quickly. We're lucky that a these things are obscure, come up often, and are discussed on the Web. Thus LLMs are especially good at helping with dumb programming problems.\n\nSo why use the established languages besides Chat knowing them well?  I thought of three reasons:\n\u2022 Expressivity \u2014 Blocks will get a beginner pretty far, but you'll find the others have constructs that helpful for saying things that would be very hard with blocks.  You won't appreciate scratch until you feel the itch.\n\u2022 Causal Powers \u2014 The block system will let you do things in class you'll learn core ideas, but the blocks themselves won't work everywhere.  JavaScript, on the other hand, works all over on the web, and C# has its own ecosystem.  Often there's bridging, but also one or other language will be the most natural one for certain kinds of work.\n\u2022 Scale \u2014 With big and medium sized programs being done with text, editors for wrangling it, and version control for keeping track of it exist.  They can we weirdly powerful and janky.  But you're liable to start having a hard time keeping track of blocks when it takes a dozen or more screens to fit them all.",
        "team": "T5TCAFTA9",
        "thread_ts": "1711793448.647909",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1711905259.932759",
        "reply_users": [
            "U0378MDUG1Y"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/nVoP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My sister asked whether her middle-school son should pick the choice of a block programming language (like Scratch), JavaScript, or C# for a class he's in.  I claimed that he'll learn the same fundamentals with blocks minus the frustration, tedium, tea ceremony, and incantations associated with the others.  To prove that the block program has the real creativity and that moving to the others is practically automatable, I took may favorite Scratch program "
                            },
                            {
                                "type": "link",
                                "url": "https://scratch.mit.edu/projects/605658/"
                            },
                            {
                                "type": "text",
                                "text": " and had Chat translate it into JavaScript and C# "
                            },
                            {
                                "type": "link",
                                "url": "https://chat.openai.com/share/02215935-c0b8-4fc9-9bf9-94f0b3fab613"
                            },
                            {
                                "type": "text",
                                "text": ".  The results seemed promising.  Chat even made helpful observations:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Translating the same Scratch program to C# requires a different approach because C# is often used in desktop applications, and there's no direct equivalent of the Canvas API like in web technologies. However, you can use Windows Forms or WPF (Windows Presentation Foundation) for graphical applications in C#. Here, I'll provide an example using Windows Forms to create a simple drawing application that mimics the Scratch program's behavior."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you check my conversation, you'll see I start asking what a \"partial class\" is having never heard the term.  Chat parroted:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Using partial classes in this way provides flexibility. You can start with all your code in one file for simplicity. Then, if the class grows or you decide to use the designer, you can easily refactor the designer-generated code into its own file without changing the class's functionality. This approach keeps your custom code separate from the auto-generated code, making it easier to read and maintain."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I explained that every language, every tool has many such conventions. You learn the ones reverent to whatever you're doing right now, but learning them all is impossible. Instead the real skill is knowing that you don't know and being able to find out quickly. We're lucky that a these things are obscure, come up often, and are discussed on the Web. Thus LLMs are especially good at helping with dumb programming problems.\n\nSo why use the established languages besides Chat knowing them well?  I thought of three reasons:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Expressivity \u2014 Blocks will get a beginner pretty far, but you'll find the others have constructs that helpful for saying things that would be very hard with blocks.  You won't appreciate scratch until you feel the itch."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Causal Powers \u2014 The block system will let you do things in class you'll learn core ideas, but the blocks themselves won't work everywhere.  JavaScript, on the other hand, works all over on the web, and C# has its own ecosystem.  Often there's bridging, but also one or other language will be the most natural one for certain kinds of work."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Scale \u2014 With big and medium sized programs being done with text, editors for wrangling it, and version control for keeping track of it exist.  They can we weirdly powerful and janky.  But you're liable to start having a hard time keeping track of blocks when it takes a dozen or more screens to fit them all."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U06RN1241N3"
                ],
                "count": 1
            },
            {
                "name": "heartpulse",
                "users": [
                    "UMV4B97GT"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1711905259.932759",
        "client_msg_id": "A0A6FEFB-5016-4EC6-A481-A53395439148",
        "text": "I think there is a project that explores that translation <https://x.com/moenig/status/1601890041499996161?s=20|https://x.com/moenig/status/1601890041499996161?s=20>",
        "team": "T5TCAFTA9",
        "thread_ts": "1711793448.647909",
        "parent_user_id": "UA14TGLTC",
        "attachments": [
            {
                "image_url": "https://pbs.twimg.com/tweet_video_thumb/FjsOXAyWAAQuAGC.jpg:large",
                "image_width": 888,
                "image_height": 500,
                "image_bytes": 24418,
                "from_url": "https://x.com/moenig/status/1601890041499996161?s=20",
                "service_icon": "http://abs.twimg.com/favicons/twitter.3.ico",
                "id": 1,
                "original_url": "https://x.com/moenig/status/1601890041499996161?s=20",
                "fallback": "X (formerly Twitter): Jens M\u00f6nig (@moenig) on X",
                "text": "Did you know that since a decade ago Snap! can translate blocks to any textual grammar? I\u2019m now experimenting with backmapping arbitrary grammars to identify blocks from text code. Just now went live on a line-of-code basis: <https://t.co/lLMGD1c1dY>",
                "title": "Jens M\u00f6nig (@moenig) on X",
                "title_link": "https://x.com/moenig/status/1601890041499996161?s=20",
                "service_name": "X (formerly Twitter)"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tagJ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there is a project that explores that translation "
                            },
                            {
                                "type": "link",
                                "url": "https://x.com/moenig/status/1601890041499996161?s=20",
                                "text": "https://x.com/moenig/status/1601890041499996161?s=20"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]