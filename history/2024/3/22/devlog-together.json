[
    {
        "subtype": "thread_broadcast",
        "user": "UJBAJNFLK",
        "thread_ts": "1708955618.202579",
        "root": {
            "user": "UJBAJNFLK",
            "type": "message",
            "ts": "1708955618.202579",
            "client_msg_id": "09435a51-cfea-499e-a53f-b4aa0a589c0a",
            "text": "Moldable development is coming to Common Lisp: <https://codeberg.org/khinsen/clog-inspector>",
            "team": "T5TCAFTA9",
            "thread_ts": "1708955618.202579",
            "reply_count": 1,
            "reply_users_count": 1,
            "latest_reply": "1711100979.557299",
            "reply_users": [
                "UJBAJNFLK"
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "image_url": "https://codeberg.org/avatars/81e0f0f0f0b27d785c72d168dcbf6f17",
                    "image_width": 290,
                    "image_height": 290,
                    "image_bytes": 1329,
                    "from_url": "https://codeberg.org/khinsen/clog-inspector",
                    "service_icon": "https://codeberg.org/favicon.ico",
                    "id": 1,
                    "original_url": "https://codeberg.org/khinsen/clog-inspector",
                    "fallback": "Codeberg.org: clog-inspector",
                    "text": "A moldable Common Lisp object inspector based on CLOG",
                    "title": "clog-inspector",
                    "title_link": "https://codeberg.org/khinsen/clog-inspector",
                    "service_name": "Codeberg.org"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "c4Sbj",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Moldable development is coming to Common Lisp: "
                                },
                                {
                                    "type": "link",
                                    "url": "https://codeberg.org/khinsen/clog-inspector"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1711100979.557299",
        "client_msg_id": "9c012125-cab0-41fe-8bdd-928f3df4fed1",
        "text": "I have been making slow but steady progress on my moldable inspector. Views are now generated lazily (on demand), and many display details have been improved.\n\nLessons learned:\n\u2022 CSS is a big mess.\n\u2022 Common Lisp is a bit less of a mess, but still more than I'd like.\nThe second comment applies mostly to corners of Common Lisp that I had never looked into before because I was writing application rather than systems code. Writing inspector views for the built-in classes made me look into the details such as the inner working of packages and classes. Why do you get the slots of a class via a specific API (the MetaObject Protocol, aka MOP) but the symbols of a package via a special clause of the LOOP macro? Historical accidents of course.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ywVmO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been making slow but steady progress on my moldable inspector. Views are now generated lazily (on demand), and many display details have been improved.\n\nLessons learned:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "CSS is a big mess."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Common Lisp is a bit less of a mess, but still more than I'd like."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe second comment applies mostly to corners of Common Lisp that I had never looked into before because I was writing application rather than systems code. Writing inspector views for the built-in classes made me look into the details such as the inner working of packages and classes. Why do you get the slots of a class via a specific API (the MetaObject Protocol, aka MOP) but the symbols of a package via a special clause of the LOOP macro? Historical accidents of course."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    }
]