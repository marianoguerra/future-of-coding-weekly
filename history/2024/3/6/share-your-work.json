[
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1709730829.580339",
        "client_msg_id": "d2b0fae4-c751-4194-8c3b-3c302ecda195",
        "text": "Alrighty, here's the post I mentioned I'd make in <#CC2JRGVLK|introduce-yourself>:\nI want to create a computing ecosystem that solves most of the problems in what I call 'unregulated I/O'.\nIt is quite possibly mad. Or it might work, and I will be surprised.\nIt takes design cues from <https://en.wikipedia.org/wiki/Oberon_(operating_system)|Oberon>, <https://github.com/google/flatbuffers|FlatBuffers>, <https://ipfs.tech/|IPFS>, <https://git-scm.com/|Git>, <https://www.rust-lang.org/|Rust>.\nIt also sounds dangerously close to the kind of \"great idea\" a compsci undergrad would come out with. Yet, I am running out of reasons why this isn't possible (at the very least). This is why I want your opinions :sweat_smile:\nThat's all I'll say here - rest is in the :thread:",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1710150360.473539",
        "reply_users": [
            "U06MKD39QR4",
            "UJBAJNFLK",
            "U85HCL7JP"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hf969",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alrighty, here's the post I mentioned I'd make in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CC2JRGVLK"
                            },
                            {
                                "type": "text",
                                "text": ":\nI want to create a computing ecosystem that solves most of the problems in what I call 'unregulated I/O'.\nIt is quite possibly mad. Or it might work, and I will be surprised.\nIt takes design cues from "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Oberon_(operating_system)",
                                "text": "Oberon"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/google/flatbuffers",
                                "text": "FlatBuffers"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://ipfs.tech/",
                                "text": "IPFS"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://git-scm.com/",
                                "text": "Git"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://www.rust-lang.org/",
                                "text": "Rust"
                            },
                            {
                                "type": "text",
                                "text": ".\nIt also sounds dangerously close to the kind of \"great idea\" a compsci undergrad would come out with. Yet, I am running out of reasons why this isn't possible (at the very least). This is why I want your opinions "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "\nThat's all I'll say here - rest is in the "
                            },
                            {
                                "type": "emoji",
                                "name": "thread",
                                "unicode": "1f9f5"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U051DSNTHCJ",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1709730873.830819",
        "client_msg_id": "4696e901-aa8d-49c4-9715-446dea426cb4",
        "text": "So, I've got a problem with this thing I called 'unregulated I/O'. Here's what I mean by this:\n\n\u2022 Unix set the standard of modelling files as byte arrays in the 70s.\n\u2022 Likewise, storage I/O, IPC and RPC is mostly done via byte array. There are some exceptions - for example:\n    \u25e6 The OS normally abstracts away most packet handling up to the transport layer.\n    \u25e6 Windows has dabbled with wacky ports (COM1 et al.)\n\u2022 This means that application programs have the responsibility of validating the binary data loaded via I/O.\n    \u25e6 Improper validation accounts for the vast majority of attack vectors (especially if we include memory management bugs).\n    \u25e6 Most modern applications employ widely-used libraries to minimise the amount of custom validation they have to perform, which is fair, because more eyes are on the libraries.\nNevertheless, SQL injection and buffer overflows still happen in 2024. Exploit accessibility seems (to me) likely to increase with the employment of LLMs.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZIGbd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, I've got a problem with this thing I called 'unregulated I/O'. Here's what I mean by this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Unix set the standard of modelling files as byte arrays in the 70s."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Likewise, storage I/O, IPC and RPC is mostly done via byte array. There are some exceptions - for example:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The OS normally abstracts away most packet handling up to the transport layer."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Windows has dabbled with wacky ports (COM1 et al.)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This means that application programs have the responsibility of validating the binary data loaded via I/O."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Improper validation accounts for the vast majority of attack vectors (especially if we include memory management bugs)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most modern applications employ widely-used libraries to minimise the amount of custom validation they have to perform, which is fair, because more eyes are on the libraries."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNevertheless, SQL injection and buffer overflows still happen in 2024. Exploit accessibility seems (to me) likely to increase with the employment of LLMs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1709730888.708659",
        "client_msg_id": "a225d29e-2653-42ae-9eee-2213fb47fc70",
        "text": "I'm proposing that the Unix model should be replaced with something more secure by design:\n\n\u2022 An abstract data model should be established for I/O:\n    \u25e6 The OS should abstract away a reasonable amount of validation.\n        \u25aa\ufe0e Syscalls in applications would be typed. For Rustaceans, I/O calls would yield something like a `std::io::Result&lt;T&gt;`.\n    \u25e6 The available types should include those that application programmers want to get I/O'd data into ASAP: scalars, arrays, maps, tuples/structs/enums (the latter of which should be <https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html|Rusty>).\n    \u25e6 We would certainly require encapsulation, and (possibly) higher-kinded facilities like mixins.\n    \u25e6 *All* data in this system should be represented this way, including programs themselves.\n        \u25aa\ufe0e This means that program source code is \"already an AST\".\n        \u25aa\ufe0e Plain text would not be used for source code.\n        \u25aa\ufe0e UI development for these 'structured languages' must be improved. (maybe I should've said Scratch was an influence? :smirk:)\n        \u25aa\ufe0e These ASTs should be transformed by the OS into machine code (which can also be represented with this model: a `.s` file becomes an array of instruction enums).\n        \u25aa\ufe0e Eventually, the OS running this should be able to self-host in this way.\n    \u25e6 Applications should barely ever concern themselves with any kind of binary data, though this is of course impossible to prevent in a Turing-complete environment.\n\u2022 Data, as stored, should be content-addressable:\n    \u25e6 <https://www.youtube.com/watch?v=lKXe3HUG2l4|Joe Armstrong> has plenty of reasons why this is a good idea (especially for greenfield).\n    \u25e6 The equivalent of a 'filesystem' for this ecosystem would instead be what is effectively a hashmap with wear leveling.\n        \u25aa\ufe0e Or, <https://www.theregister.com/2022/08/01/optane_intel_cancellation/|Optane> could be revived (some hope). Would be nice to design around this possibility.\n    \u25e6 'Files', now more accurately 'objects', are stored by a hash of their contents.\n        \u25aa\ufe0e Important note: this is _not_ object-oriented computing. We don't want to be piping vtables.\n    \u25e6 The need for encapsulation means that our 'filesystem' effectively becomes a <https://en.wikipedia.org/wiki/Merkle_tree|Merkle tree>.\n    \u25e6 In order to prevent massive hash cascades when writing to storage, we would need to employ mutable references (in a similar manner to symlinks).\n    \u25e6 Fast random-access updates to very large objects could be achieved with a hasher suited to incremental verification, such as <https://github.com/BLAKE3-team/BLAKE3|BLAKE3>.\n",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4/wlL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm proposing that the Unix model should be replaced with something more secure by design:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "An abstract data model should be established for I/O:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The OS should abstract away a reasonable amount of validation."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Syscalls in applications would be typed. For Rustaceans, I/O calls would yield something like a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "std::io::Result<T>",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 2,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The available types should include those that application programmers want to get I/O'd data into ASAP: scalars, arrays, maps, tuples/structs/enums (the latter of which should be "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html",
                                        "text": "Rusty"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We would certainly require encapsulation, and (possibly) higher-kinded facilities like mixins."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "All",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " data in this system should be represented this way, including programs themselves."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This means that program source code is \"already an AST\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Plain text would not be used for source code."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "UI development for these 'structured languages' must be improved. (maybe I should've said Scratch was an influence? "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "smirk",
                                        "unicode": "1f60f"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "These ASTs should be transformed by the OS into machine code (which can also be represented with this model: a "
                                    },
                                    {
                                        "type": "text",
                                        "text": ".s",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " file becomes an array of instruction enums)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Eventually, the OS running this should be able to self-host in this way."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 2,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Applications should barely ever concern themselves with any kind of binary data, though this is of course impossible to prevent in a Turing-complete environment."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Data, as stored, should be content-addressable:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://www.youtube.com/watch?v=lKXe3HUG2l4",
                                        "text": "Joe Armstrong"
                                    },
                                    {
                                        "type": "text",
                                        "text": " has plenty of reasons why this is a good idea (especially for greenfield)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The equivalent of a 'filesystem' for this ecosystem would instead be what is effectively a hashmap with wear leveling."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Or, "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.theregister.com/2022/08/01/optane_intel_cancellation/",
                                        "text": "Optane"
                                    },
                                    {
                                        "type": "text",
                                        "text": " could be revived (some hope). Would be nice to design around this possibility."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 2,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "'Files', now more accurately 'objects', are stored by a hash of their contents."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Important note: this is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "not",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " object-oriented computing. We don't want to be piping vtables."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 2,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The need for encapsulation means that our 'filesystem' effectively becomes a "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Merkle_tree",
                                        "text": "Merkle tree"
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In order to prevent massive hash cascades when writing to storage, we would need to employ mutable references (in a similar manner to symlinks)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Fast random-access updates to very large objects could be achieved with a hasher suited to incremental verification, such as "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://github.com/BLAKE3-team/BLAKE3",
                                        "text": "BLAKE3"
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1709730914.140699",
        "client_msg_id": "cb15b4fb-3f86-431f-bfd9-3b2aa1c95d4f",
        "text": "Here are some fun implications of such a design:\n\n\u2022 New programming languages would be required.\n\u2022 Deduplication of data becomes trivial.\n    \u25e6 On the subject, we'd need to be mindful of granular we are with the storage of heavily-encapsulated objects.\n    \u25e6 Denormalisation should probably happen when eg. objects' raw data is less than the size of a hash digest (at the very least).\n\u2022 Transfer of large objects over a network can be heavily optimised. Downloads effectively become a `git pull`.\n\u2022 Core web technologies such as HTTP, HTML, CSS &amp; JavaScript are no longer kosher, because they are based on plaintext.\n    \u25e6 \"This obsoletes the web\" is a silly thing to say, but could be fun in the pitch.\n    \u25e6 All of these formats _could_ be transformed into the strongly-typed model presented above, though.\n\u2022 Tabs vs spaces is no longer a concern, because formatting is no longer a concern for plaintext. That's now the UI's responsibility.\n\u2022 Entire classes of attack should be all but eliminated (eg. injection).\n\u2022 The types used in the data model can themselves be represented in the data model, and we can relatively easily implement internationalisation for code:\n    \u25e6 Here's a horrible illustration: `Enum Type { i8, i16, i32, i64, u8, u16, u32, u64, Array&lt;Type&gt;, Map&lt;Type, Type&gt;, Tuple&lt;Type, ...&gt;, Enum&lt;Array&lt;Type&gt;&gt; }`\n    \u25e6 These types don't have canon names, and I don't think they should.\n    \u25e6 They do have hashes, though. So we can refer to types by their hash.\n    \u25e6 We can then map human translations for these types and their encapsulated members in any number of natural languages: `Map Translations&lt;Tuple&lt;[Locale, Type]&gt;, Array&lt;String&gt;&gt;`\n",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FKm+A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here are some fun implications of such a design:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "New programming languages would be required."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Deduplication of data becomes trivial."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "On the subject, we'd need to be mindful of granular we are with the storage of heavily-encapsulated objects."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Denormalisation should probably happen when eg. objects' raw data is less than the size of a hash digest (at the very least)."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Transfer of large objects over a network can be heavily optimised. Downloads effectively become a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "git pull",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Core web technologies such as HTTP, HTML, CSS & JavaScript are no longer kosher, because they are based on plaintext."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"This obsoletes the web\" is a silly thing to say, but could be fun in the pitch."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "All of these formats "
                                    },
                                    {
                                        "type": "text",
                                        "text": "could",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " be transformed into the strongly-typed model presented above, though."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Tabs vs spaces is no longer a concern, because formatting is no longer a concern for plaintext. That's now the UI's responsibility."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Entire classes of attack should be all but eliminated (eg. injection)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The types used in the data model can themselves be represented in the data model, and we can relatively easily implement internationalisation for code:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Here's a horrible illustration: "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Enum Type { i8, i16, i32, i64, u8, u16, u32, u64, Array<Type>, Map<Type, Type>, Tuple<Type, ...>, Enum<Array<Type>> }",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "These types don't have canon names, and I don't think they should."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "They do have hashes, though. So we can refer to types by their hash."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We can then map human translations for these types and their encapsulated members in any number of natural languages: "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Map Translations<Tuple<[Locale, Type]>, Array<String>>",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1709730939.830439",
        "client_msg_id": "f71d030a-9277-4817-ad70-debc364a369b",
        "text": "I appreciate this is a lot, so if you've taken the time to read this, thank you :heart:\nPlease shoot with your questions and comments. I've got some visual explainers for this stuff lying around which I'll probably add too.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R49BU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I appreciate this is a lot, so if you've taken the time to read this, thank you "
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            },
                            {
                                "type": "text",
                                "text": "\nPlease shoot with your questions and comments. I've got some visual explainers for this stuff lying around which I'll probably add too."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "U85HCL7JP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1709731166.131149",
        "client_msg_id": "57f8a367-0729-41c1-9d67-3a2a16fe2a7c",
        "text": "...oh, and: much as I've searched, I can't find a project that's attempting to create an entire ecosystem out of these principles (even if it's just using VMs rather than an entire OS). If you know of any project doing this, please let me know, because I suspect they're probably doing a better job.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QwwXy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...oh, and: much as I've searched, I can't find a project that's attempting to create an entire ecosystem out of these principles (even if it's just using VMs rather than an entire OS). If you know of any project doing this, please let me know, because I suspect they're probably doing a better job."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MT9KDU7Q",
        "type": "message",
        "ts": "1709743834.765159",
        "edited": {
            "user": "U06MT9KDU7Q",
            "ts": "1709743899.000000"
        },
        "client_msg_id": "fc3058fe-5a63-492f-88d1-590cf25d9d05",
        "text": "If you\u2019ve wondered:\n\u2022 why the only copilot we have is for VSCode\n\u2022 why not every app is end-user programmable\nI wondered the same thing, and I\u2019ve built (<https://omnipilot.ai>), an AI copilot that works everywhere on macOS.\n\nSpecifically it lets you invoke GPT to type into any app (*particularly interesting to me is it works great in Xcode*), can also autocomplete text in any app, and lets you chat with GPT-4 with context from your recent apps. I\u2019d really appreciate any feedback or first impressions!\n\nRe end-user programmability I\u2019m also working on making it more possible for people to make little \u201cautomations\u201d on their computer, whether it\u2019s adding buttons to Finder to convert files or recording little AI-enhanced macros.\n\nSome specific questions I\u2019d love feedback:\n\u2022 How often do you find yourself wanting help editing code outside of a Github Copilot-enabled environment? What are those situations or apps?\n\u2022 What about text, do you wish you had a copilot for text too?\n\u2022 What do you think of the \u201cworks everywhere\u201d approach vs. a dedicated app?\n\u2022 Do the AI-macros sound appealing or meh?\n\u2022 Any thoughts on the landing page copy/design?\nI\u2019m also happy to answer any other questions. Thanks in advance for sharing your thoughts, it\u2019s super helpful in shaping the product!",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "reply_count": 11,
        "reply_users_count": 3,
        "latest_reply": "1709806741.796559",
        "reply_users": [
            "U03HC3XHZGW",
            "U06MT9KDU7Q",
            "U06MJU6LBN3"
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8QWx8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you\u2019ve wondered:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "why the only copilot we have is for VSCode"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "why not every app is end-user programmable"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI wondered the same thing, and I\u2019ve built ("
                            },
                            {
                                "type": "link",
                                "url": "https://omnipilot.ai"
                            },
                            {
                                "type": "text",
                                "text": "), an AI copilot that works everywhere on macOS.\n\nSpecifically it lets you invoke GPT to type into any app ("
                            },
                            {
                                "type": "text",
                                "text": "particularly interesting to me is it works great in Xcode",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), can also autocomplete text in any app, and lets you chat with GPT-4 with context from your recent apps. I\u2019d really appreciate any feedback or first impressions!\n\nRe end-user programmability I\u2019m also working on making it more possible for people to make little \u201cautomations\u201d on their computer, whether it\u2019s adding buttons to Finder to convert files or recording little AI-enhanced macros.\n\nSome specific questions I\u2019d love feedback:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "How often do you find yourself wanting help editing code outside of a Github Copilot-enabled environment? What are those situations or apps?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What about text, do you wish you had a copilot for text too?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What do you think of the \u201cworks everywhere\u201d approach vs. a dedicated app?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Do the AI-macros sound appealing or meh?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Any thoughts on the landing page copy/design?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI\u2019m also happy to answer any other questions. Thanks in advance for sharing your thoughts, it\u2019s super helpful in shaping the product!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U0296ACR13M",
                    "U06J22WCP8T"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1709744998.875189",
        "edited": {
            "user": "U03HC3XHZGW",
            "ts": "1709745040.000000"
        },
        "client_msg_id": "54d8f2f6-3f29-4833-af75-b083fb34f58d",
        "text": "Does it work in the terminal? That\u2019s a big place I want autocomplete that I don\u2019t currently have it.\n\nedit: I have now checked out the landing page and see that it does :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xBb5U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does it work in the terminal? That\u2019s a big place I want autocomplete that I don\u2019t currently have it.\n\nedit: I have now checked out the landing page and see that it does "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1709745146.128849",
        "client_msg_id": "62ba9100-5f74-4967-95ef-fc4d57067826",
        "text": "Super cool. How do you build context? is it always based on the current text buffer?",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M1Rry",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Super cool. How do you build context? is it always based on the current text buffer?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1709745505.757389",
        "client_msg_id": "b799be53-27dc-4512-b11d-9e0f2cc2ad32",
        "text": "It would be super cool if the clipboard contents were always appended to context. That way you could google/chatgpt a question, highlight and copy the answer, and then focus in your code editor etc. and get more relevant completions. In general I\u2019m interested in UI that allows people to manage context more explicitly",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a5Tt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would be super cool if the clipboard contents were always appended to context. That way you could google/chatgpt a question, highlight and copy the answer, and then focus in your code editor etc. and get more relevant completions. In general I\u2019m interested in UI that allows people to manage context more explicitly"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MT9KDU7Q",
        "type": "message",
        "ts": "1709746187.658829",
        "client_msg_id": "b5d32924-77cf-4707-a3cb-068868c02e80",
        "text": "Yes! Builds context based on what\u2019s in the current app",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "19wQO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! Builds context based on what\u2019s in the current app"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MT9KDU7Q",
        "type": "message",
        "ts": "1709746201.668819",
        "client_msg_id": "a2d5e4c1-f121-4b51-97be-916f59e9840e",
        "text": "when you select text and press Option Space",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fhpd1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "when you select text and press Option Space"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MT9KDU7Q",
        "type": "message",
        "ts": "1709746208.087869",
        "client_msg_id": "cfaf43b6-ab04-40c9-b264-1e5387c4e46a",
        "text": "then that text goes into the context",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AAiTN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "then that text goes into the context"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03HC3XHZGW"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F06N5FD15CM",
                "created": 1709746355,
                "timestamp": 1709746355,
                "name": "Screen slack.mp4",
                "title": "Screen slack.mp4",
                "mimetype": "video/mp4",
                "filetype": "mp4",
                "pretty_type": "MPEG 4 Video",
                "user": "U06MT9KDU7Q",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 542420,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "transcription": {
                    "status": "none"
                },
                "mp4": "https://files.slack.com/files-tmb/T5TCAFTA9-F06N5FD15CM-a9ee649ad4/screen_slack.mp4",
                "url_private": "https://files.slack.com/files-tmb/T5TCAFTA9-F06N5FD15CM-a9ee649ad4/screen_slack.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F06N5FD15CM/download/screen_slack.mp4",
                "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F06N5FD15CM-a9ee649ad4/file.m3u8?_xcb=d03fd",
                "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9ODcyNzAwLEFWRVJBR0UtQkFORFdJRFRIPTg3MjcwMCxDT0RFQ1M9ImF2YzEuNjQwMDI4LG1wNGEuNDAuNSIsUkVTT0xVVElPTj0xMzU2eDEwODAsRlJBTUUtUkFURT0yOS45NzAKZGF0YTphcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybDtiYXNlNjQsSTBWWVZFMHpWUW9qUlZoVUxWZ3RWa1ZTVTBsUFRqb3pDaU5GV0ZRdFdDMVVRVkpIUlZSRVZWSkJWRWxQVGpvM0NpTkZXRlF0V0MxTlJVUkpRUzFUUlZGVlJVNURSVG94Q2lORldGUXRXQzFRVEVGWlRFbFRWQzFVV1ZCRk9sWlBSQW9qUlZoVVNVNUdPall1TURBMkxBcG9kSFJ3Y3pvdkwyWnBiR1Z6TG5Oc1lXTnJMbU52YlM5bWFXeGxjeTEwYldJdlZEVlVRMEZHVkVFNUxVWXdOazQxUmtReE5VTk5MV0U1WldVMk5EbGhaRFF2Wm1sc1pWOUlYekkyTkY4eE9USXdlREV3T0RCZk5qVXdNRXRDVUZOZk4xRldRbEpmTURBd01ERXVkSE1LSTBWWVZFbE9Sam93TGprek5Dd0thSFIwY0hNNkx5OW1hV3hsY3k1emJHRmpheTVqYjIwdlptbHNaWE10ZEcxaUwxUTFWRU5CUmxSQk9TMUdNRFpPTlVaRU1UVkRUUzFoT1dWbE5qUTVZV1EwTDJacGJHVmZTRjh5TmpSZk1Ua3lNSGd4TURnd1h6WTFNREJMUWxCVFh6ZFJWa0pTWHpBd01EQXlMblJ6Q2lORldGUXRXQzFGVGtSTVNWTlVDZz09CiNFWFQtWC1TVFJFQU0tSU5GOkJBTkRXSURUSD01NTk0MjksQVZFUkFHRS1CQU5EV0lEVEg9NTU5NDI5LENPREVDUz0iYXZjMS42NDAwMWYsbXA0YS40MC41IixSRVNPTFVUSU9OPTkwNHg3MjAsRlJBTUUtUkFURT0yOS45NzAKaHR0cHM6Ly9maWxlcy5zbGFjay5jb20vZmlsZXMtdG1iL1Q1VENBRlRBOS1GMDZONUZEMTVDTS1hOWVlNjQ5YWQ0L2ZpbGVfSF8yNjRfMTI4MHg3MjBfMzUwMEtCUFNfN1FWQlIubTN1OAo=",
                "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F06N5FD15CM-a9ee649ad4/screen_slack_trans.mp4",
                "duration_ms": 6940,
                "media_display_type": "video",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F06N5FD15CM-a9ee649ad4/screen_slack_thumb_video.jpeg",
                "thumb_video_w": 1720,
                "thumb_video_h": 1370,
                "permalink": "https://futureofcoding.slack.com/files/U06MT9KDU7Q/F06N5FD15CM/screen_slack.mp4",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F06N5FD15CM-bad00b63f3",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U06MT9KDU7Q",
        "display_as_bot": false,
        "type": "message",
        "ts": "1709746362.086959",
        "client_msg_id": "32a54000-1f4e-4238-8d3d-359b307f6a68",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q"
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1709746609.779139",
        "client_msg_id": "0fdfcd7a-484f-4381-b8a9-7187e1c9e6d4",
        "text": "Awesome, excited to try it out!",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kdsAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Awesome, excited to try it out!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1709746806.845039",
        "client_msg_id": "2e19dcda-c7c8-43ae-8daa-fca1a0182a51",
        "text": "I see the main problem of your project in the wish to design a complex system from scratch. Such projects have basically always failed, for running out of steam before accomplishing anything useful.\n\nOne of the insights from John Gall's \"Systems Bible\" (highly recommended!) is (chapter 11):  \"A complex system that works is invariably found to have evolved from a simple system that worked\" with the corollary that \"A complex system designed from scratch never works and cannot be made to work. you have to start over, beginning with a working simple system.\"\n\nThat's in fact how today's computing systems evolved over a few decades. The result is a bit of a mess, but it works. And it's so big by now that it cannot be replaced, only evolved.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zknT5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see the main problem of your project in the wish to design a complex system from scratch. Such projects have basically always failed, for running out of steam before accomplishing anything useful.\n\nOne of the insights from John Gall's \"Systems Bible\" (highly recommended!) is (chapter 11):  \"A complex system that works is invariably found to have evolved from a simple system that worked\" with the corollary that \"A complex system designed from scratch never works and cannot be made to work. you have to start over, beginning with a working simple system.\"\n\nThat's in fact how today's computing systems evolved over a few decades. The result is a bit of a mess, but it works. And it's so big by now that it cannot be replaced, only evolved."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06MT9KDU7Q",
        "type": "message",
        "ts": "1709747478.694699",
        "client_msg_id": "da19f1a0-ab51-4a91-b385-baee91bd6c8d",
        "text": "also! you can also @tag windows that you\u2019ve had open recently to add them to the context in the option space chat",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aYWpX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also! you can also @tag windows that you\u2019ve had open recently to add them to the context in the option space chat"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MT9KDU7Q",
        "type": "message",
        "ts": "1709747498.984949",
        "client_msg_id": "481a74ff-9ba3-49f9-87e8-86093e127e8e",
        "text": "and any recently selected text too",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MVl7L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and any recently selected text too"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MJU6LBN3",
        "type": "message",
        "ts": "1709806741.796559",
        "client_msg_id": "a5b6eb0a-e80a-48ed-8cc5-28e8a054f286",
        "text": "For the \"copilot in the shell\" usecase, there is <https://butterfi.sh/|https://butterfi.sh/>",
        "team": "T5TCAFTA9",
        "thread_ts": "1709743834.765159",
        "parent_user_id": "U06MT9KDU7Q",
        "attachments": [
            {
                "image_url": "https://butterfi.sh/shell3.gif",
                "image_width": 1200,
                "image_height": 600,
                "image_bytes": 2011466,
                "from_url": "https://butterfi.sh/",
                "service_icon": "https://butterfi.sh/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://butterfi.sh/",
                "fallback": "Butterfish - A shell with AI superpowers",
                "text": "Add easy, context aware AI prompting with OpenAI to bash and zsh shells",
                "title": "Butterfish - A shell with AI superpowers",
                "title_link": "https://butterfi.sh/",
                "service_name": "butterfi.sh"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oWpdP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the \"copilot in the shell\" usecase, there is "
                            },
                            {
                                "type": "link",
                                "url": "https://butterfi.sh/",
                                "text": "https://butterfi.sh/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1710038518.826549",
        "client_msg_id": "19A29DD8-B3B6-4F56-849F-D6CB6E9CDC67",
        "text": "Are you familiar with <https://www.unison-lang.org|unison lang> ? As you mentioned they aren\u2019t attempting to create an entire ecosystem, but I think has a lot of overlap with your ideas",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "attachments": [
            {
                "from_url": "https://www.unison-lang.org/",
                "service_icon": "https://www.unison-lang.org/favicon.ico",
                "thumb_url": "https://unison-lang.org/assets/unison-social.png",
                "thumb_width": 1200,
                "thumb_height": 1200,
                "id": 1,
                "original_url": "https://www.unison-lang.org",
                "fallback": "Unison | A friendly, statically-typed, functional programming language from the future \u00b7 Unison programming language",
                "text": "A friendly programming language from the future.",
                "title": "Unison | A friendly, statically-typed, functional programming language from the future \u00b7 Unison programming language",
                "title_link": "https://www.unison-lang.org/",
                "service_name": "unison-lang.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7V9C4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you familiar with "
                            },
                            {
                                "type": "link",
                                "url": "https://www.unison-lang.org",
                                "text": "unison lang"
                            },
                            {
                                "type": "text",
                                "text": " ? As you mentioned "
                            },
                            {
                                "type": "text",
                                "text": "they aren\u2019t"
                            },
                            {
                                "type": "text",
                                "text": " attempting to create an entire ecosystem, but I think has a lot of overlap with your ideas"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1710057375.774569",
        "client_msg_id": "8b004dcd-9021-43f8-a309-99de974ab87a",
        "text": "Unison and IPFS are indeed the two main existing projects that have the most overlap. Neither tries a from-scratch approach. But unfortunately, the two don't really coexist well either, having their own content-addressing scheme each.\nAnother language in that space is <https://scrapscript.org/|scrapscript>.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+cS3q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unison and IPFS are indeed the two main existing projects that have the most overlap. Neither tries a from-scratch approach. But unfortunately, the two don't really coexist well either, having their own content-addressing scheme each.\nAnother language in that space is "
                            },
                            {
                                "type": "link",
                                "url": "https://scrapscript.org/",
                                "text": "scrapscript"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06MKD39QR4",
        "type": "message",
        "ts": "1710150360.473539",
        "client_msg_id": "cd4d16c8-066c-4a9a-9087-1ca411bf1acf",
        "text": "Thanks <@UJBAJNFLK> <@U85HCL7JP> - those are exactly what I'm looking for :pray:\n\nI actually don't want to have to \"make something big\", because yeah, I've also seen countless examples of things of this scale failing (or worse, leaving a stain on its surroundings... (cough) Windows Registry). I don't want to have to make an OS, but having the entire software ecosystem playing to the same conceptual tune is going to make things all the more sound - if that makes sense.\n\nMaking a VM of it, in the same way as Unison or Scrapscript are doing (if I'm understanding them correctly), is where I'd want to start too. So I think I'm going to reach out to the authors of both and ask what they think about scaling them up.",
        "team": "T5TCAFTA9",
        "thread_ts": "1709730829.580339",
        "parent_user_id": "U06MKD39QR4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2rl0I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " - those are exactly what I'm looking for "
                            },
                            {
                                "type": "emoji",
                                "name": "pray",
                                "unicode": "1f64f"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI actually don't want to have to \"make something big\", because yeah, I've also seen countless examples of things of this scale failing (or worse, leaving a stain on its surroundings... (cough) Windows Registry). I don't want to have to make an OS, but having the entire software ecosystem playing to the same conceptual tune is going to make things all the more sound - if that makes sense.\n\nMaking a VM of it, in the same way as Unison or Scrapscript are doing (if I'm understanding them correctly), is where I'd want to start too. So I think I'm going to reach out to the authors of both and ask what they think about scaling them up."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    }
]