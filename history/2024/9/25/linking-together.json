[
    {
        "text": "Hey future of coding folks,\n\nI want to advertise the idea of non-abelian spreadsheets. The idea has slowly drifted into the center of my thinking this last year. I'm not sure if its a good idea or not. It kinda depends on how you build on it. So for now I just want to convey the general idea.\n\nPicture in your mind a normal spreadsheet. In some sense it is 'abelian' (commutative) because from any cell going down and then right is the same as going right and then going down. If we make it non-abelian, so the order we go right and down matters, we get something like the picture attached below.\n\nIf you tilt your head slightly you may recognize it as the infinite binary tree. So an infinite binary tree is just the non-abelian version of the usual grid-based spreadsheet. The nodes of the tree are the cells. We can also think of finite binary trees as the analogue of tables.\n\nA key feature of regular spreadsheets is the ability to write formulas with relative references. For instance in a regular spreadsheet you can use relative references so a formula always refers to the cell to the right of the given one, and in a tree you can write a formula that always refers to the cell you get by going down and to the right from the given cell.\n\nAnother key feature of spreadsheets is that you put stuff in cells! And we do that with trees all the time. For example if we write down the syntax tree for (a+b)*c what we are doing is putting each of the symbols into a cell of the tree.\n\nWe can push this analogy to account for all trees (in particular all syntax trees). This tree can't really be visualized because it branches infinitely at each node. It is much easier to describe algebraically. I'll use the term 'free monoid on a set X', which if you aren't in the know just means the set of strings made out of the elements of X regarded as distinct characters. The infinite binary tree, or more precisely the set of nodes of the infinite binary tree, can be described as the free monoid on a two element set {L, R}. e.g. RLL describes the node you get by going right, then left, and then left again. Now let X_n denote a set with n elements and X the disjoint union of the X_n for all n. It suffices to take the free monoid on X.\n\nA reasonable question at this point is what is the interface for an infinitely branching tree? You would think it is even worse than an infinite dimensional grid, which is the abelian version. But if we are restricting ourselves to trees coming from symbolic expressions then for the most part we already have the interface. It is just the symbolic expressions we would have written down in the first place.\n\nI'll leave it at that.",
        "files": [
            {
                "id": "F07NH9CRN31",
                "created": 1727247255,
                "timestamp": 1727247255,
                "name": "unnamed.png",
                "title": "unnamed.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFPRPSA4S",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 16669,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07NH9CRN31/unnamed.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07NH9CRN31/download/unnamed.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 291,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 388,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 582,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 646,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 776,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NH9CRN31-ff3be74698/unnamed_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 828,
                "original_w": 1084,
                "original_h": 876,
                "thumb_tiny": "AwAmADDTPSkGSO1B6GlHSgBOfajnOOKWkYEkY4oAT5s44p1FFAAeRQOgopq7SAO+KAHUUirgDpmloAKKKKACkAwPWlooAKKKKACiiigD/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UFPRPSA4S/F07NH9CRN31/unnamed.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07NH9CRN31-f5f24c4c5a",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sO9yD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey future of coding folks,\n\nI want to advertise the idea of non-abelian spreadsheets. The idea has slowly drifted into the center of my thinking this last year. I'm not sure if its a good idea or not. It kinda depends on how you build on it. So for now I just want to convey the general idea.\n\nPicture in your mind a normal spreadsheet. In some sense it is 'abelian' (commutative) because from any cell going down and then right is the same as going right and then going down. If we make it non-abelian, so the order we go right and down matters, we get something like the picture attached below.\n\nIf you tilt your head slightly you may recognize it as the infinite binary tree. So an infinite binary tree is just the non-abelian version of the usual grid-based spreadsheet. The nodes of the tree are the cells. We can also think of finite binary trees as the analogue of tables.\n\nA key feature of regular spreadsheets is the ability to write formulas with relative references. For instance in a regular spreadsheet you can use relative references so a formula always refers to the cell to the right of the given one, and in a tree you can write a formula that always refers to the cell you get by going down and to the right from the given cell.\n\nAnother key feature of spreadsheets is that you put stuff in cells! And we do that with trees all the time. For example if we write down the syntax tree for (a+b)*c what we are doing is putting each of the symbols into a cell of the tree.\n\nWe can push this analogy to account for all trees (in particular all syntax trees). This tree can't really be visualized because it branches infinitely at each node. It is much easier to describe algebraically. I'll use the term 'free monoid on a set X', which if you aren't in the know just means the set of strings made out of the elements of X regarded as distinct characters. The infinite binary tree, or more precisely the set of nodes of the infinite binary tree, can be described as the free monoid on a two element set {L, R}. e.g. RLL describes the node you get by going right, then left, and then left again. Now let X_n denote a set with n elements and X the disjoint union of the X_n for all n. It suffices to take the free monoid on X.\n\nA reasonable question at this point is what is the interface for an infinitely branching tree? You would think it is even worse than an infinite dimensional grid, which is the abelian version. But if we are restricting ourselves to trees coming from symbolic expressions then for the most part we already have the interface. It is just the symbolic expressions we would have written down in the first place.\n\nI'll leave it at that."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1727247298.811129",
        "client_msg_id": "68409b2a-9008-465b-b3d8-cfa1bbdc82ef",
        "thread_ts": "1727247298.811129",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1727319046.341889",
        "reply_users": [
            "UBKNXPBAB",
            "U07CGRNH6S2",
            "U05UK5T7LPP",
            "UFPRPSA4S"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "text": "If you want to go in all four directions (like down, right, and then up) you'll need to have a four-ways infinite tree, like the diagram shown here of the free group on two generators.\n\nI don't know if this is relevant to what you're getting at, cuz I don't know what you're getting at.",
        "files": [
            {
                "id": "F07NY6LM690",
                "created": 1727251422,
                "timestamp": 1727251422,
                "name": "F2 Cayley Graph.png",
                "title": "F2 Cayley Graph.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 18140,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07NY6LM690/f2_cayley_graph.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07NY6LM690/download/f2_cayley_graph.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY6LM690-80de6caa86/f2_cayley_graph_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY6LM690-80de6caa86/f2_cayley_graph_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY6LM690-80de6caa86/f2_cayley_graph_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY6LM690-80de6caa86/f2_cayley_graph_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY6LM690-80de6caa86/f2_cayley_graph_160.png",
                "original_w": 522,
                "original_h": 522,
                "thumb_tiny": "AwAwADDTooooAjdgysA3T9aEYKqgt1/SlKKFY4H+FIqo2OBx/hTGSUUUUhEbOGVgGxj9aWMgRjLdu/akdAqsQuc/pSxgGMZXt370DFYqUPIxikBVUyMdKVgAh4HShQpUcDGKOgaDZDmM8447UK4VVBbOf0pZBiM4Xt27UioGVSVwR+tAElFFFAhhdGVhkf40B0UKMj/CkdQqsQvX9KEUMqkryP1pjJKKKKQj/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F07NY6LM690/f2_cayley_graph.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07NY6LM690-0ef756c285",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WtN4D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you want to go in all four directions (like down, right, and then up) you'll need to have a four-ways infinite tree, like the diagram shown here of the free group on two generators.\n\nI don't know if this is relevant to what you're getting at, cuz I don't know what you're getting at."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1727251595.837229",
        "client_msg_id": "25cd777b-764a-4857-a72a-ed677a0cc0a8",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UFPRPSA4S"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U07CGRNH6S2",
        "type": "message",
        "ts": "1727273410.894979",
        "client_msg_id": "6a640140-e1e8-495e-a18d-33c6207ba7ab",
        "text": "What would be a simple and real example of this?",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FM9n9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What would be a simple and real example of this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1727287101.819389",
        "client_msg_id": "d455a184-ca49-4000-b3f0-61e89737a04d",
        "text": "Oh rad, I see why it's the free monoid, since the parse tree is built up by concatenation (no inverse required).",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FmIqB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh rad, I see why it's the free monoid, since the parse tree is built up by concatenation (no inverse required)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1727289035.179019",
        "client_msg_id": "99000b61-b197-4daf-a605-a45814e81ff4",
        "text": "I agree that there's a few different thesis statements here that have accreted over time and are now duking it out. I like the claim that parse trees are readily represented by spreadsheets, if only we throw out commutativity.\n\nFor my part, I'd like the tree itself to work as a paper tool, e.g. if I'm authoring a generative grammar in a Tracery-style IDE with progressive disclosure. <https://artbot.club/> is playing with these ideas, but I hit overwhelm much faster than I would in a (non)commutative spreadsheet.",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q3mDG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that there's a few different thesis statements here that have accreted over time and are now duking it out. I like the claim that parse trees are readily represented by spreadsheets, if only we throw out commutativity.\n\nFor my part, I'd like the tree itself to work as a paper tool, e.g. if I'm authoring a generative grammar in a Tracery-style IDE with progressive disclosure. "
                            },
                            {
                                "type": "link",
                                "url": "https://artbot.club/"
                            },
                            {
                                "type": "text",
                                "text": " is playing with these ideas, but I hit overwhelm much faster than I would in a (non)commutative spreadsheet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1727294460.365299",
        "client_msg_id": "da3487dd-03e7-4481-9ed6-1703fca60d3c",
        "text": "I created a wiki page about <https://wiki.futureofcoding.org/Propagators/|Propagators> any resource you would add? Do you know of related ideas?",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1727355489.576509",
        "reply_users": [
            "U03R0B9U1GD",
            "U0378MDUG1Y",
            "U06BUK2M2RH",
            "U02PUDETGRW",
            "UBN9AFS0N"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1727355489.576509",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hm8rG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I created a wiki page about "
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.futureofcoding.org/Propagators/",
                                "text": "Propagators"
                            },
                            {
                                "type": "text",
                                "text": " any resource you would add? Do you know of related ideas?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U05UK5T7LPP",
                    "U06BUK2M2RH",
                    "U013ZLJARC7",
                    "UFPRPSA4S",
                    "UJBAJNFLK"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1727297038.698439",
        "client_msg_id": "e6c69bd8-6d5a-45d5-b832-6c82ac7d860b",
        "text": "do scoped propagators count?\n<https://www.orionreed.com/posts/scoped-propagators|https://www.orionreed.com/posts/scoped-propagators>",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "image_url": "https://www.orionreed.com/website-embed.png",
                "image_width": 800,
                "image_height": 418,
                "image_bytes": 28423,
                "from_url": "https://www.orionreed.com/posts/scoped-propagators",
                "service_icon": "https://www.orionreed.com/favicon.ico?v=4",
                "id": 1,
                "original_url": "https://www.orionreed.com/posts/scoped-propagators",
                "fallback": "Orion Reed",
                "text": "My research investigates the intersection of computing, human-system interfaces, and emancipatory politics. I am interested in the potential of computing as a medium for thought, as a tool for collective action, and as a means of emancipation.",
                "title": "Orion Reed",
                "title_link": "https://www.orionreed.com/posts/scoped-propagators",
                "service_name": "orionreed.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FVg6T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do scoped propagators count?\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.orionreed.com/posts/scoped-propagators",
                                "text": "https://www.orionreed.com/posts/scoped-propagators"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1727306287.764839",
        "client_msg_id": "795E0719-0179-4F9A-AA6B-39F089662842",
        "text": "Cc <@U06BUK2M2RH> ",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dvUiV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cc "
                            },
                            {
                                "type": "user",
                                "user_id": "U06BUK2M2RH"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1727306362.463589",
        "client_msg_id": "275123A8-3F2D-4B3E-96A4-3B22E71ED431",
        "text": "Dennis is working on a propagator network project called holograph \n\n<https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1722025110960059|https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1722025110960059>",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1722025110960059",
                "ts": "1722025110.960059",
                "author_id": "U06BUK2M2RH",
                "channel_id": "C03RR0W5DGC",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C03RR0W5DGC",
                        "ts": "1722025110.960059",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "y435Y",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Hello- little update on "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "http://www.holograph.so",
                                                    "text": "www.holograph.so"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " - formerly known as the "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1716413598853019",
                                                    "text": "propagator simulator"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "- I am working on performance had had the nerdiest proud moment ever and figured of all people, ya'll would appreciate it.\n\nI built a propagation speed profiler in holograph to test how fast propagation was occurring for a little recursively incrementing loop (in the grey box). Im using a buffer to collect and average the values over time and another buffer to collect and display averages as a chart. You can see the propagation speed and compare it with the total Propagations Per Second (PPS in the top left). Before this work i was at a hard cap of 60 pps and now total pps often gets over 300. Still a long road ahead but it feels like a big win right now "
                                                },
                                                {
                                                    "type": "emoji",
                                                    "name": "tada",
                                                    "unicode": "1f389"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n\nIn any case, this example demonstrates major stuff added since my first post here:\n"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "rich_text_list",
                                            "elements": [
                                                {
                                                    "type": "rich_text_section",
                                                    "elements": [
                                                        {
                                                            "type": "text",
                                                            "text": "Get and set shape properties"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "rich_text_section",
                                                    "elements": [
                                                        {
                                                            "type": "text",
                                                            "text": "Trigger click events"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "rich_text_section",
                                                    "elements": [
                                                        {
                                                            "type": "text",
                                                            "text": "Dashed arrows that don't fire propagators"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "rich_text_section",
                                                    "elements": [
                                                        {
                                                            "type": "text",
                                                            "text": "Async functions/fetch/await syntax"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "rich_text_section",
                                                    "elements": [
                                                        {
                                                            "type": "text",
                                                            "text": "Lots of cool examples to explore- including some made my folk here :)"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "style": "bullet",
                                            "indent": 0,
                                            "offset": 0,
                                            "border": 0
                                        },
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "\nHope ya'll enjoyed the update! If ya'll find anything wonky or have ideas let me know !"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "files": [
                    {
                        "id": "F07ECFZPEJG",
                        "created": 1722024135,
                        "timestamp": 1722024135,
                        "name": "ezgif-3-b2fdc5e7db.gif",
                        "title": "ezgif-3-b2fdc5e7db.gif",
                        "mimetype": "image/gif",
                        "filetype": "gif",
                        "pretty_type": "GIF",
                        "user": "U06BUK2M2RH",
                        "user_team": "T5TCAFTA9",
                        "editable": false,
                        "size": 1746763,
                        "mode": "hosted",
                        "is_external": false,
                        "external_type": "",
                        "is_public": true,
                        "public_url_shared": false,
                        "display_as_bot": false,
                        "username": "",
                        "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07ECFZPEJG/ezgif-3-b2fdc5e7db.gif",
                        "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07ECFZPEJG/download/ezgif-3-b2fdc5e7db.gif",
                        "media_display_type": "unknown",
                        "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_64.png",
                        "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_80.png",
                        "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_360.png",
                        "thumb_360_w": 360,
                        "thumb_360_h": 352,
                        "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_480.png",
                        "thumb_480_w": 480,
                        "thumb_480_h": 470,
                        "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_160.png",
                        "thumb_360_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_360.gif",
                        "thumb_480_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_480.gif",
                        "original_w": 600,
                        "original_h": 587,
                        "deanimate": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_deanimate.png",
                        "deanimate_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F07ECFZPEJG-aae03be753/ezgif-3-b2fdc5e7db_deanimate_gif.png",
                        "thumb_tiny": "AwAuADDR289aMUHOeBRyQe1ABijJzxijtTWB3ZAoAdz7UtMAPp+tPoAKKKKAEpGPuRTqaX7c0AN59TTwMdTmmDk9RxT80AIx59xQGA4oKknPFGw+o/KgBcj1ppx2xTgCD1paAI8/SngetLgelFAH/9k=",
                        "permalink": "https://futureofcoding.slack.com/files/U06BUK2M2RH/F07ECFZPEJG/ezgif-3-b2fdc5e7db.gif",
                        "permalink_public": "https://slack-files.com/T5TCAFTA9-F07ECFZPEJG-9d16d604dc",
                        "comments_count": 0,
                        "is_starred": false,
                        "has_rich_preview": false,
                        "file_access": "visible"
                    }
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1722025110960059",
                "fallback": "[July 26th, 2024 1:18 PM] dhansen909: Hello- little update on <http://www.holograph.so|www.holograph.so> - formerly known as the <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1716413598853019|propagator simulator>- I am working on performance had had the nerdiest proud moment ever and figured of all people, ya'll would appreciate it.\n\nI built a propagation speed profiler in holograph to test how fast propagation was occurring for a little recursively incrementing loop (in the grey box). Im using a buffer to collect and average the values over time and another buffer to collect and display averages as a chart. You can see the propagation speed and compare it with the total Propagations Per Second (PPS in the top left). Before this work i was at a hard cap of 60 pps and now total pps often gets over 300. Still a long road ahead but it feels like a big win right now :tada:\n\nIn any case, this example demonstrates major stuff added since my first post here:\n\u2022 Get and set shape properties\n\u2022 Trigger click events\n\u2022 Dashed arrows that don't fire propagators\n\u2022 Async functions/fetch/await syntax\n\u2022 Lots of cool examples to explore- including some made my folk here :)\nHope ya'll enjoyed the update! If ya'll find anything wonky or have ideas let me know !",
                "text": "Hello- little update on <http://www.holograph.so|www.holograph.so> - formerly known as the <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1716413598853019|propagator simulator>- I am working on performance had had the nerdiest proud moment ever and figured of all people, ya'll would appreciate it.\n\nI built a propagation speed profiler in holograph to test how fast propagation was occurring for a little recursively incrementing loop (in the grey box). Im using a buffer to collect and average the values over time and another buffer to collect and display averages as a chart. You can see the propagation speed and compare it with the total Propagations Per Second (PPS in the top left). Before this work i was at a hard cap of 60 pps and now total pps often gets over 300. Still a long road ahead but it feels like a big win right now :tada:\n\nIn any case, this example demonstrates major stuff added since my first post here:\n\u2022 Get and set shape properties\n\u2022 Trigger click events\n\u2022 Dashed arrows that don't fire propagators\n\u2022 Async functions/fetch/await syntax\n\u2022 Lots of cool examples to explore- including some made my folk here :)\nHope ya'll enjoyed the update! If ya'll find anything wonky or have ideas let me know !",
                "author_name": "Dennis Hansen",
                "author_link": "https://futureofcoding.slack.com/team/U06BUK2M2RH",
                "author_icon": "https://avatars.slack-edge.com/2023-12-28/6396121022742_9eac202d45a2827e9fa6_48.jpg",
                "author_subname": "Dennis Hansen",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vSv6h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dennis is working on a propagator network project called holograph \n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1722025110960059",
                                "text": "https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1722025110960059"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06BUK2M2RH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1727308688.988659",
        "client_msg_id": "9AD1293A-A460-44BE-BF15-447514FA7C72",
        "text": "Thanks for the mention <@U0378MDUG1Y> . Also Edward Kmett did a Haskell implementation  <https://github.com/ekmett/propagators|https://github.com/ekmett/propagators>",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kcuiT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the mention "
                            },
                            {
                                "type": "user",
                                "user_id": "U0378MDUG1Y"
                            },
                            {
                                "type": "text",
                                "text": " . Also Edward Kmett did a Haskell implementation  "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/ekmett/propagators",
                                "text": "https://github.com/ekmett/propagators"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1727308758.096799",
        "client_msg_id": "F474BA1F-5DC9-4EC7-B243-FF9B2B10C4B0",
        "text": "Also this was great <https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp|https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp>",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/JXOOO9MLvhs/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/JXOOO9MLvhs?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Thomas Kristensen - Propagators in Clojure\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp",
                "fallback": "YouTube Video: Thomas Kristensen - Propagators in Clojure",
                "title": "Thomas Kristensen - Propagators in Clojure",
                "title_link": "https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp",
                "author_name": "ClojureTV",
                "author_link": "https://www.youtube.com/@ClojureTV",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yvhlr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also this was great "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp",
                                "text": "https://youtu.be/JXOOO9MLvhs?si=uNEe547eGFaAjVDp"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1727315013.354569",
        "client_msg_id": "88f02a8f-7ff1-438d-a63e-594901a0873a",
        "text": "<@UBKNXPBAB> I was trying to avoid 'getting at anything'. I definitely have ideas for what you can do with this kind of a spreadsheet, but I wanted to convey the idea of this kind of a spreadsheet independently.",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iLytW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " I was trying to avoid 'getting at anything'. I definitely have ideas for what you can do with this kind of a spreadsheet, but I wanted to convey the idea of this kind of a spreadsheet independently."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1727315556.741189",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1727315773.000000"
        },
        "client_msg_id": "bd086449-e39b-4bab-bf9f-cc68e3d66043",
        "text": "But the diagram you included is totally another example of a 'non-abelian' spreadsheet I have in mind. In general you can model a spreadsheet on any monoid* (so the cells of the spreadsheet are the elements of the monoid) and still have relative references. If you take the free group on two generators then it is also a monoid and it can be visualized as that diagram. For fun: if you take the abelian group (Z/nZ) \\times (Z/mZ), the corresponding spreadsheet can be visualized on a torus. I don't know why you would ever do that, but I think its kinda amusing.\n(* not 100% sure of this, but it works for a handful)",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZsrG4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But the diagram you included is totally another example of a 'non-abelian' spreadsheet I have in mind. In general you can model a spreadsheet on any monoid* (so the cells of the spreadsheet are the elements of the monoid) and still have relative references. If you take the free group on two generators then it is also a monoid and it can be visualized as that diagram. For fun: if you take the abelian group (Z/nZ) \\times (Z/mZ), the corresponding spreadsheet can be visualized on a torus. I don't know why you would ever do that, but I think its kinda amusing.\n(* not 100% sure of this, but it works for a handful)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1727316086.657349",
        "client_msg_id": "2b4f12bc-49aa-4741-8086-eab80591ea98",
        "text": "<@U07CGRNH6S2> The example with (a+b)*c is the closest I have to 'simple and real'.",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qycrG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U07CGRNH6S2"
                            },
                            {
                                "type": "text",
                                "text": " The example with (a+b)*c is the closest I have to 'simple and real'."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1727319046.341889",
        "client_msg_id": "c354dd1f-9122-4384-b04a-e49258619f8e",
        "text": "<@U05UK5T7LPP> Its been a while since I've seen generative grammar stuff. Cool link!",
        "team": "T5TCAFTA9",
        "thread_ts": "1727247298.811129",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7843w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05UK5T7LPP"
                            },
                            {
                                "type": "text",
                                "text": " Its been a while since I've seen generative grammar stuff. Cool link!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@U06BUK2M2RH> looks like you have a small typo in here",
        "files": [
            {
                "id": "F07NY3FHCTY",
                "created": 1727334864,
                "timestamp": 1727334864,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U02PUDETGRW",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 51877,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F07NY3FHCTY/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F07NY3FHCTY/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY3FHCTY-42f232d695/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY3FHCTY-42f232d695/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY3FHCTY-42f232d695/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 129,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY3FHCTY-42f232d695/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 172,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY3FHCTY-42f232d695/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F07NY3FHCTY-42f232d695/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 258,
                "original_w": 764,
                "original_h": 274,
                "thumb_tiny": "AwARADC8fvndvxxjGf6UDzNq4x0Gc9aGH7w5Dn0xSfveMY6DOfWgBGMoPQHjpk0fvPQfgTTv3uBwM/U0n77/AGf1oAVVkBzhc465Jpf3ueifmaT97g8DPbk0qb93zY6dqAH0UUUAFFFFABRRRQB//9k=",
                "permalink": "https://futureofcoding.slack.com/files/U02PUDETGRW/F07NY3FHCTY/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F07NY3FHCTY-6ac7b13546",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U02PUDETGRW",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EGaUs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U06BUK2M2RH"
                            },
                            {
                                "type": "text",
                                "text": " looks like you have a small typo in here"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1727334869.513839",
        "client_msg_id": "e582bfca-cd83-48fd-bde5-07d0a3f8a225",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06BUK2M2RH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1727355489.576509",
        "client_msg_id": "046d1f7a-16bf-41f9-8743-4e9c147ada35",
        "text": "<@U03R0B9U1GD> I will add it as related work",
        "team": "T5TCAFTA9",
        "thread_ts": "1727294460.365299",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SY/jM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " I will add it as related work"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]