<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Sun, 21 Jul 2024 21:40:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2024/07 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üí° Where Should Visual Programming Go? üìù We Can Do Better Than SQL üé• Home-cooked Software and Barefoot Programmers&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/984437518?share=copy"&gt;Structured editor in a code notebook&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/two-minute-week.html#2024-07-15T19:01:06.774Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1899883601-b891ffea8874be26e42ef39ca370d29f5b2603487dd051a27e170cb54ddf7ae4-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;Presenting a structured editor in a code notebook. I think I'm going to enjoy this environment&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/two-minute-week.html#2024-07-18T20:58:34.091Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I spent 2.5 months building a spatial compiler for lazer cutter plans to build a (massive) shelf. The shelf is built! But all the parts were mirrored, which was not an actual problem, but it was unexpected (a polarity problem somewhere).&lt;/p&gt;
&lt;p&gt;For a few other test projects, when the edges are nearly the same length on the parts, the assembly is ambiguous, and it kinda assembles but the shape gets warped from misfitting. So recently I added labels to the edges, so I know which side should match which without ambiguous matching based on eyeballed length. After adding the labels the part visualisation had the numbers backwards, AH HA! my revelation was that this explained why my parts were mirrored.&lt;/p&gt;
&lt;p&gt;My whole schtick at the moment is data viz driven development. Dataviz of runtime application state is the extension of text based coding/debugging that delivers value beyond our existing programming paradigms.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07DGAX07FB.mov"&gt;labelled cube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07DGBBPAG1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://www.machine-ethics.net/podcast/what-scares-you-about-ai-vol.2/"&gt;91. What scares you about AI? Vol.2&lt;/a&gt; via &lt;strong&gt;Ben Byford&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/share-your-work.html#2024-07-15T11:15:52.752Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;not code per say, but AI philosophy&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://github.com/thegreatercurve/okapi"&gt;github.com/thegreatercurve/okapi&lt;/a&gt; via &lt;strong&gt;John Flockton&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/share-your-work.html#2024-07-18T15:32:41.909Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey folks! I thought I‚Äôd share a JavaScript parser I‚Äôve been working on: &lt;a href="https://github.com/thegreatercurve/okapi"&gt;github.com/thegreatercurve/okapi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very much a work-in-progress, but it's nearly fully compliant with the ECMAScript 2024 spec, 100% passes the Test262 parser test suite, and outputs ESTree.&lt;/p&gt;
&lt;p&gt;My next step is to look into refactoring it to output bytecode by default, with the hopes of turning that into an actual JS engine one day.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/devlog-together.html#2024-07-16T06:37:10.884Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End-to-end demonstration of code generation and chatbot creation in the Blawx prototype I've been working on. The LLM generates a block-based, visual, domain-specific constraint logic program based on the text of the law and the ontology defined by the user, then you encode a question and an interview and you have a chatbot that doesn't have the black box problem of LLMs, but has the same easy interface. Very interested in anyone's comments.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07C5JW7SP9.mp4"&gt;blawx llm&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.linkedin.com/posts/colarusso_protective-randomness-why-we-fear-the-ai-activity-7218600315464413184-rpc2?utm_source=share&amp;amp;utm_medium=member_android"&gt;Protective Randomness: Why We Fear the AI Unknown and What to Do about It&lt;/a&gt; via &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/thinking-together.html#2024-07-15T19:54:14.172Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After reading a linkedin post by a friend of mine, today, in which he describes "protective randomness" as a virtue of human systems, the absence of which makes certain AI applications frightening, (&lt;a href="https://www.linkedin.com/posts/colarusso_protective-randomness-why-we-fear-the-ai-activity-7218600315464413184-rpc2?utm_source=share&amp;amp;utm_medium=member_android"&gt;Protective Randomness: Why We Fear the AI Unknown and What to Do about It&lt;/a&gt;) I have come to the conclusion that this may be the best argument I have heard to object to the determinism in Rules as Code: that the systems we have for dealing with the output of the interpretation of statute not only anticipate but depend on variability of interpretation for their effective operation, and that they operate to do more than merely resolve disputes over legal interpretation, so the absence of those disputes is not an unmitigated benefit. Take for instance the conversation that happens between law makers and judges. A law is drafted, there are disputes over how to interpret it, in part fueled by examples of differing interpretations from administrative decision makers. Those differences in interpretation can help people know on what grounds they might object to a particular decision. Those objections go to judges, and judges might differ again, which has the same effect. And the differing interpretations of the judges in the context of things worth arguing about brings to legislators' attention places where the rule itself is both problematic from a fairness and/or interpretation standpoint, and where that problem causes significant issues in the real world, equipping them with information about where to focus when considering amendments. All of those benefits accrue even if no decision is ever made to resolve the dispute. If you replace variable administrative decision makers with a deterministic system based on a best shared interpretation, that review system, which not only accounts for but depends on variable outputs to function, stops working as effectively. That is not to say that what you lose is not worth what you gain. But it is a coherent argument about what is lost, and how, from consistent automated application of laws, and it is prescriptive about where and how rules as code should best be applied to avoid those losses. Which now makes me wonder whether armed with this idea, I would have a more generous read of the Laurence Driver paper.&lt;/p&gt;
&lt;p&gt;For context, the linked post is aimed more at attempting to understand some forms of anxiety around AI applications, and particularly in the context of copyright violation, which Colarusso considers complaining about the wrong thing. But the idea metastasized in my head, and now I might have to give Driver the benefit of the doubt.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://frest.substack.com/p/state-farming"&gt;Coding is State Farming&lt;/a&gt; via &lt;strong&gt;Guyren Howe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/thinking-together.html#2024-07-15T21:17:05.245Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have a blog about matters related to the topics here. Just dropped this, which discusses why more of typical business logic should be implemented in the database: &lt;a href="https://frest.substack.com/p/state-farming"&gt;Coding is State Farming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://open.substack.com/pub/programmingsimplicity/p/2024-07-17-thinking-about-the-game?r=1egdky&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&amp;amp;showWelcomeOnShare=true"&gt;Thinking About The Game Of Pong In Hardware And Software&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/thinking-together.html#2024-07-17T20:08:31.989Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thinking about Schematics vs. Code. [This began as a short reply to &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt; regarding my take on electronics schematics in another thread.]&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Adam Davidson&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/thinking-together.html#2024-07-19T16:35:00.550Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just a random thought that has been rattling around in my head while listening through podcast episodes and Ivan‚Äôs visual programing points. I am new here so apologies If all this has been said before, or covered in podcasts I haven‚Äôt gotten to yet.&lt;/p&gt;
&lt;p&gt;I want to propose a slightly different framing for what it means to say that a representation of a program is visual / spatial or not&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/thinking-together.html#2024-07-19T16:35:00.550Z"&gt;... read more&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üêò &lt;a href="https://merveilles.town/@zens/112805206600616310"&gt;This masto thread&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/linking-together.html#2024-07-18T05:11:27.692Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://merveilles.town/@zens/112805206600616310"&gt;This masto thread&lt;/a&gt; should resonate with folks here. Teaser:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fediverse is the kind of place where I can ask a question of ‚Äúlet‚Äôs say we‚Äôre designing an operating system from scratch. Clean slate. Let‚Äôs throw away all our old habits and legacy decisions. what‚Äôs the minimal set of applications we need to make a new operating system useful‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the top replies are vt100 emulator, virtual machine to run other operating systems, and c compiler to port vim&lt;/p&gt;
&lt;p&gt;like y‚Äôall are missing the point of the question!&lt;/p&gt;
&lt;p&gt;ü§î &lt;a href="https://blog.sbensu.com/posts/demand-for-visual-programming/"&gt;We need visual programming. No, not like that.&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/linking-together.html#2024-07-18T15:46:25.631Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Let's observe what developers&lt;/em&gt;  &lt;em&gt;&lt;em&gt;do&lt;/em&gt;&lt;/em&gt; &lt;em&gt;, not what they&lt;/em&gt; &lt;em&gt;&lt;em&gt;say&lt;/em&gt;&lt;/em&gt;&lt;em&gt;.&lt;/em&gt; 
Developers do spend the time to visualize aspects of their code but rarely the logic itself. They visualize other aspects of their software that are 
 &lt;em&gt;important, implicit, and hard to understand&lt;/em&gt;. Here are some visualizations that I encounter often in serious contexts of use:
* Various ways to visualize the codebase overall.
* Diagrams that show how computers are connected in a network
* Diagrams that show how data is laid out in memory
* Transition diagrams for state machines.
* Swimlane diagrams for request / response protocols.
 &lt;em&gt;This&lt;/em&gt; is the visual programming developers are asking for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí° &lt;a href="https://tonsky.me/blog/diagrams/"&gt;Where Should Visual Programming Go?&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/linking-together.html#2024-07-18T15:50:07.883Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a follow-up to the above, there's this nice blog post from &lt;strong&gt;@Nikita Prokopov&lt;/strong&gt; on  &lt;em&gt;diagrams as code:&lt;/em&gt; &lt;a href="https://tonsky.me/blog/diagrams/"&gt;Where Should Visual Programming Go?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Level 3: Diagrams are code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is what the endgame should be IMO. Some things are better represented as text. Some are best understood visually. We should mix and match what works best on a case-by-case basis. Don‚Äôt try to visualize simple code. Don‚Äôt try to write code where a diagram is better.&lt;/p&gt;
&lt;p&gt;Hear, hear!&lt;/p&gt;
&lt;p&gt;üêò &lt;a href="https://merveilles.town/@zens/112793890297088472"&gt;Luci for dyeing (@zens@merveilles.town)&lt;/a&gt; via &lt;a href="https://twitter.com/galtenberg"&gt;Christopher Galtenberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/linking-together.html#2024-07-20T19:50:21.867Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a huge formative experience happened when I was 16. I was brought into my mother‚Äôs office and hired to compell a guy to use his computer who was refusing to use his computer, and exclusively used his IBM selectric. 
First up, the guy was an unlikable jerk. However, first thing he does when I get there is refuse to even talk to me about the situation until AFTER I read The Invisible Computer by Donald Norman. 
It‚Äôs a good book I cannot summarise in the 50 characters I have left in this post&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://www.edgedb.com/blog/we-can-do-better-than-sql"&gt;We Can Do Better Than SQL | EdgeDB Blog&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/linking-together.html#2024-07-21T19:39:49.246Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The questions we often hear are ‚ÄúWhy create a new query language?‚Äù and ‚ÄúWhat‚Äôs wrong with SQL?‚Äù. This blog post contains answers to both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;üéõÔ∏è &lt;a href="https://noodlesynth.com"&gt;noodlesynth.com&lt;/a&gt; via &lt;strong&gt;Ronald C&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/of-music.html#2024-07-21T03:27:20.906Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm working on a web based modular synthesizer: &lt;a href="https://noodlesynth.com"&gt;noodlesynth.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;End User Programming&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/qo5m92-9_QI?si=mMBPSv5UPpCuh3x1"&gt;Home-cooked Software and Barefoot Programmers: Maggie Appleton (Local-First Conf)&lt;/a&gt; via &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/of-end-user-programming.html#2024-07-17T12:14:20.373Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/qo5m92-9_QI/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;coins some neat terms, from "barefoot developers" to "the long tail of user needs".&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W4/of-ai.html#2024-07-18T10:12:17.896Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hi! I'm co-organizing a builders-first AI &amp;amp; UX meetup in Berlin in September, if you are interested send me a DM&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-4/</guid><pubDate>Sun, 21 Jul 2024 21:40:07 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/07 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üö∞ Visual Stream Processing System üñåÔ∏è Figma meets VS Code üõ∏ esoteric.codes&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=Q6uaC5Dnh6s"&gt;Stock Multi Time Series, Atom/RSS and HN Stories using Steampipe&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/two-minute-week.html#2024-07-10T14:14:30.056Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Q6uaC5Dnh6s/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üìà Stock Multi Time Series&lt;/p&gt;
&lt;p&gt;üõú Atom/RSS&lt;/p&gt;
&lt;p&gt;üçä HN Stories&lt;/p&gt;
&lt;p&gt;Data integrations using &lt;a href="https://steampipe.io/"&gt;steampipe.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/two-minute-week.html#2024-07-12T16:36:55.391Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've implemented the flip-flop object which concludes the "object library" that is necessary for basic macro playback. Automat can now play Super Mario Bros with only occasional desync issues üôÇ&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07CWQK7M88.mkv"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.scattered-thoughts.net/writing/babys-second-wasm-compiler"&gt;Baby's second wasm compiler&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/share-your-work.html#2024-07-10T03:26:19.057Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very present-of-coding, but the future is coming.&lt;/p&gt;
&lt;p&gt;üé≤ &lt;a href="https://github.com/ivanreese/2222"&gt;github.com/ivanreese/2222&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/share-your-work.html#2024-07-10T05:05:21.930Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé≤ I created a new programming game. It's called  &lt;em&gt;2222.&lt;/em&gt;  (Pronounced "two twenty-two two")&lt;/p&gt;
&lt;p&gt;Well, I actually created a  &lt;em&gt;meta&lt;/em&gt; -game ‚Äî because  &lt;em&gt;you have to program the game yourself&lt;/em&gt; , in any programming system you want. Then you get to play it.&lt;/p&gt;
&lt;p&gt;The code is incredibly simple. You can do it in 3 blocks of Scratch. It's what TodoMVC would be if it had a soul.&lt;/p&gt;
&lt;p&gt;It takes about 22 minutes to play. You will very likely burst out laughing while playing. When you finish the game, you will feel utterly bizarre. You can play the game by yourself, or in a group. Good luck, have fun.&lt;/p&gt;
&lt;p&gt;I would  &lt;em&gt;love&lt;/em&gt;  to see your implementation, and/or (but especially  &lt;em&gt;and&lt;/em&gt; ) a video of you playing.&lt;/p&gt;
&lt;p&gt;How do you  ~play~  program the game?&lt;/p&gt;
&lt;p&gt;Instructions here: &lt;a href="https://github.com/ivanreese/2222"&gt;github.com/ivanreese/2222&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üö∞ &lt;a href="https://mihai-safta.dev/posts/vsps/?utm_medium=social&amp;amp;utm_source=foc"&gt;Visual Stream Processing System&lt;/a&gt; via &lt;strong&gt;Safta Catalin Mihai&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/share-your-work.html#2024-07-10T18:42:46.298Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello! I've been working on something in my spare time, very early stage... but I think it shows promise.&lt;/p&gt;
&lt;p&gt;Given that &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt; encourages us to share scrappy fiddles, here it is.&lt;/p&gt;
&lt;p&gt;It's a visual stream processing system - based on tldraw for the UI and Pekko Streams (in Scala) for the backend.&lt;/p&gt;
&lt;p&gt;Link to the blog post above, and leaving just a gif here as a tl;dr:&lt;/p&gt;
&lt;p&gt;&lt;img alt="1280x720px image" src="https://s10.gifyu.com/images/StqmP.gif"&gt;&lt;/p&gt;
&lt;p&gt;üñåÔ∏è &lt;a href="http://getSpectral.io"&gt;Spectral: Figma meets Visual Studio Code&lt;/a&gt; via &lt;strong&gt;nith&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/share-your-work.html#2024-07-11T19:44:39.821Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone! Currently working on &lt;a href="http://getSpectral.io"&gt;Spectral&lt;/a&gt;, a new way to approach code navigation by using an infinite canvas for traversal. We are aiming to simplify the onboarding, navigation and debugging processes.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07CFJRG41F.mp4"&gt;Spectral Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://stefanlesser.substack.com/p/a-parable-about-technology"&gt;A short parable about technology&lt;/a&gt; via &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/share-your-work.html#2024-07-13T09:55:32.019Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the last few days, there have been &lt;a href="https://history.futureofcoding.org/?fromDate=2024-06-12&amp;amp;toDate=2024-06-18&amp;amp;channel=thinking-together&amp;amp;filter=#2024-06-15T10:49:53.662Z"&gt;üí¨ #thinking-together@2024-06-15&lt;/a&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1717926129937119"&gt;few&lt;/a&gt; &lt;a href="https://history.futureofcoding.org/?fromDate=2024-07-01&amp;amp;toDate=2024-07-07&amp;amp;channel=thinking-together&amp;amp;filter=#2024-07-04T15:22:10.904Z"&gt;üí¨ #thinking-together@2024-07-04&lt;/a&gt; here that have inspired me to write this short parable about programming and technology. Let me know how you feel about it. üôÇ&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/9Af2U28DgQk"&gt;Schema Studio Cursor Dev Update&lt;/a&gt; via &lt;a href="https://twitter.com/domjancik"&gt;Dominik Janƒç√≠k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/share-your-work.html#2024-07-13T16:49:07.004Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/9Af2U28DgQk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I have been working on adding Keyboard / Gamepad only navigation for Schema Studio, the open-source integrated creative environment for light control, generative visuals and more based on vvvv gamma.&lt;/p&gt;
&lt;p&gt;The environment focuses on instant feedback, quick editing, using a fun (subjective :)) game like interface. It uses a Block based programming approach that tries to combine the best of text and visual editing interfaces.&lt;/p&gt;
&lt;p&gt;I am calling the feature "Cursor", and &lt;a href="https://youtu.be/9Af2U28DgQk"&gt;here is a short demo.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in learning more about the tool, head over to &lt;a href="https://schema.scenic.tools"&gt;schema.scenic.tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any feedback and questions welcome :)&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/devlog-together.html#2024-07-11T01:07:01.938Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been slowly reading "The Nature of Order" by Christopher Alexander and slowly thinking about how to make my editor for text and line drawings more timeless. (And mostly sleeping a lot, if I'm honest.) Today the combination of the two led me to draw this shape for the line-wrapping algorithm.&lt;/p&gt;
&lt;p&gt;Until now I've been developing the editor the "usual" way, which for me consists of needing some computation, figuring out the most convenient place to perform the computation, then squirreling away the result somewhere it's available when needed. In an effort to get myself out of the rut of the inevitable problems of indirection and cache invalidation that result, I've been trying to replace all my  &lt;em&gt;ad hoc&lt;/em&gt;  data structures with on-demand computation based on the base state of the program. And what I've been ending up with is umpteen variations of this pictured algorithm, just with different code stuck on to the protrusions.&lt;/p&gt;
&lt;p&gt;There may be an abstraction that comes out of all this, but I don't see it yet. And as CA says, a flower isn't made up of identical petals. Each one evolves uniquely as a part of the whole.&lt;/p&gt;
&lt;p&gt;&lt;img alt="20240710_175623.jpg" src="http://history.futureofcoding.org/history/msg_files/F07/F07BXME9XQA.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/devlog-together.html#2024-07-12T02:17:22.619Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick and dirty prototype of the above algo/shape/code using Vim syntax highlighting.&lt;/p&gt;
&lt;p&gt;The code in the screenshot is a function to convert a mouse click (mx, my) into the location (line_index, pos) of the character at that point on the screen.&lt;/p&gt;
&lt;p&gt;The problem is much of this function is boilerplate shared with several other places, such as the code to draw text on screen, compute the height of a wrapped line, etc. The boilerplate makes it difficult to see the business logic unique to this particular function, and so creates pressure to prematurely create an abstraction to "DRY things out". Highlighting the shape of the boilerplate in pink helps the eye to focus to the unique business logic in the protrusions, and so counters the pressure to hide the boilerplate before I've figured out the best way to do so.&lt;/p&gt;
&lt;p&gt;&lt;img alt="linewrap-vim.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07C1D0TQGM.png"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/U8SB2hXBKs0"&gt;exporting from codeflowcanvas to open-canvas draft spec&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/devlog-together.html#2024-07-14T14:04:41.476Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/U8SB2hXBKs0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Some updates on my visual programming project codeflowcanvas this week: &lt;a href="https://youtu.be/U8SB2hXBKs0"&gt;In this video&lt;/a&gt; I show some work I did for the open-canvas working group (ocwg for short): if you go to &lt;a href="http://demo.codeflowcanvas.io/ocwg"&gt;demo.codeflowcanvas.io/ocwg&lt;/a&gt; you can see a window floating in the bottom right, this shows the current flow in the current ocwg draft spec.&lt;/p&gt;
&lt;p&gt;I've build the export mechanism using a strategy pattern so that I can also easily support other formats if needed (a basic export to tldraw is already one of them). I hope this helps in developing the new open canvas spec that the ocwg is working on via bi-weekly meetings and a github repo (see various links on &lt;a href="https://www.canvasprotocol.org"&gt;canvasprotocol.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Lately I am focussing more on embedding and/or integrating codeflowcanvas with other tools and technologies so that it is not running in a silo of its own, and this feature helps with that I think.&lt;/p&gt;
&lt;p&gt;This week I also send in a submission to &lt;a href="http://liveprog.org"&gt;liveprog.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üê¶ &lt;a href="https://x.com/tonofcrates"&gt;Will Crichton&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/linking-together.html#2024-07-09T12:13:36.312Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://x.com/tonofcrates"&gt;Will Crichton&lt;/a&gt;: I'm starting a new group at Brown w/&lt;a href="https://x.com/ShriramKMurthi"&gt;@ShriramKMurthi&lt;/a&gt; and &lt;a href="https://x.com/KathiFisler"&gt;@KathiFisler&lt;/a&gt; called the Cognitive Engineering Lab. We build tools to make you smarter, grounded in cognitive science and programming language theory. And we're hiring PhD students!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you know browser-based UI programming inside and out (eg, you could reimplement React or Svelte), let's build the PL of your dreams to make reactive UIs fast &amp;amp; correct. Or let's build the next LaTeX / Markdown!&lt;/p&gt;
&lt;p&gt;üõ∏ &lt;a href="https://esoteric.codes"&gt;esoteric.codes&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/linking-together.html#2024-07-10T23:53:05.618Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just discovered the mostly-defunct blog &lt;a href="https://esoteric.codes"&gt;esoteric.codes&lt;/a&gt;. Some beautiful projects on display here.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=k7Jer1wwoDw"&gt;Seeing Like a Programmer - Resiliency, Limits, And Moral Hazards In SE by Chris Krycho&lt;/a&gt; via &lt;strong&gt;Chris Krycho&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/linking-together.html#2024-07-11T15:30:10.201Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/k7Jer1wwoDw/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Mostly lurking and reading everyone else‚Äôs links, but I at last have somethign to share myself! Here‚Äôs my LambdaConf 2024 talk, which I think folks in here will appreciate! In this talk: Peter Naur‚Äôs ‚ÄúProgramming as Theory-Building‚Äù, Donella Meadows‚Äô  &lt;em&gt;Thinking in Systems&lt;/em&gt; , and James C. Scott‚Äôs  &lt;em&gt;Seeing Like a State&lt;/em&gt; .&lt;/p&gt;
&lt;h2&gt;Graphics&lt;/h2&gt;
&lt;p&gt;üí° &lt;a href="https://charlieroberts.github.io/screamer/playground/"&gt;screamer: the playground for screamer, a live-coding language for ray marching&lt;/a&gt; via &lt;a href="https://www.charlie-roberts.com"&gt;Charlie Roberts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/of-graphics.html#2024-07-09T21:59:04.481Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a small frp-ish dsl I made for live coding ray marchers: &lt;a href="https://charlieroberts.github.io/screamer/playground/"&gt;charlieroberts.github.io/screamer/playground&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://arxiv.org/abs/2108.08481"&gt;Neural Operator: Learning Maps Between Function Spaces&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W3/of-ai.html#2024-07-10T10:40:09.966Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Neural operators generalize neural networks from learning mappings between finite dimensional Euclidean spaces or finite sets to mappings between functional spaces: &lt;a href="https://arxiv.org/abs/2108.08481"&gt;Neural Operator: Learning Maps Between Function Spaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's a TED talk about how it's being applied in science and engineering: &lt;a href="https://www.ted.com/talks/anima_anandkumar_ai_that_connects_the_digital_and_physical_worlds"&gt;AI that connects the digital and physical worlds&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-3/</guid><pubDate>Mon, 15 Jul 2024 04:46:52 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/07 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üìë Programming languages resources üî® Breaking Silos üí° The Interfaces With Which We Think &lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/two-minute-week.html#2024-07-05T14:52:40.777Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week in Automat was mostly refactoring and bug squashing so not much to show. Except today I've sat down and designed the object that will act as a flip-flop switch. The first three images are the candidates for the final object. I'm actually still not decided which one to go for... The others images are just interesting results  obtained from prompting stable diffusion&lt;/p&gt;
&lt;p&gt;&lt;img alt="design-generated-20240705-164409-0-detailed realistic masterpiece best q.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07B0RYJR9C.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/two-minute-week.html#2024-07-05T14:52:40.777Z"&gt;üßµ more images in the conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://marianoguerra.org/posts/the-proof-is-in-the-meta-tracing-jit-interpreter/"&gt;The proof is in the meta-tracing JIT interpreter&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-01T09:47:18.988Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The one where I implement a native JIT interpreter for my minimal oop language using pypy's meta-tracing compiler toolchain&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the previous posts: Make Your Self and Macros and optimizations: it's just a phase I described the design and implementation of a minimal object oriented language with the implementation done in...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ü•û &lt;a href="https://github.com/cben/animation-stack-language"&gt;toy postfix stack-based language to inflict upon my kids&lt;/a&gt; via &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-01T17:49:31.606Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Been a while since I touched it but I've been &lt;a href="https://github.com/cben/animation-stack-language"&gt;building&lt;/a&gt; a toy postfix stack-based language to inflict upon my kids.  My theory is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;postfix may have benefits for early teaching (linear evaluation order, lack of "syntax", trivial notional machine)&lt;/li&gt;
&lt;li&gt;the obvious drawbacks can be somewhat mitigated if instead of destructively changing the stack, you can navigate all previous stack states.  (I'm not the first to try the latter; in particular Kartik did it in Mu, including descending into function calls. I don't even have user-defined functions yet.)&lt;/li&gt;
&lt;li&gt;I wanted to explore "replacing" some uses of control structures with composition of a bigger data type, like a whole picture or animation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm resigned to the thing not being turing-complete.&lt;/p&gt;
&lt;p&gt;Initial implementation's data type was &lt;a href="https://asciinema.org/a/zObMq9ZLJQNA99X3EhdEDllhA"&gt;1D "animation" of color change (I wanted them to program an RGB lamp)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;=&amp;gt; My kids liked typing and mixing colors, but the idea of a single value representing change over time went entirely over their heads üòû&lt;/p&gt;
&lt;p&gt;Anyway terminal REPL was a dead end, because you can't go back and edit past code.  =&amp;gt; I got a prototype web editor ‚Äî you can move cursor, edit freely, and see stack state before each word: &lt;a href="https://animation-stack-language.netlify.app/"&gt;animation-stack-language.netlify.app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TODO: rendering still uses styled block characters üßë‚Äçüíª, I need to learn canvas...&lt;/p&gt;
&lt;p&gt;TODO: Next big step will be to replace the data type from 1D "time" to 2D "picture", taking inspiration from &lt;a href="http://forthsalon.appspot.com"&gt;forthsalon.appspot.com&lt;/a&gt; and &lt;a href="https://code.world/"&gt;code.world &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm thinking to make do with some 2D rather than RGB colorspace, so that every pixel can also be interpreted as a vector.  That way any picture doubles as a limited representation of function-as-data (not turing-complete! but very visual ü§î).&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/973314611?share=copy"&gt;hash references to functions, effects and transpilation in EYG&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-01T19:08:20.286Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1887438430-1ad5b565b17f24df0112fa86e8d2590d6dd98c2a109df670fcf8d6bc2c9bceb4-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;Hash reference to every function and limiting effects at the top level to allow code to execute even after a failure. This is a bit longer as I try to explain in more detail what these features are in EYG&lt;/p&gt;
&lt;p&gt;üßÆ &lt;a href="https://calcwithdec.dev/posts/viz-risk/"&gt;Visualizing Risk ‚Äì Calc with Dec üßÆ ü§ì&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-01T21:12:40.256Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a blog post about &lt;a href="https://calcwithdec.dev/posts/viz-risk/"&gt;visualizing risk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's a scrollable explanation that develops up a visualization - a bit going on in it, a problem I have with a lot of things, so was really glad to spend time learning a few things about making this kind of scrollable interaction to more carefully introduce things.&lt;/p&gt;
&lt;p&gt;Behind the scenes, the numbers are from a calculang model doing monte carlo simulations on a pension calculator calculang model. This composability (or what I call flexibility) is something I decided not to make  &lt;em&gt;this&lt;/em&gt;  post about, but it's an important part of why calculang exists.&lt;/p&gt;
&lt;p&gt;I plan to do a few similar separate exercises, and then spin back to this on it's own. (e.g. next: benchmarking actual results to their older estimates)&lt;/p&gt;
&lt;p&gt;So, this blog post isn't really technical, but I hope it's interesting or at least easy to follow, and it fits into a longer piece about calculang. Happy if you have any feedback about the post or questions about this longer piece!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Visualizing Risk: feat. a pension savings calculation, Monte Carlo simulation, and ‚Äòscrollytelling‚Äô&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ü§ñ &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7214151556164640769/"&gt;A Voice Controlled G AI Assistant for LabVIEW&lt;/a&gt; via &lt;strong&gt;Jim Kring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-03T06:27:03.569Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Making more progress on AI assisted visual programming (with voice control).&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07AUATTESE.mp4"&gt;GAIA Voice Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üì≤ &lt;a href="https://diplomatic-docs.replit.app/"&gt;DIPLOMATIC: Data sync framework&lt;/a&gt; via &lt;strong&gt;Mason&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-03T20:48:09.044Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been building a sync framework that app developers can integrate, to securely sync state changes between clients. I call it DIPLOMATIC, after the concept of a diplomatic bag which travels through foreign territories, but protected against inspection. So far I've got a couple host implementations targeting Deno and Cloudflare (Workers + Durable Objects + D1), as well as client libraries to build web clients in React and CLI tools in Deno.&lt;/p&gt;
&lt;p&gt;The attached video shows off a demo app that displays and updates a consistent status message across clients. It generates and stores a cryptographic seed (synced via the browser's password manager), queues status changes when offline or not connected to a host, then pushes queued changes when connected, and receives real-time updates using WebSockets.&lt;/p&gt;
&lt;p&gt;I've got some rough docs up at &lt;a href="https://diplomatic-docs.replit.app"&gt;diplomatic-docs.replit.app&lt;/a&gt;, and a walkthrough of the demo app from the video at &lt;a href="https://diplomatic-docs.replit.app/docs/demos/status.html"&gt;diplomatic-docs.replit.app/docs/demos/status.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The backstory is that, for a while I've wanted to build a grand life-planning app, like a TODO list that can operate at the decade-level rather than the daily-level. But I kept running into these blocks:&lt;/p&gt;
&lt;p&gt;a) I'll want to access it from phone and desktop, so it needs a sync solution,&lt;/p&gt;
&lt;p&gt;b) maintaining servers is a pain, and&lt;/p&gt;
&lt;p&gt;c) a life-planning tool will necessarily have personal info, so it shouldn't hang out in plaintext on someone else's computers.&lt;/p&gt;
&lt;p&gt;These sorts of issues aren't unique to this tool. In fact, I think they're common enough to merit a general solution. The Web 2.0 client/server model gave us easy software updates and access from multiple devices with consistent data. But we backslid by making all app data visible to the software provider and relying on them to maintain their servers. Mobile apps gave us the additional expectation that we could access our data while offline.&lt;/p&gt;
&lt;p&gt;I think there's a simple solution to get the best of all worlds, by encoding app state changes as objects (the Event Sourcing pattern), then encrypting those deltas and shipping them off to a server which relays to other clients, which then decrypt and apply the changes locally. With this architecture, the relay servers all have a standard interface (not application-specific), and they're blind to delta contents, so hosting becomes a commodity. This means companies could specialize in just running these hosts, giving application developers a secure backend without the maintenance burden. It also creates a standardized import/export format for app state‚Äîthe delta log, so you get a backup format for free.&lt;/p&gt;
&lt;p&gt;I'm only designing around single-user apps at the moment. Having a "last-wins" policy for conflicts makes things nice and simple..&lt;/p&gt;
&lt;p&gt;If anyone knows of related work I should check out, has suggestions, wants to collaborate, ... let me know. The code is still a bit messy, but I'm planning to tidy that up and open the repo soon.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07AYQVR8HG.mov"&gt;diplomatic-status-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üê∏ &lt;a href="https://www.todepond.com/wikiblogarden/scrappy-fiddles/sharing/normalising/live/"&gt;Todepond dot com: I went to an algorave&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-05T05:58:43.421Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;i wrote up my experience of slowly discovering the live coding world, and how my Arroost tool fits into it, and the motivations for my work&lt;/p&gt;
&lt;p&gt;üñ•Ô∏è &lt;a href="https://github.com/Warkanlock/hack-tooling"&gt;A set of tools to play around with a Hack compute&lt;/a&gt; via &lt;strong&gt;Ignacio Brasca&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/share-your-work.html#2024-07-05T08:09:06.760Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello everyone! I have just finished a set of tools I built while learning about the &lt;a href="https://github.com/Warkanlock/hack-tooling"&gt;Hack computer&lt;/a&gt; architecture. Today I felt confident that I could share all the code I wrote for this&lt;/p&gt;
&lt;p&gt;To me, this architecture was a great starting point if you want to get a hang of how computers, compilers, and virtual machines actually work&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/devlog-together.html#2024-07-01T23:21:01.824Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shower thought on yesterday's thread above: the painter's algorithm is a way to make an interface less stateful. It lets you specify shapes to draw in any order. However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It does this by adding  &lt;em&gt;more&lt;/em&gt;  state to the implementation. You can't just draw each shape as you encounter it in the code. You have to shove them all into an array, sort by z value, and then draw them all.&lt;/li&gt;
&lt;li&gt;It does this by adding more state to the communication channel. The human has to provide a z value now for each shape. Sometimes this is naturally obtained, sometimes it is not and the human now has to think in their heads about what z value to give their shapes to make the drawing come out as they want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thinking about this, it feels like state is to some extent inevitable. There's some conservation of state going on. You can't really eliminate it. You squeeze it down in one area and like a balloon it pops up somewhere else.&lt;/p&gt;
&lt;p&gt;üßë‚Äçüíª &lt;a href="https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1719791347513999"&gt;a visual notation for something we typically use keyword args for.&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/devlog-together.html#2024-07-03T14:10:36.688Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This morning I'm thinking about turning &lt;a href="https://history.futureofcoding.org/?fromDate=2024-06-27&amp;amp;toDate=2024-07-03&amp;amp;channel=devlog-together&amp;amp;filter=#2024-06-30T23:49:07.513Z"&gt;üí¨ #devlog-together@2024-06-30&lt;/a&gt; into a visual notation for something we typically use keyword args for. For example, the following glyph might represent a function for initializing a text editor widget with the following signature:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;edit.initialize(top, left, right, bottom, font_size)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the numbers indicate a specific call to this function:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;edit.initialize(15, 15, 115, 215, 20)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="visual-keyword-args.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07B9BAHYF3.png"&gt;&lt;/p&gt;
&lt;p&gt;ü§î &lt;a href="https://futureofcoding.slack.com/archives/CEXED56UR/p1719244290391599"&gt;moving away from slack&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/devlog-together.html#2024-07-04T03:51:26.549Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week, I'm learning more WebGPU, since I'm hoping to use it for a handful of visual programming projects down the road. I'm also still looking at options for &lt;a href="https://history.futureofcoding.org/?fromDate=2024-06-21&amp;amp;toDate=2024-06-27&amp;amp;channel=administrivia&amp;amp;filter=#2024-06-24T15:51:30.391Z"&gt;üí¨ #administrivia@2024-06-24&lt;/a&gt;. Would love to find something that feels more like a forum than a chat, but not toooo much like a phpbb, and doesn't have a per-user cost, and doesn't impose a maintenance burden, and is accessible to search engines (and accessible to all people, natch), and isn't likely to "incredible journey" or "we AI'd every text field for you" etc. So we're currently whatever the opposite of "spoiled for choice" is :)&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=8226852"&gt;Weird Machines, Exploitability, and Provable Unexploitability&lt;/a&gt; via &lt;strong&gt;Polly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/reading-together.html#2024-07-05T18:10:29.699Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been kinda obsessed with this paper, "Weird Machines, Exploitability, and Provable Unexploitability" since October last year.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=1ynkWcfiwOk"&gt;RuhrSec 2018: "Keynote: Weird machines, exploitability and unexploitability", Thomas Dullien&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(I think starting with the talk is a good idea)&lt;/p&gt;
&lt;p&gt;After hearing about robust first computing I've been pondering the connection for a bit. I'm not really sure what to make of it, but there has to be some connection. In &lt;a href="https://www.youtube.com/watch?v=Dmlm6mtnSZs"&gt;this talk&lt;/a&gt; by Dave Ackley he specifically mentions that "flipping one bit" (paraphrasing) can be enough to destroy a lot of software, which is the exact attack model that Dullien uses. It would be nice if software could maintain security invariants despite memory corruption (which Dullien proves for a small piece of software that he writes) so in that sense the two concepts allign. But I find that "continuing despite an error" or "return a best-effort answer" is the source of many security vulnerabilities, (mid example: database lookup fails, code is written in a way that forgot to handle that case, code continues anyway and returns admin data that shouldn't be shown). I wonder if any of y'all have read this or have thoughts about it. :))&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/thinking-together.html#2024-07-03T20:59:53.766Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recall coming across some opinions Against interactivity. I think in support of showing the thing, rather than making the user interact to see the thing.&lt;/p&gt;
&lt;p&gt;Is there a soundbite for this? Are there any good links? I don't know where I encountered this opinion I  &lt;em&gt;think&lt;/em&gt;  a few times, but I found something in one passage searching Bret Victors Explorable Explanations.&lt;/p&gt;
&lt;p&gt;I wonder is this the most concrete link or reference I'll get, or does it ring a bell for someone else?&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07AYQX6HM1.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Shen Li&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/thinking-together.html#2024-07-04T15:22:10.904Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I find a lot of statements these days describes a fact about something and then call it the ‚Äúbest‚Äù.&lt;/p&gt;
&lt;p&gt;It‚Äôs like someone saying ‚Äúlook number 2 is so great, it‚Äôs the only even prime number, it‚Äôs so cool that it‚Äôs used as the base of digital systems, so we should use 2"&lt;/p&gt;
&lt;p&gt;And someone else says: ‚Äúwell, number 3 is cool because it‚Äôs the first Mersenne prime, and it has a super cool divisibility rule, so we should use 3‚Äù.&lt;/p&gt;
&lt;p&gt;At the end of the day, if the question is 1+1, then 2 is infinitly better than 3, and the other way around if the question is 4-1. And if you just need some positive integer as a placehold or something, then well, they are the same.&lt;/p&gt;
&lt;p&gt;People seems to like and re-post these information a lot. I think these facts do provide some values, like the whole entertainment industry, it fulfills the curiosity of our minds and keeps us, well, entertained.&lt;/p&gt;
&lt;p&gt;But drawing the conclusion that something is better, or something should be used instead of another thing based on these facts just feels off to me. It‚Äôs especially bad IMO, when people use these statements in PR reviews.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Eric Normand&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/thinking-together.html#2024-07-04T19:50:55.200Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have a question I hope someone here can answer. I am at something of a crossroads in my career and privileged enough to be able to pursue almost anything. When I tell people the big problems I'd like to make an impact on, it's education, specifically science education. I want more people to understand how the scientific method works and how we use it to gain more understanding.&lt;/p&gt;
&lt;p&gt;I have passively read about education (Montessori, Bruner, Piaget, Pappert), followed Alan Kay and the smalltalk story, and I was a math teacher for a couple of years. I also teach currently online.&lt;/p&gt;
&lt;p&gt;I can't help but think that there is more to using computers than reproducing old media, and that the code-debug cycle is a good way to refine our understanding. And so maybe there is something there, using programming and interactivity as a medium for exploration of ideas.&lt;/p&gt;
&lt;p&gt;However, I don't have much more of a vision than that. I was talking to my wife about it yesterday and came up with an interesting phrasing: I want to do what Montessori did with her learning materials but with computers as a medium. &lt;/p&gt;
&lt;p&gt;I would appreciate any and all links to people, conferences, reading material, etc., that are related to this idea.&lt;/p&gt;
&lt;p&gt;Just to be clear, I don't mean teaching kids to code. And I don't mean using software to support the current educational paradigm (e.g., Chromebooks in schools, etc.). People seem to automatically roll back to those two pits.&lt;/p&gt;
&lt;p&gt;I'm in pursuit of the next part of my career. I don't know what it will look like, but I want it to be productive.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/thinking-together.html#2024-07-05T14:34:31.771Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pond‚Äôring aloud:&lt;/p&gt;
&lt;p&gt;The value of Gutenberg‚Äôs printing press is that it taught kids to read, not to build printing presses.&lt;/p&gt;
&lt;p&gt;The value of computers is that they teach kids to ???, not to write code.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/thinking-together.html#2024-07-05T14:36:09.723Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pond‚Äôring aloud:&lt;/p&gt;
&lt;p&gt;I wonder if the problem with VPLs is the word ‚Äúlanguage‚Äù.&lt;/p&gt;
&lt;p&gt;It appears to me that the word ‚Äúprogramming‚Äù has been generally accepted to mean ‚Äúsequential language‚Äù or writing sequential codes (aka ‚Äúcoding‚Äù). I view this view as being too restrictive. Programming is more than just commanding a machine with sequentialistic instructions. Programming a  &lt;em&gt;CPU&lt;/em&gt; , though, is - by definition - sequentialistic. But,,, programming a  &lt;em&gt;machine(s)&lt;/em&gt;  need not be sequentialistic. Especially in the age of nothing-is-central. In fact, LLMs are an example of non-sequentialism. The machines that run LLMs were programmed, arduously, in sequential notation, but, the inner success of LLMs is not sequential, but something else (massively parallel plinko?).&lt;/p&gt;
&lt;p&gt;VPLs and DPLs are, to me, not sequentialistic things. Maybe they should be called ‚Äúnotations‚Äù instead of ‚Äúlanguages‚Äù? VNP and DNP? Visual Notation for Programming, Diagrammatic Notation for Programming? [In which case, ‚Äúprogramming languages‚Äù as we know them, are TNPs - Textual Notations for Programming].&lt;/p&gt;
&lt;p&gt;In fact, programming is not the difficult part. Re-programming is the novel aspect of Design that computers bring to the world. We have been programming machines to do  &lt;em&gt;single&lt;/em&gt;  things for centuries (using metal lathes, etc.). This time through, though, we have built machines capable of doing  &lt;em&gt;many&lt;/em&gt;  things.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Shen Li&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/thinking-together.html#2024-07-05T14:45:48.763Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Related to my last post, where I believe we shouldn‚Äôt make decisions outside the context of a problem or goal.&lt;/p&gt;
&lt;p&gt;I‚Äôve observed the same issue with secondary goals, where they are discussed outside the context of primary goals.&lt;/p&gt;
&lt;p&gt;I don‚Äôt know if this bothers other people, but it bothers me a lot. Maybe I‚Äôm not smart enough to see the implied connections.&lt;/p&gt;
&lt;p&gt;One example I can give is that many times I‚Äôve been given the goal of ‚Äúconsistency,‚Äù whether in the UI or the code style. I‚Äôm not saying ‚Äúconsistency‚Äù is a bad thing, but without connecting it to the primary pre-shared goal, the value of this secondary goal becomes trivial and nullified. Logically, it doesn‚Äôt make sense either, especially for a start-up, because a start-up is doing something new, and you can‚Äôt do new things by pursuing consistency. If we did things consistently, we‚Äôd still be using XML instead of JSON.&lt;/p&gt;
&lt;p&gt;Again, to be clear, I‚Äôm not saying doing things consistently is bad. I‚Äôm just saying that, for me, when given the goal of ‚Äúconsistency‚Äù without the context of why it‚Äôs important for our primary goal, I‚Äôd be much more motivated.&lt;/p&gt;
&lt;p&gt;Another example is ‚Äúpatterns.‚Äù I think initially ‚Äúpatterns‚Äù are just solutions to some pre-existing problems, but we put too much emphasis on them to the point where we forget about the goals of these patterns, and the patterns themselves become the goal. To be clear, I‚Äôm not saying patterns are bad or that we shouldn‚Äôt use them. We should know them, in the same way we should know other just-in-case knowledge, to perform better. Some patterns are just cool, and we derive joy from them, the same way we get joy from movies and music. I‚Äôm just saying we probably shouldn‚Äôt treat them as primary goals (unless in school, I guess, where you get points for implementing a pattern).&lt;/p&gt;
&lt;p&gt;Now that I think about it, this may just be a communication issue within an organization, where secondary goals are communicated without the connection to primary goals. I‚Äôve never worked in a big organization, and I wonder how they do it. Also, am I alone in this? Do other people feel demoralized too when given just a secondary goal?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìë &lt;a href="https://bernsteinbear.com/pl-resources/"&gt;Programming languages resources&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-01T09:50:53.032Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page is a collection of my favorite resources for people getting started writing programming languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üî® &lt;a href="https://blog.bracha.org/primordialsoup.html?snapshot=AmpleforthViewer.vfuel&amp;amp;docName=BreakingSilos"&gt;Breaking Silos&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-02T08:50:06.179Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.bracha.org/primordialsoup.html?snapshot=AmpleforthViewer.vfuel&amp;amp;docName=BreakingSilos"&gt;Breaking Silos&lt;/a&gt; by Gilad Bracha&lt;/p&gt;
&lt;p&gt;Experiment: AI assisted summary edited by me to pique your interest (let me know what you think):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modern applications are siloed and have difficulty cooperating with each other.&lt;/li&gt;
&lt;li&gt;This was not always the case, exemplified by the Apple Newton, a mobile device released nearly 30 years ago.&lt;/li&gt;
&lt;li&gt;Apps on the Newton were written in NewtonScript, a prototype-based language.&lt;/li&gt;
&lt;li&gt;Newton applications had a flexible top-level view, enabling app compositionality where entire apps could be nested within others.&lt;/li&gt;
&lt;li&gt;Objects in NewtonScript (called frames) inherited properties from both their prototype and their parent, facilitating UI use.&lt;/li&gt;
&lt;li&gt;This inheritance allowed an app to function as a widget inside another app, enabling dynamic interaction between nested and enclosing apps.&lt;/li&gt;
&lt;li&gt;Apps on the Newton persisted their data in object stores called soups, which were accessible by multiple apps.&lt;/li&gt;
&lt;li&gt;The concept of co-designing language and UI existed earlier, exemplified by the Boxer system from the 1980s.&lt;/li&gt;
&lt;li&gt;Another example of compositionality is Morphic, a graphics system developed in Self and later adapted for Squeak and Lively Kernel, focusing on graphical structure rather than application logic.&lt;/li&gt;
&lt;li&gt;Inspired by Morphic, the idea of an app store with composable apps was proposed about twenty years ago.&lt;/li&gt;
&lt;li&gt;These apps would live-update, synchronize automatically, and be local-first, a concept predating Apple's app store.&lt;/li&gt;
&lt;li&gt;Newspeak language derived partly from this effort.&lt;/li&gt;
&lt;li&gt;A practical example of app composition is in travel, where a button for weather lookup could be embedded into an itinerary and dynamically interact with surrounding widgets to display relevant weather information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üí° &lt;a href="https://alexanderobenauer.com/think/"&gt;The Interfaces With Which We Think&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-02T09:33:02.250Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The concepts in modern operating systems ‚Äî apps, windows, desktops, notifications, and so on ‚Äî have so permeated our understanding of personal computing that it‚Äôs hard to imagine anything else, let alone believe there could be anything better.It‚Äôs easy to assume that this is, somehow, simply, 
 &lt;em&gt;how computers work&lt;/em&gt; 
.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But this can‚Äôt be further from the truth.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=yKZ15O7zeHY"&gt;progrium technology thesis 2022&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-05T14:58:26.269Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/yKZ15O7zeHY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Revisited Jeff Lindsay's &lt;a href="https://www.youtube.com/watch?v=yKZ15O7zeHY"&gt;2022 thesis video&lt;/a&gt; and, yep, it still kicks ass.&lt;/p&gt;
&lt;p&gt;üß´ &lt;a href="http://blug.crispypin.cc/cellthing"&gt;cell thingy&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-05T23:32:17.192Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incredible project: "cell thingy" inspired by CellPond and MarkovJunior&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://x.com/_rygo6/status/1809346180650004992"&gt;Tweet from @x&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-06T00:09:15.257Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://x.com/_rygo6/status/1809346180650004992"&gt;x.com/_rygo6/status/1809346180650004992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I replied to this point mentioning my unshakeable belief in what I am doing, and it occurred to me that there aren't actually many on this FoC Slack who can equally say that they know  &lt;em&gt;exactly&lt;/em&gt;  what they are certain is right for the Future of (Programming)! We get a lot of speculative and experimental thoughts here which is the reason we all engage, but who amongst you can say you are 110% certain you've found what you believe to be the Future, with the uncertainty  &lt;em&gt;only&lt;/em&gt;  being in "whenever that comes about"? Which  of course, as the Twitter thread mentions, is about the seemingly trivial but of course 110% important factor of "memeing" to the Internet. Personally, I'm crap at that bit.&lt;/p&gt;
&lt;p&gt;üìë &lt;a href="https://bits.ashleyblewer.com/halt-and-catch-fire-syllabus/"&gt;Ashley Blewer's Halt and Catch Fire Syllabus&lt;/a&gt; via &lt;strong&gt;Walker Griggs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W2/linking-together.html#2024-07-07T19:39:39.203Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A CFL (call for links). Does anyone have any other examples of non-academic syllabi like &lt;a href="https://bits.ashleyblewer.com/halt-and-catch-fire-syllabus/"&gt;Ashley Blewer's Halt and Catch Fire Syllabus&lt;/a&gt;? Specifically a curated, self guided exploration of a topic that references foundational academic works but is itself not created as a formal course. That vast majority of syllabi online are (under)grad syllabi reposted by the department or professor &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-2/</guid><pubDate>Sun, 07 Jul 2024 21:22:57 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/07 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üîå Is an AI copilot for LabVIEW possible? üíæ Local, first, forever üé• Future of Coding virtual meetup #2&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.instagram.com/p/C8xbV09ufpr/"&gt;Working on live notation systems with spatial computing for our lil robots‚Ä¶&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/two-minute-week.html#2024-06-30T10:14:20.340Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A bit more progress with hand-drawn code. Towards the end you can see there's a bit of abstraction going on &lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://marianoguerra.org/posts/macros-and-optimizations-its-just-a-phase/"&gt;Macros and optimizations: it's just a phase&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/share-your-work.html#2024-06-24T09:34:59.313Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.org/posts/macros-and-optimizations-its-just-a-phase/"&gt;Macros and optimizations: it's just a phase&lt;/a&gt;: The one where I implement macros and optimizations as a sequence of evaluations with different semantics&lt;/p&gt;
&lt;p&gt;üíÅ is this ü¶ã homoiconic?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/hamish_todd"&gt;Hamish Todd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/share-your-work.html#2024-06-24T20:34:49.824Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I posted a longer version of this above, but I don't think I introduced it very well! It's a stab at Stop Drawing Dead Fish in VR with spreadsheets and something called Geometric Algebra (GA) also known as Clifford Algebra.&lt;/p&gt;
&lt;p&gt;Those who have scrutinized Stop Drawing Dead Fish(SDDF) closely might have noticed two references to GA. Bret also used to have a "Geometric Algebra" sticker on his laptop! But while GA is a very Bret thing, he actually did not  &lt;em&gt;use&lt;/em&gt;  it to make SDDF, so my thing is trying to make good on that.&lt;/p&gt;
&lt;p&gt;GA is a mathematical system where you get a bunch of geometric objects and transformations, and they all get related to one another by math that is quite a lot simpler than usual. For example, in the conventional/non-GA approach, if you wanted a line in 3D space you'd take two "vectors" v1 and v2 and say the line is the set of vectors v1+t*v2 for all scalars t. This can be kinda useful, but gets complicated if you ask for a simple thing like a rotation around that line. In the GA way of doing things, instead of being "a set of vectors", a line is its own sort of object - lines can be added together; multiplied by planes and rotations; etc. Lots of useful operations turn out to be examples of this, I've attached a pdf of examples.&lt;/p&gt;
&lt;p&gt;"doing math/programming by working directly with (tangible/visualizable) geometric objects instead of with linear equations" should strike you as a centrally Bret thing. But why didn't he use it? I'll say in a comment under this message.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07A7GECRA4.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/zXmC3BVIVuQ"&gt;Exploring Technique and Notations for Augmenting DX&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/share-your-work.html#2024-06-26T21:46:45.632Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/zXmC3BVIVuQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;FTR: Here is the demo video I presented earlier today. I've added links, in the form of a Kinopio page, to the other technologies that I didn't demo.&lt;/p&gt;
&lt;p&gt;Exploring Techniques and Notations for Augmenting DX&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/share-your-work.html#2024-06-28T20:29:33.026Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In my demo, I made the statement "... t2t doesn't need the full power of OhmJS ...", but, I didn't clarify.&lt;/p&gt;
&lt;p&gt;For t2t - text to text transpilation - primarily, you need to pattern-match incoming text, then emit text based on the input.&lt;/p&gt;
&lt;p&gt;OhmJS parses incoming text, then gives you the full power of JavaScript to do anything you want with the parse tree.&lt;/p&gt;
&lt;p&gt;For t2t, you don't need to resort to class hierarchies, functions, closures, etc., etc. You primarily need to pattern match, then, create and modify text. In addition to OhmJS' ability to pattern-match, Javascript's "template strings" are about all you need - the ability to create text and to interpolate text from the tree walk of the parsed input.&lt;/p&gt;
&lt;p&gt;This  &lt;em&gt;seems&lt;/em&gt;  to be unnecessarily restrictive, but, turns out to be quite powerful and mind-freeing. Fewer options -&amp;gt; less clutter -&amp;gt; increased ability to think about interesting issues. After all, "simplicity" == "lack of nuance", and, my goal is to simplify DX.&lt;/p&gt;
&lt;p&gt;[Infrequently, one needs to do a tiny bit more (like gensym() a new symbol and leave it on a scoped stack for use during the tree-walk), so I provide a way to break out and call a Javascript function, but, this kind of power is not needed in most cases. I guess that, in the future, I will restrict this some more, but, I'm still experimenting].&lt;/p&gt;
&lt;p&gt;üîå &lt;a href="https://www.linkedin.com/posts/jimkring_labview-sparkles-is-an-ai-copilot-for-activity-7212597622111449088-VQKe"&gt;Is an AI copilot for LabVIEW possible?&lt;/a&gt; via &lt;strong&gt;Jim Kring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/share-your-work.html#2024-06-29T00:10:07.724Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm close to publicly releasing an AI powered coding assistant for LabVIEW, a visual programming language. &lt;a href="https://www.linkedin.com/posts/jimkring_labview-sparkles-is-an-ai-copilot-for-activity-7212597622111449088-VQKe"&gt;Here is a teaser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07A8DL0JN9.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üê∏üé• &lt;a href="https://youtube.com/live/hlsDbXSZ2ko"&gt;Reaction Reaction&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/share-your-work.html#2024-06-29T22:13:49.379Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I did a four hour livestream performance art piece where I explore the nature of recursion and infinity and time. And it starts with me doing some crappy live coding&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reaction Reaction" src="https://i.ytimg.com/vi/hlsDbXSZ2ko/maxresdefault.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/LayMwCIQAnM"&gt;Embedding codeflowcanvas and exporting to different formats&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/devlog-together.html#2024-06-30T10:55:48.622Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/LayMwCIQAnM/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/LayMwCIQAnM"&gt;In this video&lt;/a&gt; you can see the progress I made on opening up codeflowcanvas so that it is embeddable in other frameworks/libraries like Astro/Angular and React. I've restructured some of the packages that the project uses and published these to NPM. You can see the embedding of codeflowcanvas on its own website using a custom StorageProvider for loading json files from a javascript bundle: &lt;a href="https://www.codeflowcanvas.io/devlog/embedded-codeflowcanvas/"&gt;codeflowcanvas.io/devlog/embedded-codeflowcanvas&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;This goal of this restructuring is to get codeflowcanvas out of its own silo on various way (for example in the future I want to be able to design flows in a vscode editor and use these together with other framework/libraries without embedding the editor and just run the flows).&lt;/p&gt;
&lt;p&gt;A feature that is also made possible by the above is being able to export to external formats like tldraw and the OpenCanvas work-in-progress spec (see &lt;a href="https://www.canvasprotocol.org/"&gt;canvasprotocol.org&lt;/a&gt;). Different strategies can be implemented to provide different formats.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/thinking-together.html#2024-06-24T00:44:20.647Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm becoming interested in the idea of "programming tools as art", and as a consequence I'm interested in programming tools criticism.&lt;/p&gt;
&lt;p&gt;I'd like to read/watch/hear critical reviews of programming tools that approach them not as bundles of features and capabilities, but as authored works that reflect a creative intent and as cultural touchstones and as environments or artifacts within which one can have deeply personal experiences.&lt;/p&gt;
&lt;p&gt;A. Do you share my interest?&lt;/p&gt;
&lt;p&gt;B. Do you know any such critics?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/thinking-together.html#2024-06-29T08:24:53.795Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Who'd be interested in an event with talks and some performances around making notations and programming languages for pattern-making (textile, musical, choreographic etc)? Half focussed online, half focussed in-person, all streamed. Mix of open call and invited talks. All free/open access. Probably in January. Maybe called "Programming Of The Art Computer".&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;GuzhIRegem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/thinking-together.html#2024-06-30T19:19:11.815Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey, someone knows about any research into RAG-Based training of models?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=ubaX1Smg6pY"&gt;Is it really "Complex"? Or did we just make it "Complicated"?&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/linking-together.html#2024-06-24T20:12:20.288Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ubaX1Smg6pY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Alan Kay talk ‚ÄòIs it really "Complex"? Or did we just make it "Complicated‚Äù?‚Äô. The talk was given some 9 years ago, but, this is the first time that I‚Äôve seen it&lt;/p&gt;
&lt;p&gt;My highlights:&lt;/p&gt;
&lt;p&gt;51:21 suppressing the present to see different ways to address the future&lt;/p&gt;
&lt;p&gt;51:35 ‚Äúsemaphore‚Äù is a ‚Äúbad idea‚Äù, pseudo-time is superior, but never got used over last 30 years&lt;/p&gt;
&lt;p&gt;54:10 Nile Graphics Language by Dan Amelang is a dataflow language and is very small. Expresses how to define shapes using pixels in only 45 lines of code.&lt;/p&gt;
&lt;p&gt;54:51 - Bret Victor at VPRI&lt;/p&gt;
&lt;p&gt;57:59 all compositing rules, including alpha-blending, is expressed in 95 LOC&lt;/p&gt;
&lt;p&gt;59:16 whole graphics system, equivalent to what is needed on a PC, is expressed in 435 LOC&lt;/p&gt;
&lt;p&gt;1:01:00 - Code has to be transformed into CPU-speak&lt;/p&gt;
&lt;p&gt;1:01:38 - we need a ‚Äúlanguage transforming language‚Äù [[pt] At present, I use the term ‚Äút2t‚Äù (text to text)]&lt;/p&gt;
&lt;p&gt;1:01:58 - OMeta2 [[pt] OhmJS is an ancestor of OMeta2]&lt;/p&gt;
&lt;p&gt;1:02:58 Using OMeta to make Nile, parser 130 LOC, LLL 730 LOC&lt;/p&gt;
&lt;p&gt;1:06:00 TCP/IP expressed in 160 LOC&lt;/p&gt;
&lt;p&gt;1:20:24 POLs == Problem Oriented Languages [[pt] I use the term SCN - Solution Centric Notation]&lt;/p&gt;
&lt;p&gt;1:37:37 hardware is just software that is crystallized early [[pt] I say it another way: software is just soft hardware]&lt;/p&gt;
&lt;p&gt;üíæ &lt;a href="https://tonsky.me/blog/crdt-filesync/"&gt;Local, first, forever&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/linking-together.html#2024-06-25T10:11:50.811Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On Interoperability of sync services for software designed to be Local-First&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://create.vi/programming-in-abstract-g-7e970f123f3c?source=friends_link&amp;amp;sk=a53e37d328f1fbc2a8020c94c1f4c0b0"&gt;Programming in ‚ÄúAbstract G‚Äù&lt;/a&gt; via &lt;strong&gt;Jim Kring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/linking-together.html#2024-06-26T06:28:11.970Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here‚Äôs an article I wrote on a visual dataflow language modality where the execution of the graphical dataflow dynamically constructs the dataflow graph that is itself executing. (It‚Äôs similar to how Elixer functions can output AST for the function instead of the result and one can alternate between AST via quote/unquote)&lt;/p&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/iYJcVXjRi-I"&gt;Detailed walk-through and explainer&lt;/a&gt; via &lt;strong&gt;avon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/of-music.html#2024-06-24T17:57:51.540Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/iYJcVXjRi-I/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ran into this strange and wonderful physical modeling synthesizer called Anukari which has a lot of lovely 3D VPL concepts in its interface design&lt;/p&gt;
&lt;p&gt;The dev also did an ADC talk and there‚Äôs a lot of interesting computing going on under the hood, like using the GPU to do all of the physical modeling math: &lt;a href="https://youtu.be/lb8b1SYy73Q"&gt;Fast Audio Thread Synchronization for GPU Data - Evan Mezeske - ADC23&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Logic Programming&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/of-logic-programming.html#2024-06-27T22:49:59.308Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What would the syntax be for searching any statement that includes the atom  &lt;code&gt;socrates&lt;/code&gt; ?&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=4lG2vFffAO4"&gt;Virtual Meetup 2 ‚Ä¢ June 26, 2024&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/07/W1/present-company.html#2024-06-30T16:42:23.997Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/4lG2vFffAO4/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Recording of last week's &lt;a href="https://www.youtube.com/watch?v=4lG2vFffAO4"&gt;Future of Coding virtual meetup #2&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202407-week-1/</guid><pubDate>Sun, 30 Jun 2024 20:19:42 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/06 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéôÔ∏è Future of Coding 72 ‚Ä¢ Pygmalion üé• The Alternate Reality Kit üëì We Need a Super Cockpit for the Mind&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/960586512?share=copy"&gt;Explaining effects with EYG&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/two-minute-week.html#2024-06-17T19:00:35.010Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1873147383-ae6415a62d271b3df82f1697fd48b5ef57653e683e9ff5d19c530df2735f3970-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;Trying to explain effects better with EYG &lt;/p&gt;
&lt;p&gt;‚è∫Ô∏è &lt;a href="https://101010.pl/@maf/112655963538298090"&gt;new Macro Recorder object was added this week&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/two-minute-week.html#2024-06-21T18:29:21.803Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A new object was added to Automat over the last week - it's the final one that is needed for the MVP to work. And it does work! I've recorded myself writing a small C++ program and the macro recorder replayed it correctly ^^&lt;/p&gt;
&lt;p&gt;I guess I'll start posting Automat updates to Mastodon :) Here is the first one - a new Macro Recorder object was added this week!&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üêü &lt;a href="https://www.youtube.com/watch?v=6l1HlOwOq3g"&gt;Future of Coding 71-VISION ‚Ä¢ This is not a fish&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/share-your-work.html#2024-06-17T15:47:39.763Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/6l1HlOwOq3g/hqdefault.jpg"&gt;
Here it is... the Future of Coding's first official  &lt;em&gt;&lt;em&gt;video adaptation.&lt;/em&gt;&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;This is This is not a fish&lt;/p&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://futureofcoding.org/episodes/072"&gt;Future of Coding 72 ‚Ä¢ Pygmalion by David C. Smith&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/share-your-work.html#2024-06-19T13:47:21.784Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're anything like me (oof, sorry), you've heard of &lt;a href="https://worrydream.com/refs/Smith_DC_1975_-_Pygmalion.pdf"&gt;Pygmalion&lt;/a&gt; but never caught more than the gist. Some sort of project from the early 70s, similar to Sketchpad or Smalltalk or something, yet another promising prototype from the early history of our field that failed to take the world by storm. Our stock-in-trade on this show.&lt;/p&gt;
&lt;p&gt;But you've probably heard of Programming by Demonstration. And you've certainly heard of  &lt;em&gt;icons&lt;/em&gt;  ‚Äî you know, those little pictures that have become indelibly part of computing as we know it. Pygmalion is the originator of these concepts‚Ä¶ and more!&lt;/p&gt;
&lt;p&gt;The best introduction to Pygmalion is &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;'s &lt;a href="https://instadeq.com/blog/posts/no-code-history-pygmalion-1975/"&gt;No-code History: Pygmalion&lt;/a&gt;, which includes a clearly articulated summary of the big ideas, motivation, and design, with a video demonstration of the programming interface, key terminology, and links.&lt;/p&gt;
&lt;p&gt;The  &lt;em&gt;most&lt;/em&gt;  introduction to Pygmalion ‚Äî or Pig Million, The Millionth Pig, as it'll surely come to be known ‚Äî is the subject of today's episode: the original paper by &lt;a href="https://en.wikipedia.org/wiki/David_Canfield_Smith"&gt;David Canfield Smith&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;üê¢ &lt;a href="https://marianoguerra.org/posts/make-your-self/"&gt;Make Your Self&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/share-your-work.html#2024-06-20T09:13:04.469Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.org/posts/make-your-self/"&gt;Make Your Self: In Search for Maxwell's equations of OOP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My attempt at growing the smallest object oriented language step by step, let me know what you think!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://untested.sonnet.io/Just+Some+Innocent+Gradient+Fun"&gt;Just Some Innocent Gradient Fun - Untested&lt;/a&gt; via &lt;strong&gt;Rafa≈Ç Pastuszak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/share-your-work.html#2024-06-21T11:52:13.977Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://untested.sonnet.io/Just+Some+Innocent+Gradient+Fun"&gt;Some Innocent Gradient Fun&lt;/a&gt; (explaining how to apply shading via noise + posterise in SVG)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi there! This one will be quick. Let's let the code speak for itself for a change. innocent-gradient-fun.webp A week back or so I saw a video by a channel called Texture Labs explaining a simple sha‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/devlog-together.html#2024-06-23T09:06:30.766Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0799443GR3.mov"&gt;Flying chars&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=w1HhPE0zV6g"&gt;The Alternate Reality Kit&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/reading-together.html#2024-06-21T18:54:21.787Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/w1HhPE0zV6g/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've just learned about Alternate Reality Kit. I've searched through the archive and it was mentioned in passing a couple of times but I don't think this article was ever posted: &lt;a href="https://worrydream.com/refs/Smith_R_1987_-_Experiences_With_The_Alternate_Reality_Kit,_An_Example_of_the_Tension_Between_Literalism_and_Magic.pdf"&gt;Experiences With The Alternate Reality Kit
An Example of the Tension Between Literalism and Magic&lt;/a&gt; . There is also a relatively recent video upload (video comes from 87 but it was uploaded only three years ago) which shows a more mature version in action: &lt;a href="https://www.youtube.com/watch?v=w1HhPE0zV6g"&gt;The Alternate Reality Kit&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Its similarity to the system that I'm developing is just uncanny! I'm very interested in learning more about it. I tried to follow its history to figure out why it was abandoned but I've only been able to track that its development eventually led to the Self language (&lt;a href="https://www.youtube.com/watch?v=3ka4KY7TMTU"&gt;Self and Self: Whys and Wherefores&lt;/a&gt;) which honestly seems like a step back from the original. I have my theories about why it might have been abandoned (which is that educational software is hard to sell) but would love to learn more about it from the people who might know more. Or maybe there are other systems that might have been derived from it?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=3ka4KY7TMTU"&gt;Self and Self: Whys and Wherefores&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Self and Self: Whys and Wherefores" src="https://i.ytimg.com/vi/3ka4KY7TMTU/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí¨ &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/reading-together.html#2024-06-22T08:20:28.824Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don't know, but I have my hypothesis as well as for why this and other user-empowering approaches were abandoned: the rise of PCs. In the late 80s and early 90s, the first PCs appeared and were seen as the obvious road to computing for everyone. But they were not powerful enough to run environments like Smalltalk. It's Basic we got instead. In parallel, professional high-end computing grew as well and that's where the money was. Academia followed the money.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/thinking-together.html#2024-06-23T14:22:43.070Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Builders manifesto&lt;/em&gt;  (aka*  &lt;em&gt;Software builders manifesto&lt;/em&gt; )&lt;/p&gt;
&lt;p&gt;Build as much as you can, experiment as much as you can, build something you are passionate about.&lt;/p&gt;
&lt;p&gt;*-  &lt;em&gt;I just created this manifesto, so it is a bit of overstretch on the ‚Äúaka‚Äù part&lt;/em&gt; üòÑ&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://kar.kent.ac.uk/105537/"&gt;Achieving Self-Sustainability in Interactive Graphical Programming Systems&lt;/a&gt; via &lt;a href="https://twitter.com/chatur_shalabh"&gt;Shalabh Chaturvedi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/linking-together.html#2024-06-21T00:37:50.376Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Joel Jakubovic&lt;/strong&gt;‚Äôs thesis should be interesting to folks here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Achieving Self-Sustainability in Interactive Graphical Programming Systems&lt;/em&gt; 
Programming is fraught with accidental complexity. Software, including tools used for programming, is inflexible and hard to adapt to one's specific problem context. Programming tools do not support Notational Freedom, so programmers must waste cognitive effort expressing ideas in suboptimal notations. They must also work around problems caused by a reliance on plain text representations instead of Explicit Structure.&lt;/p&gt;
&lt;p&gt;The idea of a Self-Sustainable programming system, open to adaptation by its users, promises a way out of these accidental complexities. However, the principles underlying such a property are poorly documented, as are methods for practically achieving it in harmony with Notational Freedom and Explicit Structure. We trace the causes of this difficulty and use them to inform our construction of a prototype self-sustainable system. By carefully reflecting on the steps involved in our specific case, we provide insight into how self-sustainability can be achieved in general, and thus how a motivated programmer can escape the aforementioned sources of accidental complexity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Future of Coding also gets a shout-out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I must express my gratitude to the Future of Coding Slack channel
for making me aware of Tomas‚Äô PhD opportunity in late 2018&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üëì &lt;a href="https://www.youtube.com/watch?v=zQK2tT5XGvM"&gt;We Need a Super Cockpit for the Mind (History Talk) By Tom Furness&lt;/a&gt; via &lt;strong&gt;Justin Janes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/linking-together.html#2024-06-21T20:54:06.891Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/zQK2tT5XGvM/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üêò &lt;a href="https://kolektiva.social/@beka_valentine/112662047834933775"&gt;epic mastodon thread&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/linking-together.html#2024-06-22T21:33:27.693Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://kolektiva.social/@beka_valentine/112662047834933775"&gt;epic mastodon thread&lt;/a&gt; has some interesting reflections on Pygmalion.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://christopher-alexander-ces-archive.org/"&gt;Christopher Alexander &amp;amp; Center for Environmental Structure Archive&lt;/a&gt; via &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/linking-together.html#2024-06-23T12:07:32.370Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those of you interested in Christopher Alexander‚Äôs work: The &lt;a href="https://christopher-alexander-ces-archive.org/"&gt;Christopher Alexander &amp;amp; Center for Environmental Structure Archive&lt;/a&gt; is live. Here's an excerpt from Maggie Moore Alexander's announcement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This new website gives access to 50+ years of work by Alexander and colleagues at CES. The goal of this continuing endeavor is to share the work with all who wish to build and repair living environments in which people thrive.
In total, the Archive includes some 29,000 items. About 50% of them have been catalogued to date and are listed on the website. Around 6000 items have been digitized and are now available from the website as downloads. As funding allows, we will work toward making the whole collection available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=01yE-vzJ-NE"&gt;Autocomplete for infinite canvas - Lu Wilson - tldraw - AI Demo Days #1&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/of-ai.html#2024-06-20T10:14:46.419Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/01yE-vzJ-NE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;‚Äôs AI demo for TLDraw: &lt;a href="https://www.youtube.com/watch?v=01yE-vzJ-NE"&gt;youtube.com/watch?v=01yE-vzJ-NE&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Ezhik&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W4/present-company.html#2024-06-19T15:44:51.844Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;have you ever done a project where you added an embedded programming language for scripting, configuration, fun, etc? what's your go-to choice for the language? why?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-4/</guid><pubDate>Sun, 23 Jun 2024 21:27:12 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/06 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üé• Snappets: Procedural Animation for children (in VR!) üßÆ iPadOS "math notes" üí° Some possible goals for the future of software&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/two-minute-week.html#2024-06-14T16:03:00.951Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Things are moving again in the right direction üôÇ This week two new objects got finished - the Timeline and the Key Presser. Just one more and the MVP will be complete ^^&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0783RLJFFF.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=18JM63FfMGI"&gt;HypoTalk: Let's put JavaScript back in the event handlers&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/share-your-work.html#2024-06-13T15:32:42.280Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/18JM63FfMGI/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A demo of HypoTalk, a live environment to develop and compose UIs with the least amount of logic possible.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/Tf5RUJP-4oE"&gt;Snappets: Procedural Animation for children (in VR!)&lt;/a&gt; via &lt;a href="https://twitter.com/hamish_todd"&gt;Hamish Todd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/share-your-work.html#2024-06-13T17:18:52.912Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Tf5RUJP-4oE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hey folks, a video of the mathematical animation program I've been working on!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://enderversing.itch.io/uracoder"&gt;You Are A Coder (zine) by enderverse&lt;/a&gt; via &lt;strong&gt;ender&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/share-your-work.html#2024-06-14T21:10:28.411Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚ÄúEnd users‚Äù are &lt;a href="https://gist.github.com/melaniehoff/95ca90df7ca47761dc3d3d58fead22d4"&gt;always already programming&lt;/a&gt;. &lt;a href="https://enderversing.itch.io/uracoder"&gt;I made a (digital) zine about this&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/devlog-together.html#2024-06-16T15:49:44.591Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;very small update to my new project (name selection pending)&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F078E7J7ZEY.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/thinking-together.html#2024-06-10T07:00:03.872Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/spreadsheets/d/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc/edit?pli=1#gid=0"&gt;A spreadsheet with the FoC projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;ender&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/thinking-together.html#2024-06-14T21:01:55.160Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am currently thinking about working on one or more of these ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visual pl for creating your own compiler&lt;/li&gt;
&lt;li&gt;visual pl for spreadsheet creation and customization &lt;/li&gt;
&lt;li&gt;visual pl for making domain specific languages &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will probably converge on a visual programming language with a spreadsheet GUI that compiles to WebAssembly. Any resources for intuition about compilers, spreadsheets, or DSLs that help me understand these topics would much appreciate.&lt;/p&gt;
&lt;p&gt;(think: x explained visually, explorable explanations)&lt;/p&gt;
&lt;p&gt;üí°üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/thinking-together.html#2024-06-15T10:49:53.662Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some possible goals for the future of software&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;After some &lt;a href="https://history.futureofcoding.org/?fromDate=2024-06-03&amp;amp;toDate=2024-06-09&amp;amp;channel=linking-together&amp;amp;filter=#2024-06-06T09:00:05.411Z"&gt;üí¨ #linking-together@2024-06-06&lt;/a&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1717926129937119"&gt;discussions&lt;/a&gt;, I spent some time searching the archives of this community for the word 'manifesto', then skimming the manifestos I found in search of their goals, phrased as  &lt;em&gt;problems&lt;/em&gt;  they saw in the world. Then I clustered them by these problems. Here's what I ended up with, possible problems we have seen in the past:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Programming computers requires a lot of knowledge and effort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dkrasner/Simpletalk/blob/master/ComputingManifesto.pdf"&gt;github.com/dkrasner/Simpletalk/blob/master/ComputingManifesto.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/stefanlesser/recurse/blob/master/manifesto2017.md"&gt;github.com/stefanlesser/recurse/blob/master/manifesto2017.md&lt;/a&gt; (creating data visualizations)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapting software to ourselves is hard; few people do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.researchgate.net/publication/220427813_Meta-Design_A_manifesto_for_End-User_Development"&gt;researchgate.net/publication/220427813_Meta-Design_A_manifesto_for_End-User_Development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://malleable.systems"&gt;malleable.systems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software is trapped in silos (apps) and can't be recomposed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://malleable.systems"&gt;malleable.systems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://object.network/vw-llll.html"&gt;object.network/vw-llll.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software is inefficient and unstable because it's built atop a Jenga-like tower of dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://handmade.network/manifesto"&gt;handmade.network/manifesto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vladh.net/manifesto"&gt;vladh.net/manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://guidoism.github.io/escape/day_two_manifesto"&gt;guidoism.github.io/escape/day_two_manifesto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmers encourage the world to be profligate with the attention of others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/stefanlesser/recurse/blob/master/manifesto2017.md"&gt;github.com/stefanlesser/recurse/blob/master/manifesto2017.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software has a deep influence on populations without corresponding accountability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://criticalengineering.org"&gt;criticalengineering.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmers build software atop platforms optimized for consumption rather than creation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.inkandswitch.com"&gt;inkandswitch.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmers can't build a sustainable living without behaving in anti-social ways hostile to their customers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://altocode.nl/blog/manifesto"&gt;altocode.nl/blog/manifesto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/stefanlesser/recurse/blob/master/manifesto2017.md"&gt;github.com/stefanlesser/recurse/blob/master/manifesto2017.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programming requires simulating the computer in your head.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://shalabh.com/programmable-systems/wheres-my-simulator.html"&gt;shalabh.com/programmable-systems/wheres-my-simulator.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UIs are poor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Slackadays/Clipboard/wiki/User-Experience-Manifesto"&gt;github.com/Slackadays/Clipboard/wiki/User-Experience-Manifesto&lt;/a&gt; (discoverability)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/stefanlesser/recurse/blob/master/manifesto2017.md"&gt;github.com/stefanlesser/recurse/blob/master/manifesto2017.md&lt;/a&gt; (touch-screen controls)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to break a computer's software in such a way that it requires outside intervention (e.g. a rescue disk) to fix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://guidoism.github.io/escape/day_two_manifesto"&gt;guidoism.github.io/escape/day_two_manifesto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computers can't model the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.dcs.warwick.ac.uk/~hugh/TTM/DTATRM.pdf"&gt;dcs.warwick.ac.uk/~hugh/TTM/DTATRM.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the problem you're chasing doesn't quite fit in any of these buckets, please share it in a similar format. (One sentence, not describing a solution.) If it does fit one or more of these buckets, please mention them. (Alternative wordings are also appreciated, but for me the primary goal here is to cluster ourselves.)&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Don Abrams&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/thinking-together.html#2024-06-16T04:20:02.536Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;we keep telling computers how to work instead of what they should do&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üêò &lt;a href="https://dmv.community/@jcrabapple/112581785003487017"&gt;Explorable explanations for great good&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/linking-together.html#2024-06-10T05:20:10.318Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßÆ &lt;a href="https://www.youtube.com/live/RXeOiIDNNek?si=D0I3FnVdzoCgV8em&amp;amp;t=2790"&gt;iPadOS "math notes" brings some spreadsheet/Calca mechanics to handwriting&lt;/a&gt; via &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/linking-together.html#2024-06-13T17:41:45.059Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oh, and they even added Bret Victor style variable "scrubbing".&lt;/p&gt;
&lt;p&gt;(Desktop also got builtin Math Notes, minus handwriting, briefly flashed 51:57 ‚Äî looks very much like &lt;a href="http://Calca.io"&gt;Calca.io&lt;/a&gt; / Soulver / NoteCalc etc.?)&lt;/p&gt;
&lt;p&gt;So, are we "Magic Ink" yet?  (I'm not so much thinking of Bret Victor's essay as Ink&amp;amp;Switch's experiments like &lt;a href="https://www.inkandswitch.com/inkbase/"&gt;inkandswitch.com/inkbase&lt;/a&gt;, CrossCut &amp;amp; Untangle ...)&lt;/p&gt;
&lt;p&gt;On one hand nothing revolutionary, spreadsheets had much more power for decades.&lt;/p&gt;
&lt;p&gt;And yet a solid chunk of useful functionality is starting to move into taken-for-granted "this is just how futuristic paper  &lt;em&gt;naturally&lt;/em&gt;  works" territory üëè.&lt;/p&gt;
&lt;p&gt;I expect long term it might make such "what-if" explorations accessible¬π to more people, and more importantly prepare people for more complex interactions on top?&lt;/p&gt;
&lt;p&gt;¬π well, once/IF it waters down to lower-end hardware.  Good-enough stylus tech remains expensive enough to be niche,  &lt;em&gt;not&lt;/em&gt;  evenly distributed üòû&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/linking-together.html#2024-06-14T14:45:53.447Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I always thought field was well ahead of its time. Prefigured a lot of Bret Victor's demos and future of coding work that followed in 'real world' use.. Happy to see it is still active. Has anyone used it?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://openendedgroup.com/field2/"&gt;openendedgroup.com/field2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OpenEndedGroup/Field2"&gt;github.com/OpenEndedGroup/Field2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://arcprize.org/"&gt;arcprize.org&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/of-ai.html#2024-06-15T04:51:50.512Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an AGI benchmark where LLMs currently perform 34%. A prize has been announced for the first team to reach 85% performance: &lt;a href="https://arcprize.org/"&gt;arcprize.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Iacob Nasca&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W3/present-company.html#2024-06-16T19:52:24.583Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;anyone around here working in a R&amp;amp;D department ? I need some pointers. Thanks!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-3/</guid><pubDate>Sun, 16 Jun 2024 20:21:41 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/06 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;ﬂ∑ Where Unison is headed üí° Ruminating about mutable value semantics üíö FoC Demos&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üíöüé• &lt;a href="https://vimeo.com/953263666?share=copy"&gt;Lustre on Gleam tours&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/two-minute-week.html#2024-06-04T04:17:52.230Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1863510917-80d3af273eac41164dc81959e966a3004d9a8276a4875860e625e520d8db5677-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I made a project to have lots of concepts explained in Gleam tours. Gleam runs in the browser and server so I think that this might be a good platform to explain a lot of things. I've been showing Gleam to non programmers and they mostly "get it" as long as there is no installation, editor setup, deployment to worry about. My current though for the future of code is that no-code might be less important that no-ops.&lt;/p&gt;
&lt;p&gt;üíöüßë‚Äçüè´ &lt;a href="https://gleamtours.com/lustre-tutorial/introduction/welcome-to-lustre/"&gt;Welcome to lustre - The Lustre tutorial&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/two-minute-week.html#2024-06-05T19:12:15.660Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I finished implementing my first tutorial quicker than I expected. You can try it here. &lt;a href="https://gleamtours.com/lustre-tutorial/introduction/welcome-to-lustre/"&gt;gleamtours.com/lustre-tutorial/introduction/welcome-to-lustre&lt;/a&gt; It's a walk through creating a web app with Gleam and Lustre. The app is rendered in a separate window because future tours will allow you to implement a client and server and so the sandbox can't just be an element in the tours UI.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An interactive introduction and reference to the Gleam programming language. Learn Gleam in your browser!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üíöüé• &lt;a href="https://www.youtube.com/watch?v=zS3z1Y3Lye0"&gt;Gloodata Wikipedia Components: Summarize, Infobox and Tables&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/two-minute-week.html#2024-06-06T12:05:12.156Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/zS3z1Y3Lye0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zS3z1Y3Lye0"&gt;New Wikipedia plugins for gloodata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Short demo showing the three new Wikipedia plugins (Summarize, Infobox and Tables) and how they integrate with existing ones to get information about a thing or a place.&lt;/p&gt;
&lt;p&gt;üíöüê¶ &lt;a href="https://x.com/mafikpl/status/1799085263815406044"&gt;Marek Rogalski (@mafikpl) on X&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/two-minute-week.html#2024-06-07T14:33:58.434Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eh, I've just spent 5 hours doing high-school-level math just to draw a couple slightly curved lines =_= [&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://x.com/mafikpl/status/1799085263815406044"&gt;Marek Rogalski (@mafikpl) on X&lt;/a&gt;: Today cables in Automat improved their routing a bit! I'm pretty disappointed with the pace but at least it's going forward...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1799083882408488960/pu/img/qhuukvSAE28l0xtb.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üí° &lt;a href="https://www.scattered-thoughts.net/writing/ruminating-about-mutable-value-semantics"&gt;Ruminating about mutable value semantics&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/share-your-work.html#2024-06-04T01:21:31.870Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Still just ruminating in public, but I swear there is an actual compiler taking shape&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://everythingisagile.substack.com/p/what-is-agile?r=3yfd1i&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&amp;amp;triedRedirect=true"&gt;What is agile?&lt;/a&gt; via &lt;strong&gt;Jase Pellerin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/share-your-work.html#2024-06-04T19:36:18.819Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://everythingisagile.substack.com/p/what-is-agile?r=3yfd1i&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&amp;amp;triedRedirect=true"&gt;wrote a post&lt;/a&gt; about leveraging the raw core of agile to help focus attention and make cool shit. I plan to dig deeper and discuss more tools in future writing, but I would love any feedback!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://guitarvydas.github.io/2024/06/03/Relational-Programming-Simple-Use-Case.html"&gt;Relational programming simple use Case&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/share-your-work.html#2024-06-05T13:09:54.562Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just in case someone else finds this useful, here is a small case-study of a relational program written in Prolog, from another conversation. &lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=abArhHOwdEc"&gt;Simon &amp;amp; Tudor chatting about Moldable Development&lt;/a&gt; via &lt;a href="https://twitter.com/girba"&gt;Tudor Girba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/share-your-work.html#2024-06-06T12:28:05.684Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/abArhHOwdEc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Simon Wardley and I had a chat about Moldable Development. It talks about programming through custom tools (by which we mean thousands of tools per system).&lt;/p&gt;
&lt;p&gt;Perhaps it‚Äôs interesting for this community as well.&lt;/p&gt;
&lt;p&gt;üíöüé• &lt;a href="https://www.youtube.com/watch?v=Dk_ns2FXkCE"&gt;Context is all you need: Add previous actions as context to new prompts&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/share-your-work.html#2024-06-07T12:25:27.818Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Dk_ns2FXkCE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Context is all you need: Adding previous actions as context to evaluate the current prompt and avoid repetition.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/thinking-together.html#2024-06-09T09:42:09.937Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am sorry to  &lt;em&gt;interrupt&lt;/em&gt; , and this may sound like a question with an  &lt;em&gt;obvious&lt;/em&gt;  answer,&lt;/p&gt;
&lt;p&gt;but what are the  &lt;em&gt;goals&lt;/em&gt;  we are trying to achieve? What are the problems we are trying  &lt;em&gt;to&lt;/em&gt;   &lt;em&gt;solve&lt;/em&gt; ?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;ﬂ∑ &lt;a href="https://www.unison-lang.org/blog/where-unison-is-headed/"&gt;Where Unison is headed ¬∑ Unison programming language&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/linking-together.html#2024-06-04T09:31:58.841Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.unison-lang.org/blog/where-unison-is-headed/"&gt;Where Unison is headed&lt;/a&gt; by &lt;strong&gt;@Paul Chiusano&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a long post with a lot of details of what we're thinking for the future, so here's a summary:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Keep keep improving the core language, runtime, and tooling. Examples: adding an FFI to Unison, improving JIT compiler performance, more semantic merge capabilities, and a more graphical UCM experience.&lt;/li&gt;
&lt;li&gt;Make Unison Share an even nicer place to host your projects. Examples: "find usages", site-wide code search, multi-collaborator projects, and more.&lt;/li&gt;
&lt;li&gt;Major new Unison Cloud features: scheduled jobs, distributed event processing, resilient workflows, and high-performance native execution via our JIT compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üêò &lt;a href="https://elk.zone/mas.to/@TodePond/112568479669439114"&gt;Lu wilson üè≥üåà (@TodePond@mas.to)&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/linking-together.html#2024-06-06T09:00:05.411Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;an interesting back and forth thread between me and &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt; on mastodon about how to build "better computing"&lt;/p&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://podcasters.spotify.com/pod/show/lostinlambduhhs/episodes/arne-brasseur-tea--travel--taoism-and-HoC-e2kbq1p"&gt;:arne-brasseur (tea, travel, taoism and HoC) by Lost in Lambduhhs&lt;/a&gt; via &lt;strong&gt;Tim Schafer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/linking-together.html#2024-06-08T00:14:34.031Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So this is going to be more of drive by random act of gratitude non-sequiturs smorgasbord, but I‚Äôm pretty sure y‚Äôall like overtone, and I will link, so that‚Äôs the bit right? So in all my scrubbing of recent podcast listenings and reading of show notes I forked (don‚Äôt you mean formed? No, no, there was the potential future timeline of consciousness, and this is the fork) a much deeper appreciation for the plethora of references so lovingly strewn throughout the show.&lt;/p&gt;
&lt;p&gt;This was all to no avail in locating one wild goose of a phrase saying there was renewed effort on making overtone more useable so people can do cool shit. For a while I could swear it was Ivan‚Äôs voice I heard saying it. Well, it was actually the end of a different podcast. Perhaps the wires that got crossed were FoC and HoC. The important thing is that the supercollider of my mind has been thoroughly re-patched. And for that I thank you all! Also Clojure is cool. That‚Äôs my Ideology :) &lt;/p&gt;
&lt;p&gt;Now back to my  ~&lt;em&gt;&lt;em&gt;reading&lt;/em&gt;&lt;/em&gt;~ &lt;/p&gt;
&lt;p&gt;Links:
Arne - &lt;a href="https://github.com/plexus"&gt;https://github.com/plexus&lt;/a&gt;
Heart of Clojure - &lt;a href="https://2024.heartofclojure.eu/"&gt;https://2024.heartofclojure.eu/&lt;/a&gt;
Overtone - &lt;a href="https://github.com/overtone/overtone"&gt;https://github.com/overtone/overtone&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keywords:
Arne, Belgium, Lambda Island, , Clojure Camp, gaiwan, travels, tea, Europe, United States, cooking, gardening, circus arts, juggling, flow state, European Juggling Convention, Taoism, self-awareness, mindfulness, narcissistic spirituality, teaching, leadership, empathy, vulnerability, Heart of Clojure, community conference, holistic experience, software industry, software engineers, activities, workshops, interactive sessions, keynote talks, open source contributors, contributor onboarding, Leuven, Belgium.&lt;/p&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;üéº &lt;a href="https://github.com/tidalcycles/strudel/releases/tag/v1.1.0"&gt;Studel v1.1.0 is up!&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/of-music.html#2024-06-04T19:42:27.230Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web-based environment for live coding algorithmic patterns, incorporating a faithful port of TidalCycles to JavaScript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üìª &lt;a href="https://www.gofundme.com/f/digitizing-the-famous-computer-cafe"&gt;Donate to Digitizing "The Famous Computer Cafe" radio show, organized by Kay Savetz&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/present-company.html#2024-06-03T09:01:47.387Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gofundme.com/f/digitizing-the-famous-computer-cafe"&gt;Digitizing "The Famous Computer Cafe" radio show&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Help digitize 54 episodes of The Famous Computer Cafe, a 1980s radio show about computers that featured many notable interviews.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí¨ &lt;strong&gt;David Alan Hjelle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/present-company.html#2024-06-05T21:38:30.659Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two related questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is there any good research about using &lt;a href="https://en.wikipedia.org/wiki/Call_graph"&gt;call graphs&lt;/a&gt; to create some metrics about the quality of a software architecture? (Since I've never looked into it ‚Äî what's the state-of-the-art in measuring software quality, anyhow? I'm more interested in a quality architecture than bugs-per-line-of-code or something, I guess.)&lt;/li&gt;
&lt;li&gt;Any favorite tool for visualizing call graphs for JavaScript or PHP? &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My intuition would tend to say that messy call graphs indicate a worse architecture, but I haven't visualized many and I'm not sure how well that idea holds up in the "real world". Maybe call graphs end up being too messy in real programs.&lt;/p&gt;
&lt;p&gt;üõ∏ &lt;a href="https://mastodon.social/@spiralganglion/112578884737169457"&gt;Come gush about the Connection Machine with me. &lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W2/present-company.html#2024-06-08T04:24:28.124Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mastodon.social/@spiralganglion/112578884737169457"&gt;Come gush about the Connection Machine with me. &lt;/a&gt; Share your anecdotes. Tell me what *Lisp was actually like. Marvel at a time when computers still looked futuristic.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-2/</guid><pubDate>Sun, 09 Jun 2024 21:09:38 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/06 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üëì Exploring Spaces üìù Interactive study of queueing strategies üíö Many project updates&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üíöüé• &lt;a href="https://youtu.be/VLf9slgin5Y"&gt;Adding ports dynamically, new sum node and integrating a basic Monaco editor&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/two-minute-week.html#2024-06-02T17:44:35.870Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/VLf9slgin5Y/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VLf9slgin5Y"&gt;In this video&lt;/a&gt;, I start with building a simple flow which counts the sum of all received values on the input ports using the new node-type "merge sum". New ports can be added dynamically from within the UI.&lt;/p&gt;
&lt;p&gt;This is used to simplify the PID-controller example, which now much more reflects the algorithm that is &lt;a href="https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller"&gt;shown on the wiki-page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've also started integrating the monaco-editor (which is the base for vs.code) into code-flow-canvas.. and in the video you can see that it is used for editing the code behind the iframe-html-node.&lt;/p&gt;
&lt;p&gt;Another small change, is that flows now start automatically when they are loaded or after a refresh.&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üíöüí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-05-29T10:54:44.913Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do you update your password in gloodata?&lt;/p&gt;
&lt;p&gt;The same way you do everything else&lt;/p&gt;
&lt;p&gt;&lt;img alt="gd-update-password.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F0755JD8YJ3.gif"&gt;&lt;/p&gt;
&lt;p&gt;üëì &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4_and_a_half/"&gt;Exploring Spaces 4.5: 3D Rotations&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-05-29T20:06:17.435Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a 3D rotation explorer and I also made a big mistake in the explorer and I also fixed the mistake and now it is all good lol! Check it out and let me know what you think üôÇ &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4_and_a_half/"&gt;vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4_and_a_half&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0758V8DUB1.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üíöüßÆ &lt;a href="http://calculang.dev"&gt;calculang.dev&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-05-31T02:16:48.179Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I decided to make a pass at actually putting technical information on the &lt;a href="http://calculang.dev"&gt;calculang.dev&lt;/a&gt; frontpage.&lt;/p&gt;
&lt;p&gt;My primary audience for &lt;a href="http://calculang.dev"&gt;calculang.dev&lt;/a&gt; is developers - due to the wide scope, I think this is important (and Steve Balmer, right?).&lt;/p&gt;
&lt;p&gt;Other projects based on/around calculang will have a wider audience.&lt;/p&gt;
&lt;p&gt;It's the first time I surface some information: about introspection output to help to make tools that interact with models, about a comparison to spreadsheets, a rough note about my visualization APIs. I'll expand on all these things in longer-form separately and add illustrations for some concepts (especially "flexibility"), but for now, I think it's important I have some things down that I can iterate on, and happy to hear any immediate feedback, especially about what lands especially poorly or doesn't fit! (since this is a community of developers, your feedback would be awesome for me to get to work)&lt;/p&gt;
&lt;p&gt;I intend to push the Examples to a Gallery or Playground page instead, with just a more subtle carousal or such surfaced early in the main page&lt;/p&gt;
&lt;p&gt;üñºÔ∏è &lt;a href="https://github.com/bicycle-codes/image-element"&gt;github.com/bicycle-codes/image-element&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-05-31T04:32:00.957Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hoping this is the last time I will have to write this.&lt;/p&gt;
&lt;p&gt;üíöüé• &lt;a href="https://vimeo.com/943341129"&gt;Improved structural editor&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-05-31T18:17:29.567Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1847460668-bd8b9013a822b874cfe0d008aefe92623f6e4772e82c8c05cbc669282dbea552-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I think this is structural editor V3. this one is back to having all navigation be AST based, i.e. up tree down tree, there is no moving cursor ability&lt;/p&gt;
&lt;p&gt;üíöüíª &lt;a href="https://resheet.dev"&gt;ReSheet&lt;/a&gt; via &lt;strong&gt;Daniel Kr√ºger&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-05-31T19:11:59.476Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I officially promoted &lt;a href="https://resheet.dev"&gt;ReSheet&lt;/a&gt; from alpha to beta!&lt;/p&gt;
&lt;p&gt;ReSheet has undergone a lot of detailed work over the last two months that might not be noticeable unless you encountered specific issues that got improved.&lt;/p&gt;
&lt;p&gt;Noticable will be the improved starting document which makes it much clearer what ReSheet aims to achieve and how to use it. I added a demo, better documentation, and several examples. The examples aim to demonstrate what's possible with ReSheet and the potential I see in it. I think the "Examples &amp;gt; Custom Blocks" and "Examples &amp;gt; Interactive Game Dev" pages will be especially interesting to you.&lt;/p&gt;
&lt;p&gt;"Examples &amp;gt; Custom Blocks" illustrates how to integrate almost any other (web/React) library/tool. I think there‚Äôs a lot of potential if we could integrate the various tools developed here. Since many are web-based, ReSheet could potentially serve as a framework to unify them. If anyone is interested in exploring this, please send me a message! üôÇ&lt;/p&gt;
&lt;p&gt;"Examples &amp;gt; Interactive Game Dev" showcases the possibilities for building custom Blocks in ReSheet. It uses built-in Blocks to create a simple interactive Game Editor, featuring live programming and displaying intermediate steps/results of the code.&lt;/p&gt;
&lt;p&gt;Let me know what you think!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://open.substack.com/pub/duncancragg/p/from-spatial-to-parallel-reality?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;From Spatial to Parallel Reality Computing&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-06-01T19:59:43.068Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hiya, I've published another article, which says pretty much the same as before, but consolidates some ideas and brings things up-to-date:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The magical mashability of Parallel Reality Computing...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üíöüé• &lt;a href="https://youtu.be/hKVXRACCnqU"&gt;Raycasting in calculang, with formulas, interactivity &amp;amp; explainer&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/share-your-work.html#2024-06-01T22:29:49.315Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/hKVXRACCnqU/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I made a video explainer about raycasting, using a new experimental environment for calculang&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üíöü™µ &lt;a href="https://observablehq.com/@tomlarkworthy/lazer-cut-shell-joints"&gt; lazer cutting box joint generator Observable notebook&lt;/a&gt; via &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/devlog-together.html#2024-06-01T12:33:00.286Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Had fun presenting my&lt;a href="https://observablehq.com/@tomlarkworthy/lazer-cut-shell-joints"&gt; lazer cutting box joint generator Observable notebook&lt;/a&gt; at Germany FoC meetup. Feel free to DM me or leave a comment in the notebook if you want to chat more about it. I dunno how well I communicated the point, but my point is that you can solve harder problems if you can link representations. There is no representational hierarchy of best-ness, I am finding switching between representations is useful for getting the best of all worlds. The notebook contains some cool advanced observable hacks, like projecting the inbuilt "plot" data visualizer onto three.js surfaces, linking quantitive DataViz to a Spatial representation, both of which have different strengths.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07648MLVPC.mp4"&gt;dice into reality&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F0761BH44N9.png"&gt;&lt;/p&gt;
&lt;p&gt;‚úèÔ∏è &lt;a href="https://github.com/uprun/GRAIL-like"&gt;github.com/uprun/GRAIL-like&lt;/a&gt; via &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/devlog-together.html#2024-06-01T21:30:01.802Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is super-early announcement.&lt;/p&gt;
&lt;p&gt;Since I could not find something similar to GRAIL developed by Rand corporation - I am starting my own - GRAIL-like system.&lt;/p&gt;
&lt;p&gt;Currently only simple drawing on canvas is implemented - I plan to add basic symbol recognition next.&lt;/p&gt;
&lt;p&gt;Code is here &lt;a href="https://github.com/uprun/GRAIL-like"&gt;github.com/uprun/GRAIL-like&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am using Godot game engine for this.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07650DAT3L.mov"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/thinking-together.html#2024-05-27T18:03:17.950Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In something like prolog, terms can be nested. So I can express the idea "Socrates believes that he is mortal" with  &lt;code&gt;bel ieves(socrates, mortal(socrates)).&lt;/code&gt;  Are there any popular database types that make it easy to have relations of arbitrary arity as parameters of other relations, without unduly adding to the complexity of the schema? Preferably with ungrounded statements and open-world negation? Is there some obvious reason why not? Is there a computational complexity problem that arises in the real world? RDF allows triples to be referenced, I believe, but you are limited to arity 2, which seems needlessly limiting. Labeled graphs have arbitrary arity for non-entities, but entities are limited to two, and you usually can't refer to an edge. It seems... weird to me. Is it just that we don't really have the efficient reasoners over those kinds of expressions, so it hasn't been useful?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/thinking-together.html#2024-05-29T19:05:37.493Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What conference would people recommend, preferably ones still to happen this year, which are a good place to discuss FoC topics&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://encore.dev/blog/queueing"&gt;Queueing ‚Äì An interactive study of queueing strategies ‚Äì Encore Blog&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/linking-together.html#2024-05-27T03:20:25.415Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really lovely interactive exploration on queueing&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this blog, we go on an interactive journey to understand common queueing strategies for handling HTTP requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/dzpf5p9h89s?si=2n1GPHN0XeKuTXuP"&gt;Verse Update I State of Unreal 2024&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/linking-together.html#2024-05-27T05:42:46.716Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/dzpf5p9h89s/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this sponsored talk we take a look at the latest Verse features and what's coming soon to the language and framework.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://williamgpooley.wordpress.com/2024/05/22/sheet-happens/"&gt;Sheet Happens&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/linking-together.html#2024-05-27T12:26:39.310Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But until I put the numbers in and tried to write about them‚Ä¶ I did not know what I was trying to count, or what it would be possible to count. The spreadsheet is not a neutral tool of objective social quantification: it is the story of my research process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üï∏Ô∏è &lt;a href="https://github.com/opencog/atomspace/blob/master/opencog/sheaf/docs/ram-cpu.pdf"&gt;Graphs, Metagraphs, RAM, CPU&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/linking-together.html#2024-05-28T17:24:30.448Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This paper argues that Metagraphs are simpler and more efficient to represent graph data.&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üíöüé• &lt;a href="https://www.youtube.com/watch?v=igDQHAxgzeI"&gt;FoC Virtual Meetup&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/06/W1/present-company.html#2024-05-29T18:19:09.495Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/igDQHAxgzeI/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Recording of last week's Future of Coding virtual meetup&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202406-week-1/</guid><pubDate>Sun, 02 Jun 2024 21:16:25 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/05 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üì° Propagator Networks üåØ Visual Language for Polymorphic Types ü§® NoCode Will Not Bring Computing to the Masses &lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üêö &lt;a href="https://automat.org/"&gt;Automat&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/two-minute-week.html#2024-05-22T16:13:58.208Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Context: Automat aims to be a general purpose visual shell - it's meant to control other apps &amp;amp; pass their data around. It has a website at &lt;a href="https://automat.org"&gt;automat.org&lt;/a&gt;. The MVP version is going to record &amp;amp; replay desktop macros. Last week I've pretty much finished the work on connections and now I'm working on the new  &lt;em&gt;timeline&lt;/em&gt;  object! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automat is a FOSS software that allows anyone to control their computers by combining interactive blocks.&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/mafikpl/status/1793307785112805456"&gt;Marek Rogalski (@mafikpl) on X&lt;/a&gt;: Working on the most complex Automat object so far - the Timeline. It should be able to control other objects according to its embedded tracks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1793306906657775617/pu/img/NmBrSltxp6cVXfuf.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/Cxqlv8IoaH8"&gt;PID controller build with codeflowcanvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/two-minute-week.html#2024-05-24T14:21:07.906Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Cxqlv8IoaH8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/Cxqlv8IoaH8"&gt;In this video&lt;/a&gt; I show a &lt;a href="https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller"&gt;PID-controller&lt;/a&gt;  build with my visual programming system &lt;a href="http://codeflowcanvas.io"&gt;codeflowcanvas.io&lt;/a&gt; ... the PID-controller example can be found on &lt;a href="http://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It uses expression nodes, global variables and flow-variables to handle the calculations and state. In a bar-chart the output of the mechanism can be seen. In this example the target value is 100 , and when moving the input value slider, that value is used as a measurement and the algorithm brings the measurement to the wanted value (100). This process is visualised in the bar-chart.&lt;/p&gt;
&lt;p&gt;When the speed of the flow is set to maximum (in the top left corner), the "program-counter"-animation is not shown and it runs as fast as it can in realtime. That helps for these kind of algorithms.&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üì° &lt;a href="https://holograph-1.vercel.app/"&gt;Propagator Networks&lt;/a&gt; via &lt;strong&gt;Dennis Hansen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-22T21:33:18.853Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello! So after much obsession with Propagator Networks as discussed on this slack &lt;a href="https://history.futureofcoding.org/?fromDate=2024-03-18&amp;amp;toDate=2024-03-24&amp;amp;channel=thinking-together&amp;amp;filter=#2024-03-21T19:26:33.915Z"&gt;üí¨ #thinking-together@2024-03-21&lt;/a&gt;, i decided to make a little propagator network simulator on top of tldraw.&lt;/p&gt;
&lt;p&gt;In short: Propagator networks enabling bi-directional computation via independently operating nodes- in the gif you can see one for converting temperatures. Propagators (squares) listen to changing inputs, run code, and update connected outputs.&lt;/p&gt;
&lt;p&gt;You can make your own &lt;a href="https://t.co/nxVo5UAShy"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Put your variables in circles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put your JS in squares (you can write a return or not)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw arrows from circles to squares with text that matches the variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw arrows from squares to the circles to be updated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's lot of awesome stuff than can be made with these (maybe everything?). If you want to have fun with it, try to make a conditional or a switch. Its fun üôÇ&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ezgif-2-f1371da04b.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F075CT1UMKJ.gif"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-23T16:45:02.374Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßµ for &lt;a href="https://github.com/colelawrence"&gt;Cole Lawrence&lt;/a&gt;'s demo today.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-23T17:16:41.059Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßµ for &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;'s demo today.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-23T18:16:22.433Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;forgot to share this in the demo&lt;/p&gt;
&lt;p&gt;&lt;img alt="gloodata-inception.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F074VKZFB8B.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;ü§ñ &lt;a href="https://github.com/nileshtrivedi/autogen"&gt;github.com/nileshtrivedi/autogen&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/devlog-together.html#2024-05-23T18:19:56.164Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have started porting Microsoft's multi-agent framework "autogen" to Elixir: &lt;a href="https://github.com/nileshtrivedi/autogen"&gt;github.com/nileshtrivedi/autogen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Got basic multi-agent collaboration and code execution working. Now need to make Elixir functions available to agents as tools.&lt;/p&gt;
&lt;p&gt;I feel Elixir will become more and more important for AI because of its excellent support for real-time communication (audio/video etc), and single-language stack (LiveView etc.)&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üåØ &lt;a href="https://arxiv.org/pdf/2405.12699"&gt;GeckoGraph: A Visual Language for Polymorphic Types&lt;/a&gt; via &lt;strong&gt;Don Abrams&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/reading-together.html#2024-05-22T14:34:08.401Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Beautiful study on a visual representation of abstract types (Haskell in this case but generalizable). Conclusion: intuitive and helpful for beginners, but distracting &lt;a href="https://arxiv.org/pdf/2405.12699"&gt;GeckoGraph: A Visual Language for Polymorphic Types&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/thinking-together.html#2024-05-20T16:05:49.765Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is one of those questions where I don‚Äôt really know yet how to ask it, so let me fumble and handwave a little bit and see where this goes:&lt;/p&gt;
&lt;p&gt;In computing history we went from printers to screens, and on those screens from a brief stint with vector graphics to bitmap displays, and on those bitmap displays from text mode to frame buffer, and in those frame buffers from sprites and blitting to rasterization and compositing. In the early days, when there wasn‚Äôt enough RAM for a full-screen bitmap frame buffer, character glyphs and sprites were brought in from ROM. Now we have so much memory that we have double-/triple-buffering and realtime compositing of separately stored textures that often exceed the number of screen pixels available by an order of magnitude or more.&lt;/p&gt;
&lt;p&gt;I‚Äôm particularly interested in the early transition to raster graphics. At some point (and I assume that was probably with PostScript?) it became feasible to compute graphics on the fly instead of having them prepared as bitmaps in ROM or on disk. If I remember this correctly, PostScript was invented because due to the different font sizes it was more economical to ship instructions to generate glyphs on the fly on the printer than to ship all possible glyphs as bitmaps in all the different font sizes.&lt;/p&gt;
&lt;p&gt;In a way we went from a ‚Äúfinal‚Äù representation of a map of bits restricted to a certain grid size to an ‚Äúintermediate‚Äù representation of instructions that have to be executed to generate the final map of bits in the desired size. Alternatively, we could see that as swapping space (memory) for time (compute).&lt;/p&gt;
&lt;p&gt;Are you aware of any papers or other material that compares both sides of this transition?&lt;/p&gt;
&lt;p&gt;For instance in terms of performance in space and time, ie. how much compute is needed for how much memory saved. Or in the broader sense of how we settled on certain graphics primitives, because they were cheap enough to implement in terms of compute, and how we settled on certain data formats, because they were small enough in terms of memory usage, so that this trade-off made sense.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=2Cq8S3jzJiQ"&gt;Grail Demo from CHM tape&lt;/a&gt; via &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/thinking-together.html#2024-05-24T12:23:03.680Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/2Cq8S3jzJiQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Does anyone know if there is somewhere a new implementation of something similar to GRAIL system from Rand corporation ? &lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üï∏Ô∏è &lt;a href="https://dify.ai/blog/dify-ai-workflow"&gt;Dify's new workflows feature&lt;/a&gt; via &lt;strong&gt;John Choi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/linking-together.html#2024-05-22T04:32:07.916Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone tried using Dify's new &lt;a href="https://dify.ai/blog/dify-ai-workflow"&gt;workflows feature&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;It seems to be a Node-RED-like visual programming tool that supports Python/Node scripting in addition to HTTP requests and LLM invocations for nodes.&lt;/p&gt;
&lt;p&gt;(The parent app (Dify) is clearly positioned in the AI domain, but the workflows feature seems pretty general.)&lt;/p&gt;
&lt;p&gt;I'm looking into it but also interested in hearing others' initial impressions/assessments of limitations üëÄ&lt;/p&gt;
&lt;p&gt;ü§® &lt;a href="https://buttondown.email/hillelwayne/archive/nocode-will-not-bring-computing-to-the-masses/"&gt;NoCode Will Not Bring Computing to the Masses&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/linking-together.html#2024-05-22T09:54:38.461Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's not enough for a tool to solve your problem for you to use that tool. You have to also A) recognize the problem you have is solvable, B) recognize the tool can solve it, and C) be reasonably confident that you 
 &lt;em&gt;personally&lt;/em&gt; can solve the problem with the tool. You need knowledge, skill, and the right mentality. Even programmers, who  &lt;em&gt;already have that mentality&lt;/em&gt;, don't automatically generalize it to all applicable domains. Otherwise we'd be doing a lot more with our phones.&lt;/p&gt;
&lt;p&gt;It's unreasonable to expect the average person will use any NoCode to solve their problems, regardless of how easy the tools are. This leaves the people for whom it provides economic value, which is why all modern NoCode tools are oriented towards business.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="http://www.softwarepreservation.org/projects/FORTRAN/BackusEtAl-Preliminary%20Report-1954.pdf"&gt;FORTRAN Report 1954&lt;/a&gt; via &lt;strong&gt;Marcel Weiher&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/linking-together.html#2024-05-22T10:02:21.044Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course ‚Äúno code‚Äù and ‚Äúlo code‚Äù are just new versions of ‚Äúcode‚Äù.  Well, the ones that work at least.&lt;/p&gt;
&lt;p&gt;My favorite quote on this topic encapsulates it nicely:  ‚ÄúSince FORTRAN should virtually eliminate coding and debugging‚Ä¶‚Äù   ‚Äî FORTRAN Report 1954&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-4/</guid><pubDate>Sun, 26 May 2024 21:13:50 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/05 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üíª Bend: a parallel language üé• New Graphical Programming Language for Audio Research &amp;amp; Developers üí° The Alternative Implementation Problem&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;ü™© &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4/"&gt;Exploring Spaces 4: Sphere&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/share-your-work.html#2024-05-13T18:21:11.290Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made an article about üåê spheres and input spaces that wrap around like spheres üåê. Let me know how it feels to move around the spheres. Does the way they are synchronized make sense? &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4/"&gt;vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F073LFNMEUR.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://jaredforsyth.com/"&gt;Jared Forsyth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/share-your-work.html#2024-05-15T20:27:51.418Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi friends! As part of my unending pursuit of creating The Best Programming Language, I've ended up building a structured editor / literate programming environment for creating self-hosted languages ... and that has turned into "An Interactive Tutorial about Compilers &amp;amp; Type Inference", that includes interactive implementations of the papers "Algorithm W Step by Step" and "Typing Haskell in Haskell" (with more planned). I'm currently looking for beta testers to look it over before I make a general release, and I imagine there are many people here with relevant experience üòÑ.&lt;/p&gt;
&lt;p&gt;So if any of y'all are interested, send me a message! As a teaser, here's the start of the intro document:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F073F7MTV46.png"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/devlog-together.html#2024-05-17T06:42:21.832Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Got to a major milestone in v2 development for ¬ßBlawx, this week. The visual code editing environment is now back to feature parity with v1, which means I can move on to re-implementing the reasoner on the back end. That's the last major obstacle before I can start doing some much more compelling neuro-symbolic AI demos.&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Jacob Zimmerman&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/reading-together.html#2024-05-17T16:23:20.487Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone worked through ‚ÄúSoftware Foundations‚Äù, and did you find it valuable?&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/swardley/status/1787851368528576829"&gt;Tweet from @swardley&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/thinking-together.html#2024-05-16T08:09:21.582Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://twitter.com/swardley/status/1787851368528576829"&gt;this tweet&lt;/a&gt; , Simon Wardley compares making software systems explainable via moldable development (my expansion of his reference to Glamorous Toolkit) to creating maps. That sounds like a very useful metaphor to me. Many of us are interested in or even working on visual coding tools, and I wonder what their take on this metaphor is. Maps are inherently visual, but they are not the territory, i.e. the code with all the details. To me, visual tools are obviously the right choice for creating maps, but I remain unconvinced about their appropriateness for code.&lt;/p&gt;
&lt;p&gt;I am thinking in particular of &lt;a href="https://twitter.com/OrionReedOne"&gt;Orion Reed&lt;/a&gt;‚Äôs recent demo of infinite canvasses as user interfaces. For making multi-faceted maps to software systems, that looks like a very appopriate representation.&lt;/p&gt;
&lt;p&gt;üïπÔ∏è &lt;a href="https://www.youtube.com/watch?v=gWNXGfXOrro"&gt;The 100 Games That Taught Me Game Design&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/thinking-together.html#2024-05-17T11:33:35.115Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/gWNXGfXOrro/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;An interesting video: &lt;a href="https://www.youtube.com/watch?v=gWNXGfXOrro"&gt;The 100 Games That Taught Me Game Design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would like to see "The 100 Applications That Taught Me Application Design".&lt;/p&gt;
&lt;p&gt;Which ones are yours?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Daniel Sosebee&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/thinking-together.html#2024-05-17T20:42:21.417Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Loose set of thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;could you make a type system that somehow captures all information possible about every value in a codebase? Like where the following is true: if typeof(a) === number, then typeof(a + 1 + 2) === number+3 !== typeof(a) ‚Ä¶&lt;/li&gt;
&lt;li&gt;I might want to ‚Äúpin‚Äù and ‚Äúunpin‚Äù my types - e.g. before refactoring a function, to ‚Äúpin‚Äù its return type. If I had a more powerful type system like described in part one, I wouldn‚Äôt want to have to write out the whole type, I would want to just say ‚Äúpin this such that whatever changes I make could not possibly effect the outcome of the function for any input, or else give me errors describing exactly what part of the input space no longer maps logically the same to the output space‚Äù&lt;/li&gt;
&lt;li&gt;Another way to think of this might be to say, rather than writing tests, to be able to say ‚Äúassume infinite test coverage of this codebase (and all tests are passing), now let me refactor things‚Äù.&lt;/li&gt;
&lt;li&gt;I have no idea how this would work, but it makes me think of getting fractions into ‚Äúsimplest form‚Äù. Maybe you could get two functions into ‚Äúsimplest form‚Äù to test their similarity?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wonder if anything like that exists, or if this is gesturing at some existing area of research?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üí° &lt;a href="https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/"&gt;The Alternative Implementation Problem&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-13T15:55:39.888Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/"&gt;The Alternative Implementation Problem&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I‚Äôve concluded, based on experience, is that positioning your project as an alternative implementation of something is a losing proposition. It doesn‚Äôt matter how smart you are. It doesn‚Äôt matter how hard you work. The problem is, when you build an alternative implementation, you‚Äôve made yourself subject to the whims of the canonical implementation. They have control over the direction of the project, and all you can do is try to keep up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ü™§ &lt;a href="https://www.wired.com/story/inside-the-cult-of-the-haskell-programmer/"&gt;Inside the Cult of the Haskell Programmer&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-13T15:57:09.499Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.wired.com/story/inside-the-cult-of-the-haskell-programmer/"&gt;Inside the Cult of the Haskell Programmer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That Haskell never gained widespread adoption exemplifies a paradoxical truth in software engineering: Great programming languages aren‚Äôt always great for programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìë &lt;a href="https://damaged.bleu255.com/"&gt;Damaged Earth Catalog&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-14T06:56:23.447Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://damaged.bleu255.com/"&gt;Damaged Earth Catalog&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are humans and might as well get used to it. So far, remotely done power and glory‚Äîas via government, big business, formal education, church‚Äîhas succeeded to the point where gross profits obscure actual loss. In response to this dilemma and to these losses a realm of intimate, community power is developing‚Äîpower of communities to conduct their own education, find their own inspiration, shape their own environment, and share their knowledge with others. Practices that aid this process are sought and promoted by the DAMAGED EARTH CATALOG.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/uYUblZhbG1A?si=-9HzHkusy2PWOjjb"&gt;NO MORE CODE: New Graphical Programming Language for Audio Research and Developers - ChangHun Sung&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-14T14:49:58.574Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/uYUblZhbG1A/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/uYUblZhbG1A?si=-9HzHkusy2PWOjjb"&gt;New Graphical Programming Language for Audio&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Audio software development is rapidly moving towards incorporating machine learning-based processing. While research scientists are continuously presenting us with inventive results in the field of AI, there is a lack of software engineering tools to utilize these results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üíª &lt;a href="https://higherorderco.com/"&gt;Bend: a parallel language&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-17T10:07:48.296Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://higherorderco.com/"&gt;Bend: a parallel language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With &lt;em&gt;Bend&lt;/em&gt; 
 you can write parallel code for multi-core CPUs/GPUs without being a C/CUDA expert with 10 years of experience. It feels just like Python!
No need to deal with the complexity of concurrent programming: locks, mutexes, atomics... 
 &lt;em&gt;any&lt;/em&gt;  work that can be done in parallel &lt;em&gt;will&lt;/em&gt; be done in parallel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/VictorTaelin/status/1791213162525524076"&gt;Twitter announcement (includes a short video demo)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After almost 10 years of hard work, tireless research, and a dive deep into the kernels of computer science, I finally realized a dream: running a high-level language on GPUs. And I'm giving it to the world! Bend compiles modern programming features, including: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lambdas with full closure support &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unrestricted recursion and loops &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast object allocations of all kinds &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Folds, ADTs, continuations and much more &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To HVM2, a new runtime capable of spreading that workload across 1000's of cores, in a thread-safe, low-overhead fashion. As a result, we finally have a true high-level language that runs natively on GPUs!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://developer-success-lab.gitbook.io/code-review-anxiety-workbook-1"&gt;Today they published the workbook that they produced from that research! &lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-17T13:04:22.588Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once upon a time somewhere here, lost to the sands of a freemium slack instance, I shared a link about research some friends of mine were doing through the developer success lab on code review anxiety. &lt;a href="https://developer-success-lab.gitbook.io/code-review-anxiety-workbook-1"&gt;Today they published the workbook that they produced from that research! &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nicolay Gerold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/of-ai.html#2024-05-14T03:45:39.483Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not really sharing but a question for the curious:&lt;/p&gt;
&lt;p&gt;What new use-cases do you think are now possible with gpt-4o that weren‚Äôt possible before (natively multimodal)?&lt;/p&gt;
&lt;p&gt;What use-cases are now possible with way cheaper gpt-4-turbo? &lt;/p&gt;
&lt;p&gt;What are you excited to try / build?&lt;/p&gt;
&lt;p&gt;I will start: I want to try and build a better screen reader for visually impaired people. &lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/of-ai.html#2024-05-14T17:09:00.981Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are some call-heavy agentic or personic processes that are going to get more feasible, like what Park did in "Human Simulacra." I'm hoping to use 4o or turbo to have a more structured step by step approach to code generation in domain specific visual languages.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://www.chrismaughan.com/"&gt;Chris Maughan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/of-ai.html#2024-05-15T10:00:52.532Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What struck me when playing with it via the 'voice chat/conversation' thing, was a) how brilliant the voice recognition is, b) how brilliant the synthesised voice is, and c) how I was drawn into having a conversation with an AI.  I don't know if it's a use case, but what I can see happening is that more and more people are going to start treating the AI as a 'friend'.  I think that is quite sad, and will further isolate people from real life conversations, but I can also see how it will fill a need in some folks;  especially once the iPhone integration happens.&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/present-company.html#2024-05-15T01:11:04.432Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚ùá  &lt;em&gt;Thoughts and observations from today's Google I/O.&lt;/em&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-3/</guid><pubDate>Sun, 19 May 2024 21:29:28 GMT</pubDate></item></channel></rss>