<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Sun, 07 Jan 2024 23:09:42 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2024/01 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üí° Communicating programming ideas üìë On simplicity üé• What even is code?&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Robin Allison&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/share-your-work.html#2024-01-04T06:22:58.649Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I really like TodePond's video "Screens in Screens in Screens". I've been wanting to do the same kinda thing with mathematical formulas instead of shapes, a kind of "formulas in formulas in formulas", but I'm an awful programmer so I'll describe some math you can do to that effect. Apologies in advance for the shoddy explanation though.&lt;/p&gt;
&lt;p&gt;Here's a thing you can do with "screens". You can name screens. Start with some screens A B C. Then if C is inside A, and A and B are the same color, then there is a copy of C inside B. What do you call this copy? "The copy of B from A to C"? It will be convenient if we give it a symbolic name. Call it (A-&amp;gt;B)C. Or if you are really hardcore you can call it just t(A,B,C) where t is a ternary operator describing the result of copying C from A to B. You may think to only consider (A-&amp;gt;B)C when C is inside A, but the math becomes tractable if you consider all screens at once. Then we can stipulate some axioms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(A-&amp;gt;A)B = B&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(A-&amp;gt;B)A=B&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(B-&amp;gt;C)(A-&amp;gt;B)=(A-&amp;gt;C)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(A-&amp;gt;(X-&amp;gt;Y)A)=(X-&amp;gt;Y)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first axiom means if you are copying a screen from one screen to itself, you aren't changing anything. The second axiom is "obvious" except for considering (A-&amp;gt;B)A in the first place. The third axiom means if you copy a screen from A to B and then from B to C that is the same as if you were to copy it from A to C directly. It is also shorthand for (B-&amp;gt;C)((A-&amp;gt;B)D) = (A-&amp;gt;C)D for all screens D. The fourth axiom takes a bit more explaining. Basically we want this equation to be true whenever A is in X, and both sides are being used to copy something from A. But our theory at this point doesn't have a predicate for "A is contained in X" so we say it holds in all cases.&lt;/p&gt;
&lt;p&gt;With these axioms you can show the operators (A-&amp;gt;B) form an algebraic structure called a group: You can multiply them by performing one copy after the other (C-&amp;gt;D)(A-&amp;gt;B). This operation is associative (I mean, it must be), and has an identity element and inverses. The identity being (A-&amp;gt;A) and the inverse of (A-&amp;gt;B) being (B-&amp;gt;A).&lt;/p&gt;
&lt;p&gt;Another perspective is to view screens as points in an affine space (i.e. vector space without a specified origin). Then (A-&amp;gt;B)C can be thought of as (B-A)+C, and each of the axioms above can be interpreted as vector equations. This isn't a good model though because it ends up saying some screens are the same when they should be different. You can still take the above axioms and show that screens form a generalization of affine spaces called torsors.&lt;/p&gt;
&lt;p&gt;I'll share more if anybody is interested. It really needs a much longer write up, but I thought somebody might know if its already been done before.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://marianoguerra.org/msite/human-server-protocol/"&gt;Don't strip the meaning away from your runtime&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/share-your-work.html#2024-01-04T17:27:43.636Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.org/msite/human-server-protocol/"&gt;Don't strip the meaning away from your runtime&lt;/a&gt;: Exploring extending programming languages to include descriptions in the domain of the problem and solution&lt;/p&gt;
&lt;p&gt;Spoiler alert: interactive example inside üôÇ&lt;/p&gt;
&lt;p&gt;First draft, feedback welcome!&lt;/p&gt;
&lt;p&gt;üìë &lt;a href="https://stefanlesser.substack.com/p/on-simplicity"&gt;On simplicity&lt;/a&gt; via &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/share-your-work.html#2024-01-06T19:02:44.240Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few weeks ago I started a new series of blog posts (or ‚Äúnewsletters‚Äù, in Substack parlance) about  &lt;em&gt;simplicity&lt;/em&gt; :&lt;/p&gt;
&lt;p&gt;1 ‚Ä¢ &lt;a href="https://stefanlesser.substack.com/p/on-simplicity"&gt;On simplicity&lt;/a&gt; introduces the series with how my thinking about simplicity has changed over the years.&lt;/p&gt;
&lt;p&gt;2 ‚Ä¢ &lt;a href="https://stefanlesser.substack.com/p/on-simplicity-2-meaning-ful-design"&gt;Meaning-ful design&lt;/a&gt; connects simplicity to meaning making and coherence.&lt;/p&gt;
&lt;p&gt;3 ‚Ä¢ &lt;a href="https://stefanlesser.substack.com/p/on-simplicity-3-familiarity"&gt;Familiarity&lt;/a&gt; explores how complex things can be surprisingly simple and why we can‚Äôt ignore context.&lt;/p&gt;
&lt;p&gt;4 ‚Ä¢ &lt;a href="https://stefanlesser.substack.com/p/on-simplicity-4-reciprocal-realization"&gt;Reciprocal realization&lt;/a&gt; frames design as a complex dynamic process of mutual adaptation between designer and designed object.&lt;/p&gt;
&lt;p&gt;‚Ä¶  &lt;em&gt;I expect about four or five more posts coming after that, but I haven‚Äôt written them yet, so I have no idea.&lt;/em&gt; üôÇ&lt;/p&gt;
&lt;p&gt;A lot of this draws on 4E cognitive science, design theory, and philosophy. As such it may perhaps be less technical than you would expect it to be, although I try much harder in this series to relate it more directly to programming and software development than in &lt;a href="https://stefanlesser.substack.com/p/previously-a-recap"&gt;my last&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that‚Äôs why I post it here, today. I‚Äôm hoping to learn if this resonates at all with a technical audience, or if this is still too abstract. I know we‚Äôre all craving for the easily applicable  &lt;em&gt;Top 10 Things to Make Things Simple&lt;/em&gt;  (and number 6 will surprise you), but I have reason to believe that it‚Äôs just not that‚Ä¶ well‚Ä¶ simple. But I think I‚Äôm slowly making progress towards synthesizing something valuable, even if I can‚Äôt express it as beautifully as I would like to. Yet.&lt;/p&gt;
&lt;p&gt;Let me know what you think, and please ask any questions you may have (in thread or via DM). Appreciate your feedback!&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/share-your-work.html#2024-01-07T18:18:35.602Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spinners are boring, so might as well get creative with AI UX for loading states, even with fast LLMs like Mixtral.&lt;/p&gt;
&lt;p&gt;The thinking is to not only show multiplayer presence on our canvas, but also what the AI is doing and working on, including visualizing the code its writing in real-time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="henosia-ai-code-minimap.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06CL8JNRCN.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/devlog-together.html#2024-01-01T16:45:01.357Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think I have a usable app development experience now on my tablet. I basically took my recent Lua Carousel and made a few changes. In Carousel (first clip) you start in the programming environment, each screen runs a separate script, scripts run in the background of the editor, and each screen manages its own canvas. The new setup (second clip) starts in the app, which takes over the entire device until I 'exit' into the programming environment. In the programming environment, screens are now just editors with a shared 'run' button and canvas. Hopefully I can now finish polishing this  ~turd~  app entirely on the tablet.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06CR52NK4G.webm"&gt;dash-baseline&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06CR52S072.webm"&gt;dash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/devlog-together.html#2024-01-02T21:38:05.027Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I built a bare-minimum in-browser text editor,&lt;/p&gt;
&lt;p&gt;it saves files immediately on every key press,&lt;/p&gt;
&lt;p&gt;I also created a history of revisions but realised I do not need them, git works good enough for now.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06CKLQBX1P.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚öΩ &lt;a href="https://akkartik.itch.io/carousel/devlog/660061/some-squishy-balls"&gt;Some squishy balls&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/devlog-together.html#2024-01-03T21:22:56.470Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06BXNDPCA3.webm"&gt;boids&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/devlog-together.html#2024-01-05T18:47:02.634Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I've only been a real developer again for a month, but holy cow. I would have thought keeping your data persistence layer in sync with your code would be easier than this, by now. Irritating.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí°  Communicating programming ideas by &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/thinking-together.html#2024-01-01T21:17:17.966Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Someone reached out to ask me for more thoughts about communicating programming ideas through media other than the academic paper. I wrote a reply, and then decided it would be worth sharing here to see if other folks have their own inspirations they'd like to share, or ideas for how our industry can go  &lt;em&gt;paper-free&lt;/em&gt;  ;)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I feel like I owe reading an apology. I certainly try to play up my "crank" side on the podcast, but it does run the risk of mixing-up  &lt;em&gt;this is being silly&lt;/em&gt; with  &lt;em&gt;this is thoughtful critique&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;I have tremendous reverence for the communicative potential of the written word. I just think there are some kinds of ideas that lend themselves better to other forms of expression, or some ideas that can't be written down.&lt;/p&gt;
&lt;p&gt;For instance, it's very strange to me whenever I read a paper about HCI, especially if they're discussing GUI ideas. Sure, often these papers will be accompanied by a video. But, like, the work being described is about  &lt;em&gt;interacting with interfaces&lt;/em&gt; . I think the work should be presented as an interface you can interact with!&lt;/p&gt;
&lt;p&gt;I'm especially fond of &lt;a href="http://worrydream.com"&gt;Bret&lt;/a&gt;'s essays, naturally. &lt;a href="https://ciechanow.ski"&gt;Bartosz&lt;/a&gt; also does great work with visualization, though I feel like he leans a little too heavily on text and that the visualizations are too linear. &lt;a href="https://www.redblobgames.com"&gt;Amit&lt;/a&gt; also does excellent work, but he has the advantage that most of the things he demos are inherently about interactive graphics so they lend themselves naturally to this sort of presentation (not to diminish the incredible effort Amit puts in to these articles).&lt;/p&gt;
&lt;p&gt;The thing I want to see more of is‚Ä¶ people finding ideas that can  &lt;em&gt;only&lt;/em&gt;  be expressed through interaction. I think successfully achieving this requires that someone work natively in interaction, a lot, for a long time. As a result, most of these ideas seem to emerge in the periphery of video games.&lt;/p&gt;
&lt;p&gt;One of my favourite examples is &lt;a href="https://w.itch.io/dys4ia"&gt;Dys4ia&lt;/a&gt;, a collection of microgames about the trans experience. It uses written language and (meaningfully crude) visual art to set up the  &lt;em&gt;plot&lt;/em&gt; , but interaction to tell the  &lt;em&gt;story&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Something I'm very interested in seeing (and have made a few attempts at myself, but nothing worth sharing) is an attempt to create a fully-usable programming environment  &lt;em&gt;presented as a game&lt;/em&gt;  specifically for the purpose of communicating ideas about programming. There've been plenty of the inverse, where a programming system is the setting within which a game takes place (see all the works of &lt;a href="http://zachtronics.com"&gt;Zachtronics&lt;/a&gt;, for instance), but I haven't seen anyone do a game as the setting within which actual programming takes place. Closest to that might be something like Minecraft or Dreams (etc), but I don't think those were designed to communicate ideas about programming the way, say, The Witness was designed to communicate a philosophy of science.&lt;/p&gt;
&lt;p&gt;Another close comparison might be Advent of Code, where you playfully approach programming differently than in your normal work. The programming you do for AoC should feel meaningfully different. Similarly, imagine building your own Rosetta Code from scratch. That should give you a really particular feeling. I think it's related to, say, the feeling of writing a rasterizer for the dozenth time. I think these feelings are ideas, and that there's a whole language of them, and that the language is expressed through the creation of systems. I think if we studied this language, it would guide us toward building different kinds of tools.&lt;/p&gt;
&lt;p&gt;And hell, you might eventually be able to write a paper about that. (Countdown to someone arguing that this is what Christopher Alexander has made a career of, in a sense.) But I don't think we will arrive at those system-feeling ideas in any way other than by building and playing with systems, and with a particular intention at that.&lt;/p&gt;
&lt;p&gt;üìñ &lt;a href="https://www.tiktok.com/@etymologynerd?lang=en"&gt;tiktok.com/@etymologynerd&lt;/a&gt; via &lt;a href="https://twitter.com/stevekrouse"&gt;Steve Krouse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/thinking-together.html#2024-01-04T13:26:04.684Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey friends!&lt;/p&gt;
&lt;p&gt;I don't know if you're familiar with this harvard linguist on tiktok but he's the best: &lt;a href="https://www.tiktok.com/@etymologynerd?lang=en"&gt;tiktok.com/@etymologynerd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think it would be AWESOME if someone from "our community" would make those style of tiktoks, but about computer and programming history. I think it would become quite popular and be super enriching and educational&lt;/p&gt;
&lt;p&gt;I have some amount of capacity to help and sponsor this, but I mostly wanted to put it out there as a general request for someone in our community to take up the gauntlet in this new medium&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Ivan Lugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/thinking-together.html#2024-01-06T16:05:41.625Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Heya internetpeoples ‚ù§ I‚Äôve spent a long time refining this and brought in ‚ÄúThe LLMs‚Äù to help craft the tone here, and I think I‚Äôve finally gotten it to a point where I feel like it hits my message and question, and doesn‚Äôt assume too much negativity or‚Ä¶ doomcalling, heh. Thanks for the time and shared space, as always.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I‚Äôve despaired when stuck on problems I just couldn‚Äôt crack. I‚Äôve also felt the joy of those ‚Äúaha!‚Äù moments when things finally click. We‚Äôve all been there as coders. While documentation and searches can help fill gaps, little replaces another human sitting alongside, guiding with patience earned from experience. In those moments when someone more seasoned gave guidance, I felt hope renewed. How might we foster more of these vital human connections?&lt;/p&gt;
&lt;p&gt;Key Discussion Points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Knowledge flows when passion meets patience&lt;/em&gt; . I‚Äôm grateful for the patient coders who ‚Äúreached down‚Äù to guide me. Let‚Äôs discuss barriers hampering these relationships. Generalizations about certain groups being ‚Äúunwilling‚Äù to help are counterproductive. However, empathetic mentorship remains scarce. How might we change incentives?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Truly supporting newcomers requires understanding their frustrations are valid. I want to open a thoughtful discussion on constructive ways we can keep improving in this regard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are always exceptions by those dedicated to lifting others up. But much room remains for improving access, channels and incentives for more direct peer sharing across experience levels. It‚Äôs on each of us to reflect on where we can have an impact.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I welcome reactions, shared experiences, and dialogue toward that aim. How might we strengthen coder communities through human connections? Where do you see the biggest opportunities? Together, I believe we can guide positive change.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìº &lt;a href="https://cassette-lang.com/"&gt;Cassette is a small, Lisp-like programming language&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/linking-together.html#2024-01-03T18:58:29.354Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ran across &lt;a href="https://cassette-lang.com/"&gt;Cassette&lt;/a&gt;, a programming language today. I liked some of the stuff on the webpage and think it is interestingly aligned with the Future of Coding community.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I made Cassette as a simple language for ‚Äúplayful programming‚Äù. Playful programming is writing something for the sake of writing it. It‚Äôs making a software 3D renderer or a GIF reader, even though better implementations of those already exist. It‚Äôs making generative art programs and drawing them with a pen plotter. Cassette itself is playful programming‚Äîthere are certainly other scripting languages that may be better for personal projects like these, but this one is mine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Continuing,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In particular, I wanted Cassette to feel ‚Äúessential‚Äù, where each aspect of the language reflects some fundamental aspect of computing&lt;/em&gt; 
 (from a functional language perspective, at least). For example, I consider garbage collection, lexical scopes, and immutable types essential. The result is a little boring, but I hope it‚Äôs a good platform to play with other programming concepts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Emphasis&lt;/em&gt;  mine.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://web.sas.upenn.edu/dream-lab/creative-coding-2024/"&gt;This looks fun: Creative Coding 2024&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/linking-together.html#2024-01-04T21:32:53.170Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.sas.upenn.edu/dream-lab/creative-coding-2024/"&gt;This looks fun&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=UH0A2iujtY8"&gt;"What even is code? Building a non-code coding interface" - Katie Bell (LCA 2021 Online)&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/linking-together.html#2024-01-07T00:23:04.303Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/UH0A2iujtY8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;by &lt;strong&gt;@Katie Bell&lt;/strong&gt; is üëç&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W2/of-ai.html#2024-01-07T08:21:21.798Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is anyone aware of any papers on LLM assisted code generation inside a visual programming environment? I've only seen one. I'm going to be doing some experiments later this month, and I don't really know the state of the art.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-2/</guid><pubDate>Sun, 07 Jan 2024 23:09:21 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/01 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéôÔ∏è FoC: Mary Shaw ‚Ä¢ Myths &amp;amp; Mythconceptions ü•ï Elliot Evans 2023 projects üìë Malleable Systems Collective 2023 Digest&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üê∏ &lt;a href="https://www.todepond.com/wikiblogarden/tadi-web/fame/facts/"&gt;World‚Äôs first full-stack tadi website&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/share-your-work.html#2023-12-26T22:04:10.556Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote an overly in-depth &lt;a href="https://www.todepond.com/wikiblogarden/tadi-web/fame/facts/"&gt;write-up&lt;/a&gt; of how I built a dashboard.&lt;/p&gt;
&lt;p&gt;It was the first time I've tried to build something a bit more ambitious using the new "&lt;a href="https://todepond.com/wikiblogarden/tadi-web"&gt;tadi web&lt;/a&gt;" principles that got &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-1/?fromDate=2023-12-17&amp;amp;toDate=2023-12-23&amp;amp;channel=devlog-together&amp;amp;filter=#2023-12-20T16:10:34.360Z"&gt;üí¨ #devlog-together@2023-12-20&lt;/a&gt; a few days ago.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://jimmyhmiller.github.io/stuck"&gt;Being Stuck in Someone Else‚Äôs Theory&lt;/a&gt; via &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/share-your-work.html#2023-12-27T17:48:05.130Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The perhaps most melodramatic thing I've ever written about software. Sat in my to publish folder for a while. But I realized I am just a bit melodramatic, no one will care :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Theory creation, world-building, and crafting software are all one in the same activity. Removing any of these elements eliminates the very value you hired software engineers to provide. But it does more than that. It forces these software engineers to make a difficult choice: fight to create the world they believe in, or give up and live in a world they are no longer invested in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://futureofcoding.org/episodes/069"&gt;Future of Coding ‚Ä¢ Episode 69 ‚Ä¢ Mary Shaw ‚Ä¢ Myths &amp;amp; Mythconceptions&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/share-your-work.html#2023-12-29T00:12:30.611Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;íÇ∂ &lt;a href="https://futureofcoding.org/episodes/069"&gt;futureofcoding.org/episodes/069&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the spirit of clearly communicating what you're signing up for, this podcast episode is nearly three hours long, and among other things it contains a discussion of a paper by author Mary Shaw titled &lt;a href="https://dl.acm.org/doi/pdf/10.1145/3480947"&gt;Myths &amp;amp; Mythconceptions&lt;/a&gt; which takes as an organizing principle a collection of myths that are widely believed by programmers, largely unacknowledged, which shape our views on the nature of programming  &lt;em&gt;as an activity&lt;/em&gt;  and the needs of programmers  &lt;em&gt;as people&lt;/em&gt;  and the sort of work that we do  &lt;em&gt;as a sort of work&lt;/em&gt; , and where by acknowledging these myths the three of us (Mary Shaw primarily, and by extension Jimmy and I, those three people, that's it, no other people appear on this podcast) are able to more vividly grip the image of programming with our mind's eye (or &lt;a href="https://aphantasia.com"&gt;somesuch&lt;/a&gt;) and conceive of a different formulation for programming, and in addition to these myths this paper also incudes a number of excellent lists that I take great pleasure in reading, beyond which I should also note that the paper does a job of explaining itself and that hopefully you'll find I've done a similar job, that's the spirit, please enjoy.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/656473/building-an-equation-plotter"&gt;Building an equation plotter&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/devlog-together.html#2023-12-27T03:55:01.958Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Combining charting with the pinch-zoom gesture&lt;/p&gt;
&lt;p&gt;I've written a couple of programs now that have felt too large for this particular devlog, which I've been trying to limit to a size I can comfortably edit on a phone, around 200 lines or so.. ü§î&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06BKR73UKF.webm"&gt;carousel plot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/YtDvPAfJ8jE"&gt;Quicksort with visualization and decorators build using my own visual programming system&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/devlog-together.html#2023-12-30T12:16:54.561Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/YtDvPAfJ8jE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://youtu.be/YtDvPAfJ8jE"&gt;this video&lt;/a&gt; I show an implementation of the quicksort algorithm using my visual programming system and not only that, but also the different steps of the output of the algorithm are visualized using a node tree. &lt;/p&gt;
&lt;p&gt;One thing I noticed when making these kinds of algorithm flows, that they tend to grow horizontally quickly. So, to help prevent that, I've introduced the concept of "decorators" (they are in the "stacked" nodes). Decorators can be added before or after node-types that support this. &lt;/p&gt;
&lt;p&gt;Now at least flows can also grow vertically a bit more. In the future I also want to be able to combine multiple nodes in a component or grouped node. &lt;/p&gt;
&lt;p&gt;There are currently only 2 decorator types: expressions and sending data to the node-tree. Editing is not yet possible via the editor itself but only directly in the underlying json data of a flow. Also I needed to improve the way scoped variables work with regard to recursive functions, the same for the "merge"-node-type. Each node receives a scopeId depending on the scope within it is executed (every call to a function creates a new scope, this scopeId is passed to the function-node which passes it through to its connected nodes and so on).&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/devlog-together.html#2023-12-30T21:31:34.149Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_20231230-051117.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F06C2A9TATE.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/devlog-together.html#2023-12-31T08:44:17.572Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thought about a new architecture for my tool that would make it play better with LLMs, so as to get more help with generating code. Built an MVP version of it over the last week, or so, with just text-based code, and it works well enough that I'm going to have to re-implement my visual language in the new architecture.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí° &lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1703859436830029?thread_ts=1703808750.611779&amp;amp;channel=CCL5VVBAN&amp;amp;message_ts=1703859436.830029"&gt;I think programming, software engineering, and computer science are three different things&lt;/a&gt; via &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/thinking-together.html#2023-12-30T13:04:55.921Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Can we make this a top-level discussion please? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[December 29th, 2023 6:17 AM] jack529: A mythconception that chaps my bottom: I think programming, software engineering, and computer science are three different things, but people insist on using the terms interchangeably. :disappointed:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I‚Äôm not so much interested in what the ‚Äúcorrect‚Äù way of distinguishing those three is, more in how people distinguish them, in their idiosyncratic ways. &lt;/p&gt;
&lt;p&gt;So what do you think makes  ~&lt;em&gt;&lt;em&gt;programming&lt;/em&gt;&lt;/em&gt;~  different from  ~&lt;em&gt;&lt;em&gt;software engineering&lt;/em&gt;&lt;/em&gt;~  different from  ~&lt;em&gt;&lt;em&gt;computer science&lt;/em&gt;&lt;/em&gt;~ ?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;ü•ï &lt;a href="https://vezwork.github.io/polylab/dist/demo/2023/projects.html"&gt;Elliot Evans 2023 projects&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/linking-together.html#2023-12-27T09:11:37.278Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elliot.website/editor/"&gt;Polytope&lt;/a&gt; is a &lt;a href="https://arxiv.org/abs/2303.06777"&gt;rich and composable&lt;/a&gt; experimental code editor that combines text and visual coding; structured and unstructured (I call this mixture "ummm-structured") representations of code; and symbolic and direct manipulation of code.&lt;/li&gt;
&lt;li&gt;Caretope: I began working on adapting text editor caret navigation to visual editors in 2022 as a part of Polytope. I slowly realized that caret navigation is a rich topic in and of itself so I seperated it into its own project: Caretope!&lt;/li&gt;
&lt;li&gt;Made a small experimental bidirectional programming language&lt;/li&gt;
&lt;li&gt;Made &lt;a href="https://elk.zone/mathstodon.xyz/@vez/110476698542079972"&gt;bidirectional parser combinators&lt;/a&gt; which were used for the bidirectional programming language&lt;/li&gt;
&lt;li&gt;Ended the year working on a &lt;a href="https://vezwork.github.io/polylab/dist/demo/drawTests/category/note.html"&gt;bidirectional+recursion library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I'm currently using it to make some &lt;a href="https://vezwork.github.io/polylab/dist/demo/drawTests/category/"&gt;interactive recursive visuals. &lt;/a&gt; It is inspired by &lt;a href="https://screenpond.cool/"&gt;Lu Wilson's ScreenPond&lt;/a&gt; and &lt;a href="http://recursivedrawing.com/"&gt;Toby Schachman's Recursive Drawing.&lt;/a&gt; Talking with Lu, Ivan, Sharon, Josh, and Marcel has helped me think about this project quite a bit.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nudging is about exploring a large space of values by making local movements through that space. Constraints limit large spaces to smaller ones, and change how those spaces are navigated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://codepen.io/vez/pen/dyggGNm"&gt;This year I made a bidirectional nudging with constraints demo&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/ce4fba3a2e6706d4"&gt;I also made an equation plotter.&lt;/a&gt; This plotter will be used to visualize constraints. It will also add visualization to complement direct manipulation of constraints and values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üìë &lt;a href="https://malleable.systems/"&gt;Malleable Systems Collective 2023 Digest&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/linking-together.html#2023-12-27T09:14:50.031Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/collaborative-work-on-malleable-software/109"&gt;Collaborative work on malleable software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/a-world-without-apps/38"&gt;A World Without Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/joyful-creation/103"&gt;Joyful Creation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/window-management/43"&gt;Window management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/smooth-gradients-of-composability-or-old-man-yells-at-compilers/115"&gt;Smooth Gradients of Composability, or Old Man Yells At Compilers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/freewheeling-apps/52"&gt;Freewheeling apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/understandability-malleability/127"&gt;understandability =&amp;gt; malleability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/tangible-functional-programming/92"&gt;Tangible Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/susn-simple-uniform-semantic-notation/112"&gt;SUSN: Simple Uniform Semantic Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/an-interesting-quote-about-the-origin-of-mvc-and-event-handling/133"&gt;An interesting quote about the origin of MVC and event handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/tiddlywiki/65"&gt;Tiddlywiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/thoughts-on-webassembly-component-model-wasi/104"&gt;Thoughts on WebAssembly / Component Model / WASI?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/empowering-users-by-inverting-three-key-relationships/64"&gt;Empowering users by inverting three key relationships&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/what-lies-in-the-path-of-the-revolution/23"&gt;What Lies in the Path of the Revolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/gotz-bachmann-s-ethnographic-research-on-dynamicland/116"&gt;G√∂tz Bachmann‚Äôs Ethnographic Research on Dynamicland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/fengari/62"&gt;Fengari&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/beyond-web-2-0-and-the-browser/111"&gt;Beyond Web 2.0 and the Browser?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/uxn-and-varvara/107"&gt;UXN and Varvara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/mu-designing-a-safe-computing-stack-from-the-ground-up/51"&gt;Mu: designing a safe computing stack from the ground up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.malleable.systems/t/the-future-of-software-the-end-of-apps-and-why-ux-designers-should-care-about-type-theory/40"&gt;The future of software, the end of apps, and why UX designers should care about type theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üñ®Ô∏è &lt;a href="https://blog.brownplt.org/2023/12/28/document-calculus.html"&gt;A Core Calculus for Documents. Or, Lambda: The Ultimate Document&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W1/linking-together.html#2023-12-29T17:40:35.704Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are no  &lt;em&gt;theoretical tools&lt;/em&gt;   for reasoning about the design of a document language. Programming language theorists can use the lambda calculus to reason about the design of general-purpose programming languages. No such formal model exists for document languages.&lt;/p&gt;
&lt;p&gt;Our work addresses this issue by providing a  &lt;em&gt;document calculus&lt;/em&gt; , or a formal model of the &lt;em&gt;programmatic aspects&lt;/em&gt;  of document languages.&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-1/</guid><pubDate>Mon, 01 Jan 2024 21:44:40 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/12 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üõ∏ Retrofuturistic software systems üëì Touch Designer üìò The Architecture of Open Source Applications&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/896297672?share=copy"&gt;Datalog notebook&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/two-minute-week.html#2023-12-19T21:32:49.731Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1771462486-985b381ef5e16ee2c34b2e50d97b96fcd74a987f7ffdf7d026a27ef3bbd724c4-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I built a datalog notebook. I want to try and tie this to some public data sources and see how end user friendly it is as an interface&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://open.substack.com/pub/duncancragg/p/apps-considered-harmful?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;Apps considered harmful&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/share-your-work.html#2023-12-18T10:42:20.206Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"Apps considered harmful"&lt;/p&gt;
&lt;p&gt;(or "I can't believe how you all tolerate apps")&lt;/p&gt;
&lt;p&gt;My latest: &lt;a href="https://open.substack.com/pub/duncancragg/p/apps-considered-harmful?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;Apps considered harmful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://freemasen.com/blog/llvm-ir/"&gt;LLVM IR: Playing around with LLVM IR&lt;/a&gt; via &lt;strong&gt;FreeMasen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/share-your-work.html#2023-12-19T18:11:28.209Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wrote up a little post about learning LLVM's Intermediate Representation&lt;/p&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/653245/the-lua-carousel-productivity-suite"&gt;The Lua Carousel "productivity suite"&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/share-your-work.html#2023-12-20T05:12:48.759Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4 primitives that can be composed into little productivity apps for yourself, particularly on a phone or tablet.&lt;/p&gt;
&lt;p&gt;I think the next major piece I'm missing is images ü§î&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=eDRg5WgSrm0"&gt;A tool to augment creative problem-solving.&lt;/a&gt; via &lt;strong&gt;Vardnan Sivarajah&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/share-your-work.html#2023-12-21T14:00:06.872Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/eDRg5WgSrm0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hey everyone! üëã I‚Äôm a student who‚Äôs been working on a side project to explore how LLMs may augment creative problem solving.&lt;/p&gt;
&lt;p&gt;I‚Äôve synthesised everything into a rough concept I would love to hear your perspectives on:&lt;/p&gt;
&lt;p&gt;~&lt;em&gt;&lt;em&gt;Here is a quick demo:&lt;/em&gt;&lt;/em&gt;~  &lt;a href="https://www.youtube.com/watch?v=eDRg5WgSrm0"&gt; A tool to augment creative problem-solving. &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Initial inspirations include Jef Raskin‚Äôs ‚ÄúArchy‚Äù, Mozilla‚Äôs old ‚ÄúUbiquity‚Äù project, the thinking of Vannevar Bush, and recent tools like ‚Äúmymind‚Äù. There are still many ideas and user experience concerns to be properly fleshed out, but hopefully it‚Äôs an interesting direction.&lt;/p&gt;
&lt;p&gt;üå≥ &lt;a href="https://codeberg.org/nilesh/grapher"&gt;Grapher&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/share-your-work.html#2023-12-22T07:49:29.038Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had helped build &lt;a href="https://codeberg.org/nilesh/grapher"&gt;this tool&lt;/a&gt; to create civilizational tech trees so that resources (like talent and funds) can be directed where they are most impactful.&lt;/p&gt;
&lt;p&gt;Foresight institute has used it to map the tech tree in 5 domains: Intelligent Cooperation, Spacetech, Neurotech, Molecular Machines, and Longevity: &lt;a href="https://foresight.org/tech-tree/"&gt;foresight.org/tech-tree&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SVG-based interactive graph dataset editor with live real-time collaboration. Powers Foresight Institute's civilizational tech trees: https://foresight.org/tech-tree/ and http://LearnAwesome.org|LearnAwesome.org's learning roadmaps: https://learnawesome.org/#/roadmaps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/651711/new-version-after-9-days"&gt;New version after 9 days&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/devlog-together.html#2023-12-18T23:21:55.849Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I built a little voice recorder in Lua Carousel last night&lt;/p&gt;
&lt;p&gt;One little detail here involves Android permissions. I almost ended up asking for microphone permissions in Lua Carousel. Luckily I managed to stop and ask myself what the user experience is. "Hi, I'm Lua Carousel, could I please have access to your mic?" Ick! It seems like a bad idea to ask for a permission for the whole app just in case some single script uses it. Probably affects the conversions from this particular blog post, but I don't want to feel like I'm contributing to the general fatigue over apps asking for permissions. ü§∑&lt;/p&gt;
&lt;p&gt;&lt;img alt="carousel-recorder.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F06AQFRJ467.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/devlog-together.html#2023-12-19T11:45:13.455Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;aside: The whole issue of passwords and permissions is a  &lt;em&gt;huge&lt;/em&gt;  UX issue that deserves a long discussion on of-end-user-programming.  Users should be allowed to  &lt;em&gt;just use&lt;/em&gt;  a device without being forced to answer a bunch of questions about technical issues and needing to keep a bowl full of anti-anxiety meds nearby.  Imagine if my refrigerator required me to perform some ritual before allowing me to put my recently-bought lettuce into the crisper.&lt;/p&gt;
&lt;p&gt;üí° &lt;a href="https://www.tadiweb.com"&gt;TadiWeb&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/devlog-together.html#2023-12-20T16:10:34.360Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been enjoying the "&lt;a href="https://www.tadiweb.com"&gt;tadi web&lt;/a&gt;" approach Lu has been espousing lately. I also had some nice discussions at Strange Loop with Devine and a few others about minimizing friction / dependencies / build steps, both broadly but also specifically pertaining to publishing one's personal site. So in this spirit, I've been reworking my personal site a bit. I plan to finally add RSS and, even though it goes against the spirit of Lu and Devine's approaches, add a more complex build process that enables some functionality I've long wanted.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/devlog-together.html#2023-12-21T07:21:09.928Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Starting to get back into the reason I got roped into developing for mobile in the first place: my friend is a doctor trying to use his iPad to analyze datasets like this plot of Covid concentrations in waste water in two random testing stations over 2 months.&lt;/p&gt;
&lt;p&gt;&lt;img alt="carousel-chart.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06BTG2FDU0.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/devlog-together.html#2023-12-22T20:37:43.706Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been figuring out some improvements to the live programming environment for my apps. Some little videos in üßµ&lt;/p&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/654952/one-finger-to-pan-two-fingers-to-zoom"&gt;One finger to pan, two fingers to zoom&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/devlog-together.html#2023-12-23T18:57:46.309Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pan and zoom gestures on a multitouch screen&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/thinking-together.html#2023-12-19T20:04:19.139Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A large codebase is a realm ruled by the iron fist of legalism. In addition, it is a patchwork of many different jurisdictions, each with their own overlapping but subtly different laws. And it's incredibly easy to spawn a new jurisdiction!&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üõ∏ &lt;a href="https://interlisp.org/"&gt;The Medley Interlisp Project&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/linking-together.html#2023-12-18T20:17:38.109Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Medley Interlisp Project: &lt;a href="https://interlisp.org/"&gt;interlisp.org&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a retrofuturistic software system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What did we leave behind on the path to developing today's computer systems? Could there be lessons for the future of computing hidden in the past? Enter the Medley software environment to explore these questions.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://blog.vero.site/post/noulith"&gt;Designing a Programming Language to Speedrun Advent of Code&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/linking-together.html#2023-12-21T23:04:12.214Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/betaveros/noulith"&gt;github.com/betaveros/noulith&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;background: &lt;a href="https://blog.vero.site/post/noulith"&gt;blog.vero.site/post/noulith&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=-xnppM6GG9Q"&gt;Redeeming Open Source with ABE - Sid Kasivajhula, feat. Michael Ballantyne - RacketCon 2023&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/linking-together.html#2023-12-21T23:18:29.975Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/-xnppM6GG9Q/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This looks tantalizing for the economic angle in particular: &lt;a href="https://www.youtube.com/watch?v=-xnppM6GG9Q"&gt;Redeeming Open Source with ABE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The repo for that is &lt;a href="https://github.com/drym-org/dia"&gt;github.com/drym-org/dia&lt;/a&gt; ~, but sadly there's no documentation yet~  &lt;a href="https://github.com/drym-org/foundation"&gt;github.com/drym-org/foundation&lt;/a&gt;. If anybody has more details or pointers please chime in.&lt;/p&gt;
&lt;p&gt;(Thanks &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;.)&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üïπÔ∏è &lt;a href="https://hempuli.itch.io/mobile-suit-baba"&gt;Mobile Suit Baba&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/present-company.html#2023-12-21T16:58:15.790Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Free (for the moment) game from the maker of Baba Is You, in which Baba pilots a mech suit (a la Into The Breach)&lt;/p&gt;
&lt;p&gt;üìò &lt;a href="https://aosabook.org/en/"&gt;The Architecture of Open Source Applications&lt;/a&gt; via &lt;strong&gt;Daniel Buckmaster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/present-company.html#2023-12-23T11:11:36.105Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was exploring a domain outside programming today and thought "gee, I wonder if somebody has written a detailed end-to-end case study about this?' Then, I wondered, "gee, has anybody written a detailed end-to-end case study about a software project?"&lt;/p&gt;
&lt;p&gt;I always think of software as a very open and sharing community, where we talk about our work and learn from each other without too much secrecy. But I struggled to think of examples. Of course, we seem to be constantly publishing tiny, focused case studies as blog posts. And this is incredible and valuable. But my curiosity is now piqued about this other thing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aosabook.org/en/"&gt;AOSA&lt;/a&gt; comes to mind, but what comes to others' minds?&lt;/p&gt;
&lt;p&gt;üëì &lt;a href="https://derivative.ca/"&gt;TouchDesigner:  a visual development platform&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W4/present-company.html#2023-12-24T17:58:22.323Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today I learned about &lt;a href="https://derivative.ca"&gt;TouchDesigner&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Derivative is a software company that offers TouchDesigner, a visual development platform.&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-4/</guid><pubDate>Mon, 25 Dec 2023 18:22:41 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/12 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üíª The Future of Cloud Computing üö∞ The life and times of Yahoo Pipes üê∏ CellPond: Spatial programming without escape&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üëì &lt;a href="http://GitHub.com/tikimcfee/LookAtThat"&gt;LookAtThat: Render source code in 3D, for macOS and iOS.&lt;/a&gt; via &lt;strong&gt;Ivan Lugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/share-your-work.html#2023-12-11T03:40:31.337Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey all! All abuzz that I‚Äôve finally pushed the alpha version up of my Metal-based 3D code visualizer apps. After many months, I‚Äôve finally gotten in my place:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brand new and extremely amateurish Metal rendering ‚Äúengine‚Äù focused primarily on character glyphs.&lt;/li&gt;
&lt;li&gt;An, ‚Äúis this a joke?‚Äù UTF8-&amp;gt;UTF32-&amp;gt;UnicodeGraphemeCluster GPU based text parser and basic layout engine.&lt;/li&gt;
&lt;li&gt;Download GitHub repositories in-app and view arbitrary textual files.&lt;/li&gt;
&lt;li&gt;Reset your atlas if you stumble into new languages online ü§ì&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you‚Äôve got an iPhone, iPad, or Mac device, I‚Äôd be happy to invite ya to the TestFlight to give the app a whirl where you‚Äôd like. Desktop builds and releases coming upon next coffee intake ritual.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20231210_210128118_HDR" src="http://history.futureofcoding.org/history/msg_files/F06/F069KGKQBKN.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://untested.sonnet.io/Shader+Park+is+Kinda+Neat"&gt;Shader Park is Kinda Neat - Untested&lt;/a&gt; via &lt;strong&gt;Rafa≈Ç Pastuszak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/share-your-work.html#2023-12-12T11:49:31.080Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote a quick intro to Shader Park (a JS-like DSL for programming shaders) which gained some traction on similar forums:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://untested.sonnet.io/Shader+Park+is+Kinda+Neat"&gt;Shader Park is Kinda Neat - Untested&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üíª &lt;a href="https://www.unison.cloud/"&gt;The Unison‚Ñ¢ Cloud Platform | Say hello to the future of cloud computing&lt;/a&gt; via &lt;strong&gt;Stew O'Connor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/share-your-work.html#2023-12-14T00:38:01.219Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been working for Unison for the last three years. I got hired start and head up the Unison Cloud project, which today we are starting to open up to early adopters: &lt;a href="https://www.unison.cloud/"&gt;unison.cloud&lt;/a&gt; The idea is that we want to make it as easy as possible to go from some function from  &lt;code&gt;HttpRequest -&amp;gt; HttpServer&lt;/code&gt;  to a deployed service, but we also want to give a rich and modern distributed programming interface to that function.   Hit me up if you want to get access to the Beta!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Say hello to the future of cloud computing. Deploy with a function call. Call services as easily as local functions, verified by the typechecker. Access typed storage as easily as in-memory data structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üèïÔ∏è &lt;a href="https://www.inkandswitch.com/local-first/"&gt;Local-first software: You own your data, in spite of the cloud&lt;/a&gt; via &lt;strong&gt;Anton Podviaznikov&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/share-your-work.html#2023-12-14T21:00:52.622Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm currently working on a set of simple tools to make data from the apple products available on the traditional web.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://montaigne.io"&gt;montaigne.io&lt;/a&gt; - create website from apple notes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://public.photos"&gt;public.photos&lt;/a&gt; - publish photos online from apple photos. a bit on pause&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kiwi.page"&gt;kiwi.page&lt;/a&gt; - publish apple notes online. a bit on pause too&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are few interesting moments here for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;liberate data from apple products&lt;/li&gt;
&lt;li&gt;explore idea of &lt;a href="https://www.inkandswitch.com/local-first/"&gt;local first software&lt;/a&gt; but in a different way. what is cool with this approach that data lives locally on your devices and then I just sync it to the web where it can be viewed and used by everyone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's not super challenging programming wise, but interesting to think about in terms of how software can be written&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé† &lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1700767728533219"&gt;Lua Carousel&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/devlog-together.html#2023-12-11T05:26:34.523Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-3/?fromDate=2023-11-20&amp;amp;toDate=2023-11-26&amp;amp;channel=share-your-work&amp;amp;filter=#2023-11-23T19:28:48.533Z"&gt;üí¨ #share-your-work@2023-11-23&lt;/a&gt; is starting to contribute to &lt;a href="https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1699075511054269"&gt;Rectangle World&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://akkartik.itch.io/carousel/devlog/648849/pushing-objects-around-in-a-dozen-lines-of-code"&gt;Pushing objects around in a dozen lines of code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F069W0KHG8H.webm"&gt;aabb collision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://akkartik.itch.io/carousel/devlog/649349/handling-cascading-collisions"&gt;Handling cascading collisions&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/devlog-together.html#2023-12-12T06:04:41.477Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F069HGY4FGW.webm"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßÆ &lt;a href="https://git.sr.ht/~akkartik/sum-grid.love"&gt;App for drilling addition problems&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/devlog-together.html#2023-12-14T16:42:35.530Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yesterday I turned a couple of my unused kids apps into just scripts you could run on Lua Carousel.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git.sr.ht/~akkartik/sum-grid.love"&gt;git.sr.ht/~akkartik/sum-grid.love&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git.sr.ht/~akkartik/spell-cards.love"&gt;git.sr.ht/~akkartik/spell-cards.love&lt;/a&gt; (exercising my phone's microphone for the first time)&lt;/p&gt;
&lt;p&gt;Both qualified successes. I didn't uncover any bugs, but the programs were 250 and 350 lines long, which starts to feel too long for my implementation of scrollbars.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/td0QeePvfGQ"&gt;Advent of Code 2023 day 5 part1 using visual programming&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/devlog-together.html#2023-12-17T16:19:59.880Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/td0QeePvfGQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I heard that day-5 part two was a curveball, so I really want to be able to implement it using my visual programming system... which failed so far. Using a brute force solution would mean that the program would run very very long. And my current "speed run" solution wouldn't suffice for this. &lt;/p&gt;
&lt;p&gt;Part one actually provided a big challenge for my vps as well, running the program with the small test dataset can be seen in the video: &lt;a href="https://youtu.be/td0QeePvfGQ"&gt;youtu.be/td0QeePvfGQ&lt;/a&gt; . I've spend a lot of time adding more new node-types this weekend (like handling a while-loop and improved array handling) and making changes to the variable-nodes and expressions. Also the variable scoping (needed for local function variables) that I implemented had some flaws, so I fixed that as well. You can now define global and scoped variables. I've also made some simple variable visualizers that better show the data for data types like dictionary/array and grid. &lt;/p&gt;
&lt;p&gt;My current vps solution works better than the flow-based vps that I was building last year. A big difference is that the data that is send from node to node is now just a single value. That value can still be of different types (number, string, array).. and special variable-nodes are needed to keep track of data. These variables also have a type like number, string, array, dictionary, grid. Often working with a single value is not enough and that's why these variables are needed. They can be referenced from within expressions. Also being able to run some flow-parts in parallel or sequentially helps a lot. This starts to feel much more like a regular 3rd gen programming language. &lt;/p&gt;
&lt;p&gt;The UI is currently quite limited.. to be able to create a flow program efficiently it definitely needs a lot of work. Textual programming is much faster. I want to finish at least one of the advent of code puzzles where a grid is involved .. so today's puzzle (17) seems like a good fit. I'll probably work on that next weekend.&lt;/p&gt;
&lt;p&gt;üß¨ &lt;a href="https://love2d.org/forums/viewtopic.php?p=236661#p236661"&gt;Re: Conway's game of life&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/devlog-together.html#2023-12-17T18:33:32.985Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One nice reusable abstraction my L√ñVE apps have all converged on is an immediate-mode button primitive. I draw all my buttons each frame along with all the callbacks they need, and a couple of framework-y lines of code in the mouse-press callback is all it takes to get them working. Last night I realized (while poking inside &lt;a href="https://love2d.org/forums/viewtopic.php?p=236661&amp;amp;sid=2693d6bb97fdec2945964df8ab60a34a#p236661"&gt;Re: Conway's game of life&lt;/a&gt;) that my hacky sliders in Lua Carousel's settings admit a similar abstraction (even better than the one there). The only additional complexity is it needs a couple more lines in the  &lt;code&gt;update&lt;/code&gt;  callback that continually refresh the backing value as you drag the slider.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/devlog-together.html#2023-12-17T18:35:20.211Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally starting to see a workflow come together in my editor. Here you can see Fibonacci at three different levels in the language I'm making. These functions live in three different files. Looking at them at once and comparing them isn't easily supported in any other editor I use. On the left is a simplistic symbol browser.&lt;/p&gt;
&lt;p&gt;I'm super excited that I'm slowly getting to the point where I can do these kinds of things. Having different views of our codebases that we can switch between is something I've been wanting for years.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2023-12-17 at 1.31.15‚ÄØPM.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06ALKFHNCC.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Prabhanshu Gupta&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/thinking-together.html#2023-12-14T10:04:32.780Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm making a system for working with loosely structured tables in spreadsheets. Tables/lists in sheets represent collections of things, however formulas and drag-filling works at an item-level (cell-level) abstraction. This causes a lot of problems ‚Äì duplicated effort, hard to do lookups across tables, errors when new data is added. However, committing to a structure upfront (a SQL style table for example) has a big cost. An effective system would allow users to gradually introduce structure that works with whatever rich table they draw.&lt;/p&gt;
&lt;p&gt;Right now I'm onto a language for pulling data from such rich tables. It works by manipulation of the ranges (rectangles) pointed to by Labels. Queries can be made by intersecting/unioning rectangles (in picture is a small example). What ideas/projects would you recommend looking at in this space? I've looked around a fair bit for "2D grammar" and "spatial programming language" but haven't had much luck.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06AHB86LQH.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/thinking-together.html#2023-12-16T20:09:09.726Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In linguistics, we have "denotation" and "connotation" as two forms of meaning. In programming, we have denotational semantics and operational semantics. Do we have connotational semantics? (If not ‚Äî may we?)&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üö∞ &lt;a href="https://retool.com/pipes"&gt;lovely tribute to Yahoo Pipes&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/linking-together.html#2023-12-15T05:35:59.718Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://retool.com/pipes"&gt;lovely tribute to Yahoo Pipes&lt;/a&gt; written by the inimitable Glenn Fleishman appeared on the Retool site today.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every Pipes‚Äô mapping was public; every Pipe could be copied and modified. ‚ÄúThat was design principle one for us, and I think that had a lot to do with making it accessible to non-developers,‚Äù Sadri said. This openness that encouraged‚Äîreally, required‚Äîknowledge-sharing embodied some of the internet‚Äôs best qualities that were on the verge of being lost at that time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://interconnected.org/home/2023/12/05/code"&gt;The subjective experience of coding in different programming languages&lt;/a&gt; via &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/linking-together.html#2023-12-16T22:28:24.365Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Different programming languages feel viscerally different, right? I can‚Äôt be the only one. It‚Äôs so embodied.&lt;/p&gt;
&lt;p&gt;When I‚Äôm deep in multiple nested parentheses in a C-like language, even Python, I feel precarious, like I‚Äôm walking a high wire or balancing things in my hands and picking my way down steep stairs. It‚Äôs a relief to close the braces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üê∏ &lt;a href="https://www.youtube.com/watch?v=cBYudbaqHAk&amp;amp;t=6704s"&gt;CellPond: Spatial programming without escape&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/linking-together.html#2023-12-17T21:00:07.917Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/cBYudbaqHAk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As a Cellular Automata and design tools aficionado I loved this whole thing from &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;(saw some shared essence with &lt;a href="http://aprt.us/editor/?load=doc/examples/Wheel%20Diagram.json"&gt;Apparatus&lt;/a&gt; and Netlogo)&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://ln.hixie.ch/?start=1700627373&amp;amp;count=1"&gt;ln.hixie.ch/?start=1700627373&amp;amp;count=1&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/linking-together.html#2023-12-17T21:32:57.879Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello üôã‚Äç‚ôÇÔ∏è  future of coding. &lt;/p&gt;
&lt;p&gt;I came across this some time ago but I still think it‚Äôs worthwhile sharing,&lt;/p&gt;
&lt;p&gt;It showed for me how one the one hand the ethical decline of google went from ‚Äúdon‚Äôt be evil- to‚Ä¶ what ever it is today that‚Äôs their guiding principle. But also more importantly how a change in company culture also reflected on technical innovation. &lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W3/present-company.html#2023-12-15T13:03:10.625Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today, is there a way to build state-driven UI components (like React/Vue/Svelte) where some of the state, but not all, can be persisted periodically in the backend perhaps as an event log which would enable things like playback of past interactions? How would you go about creating something like this with usual tools like Javascript, REST and Postgresql? ü§î&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-3/</guid><pubDate>Mon, 18 Dec 2023 09:29:30 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/12 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;ü§ñ Visual exploration of inference in a LLM üìë Functional Reactive Programming Resources üó®Ô∏è Conversational UI for Interactive Components &lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/zQY50vhMex0"&gt;Add and Use Union Kit&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/two-minute-week.html#2023-12-07T16:02:08.378Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/zQY50vhMex0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This week I'd like to show how a new union type is added to miqula. See description under video. (no audio) &lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=NSS6yAMZF78"&gt;Motion Extraction&lt;/a&gt; via &lt;strong&gt;Chigozie Nri&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/share-your-work.html#2023-12-05T22:16:07.402Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/NSS6yAMZF78/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I really liked &lt;a href="https://www.youtube.com/watch?v=NSS6yAMZF78"&gt;Posy's latest video&lt;/a&gt; so I just put a version of the motion extractor on replicate: &lt;a href="https://replicate.com/chigozienri/posy-motion-extraction"&gt;replicate.com/chigozienri/posy-motion-extraction&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://replicate.com/chigozienri/posy-motion-extraction"&gt;chigozienri/posy-motion-extraction ‚Äì Replicate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Extracts motion from video&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F069G4R7KK2.mp4"&gt;birds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üó®Ô∏è &lt;a href="https://gloodata.com/download/"&gt;Gloodata: An Extensible Conversational UI for Interactive Components&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/share-your-work.html#2023-12-07T16:43:56.667Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First public release of Gloodata: An Extensible Conversational UI for Interactive Components&lt;/p&gt;
&lt;p&gt;Builds for Linux (x64) and Mac (Apple Silicon) here: &lt;a href="https://gloodata.com/download/"&gt;gloodata.com/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Overview: &lt;a href="https://www.youtube.com/watch?v=f-txlMDLfng"&gt;youtube.com/watch?v=f-txlMDLfng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let me know what you think!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gloodata: An Extensible Conversational UI for Interactive Components" src="https://i.ytimg.com/vi/f-txlMDLfng/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/chigozienri/status/1733142785975345190"&gt;Chigozie Nri (@chigozienri) on X&lt;/a&gt; via &lt;strong&gt;Chigozie Nri&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/share-your-work.html#2023-12-08T15:14:44.658Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/chigozienri/status/1733142785975345190"&gt;Chigozie Nri (@chigozienri) on X&lt;/a&gt;: These boids are very rude&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1733142575807180800/pu/img/s0_HYaM2dtxkXZhr.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F068W5FTC4X.mp4"&gt;Parabola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://v5.chriskrycho.com/journal/wizardry-frontier/"&gt;The Wizardry Frontier‚Ää‚Äî‚ÄäSympolymathesy, by Chris Krycho&lt;/a&gt; via &lt;strong&gt;Chris Krycho&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/share-your-work.html#2023-12-08T16:05:54.300Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Writing a bit about moving the state of the art‚Äîthis piece itself isn‚Äôt doing it, but I kind of hope this framing is useful for people who  &lt;em&gt;are&lt;/em&gt;  trying to do it. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For 75 years, programming languages have steadily raised the baseline of what ‚Äúnormal‚Äù programmers can express in their languages. They can still.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üíª &lt;a href="https://git.sr.ht/~akkartik/carousel.love/commit/42cc608d06821"&gt;bugfix: only check for settings menu when open&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/devlog-together.html#2023-12-04T00:13:30.211Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This bug I foisted on myself today was a real "things are not as they appear" puzzle.&lt;/p&gt;
&lt;p&gt;üóìÔ∏è &lt;a href="http://qemu-advent-calendar.org/2023/"&gt;qemu-advent-calendar.org/2023&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/devlog-together.html#2023-12-06T03:11:38.244Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So Mu was on the advent of Qemu calendar yesterday, and I totally missed it.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/devlog-together.html#2023-12-07T18:24:49.059Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_20231207_101640.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F068R31BJFR.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_20231207_101753.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F0692LXSHSR.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_20231207_101610.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F069J83US81.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/_QJmKjcK0Mk"&gt;Kinopio To Markdown&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/devlog-together.html#2023-12-08T10:18:45.520Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/_QJmKjcK0Mk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Status video about Kinopio2md (Kinopio to Markdown). What is not said is that the blue boxes are source code for the app (the compiler compiles the drawings to executable code).  I deal with a bunch of different programming languages, picking the best one for each step along the way (approximately 10, if you include English). I want to document more deeply the use of the Transpiler in, say, the ‚ÄúEscape Whitespace‚Äù Component (and others), but, I haven‚Äôt gotten around to it yet&lt;/p&gt;
&lt;p&gt;ü´∂ &lt;a href="https://akkartik.itch.io/carousel/devlog/647726/playing-with-lves-physics-for-the-first-time"&gt;Playing with L√ñVE's physics engine for the first time&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/devlog-together.html#2023-12-09T03:39:27.782Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been making a little program every evening with my new toy. Today:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://akkartik.itch.io/carousel/devlog/647726/playing-with-lves-physics-for-the-first-time"&gt;akkartik.itch.io/carousel/devlog/647726/playing-with-lves-physics-for-the-first-time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F069AJ092DT.webm"&gt;Physics Game&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/kkgJQdJXFtk"&gt;Advent of code day 7 implemented in my visual programming system&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/devlog-together.html#2023-12-10T09:19:34.640Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/kkgJQdJXFtk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Oh boy.. it was a lot of work being able to solve advent of code puzzle 7 (part 1) in my visual programming system.. as you can see in the video &lt;a href="https://youtu.be/kkgJQdJXFtk"&gt;youtu.be/kkgJQdJXFtk&lt;/a&gt;. I had to implement a lot new node-types for handling dictionaries and a new scoped-variable type. This scoped-variable can have different types.. currently just a regular value or a dictionary. This dictionary is used in a function-flow to determine the hand type which is needed in this puzzle. Also custom sorting was needed (I implemented a Schwartzian transform in the sort node-type). Running the flow for the full puzzle input takes a long time so I don't show that in the video (although I've added a "full-speed" mode that helps a bit). I've also added some colors to better show when some nodes are active, especially handy for nodes that run longer like a foreach, function-call, map or sort.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://guitarvydas.github.io/2023/12/04/Code-Layout-for-Programming.html"&gt;Code layout for programming&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/thinking-together.html#2023-12-08T09:59:26.919Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I believe that VPLs are better than TPLs.  I include some observations that led me to that conclusion.  meta: I choose to believe that this channel ‚Äúthinking together‚Äù means that half-baked ideas are to be tossed out for brainstorming, pushback, discussion and revision.  &lt;a href="https://guitarvydas.github.io/2023/12/04/Code-Layout-for-Programming.html"&gt;guitarvydas.github.io/2023/12/04/Code-Layout-for-Programming.html&lt;/a&gt; (discussion of 1D, 2D, 3D, 4D program syntax)&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;ü§ñ &lt;a href="https://bbycroft.net/llm"&gt;bbycroft.net/llm&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/linking-together.html#2023-12-04T03:21:56.892Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty awesome visual exploration of inference in a LLM&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://github.com/sunxfancy/vscode-llvm"&gt;VSCode LLVM Compiler Explorer&lt;/a&gt; via &lt;a href="https://github.com/rcshubhadeep"&gt;Shubhadeep Roychowdhury&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/linking-together.html#2023-12-04T12:27:53.352Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a tool for compiler developers of LLVM. This vscode extension can support exploring LLVM IR and machine IR after each pass &lt;/p&gt;
&lt;p&gt;üìë &lt;a href="https://gitlab.com/andersyr/frp-resources/-/blob/main/frp-resources-page.md"&gt;Functional Reactive Programming Resources&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/linking-together.html#2023-12-05T12:29:33.232Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List of Functional Reactive Programming resources:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A chronological collection of academic resources on the practice of functional reactive programming. Great care has been taken to respect copyrights - no files are directly hosted and...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/linking-together.html#2023-12-08T15:59:45.945Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is absolutely fascinating. Tally marks are a little visual language that has coevolved with the textual context.&lt;/p&gt;
&lt;p&gt;I don't have a link, but links appreciated.&lt;/p&gt;
&lt;p&gt;&lt;img alt="signal-2023-12-08-07-37-36-166.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F068WCQ8K55.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W2/of-ai.html#2023-12-04T08:03:22.851Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What if web frameworks offered a standard way to discover capabilities that are then given to AI as tools? A  &lt;code&gt;document.getTools()&lt;/code&gt;  perhaps?&lt;/p&gt;
&lt;p&gt;This could be achieved simply with plugins for NextJS, VueJS, SvelteKit etc. Small convention that eliminates a lot of brittleness when web agents try to discover capabilities and invoke them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F068U7Q1S0Z.png"&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-2/</guid><pubDate>Sun, 10 Dec 2023 20:54:29 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/12 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üëì VR visual/spatial programming  üëÅÔ∏è‚Äçüó®Ô∏è Explore, collect &amp;amp; play with live visual programs üóìÔ∏è Adventual activities&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/hWzxG2oeu0E"&gt;Enter a Subnet&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/two-minute-week.html#2023-11-30T12:18:14.830Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/hWzxG2oeu0E/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Last week I worked on entering a subnet, this is used for condition, match, filter, map etc.. See description under video. (no audio)&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://github.com/jhp/recursive-grammar-literal"&gt;Recursive grammar literals&lt;/a&gt; via &lt;strong&gt;Jason Priestley&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/share-your-work.html#2023-11-27T04:52:58.192Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi all, I've been inactive here for a long time. Progress on my big project, a collaborative mobile-friendly development environment, has been very slow. However, along the way I've built some libraries which may be of interest to some people here.&lt;/p&gt;
&lt;p&gt;On the languages and parsing side, I've built &lt;a href="https://github.com/jhp/recursive-grammar-literal"&gt;recursive grammar literals&lt;/a&gt; which lets you write CFGs as normal javascript functions. And &lt;a href="https://github.com/jhp/church-cat"&gt;church-cat&lt;/a&gt; which lets you compute over a tree structure, e.g. annotate a parse tree.&lt;/p&gt;
&lt;p&gt;On the UI side I've built &lt;a href="https://github.com/jhp/imperative"&gt;imperative&lt;/a&gt; which is a frontend javascript library much like React, but based on generators and structured concurrency. And most recently I've been working on &lt;a href="https://github.com/jhp/palimpsest"&gt;Palimpsest&lt;/a&gt; which covers the backend of web development with a more functional or "event-sourced" style where data sources are computed as folds over input streams. My interest there is to allow stateful applications to be more easily shared, forked, and extended by their users etc.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://guitarvydas.github.io/2023/11/27/Statecharts-Papers-We-Love-Video.html"&gt;Statecharts papers we love video&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/share-your-work.html#2023-11-28T14:43:05.258Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Statecharts - my reading of Harel‚Äôs original paper in video format (26 minutes) . (In case it‚Äôs not obvious, IMO it‚Äôs worth knowing about Statecharts, even if you believe that VPLs are a dead end).&lt;/p&gt;
&lt;p&gt;üìë &lt;a href="https://wigwam.directory"&gt;wigwam.directory: curated list of small-but-mighty projects&lt;/a&gt; via &lt;strong&gt;Taylor Troesh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/share-your-work.html#2023-11-29T13:51:19.364Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Howdy friends! I recently published the beginnings of a new project: &lt;a href="https://wigwam.directory"&gt;wigwam.directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm looking for projects that reduce public reliance on bloated/crumbling infrastructure. Any suggestions?&lt;/p&gt;
&lt;p&gt;üå± &lt;a href="https://science-in-the-digital-era.khinsen.net/#The%20sustainability%20doughnut%20of%20scientific%20software"&gt;The sustainability doughnut of scientific software&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/share-your-work.html#2023-11-30T07:10:39.603Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have written a short essay on software sustainability, and I'd love feedback from this community:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://science-in-the-digital-era.khinsen.net/#The%20sustainability%20doughnut%20of%20scientific%20software"&gt;The sustainability doughnut of scientific software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's written in the specific context of computational science, but it readily translates to other application domains.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F067UQAP6P9.mp4"&gt;Plato Demo Video&lt;/a&gt; by &lt;strong&gt;Michael Gummelt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/share-your-work.html#2023-12-01T17:50:34.659Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We just published a new demo of Plato's PBD subsystem. Much more powerful than our previous implementation.&lt;/p&gt;
&lt;p&gt;PBD is historically difficult to generalize and make practical, but it seems that once you take it out of the desktop metaphor and apply it to relational data where queries are more explicit, it does quite well.&lt;/p&gt;
&lt;p&gt;I suspect this could become the most prevalent way of automating app logic without coding.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F067UQAP6P9.mp4"&gt;Plato Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üëìüé• &lt;a href="https://youtu.be/Fl3DjzTdUo8?si=bWi7CWwbXIQh_wUw"&gt;Pebble Graphics Trailer&lt;/a&gt; via &lt;strong&gt;Irvin Hwang&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/share-your-work.html#2023-12-02T19:22:02.943Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Fl3DjzTdUo8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi All&lt;/p&gt;
&lt;p&gt;I‚Äôm almost ‚Äúdone‚Äù with my VR visual/spatial programming app, Pebble Graphics üéâ (‚Äúdone‚Äù because I still see a lot of things that could be improved, but there are other projects I‚Äôm excited to start so I‚Äôm shipping what I have). It‚Äôs a VR version of turtle graphics with some interactive program stepping and 3D visualizations of things like state change and execution history.&lt;/p&gt;
&lt;p&gt;I made a trailer you can watch (and listen to üé∂) here &lt;a href="https://youtu.be/Fl3DjzTdUo8?si=bWi7CWwbXIQh_wUw"&gt;Pebble Graphics Trailer&lt;/a&gt;. If you have a Quest headset and want to try it out, I set up a Beta release while I try to get it into Meta‚Äôs App Lab app store. This link &lt;a href="https://www.meta.com/s/2Rlda8ess"&gt;meta.com/s/2Rlda8ess&lt;/a&gt; should work otherwise feel free to DM me the email address associated with your Oculus/Meta account.&lt;/p&gt;
&lt;p&gt;I also have some time-stamped/annotated videos later on in this &lt;a href="https://www.youtube.com/playlist?list=PLhmEEtPzG7mW4JrBUhwbo3al6HjaJsDp2"&gt;Youtube Playlist&lt;/a&gt; in case you want to see more.&lt;/p&gt;
&lt;p&gt;I‚Äôm more of a lurker in this slack, but it‚Äôs a community I enjoy checking on and it‚Äôs really cool to see it grow!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pebble Graphics is a 3D visual and interactive programming system that lets you create and explore geometric patterns in virtual reality. Using simple commands, you can control Pebbles the dog to draw lines and shapes with programming. You can also step through your programs interactively, and see unique 3D visualizations of how things change over time. Pebble Graphics is a fun and creative way to learn basic ideas in programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://akkartik.itch.io/carousel/devlog/641310/version-ao-saving-your-programs-across-restarts"&gt;Version ao: saving your programs across restarts&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/devlog-together.html#2023-11-27T20:27:42.472Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I released the hopefully final feature last night for my mobile-friendly REPL: file loading and saving.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://akkartik.itch.io/carousel/devlog/641310/version-ao-saving-your-programs-across-restarts"&gt;Version ao: saving your programs across restarts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From here on out I only want to work on UI polish and accessibility. Let's see how long it can stay running without incompatibilities that require upgrades.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This feature was very difficult. Lua Carousel launched without the ability to save to and load from files because I struggled to juggle two constraints: Reliability. I spent a long time trying to make...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üëÅÔ∏è‚Äçüó®Ô∏èüê¶ &lt;a href="https://twitter.com/io_sammt/status/1730679917354897760"&gt;Samuel Timb√≥ (@io_sammt) on X&lt;/a&gt; via &lt;strong&gt;Samuel Timb√≥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/devlog-together.html#2023-12-01T22:04:01.428Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi FoC, just posting here some of &lt;a href="https://twitter.com/io_sammt/status/1730679917354897760"&gt;my latest work in Unit&lt;/a&gt;. &lt;a href="https://unit.tools"&gt;unit.tools&lt;/a&gt; is my current take on how to search for units (live programs) online and collect your own. It is still a prototype, bear with me. &lt;a href="https://unit.tools"&gt;unit.tools&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/io_sammt/status/1730679917354897760"&gt;Samuel Timb√≥ (@io_sammt) on X&lt;/a&gt;: Officially announcing the second project I am building in public: &lt;a href="https://t.co/BsxYrY7UiX"&gt;https://t.co/BsxYrY7UiX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is a marketplace to explore, collect and play with live visual programs built in Unit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1730679828989284352/pu/img/nH1shP8AwiTjEY4O.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://akkartik.itch.io/carousel/devlog/644227/version-ap-a-lot-less-jittery"&gt;Version ap: a lot less jittery&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/devlog-together.html#2023-12-02T06:20:54.676Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm starting to acquire some respect for small UX niceties like a visual 'clicked' state. It's unnerving to click 'save' and not know for sure that stuff got saved. Particularly on a small mobile screen where it's easy to fat finger things.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No new features, only fixes for bugs. From most to least embarrassing: * If you selected some text and then hit the 'clear' button the app would crash. * Dragging the mouse/finger around on top of the...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://akkartik.itch.io/carousel/devlog/644647/version-as-major-improvements-to-the-scrollbar"&gt;Version as: major improvements to the scrollbar&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/devlog-together.html#2023-12-03T02:01:48.450Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More lessons from the school of hard knocks about the value of usability in software: &lt;a href="https://akkartik.itch.io/carousel/devlog/644647/version-as-major-improvements-to-the-scrollbar"&gt;Version as: major improvements to the scrollbar&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Taps near the top of the editor sometimes failed to move the cursor. It turns out this was only happening soon after a drag of the scrollbar. Lua Carousel's scrollbar has always felt a little jumpy. I...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/xPfCAPZlAzo"&gt;Advent of Code 2023 day 1 using visual programming&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/devlog-together.html#2023-12-03T09:20:13.762Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/xPfCAPZlAzo/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Last year I used the advent of code to test the visual programming environment that I was building at that time.. and it helped me to come to the conclusion to start over.. which I did at the beginning of this year. So... the time has come to test my new environment and let advent of code help me improve and extend it. Hopefully this year I won't need to decide to start overüòÖ. To finish the first challenge I needed to extend my vps with new node types or tweak some other stuff like be able to execute regex expressions and load external files as input to a flow. For the second part of day 1 a special node needed to be created to handle the sneaky replace string functionality that was needed. A very nice update that I made is the possibility to run parts of flow in parallel instead of sequential and use the results in the upstream nodes. &lt;/p&gt;
&lt;p&gt;And talking about upstream nodes... since last week it's also possible to drag all upstream or downstream nodes at once when reorganizing a flow using UI elements(it can be seen in the video). &lt;/p&gt;
&lt;p&gt;In the flow-engine I also use standalone nodes that represent global variables which can be used in other nodes. &lt;/p&gt;
&lt;p&gt;I'll definitely not make it to the AoC leaderboard (it's not a goal anyway).. however.. I think I am getting a lot of value out of this already..even on day 1.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/devlog-together.html#2023-12-03T20:28:01.825Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Been making slow, but steady progress on my editor. I can properly zoom in and out on the canvas. I can have some panes that represent sub-file things. The power usage when idle is basically non-existent (down from 100% cpu usage always). I finally feel like things are starting to come together and that I can finish up some parts and then really start focusing on actually making the flow and features fit how I code.&lt;/p&gt;
&lt;p&gt;Hopefully soon I can start using it for a project that isn't coding itself so I am forced to add all the features I've been ignoring.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0692QD18JC.mp4"&gt;Devlog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/thinking-together.html#2023-11-27T10:57:35.110Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Where's the emacs people in this text centric brave new world?&lt;/p&gt;
&lt;p&gt;Context:  the most interesting stuff done on text always happened on emacs, and it makes sense to use a text centric malleable software platform to experiment by adding LLMs to everything, I haven't seen much done there.&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://scrapscript.org/"&gt;scrapscript.org&lt;/a&gt; via &lt;strong&gt;Guyren Howe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/thinking-together.html#2023-11-29T03:02:54.834Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But have y‚Äôall seen this? &lt;a href="https://scrapscript.org/"&gt;scrapscript.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my kind of thinking.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/thinking-together.html#2023-11-29T12:23:24.791Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thinking about a modern agent orchestration / business process modeling / workflow language. Here is how the standard BPMN example might look like:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;enqueued&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jobs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;specific&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;queues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;They&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;started&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;well&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;intermediate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;consume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;invoker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;those&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;triggerred&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;specific&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;indicated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;their&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;corresponding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"when"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clause&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stateful&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;workflow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;orchestrates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;



&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select_pizza&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order_pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;chef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make_pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;



&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line_items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;processing&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;subprocess&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;procure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;invoke&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subprocess&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;clerk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;



&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;delivery_boy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deliver_pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pay_for_pizza&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat_pizza&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;hunger_satisfied&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;



&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ask_for_pizza&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;clerk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calm_the_customer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;

&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F068661L14H.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/12/W1/present-company.html#2023-12-03T18:07:46.022Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hi! tinyletter (the service I use for the FoC newsletter) is closing down, to finish the last stage of going completely self hosted I plan to export the subscriber list, put it in a csv, do a for loop and use some mail api to send it. Also a form somewhere that appends to that csv. But before adopting this webscale architecture ‚Ñ¢  I wanted to ask you&lt;/p&gt;
&lt;p&gt;&lt;em&gt;if there's any interesting idea to improve the newsletter now that I'm doing the migration&lt;/em&gt; .&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202312-week-1/</guid><pubDate>Sun, 03 Dec 2023 21:56:28 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/11 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üíº Spreadsheets &amp;amp; Small Software üé† Lua Carousel üó∫Ô∏è Embark: Dynamic documents for making plans&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/frOmjdDg9n8"&gt;Wrap and unwrap expression&lt;/a&gt; via &lt;strong&gt;U03U0SCU5LH&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/two-minute-week.html#2023-11-22T16:00:39.890Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/frOmjdDg9n8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Last week I worked on Wrap / Unwrap Expression. See description under video. (no audio)&lt;/p&gt;
&lt;p&gt;Btw. if somebody has a better verb instead of wrap.. let me know.&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üíº &lt;a href="https://blog.nilenso.com/blog/2023/11/10/spreadsheets-and-small-software"&gt;Spreadsheets and Small Software&lt;/a&gt; via &lt;strong&gt;Prabhanshu Gupta&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/share-your-work.html#2023-11-20T16:57:59.916Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve been researching spreadsheets and writing one for a couple months. I wrote a bit about the what and the why, give it a read!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.nilenso.com/blog/2023/11/10/spreadsheets-and-small-software"&gt;blog.nilenso.com/blog/2023/11/10/spreadsheets-and-small-software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wasn‚Äôt able to cover many specifics here ‚Äì writing about the work seems like a lot more work than doing the actual work üòÖ. There‚Äôs a lot to cover and I‚Äôm hoping to get to it slowly. Until then please shoot thoughts and questions here, I‚Äôd love to answer.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/cF2OF75ivZM"&gt;Arroost: Normalise sharing scrappy fiddles&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/share-your-work.html#2023-11-21T22:09:38.720Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/cF2OF75ivZM/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Watch my new talk!&lt;/p&gt;
&lt;p&gt;It's about a music-making node-based language tool for feeling.&lt;/p&gt;
&lt;p&gt;ARROOST: NORMALISE SHARING SCRAPPY FIDDLES&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://mike-austin.com/react-desktop/?app=markdown&amp;amp;args=/Let%27s%20Build%20a%20Language.md&amp;amp;width=1280&amp;amp;height=1440"&gt;Let's Build a Programming Language&lt;/a&gt; via &lt;strong&gt;Mike Austin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/share-your-work.html#2023-11-21T23:57:56.551Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've demoed my Kopi language and Rect-Desktop projects a few weeks ago. In my experience writing Kopi, I've always wanted to write a "How to Write a Programming Language" tutorial based on it, since the core language is simple and familiar (infix operators, assignment, anonymous functions, etc.). Here's the start of something (written in Markdown, presented using the React-Desktop Markdown app:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mike-austin.com/react-desktop/?app=markdown&amp;amp;args=/Let%27s%20Build%20a%20Language.md&amp;amp;width=1280&amp;amp;height=1440"&gt;Let's Build a Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's in an early draft. I like presenting ideas very incrementally, and being able to see and even interact with each small change. You can modify any of input or parser code and see the result value change.&lt;/p&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel"&gt;Lua Carousel&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/share-your-work.html#2023-11-23T19:28:48.533Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lua Carousel:  A lightweight programming environment for desktop and mobile devices that you can make changes to while it's running.&lt;/p&gt;
&lt;p&gt;repo: &lt;a href="https://git.sr.ht/~akkartik/carousel.love"&gt;git.sr.ht/~akkartik/carousel.love&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0673K70HDZ.webm"&gt;Lua Carousel Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://pel-daniel.github.io/cv/"&gt;Daniel Garcia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/share-your-work.html#2023-11-24T20:03:17.537Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Followup on my  &lt;code&gt;~_*Colorful types*_~&lt;/code&gt;  project. I‚Äôm trying to create a  &lt;code&gt;~_*map*_~&lt;/code&gt;  for a codebase with different zoom levels.&lt;/p&gt;
&lt;p&gt;I have been thinking about having 3 zoom levels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: Only colors for both types &amp;amp; functions&lt;/li&gt;
&lt;li&gt;Level 2: Colors and names for types, functions and parameters&lt;/li&gt;
&lt;li&gt;Level 3: Shows the entire source file (maybe with some extra color sugar on top?) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a couple of screenshots of level 1 &amp;amp; 2, and video of the WIP interface.&lt;/p&gt;
&lt;p&gt;PS. Anyone have good recommendations of typescript codebases with a couple dozen source code files which I can use for testing?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2023-11-22 at 9.01.09 PM.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06782M2C1H.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2023-11-22 at 8.58.08 PM.png" src="http://history.futureofcoding.org/history/msg_files/F06/F067X557NBA.png"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0671G5D5TQ.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/devlog-together.html#2023-11-20T06:56:47.502Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More progress on a lightweight programming environment that runs on Linux, Windows, Mac, Android, iOS. Also modifiable live while it runs (though not on mobile devices).&lt;/p&gt;
&lt;p&gt;The seed design constraint here was to structurally prevent the pop-up keyboard on a touchscreen from ever blocking my typing. That led to this design of a multi-line commandline editor in the top half, fixing the non-editable output buffer in the bottom half. Independent commands/scripts then expanded in the only other direction available: left/right.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0669CLPCQ6.webm"&gt;Carousel Shell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/devlog-together.html#2023-11-21T08:52:18.837Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F066G8T6T9C.webm"&gt;Carousel Shell Slider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üó∫Ô∏è &lt;a href="https://www.inkandswitch.com/newsletter/dispatch-001/"&gt;Dispatch 001:On Embark and Lude&lt;/a&gt; via &lt;a href="https://twitter.com/duncancragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/devlog-together.html#2023-11-23T11:18:34.108Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hiya, I just read this new newsletter from Ink'n'Switch:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.inkandswitch.com/newsletter/dispatch-001/"&gt;inkandswitch.com/newsletter/dispatch-001&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Solo independent researchers we know often discuss the challenge of working alone. Being part of a research group can create community, social accountability, provide feedback, and just give you someone to talk to when you‚Äôre feeling stuck or bored. This is why we started our Researchers-in-Residence program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which made me think "this could be something we set up in FoC!"&lt;/p&gt;
&lt;p&gt;And then I came right here to say that, without thinking it through any further...&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/WkyB8sdtiZ0"&gt;Creating html for nodes using gpt4 api in a visual programming system&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/devlog-together.html#2023-11-25T09:27:41.214Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/WkyB8sdtiZ0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi, in this weeks video I show a new node type in which a prompt can be entered which is used to create HTML via openai gpt4. It's quite powerful .. the created nodes can receive and visualize input data from another node. This is offcourse inspired by makeitreal from tldraw which uses gpt4-vision-preview. I have been playing with the prompt to get the result that I wanted, although the results are not consistent when recreating the html using the same prompt. Still, very cool that this is possible.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/devlog-together.html#2023-11-26T19:20:00.817Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Achievement unlocked: I've built an app large enough[1] that it crashes my programming environment that puts all the code on a spatial surface.&lt;/p&gt;
&lt;p&gt;The problem: I do this snazzy initial animation (see video) that takes in the whole thing before zooming back in somewhere. That animation works by drawing the whole surface to an in-memory canvas before transforming it. Turns out drawing to a canvas still uses the video card, and I don't have enough video RAM for a virtual "monitor" of this resolution.&lt;/p&gt;
&lt;p&gt;[1] Or spread out enough. It's not really about lines of code, just how much area the code occupies.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F067B7LT50S.webm"&gt;bf codemap&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/reading-together.html#2023-11-20T18:56:29.079Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was leafing through my father's old books when this diagram caught me off-guard.&lt;/p&gt;
&lt;p&gt;We're so used now to having an OS with apps, that it's weird to think of OS-level transitions (login-&amp;gt;shell), inter-apps transitions (shell-&amp;gt;vi) and inside-app transitions (vi's command&amp;lt;-&amp;gt;append modes) as similar things. üôÉ&lt;/p&gt;
&lt;p&gt;But to a user new to computers, yes these are all "modes".&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20231012_130106.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F066D6FURRU.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Janne Aukia&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/thinking-together.html#2023-11-24T14:43:50.649Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think that often the most difficult part of programming is debugging: humans aren't very good at "seeing" how an app operated when it failed. You get some log output that might or might not have references to the correct file locations.&lt;/p&gt;
&lt;p&gt;I don't see any reason, in the long term, why humans would be better than machines at debugging. How to make that happen? I assume somebody is building this already. Would it help if an AI with a large context window + access to the VM could see the whole call logs/tree and see exactly what is going on?  AI could learn from other users, see everything that happens in a run without debugger/console.logs, try multiple solutions in parallel, and fix issues while you sleep.&lt;/p&gt;
&lt;p&gt;Thoughts on this?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://blog.nilenso.com/blog/2023/11/10/spreadsheets-and-small-software/"&gt;Spreadsheets and Small Software - nilenso blog&lt;/a&gt; via &lt;strong&gt;Benji York&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/linking-together.html#2023-11-21T21:28:47.876Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"We wanted tools to make sheds, we got tools to make skyscrapers."&lt;/p&gt;
&lt;p&gt;üó∫Ô∏è &lt;a href="https://www.inkandswitch.com/embark/"&gt;Embark ‚Äî Dynamic documents for making plans&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/linking-together.html#2023-11-21T21:51:27.530Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ink &amp;amp; Switch just released a new essay: &lt;a href="https://www.inkandswitch.com/embark/"&gt;Embark ‚Äî Dynamic documents for making plans&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Starting from a desire to "unbundle the app" in the name of malleable software, they explore using a bullet-point outliner as a substrate for dynamic properties, computations, and views. They ground the work with a specific use case ‚Äî trip planning ‚Äî and they hard-code a bunch of stuff that ought to be pushed into user space, granted. But it's easy to look at this, imagine how it could be expanded, and see some really compelling possibilities for a different way to approach creating and distributing software.&lt;/p&gt;
&lt;p&gt;Congrats to &lt;a href="https://twitter.com/paulsonnentag"&gt;Paul Sonnentag&lt;/a&gt;, &lt;strong&gt;@Alexander Obenauer&lt;/strong&gt;, and &lt;a href="https://twitter.com/geoffreylitt"&gt;Geoffrey Litt&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://pickcode.io/"&gt;Pickcode | Make cool stuff with code&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/linking-together.html#2023-11-22T03:49:30.841Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pickcode.io/"&gt;Pickcode&lt;/a&gt; ‚Äì a visual language to teach kids to code.&lt;/p&gt;
&lt;p&gt;üß∂ &lt;a href="https://www.scattered-thoughts.net/writing/there-are-no-strings-on-me/"&gt;There are no strings on me&lt;/a&gt; via &lt;strong&gt;Justin Blank&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/linking-together.html#2023-11-23T13:59:46.966Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An essay on the challenges of image based/live systems: &lt;a href="https://www.scattered-thoughts.net/writing/there-are-no-strings-on-me/"&gt;There are no strings on me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://lobste.rs/s/ogfcnz/lua_carousel_create_little_programs_on"&gt;Lua Carousel: create little programs on desktop or mobile devices&lt;/a&gt; via &lt;strong&gt;Walker Griggs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/linking-together.html#2023-11-24T18:16:49.253Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A saw a friendly face on the front page of lobsters this morning&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/859408"&gt;Bootstrap yourself into conviviality by writing your own Forth&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W4/linking-together.html#2023-11-25T04:03:49.454Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/53151468-cd7cf596ee96a516460ac0b31a74998b26a1bcd83cdd234891ba4a631f44be76-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I just found an absolutely  &lt;em&gt;ancient&lt;/em&gt;  bit of advocacy for convivial tools. From 2008!&lt;/p&gt;
&lt;p&gt;via &lt;a href="https://muforth.nimblemachines.com"&gt;muforth.nimblemachines.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jonathoda/"&gt;Jonathan Edwards&lt;/a&gt; Were y'all aware of this when you organized &lt;a href="https://2020.programming-conference.org/home/salon-2020"&gt;2020.programming-conference.org/home/salon-2020&lt;/a&gt;?&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-4/</guid><pubDate>Sun, 26 Nov 2023 22:26:50 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/11 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéôÔ∏è FoC 68 Philip Wadler: Propositions as Types üß† Neurosymbolic Programming üêü The Object Network for goldfish&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=ZoVvYf0knK0"&gt;New Jersey Cards&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/share-your-work.html#2023-11-14T13:24:54.607Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ZoVvYf0knK0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üóÇ New Jersey Cards: Worse Cards are Better&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple textual format to keep practice notes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù Capture &amp;amp; practice content in Markdown-ish&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Question -&amp;gt; Answer &amp;amp; Optional Notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üéº Extensions to display guitar chords and music scores with ASCII-art&lt;/p&gt;
&lt;p&gt;üìü Runs on anything that can serve static files&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://github.com/marianoguerra/nj-cards"&gt;github.com/marianoguerra/nj-cards&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://open.substack.com/pub/duncancragg/p/the-object-network-for-goldfish?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;The Object Network for goldfish&lt;/a&gt; via &lt;a href="https://twitter.com/duncancragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/share-your-work.html#2023-11-15T19:03:43.858Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hiya - my latest article - "The Object Network for goldfish" - is out!&lt;/p&gt;
&lt;p&gt;I tried to simplify the message down to the bare minimum. Let me know if that works for you! You may have to be a goldfish to understand it, mind.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An OS with no apps frees our data from the "app trap"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://futureofcoding.org/episodes/068"&gt;FoC 68 Philip Wadler: Propositions as Types&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/share-your-work.html#2023-11-19T06:02:25.504Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The subject of this episode‚Äôs paper ‚Äî &lt;a href="https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf"&gt;Propositions as Types&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/Philip_Wadler"&gt;Philip Wadler&lt;/a&gt; ‚Äî is one of those grand ideas that makes you want to go stargazing. To stare out into space and just disassociate from your body and become one with the heavens.  &lt;em&gt;Everything ‚Äî life, space, time, existence ‚Äî all of it is a joke!&lt;/em&gt;  A cosmic ribbing delivered by the laws of the universe or some higher power or, perhaps, higher order. Humanity waited two thousand years, from the time of the ancient Greeks through until the 1930s, for a means to answer questions of calculability, when three suddenly arrived all at once:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General recursive functions by G√∂del in 1934, with functions of sets of natural numbers.&lt;/li&gt;
&lt;li&gt;Lambda calculus by Alonzo Church in 1936, with anonymous single-variable functions.&lt;/li&gt;
&lt;li&gt;Turing machines by Alan Turing in 1937, with a process for evaluating symbols on a tape.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then it was discovered that these three models of computation were, in fact, perfectly equivalent. That any statement made in one could be made in the others. A striking coincidence, sure, but not &lt;a href="https://en.wikipedia.org/wiki/Multiple_discovery"&gt;without precedent&lt;/a&gt;. But  &lt;em&gt;then&lt;/em&gt;  it was quietly determined (in 1934, again in 1969, and finally published in 1980) that computation itself is in a direct correspondence with logic. That every proposition in a given logic corresponds with a type in a given programming language, every proof corresponds with a program, and the simplification of the proof corresponds with the evaluation of the program.&lt;/p&gt;
&lt;p&gt;The implications boggle the mind.  &lt;em&gt;How could this be so?&lt;/em&gt;  Well, how could it be any other way? Why did it take so long to discover? What other discoveries like this are perched on the precipice of revelation?&lt;/p&gt;
&lt;p&gt;Philip Wadler is here to walk us through this bit of history, suggest answers to some of these questions, and point us in a direction to search for more.&lt;/p&gt;
&lt;p&gt;And  &lt;em&gt;we&lt;/em&gt;  are here, dear listener, to level with you that a lot of this stuff is miserably hard to approach, presented with the symbols and language of formal logic that is so often inscrutable to outsiders. By walking you through Wadler‚Äôs paper (and the much more approachable &lt;a href="https://www.youtube.com/watch?v=IOiZatlZtGU"&gt;Strange Loop talk&lt;/a&gt;), and tying it in with the cultural context of modern functional programming, we hope you‚Äôll gain an appreciation for this remarkable, divine  &lt;em&gt;pun&lt;/em&gt;  that sits beneath all of computation.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üíª &lt;a href="https://love2d.org/forums/viewtopic.php?t=94852&amp;amp;sid=17d299656ea4089c33971e89a9d54f6a"&gt;MiniIDE: live code inside a LOVE app&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/devlog-together.html#2023-11-15T16:40:55.619Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I seem to have renewed my collaboration for a tablet-friendly programming environment. For the &lt;a href="https://love2d.org/forums/viewtopic.php?t=94852"&gt;current version&lt;/a&gt;, my partner led and pushed for preserving L√ñVE primitives. For example, the L√ñVE event loop calls functions you define called  &lt;code&gt;love.draw&lt;/code&gt; ,  &lt;code&gt;love.keypressed&lt;/code&gt; , etc., and it seems desirable to continue to support those for familiarity's sake. This can seem impossible if the environment is also built in L√ñVE and uses those same functions for providing its infrastructure, but since Lua is a dynamic environment there are tricks to make it work reasonably nicely.&lt;/p&gt;
&lt;p&gt;Lately I've been taking the lead on a riff of that project, and I find I'm advocating strongly to  &lt;em&gt;not&lt;/em&gt;  do this. I want to define new handlers like  &lt;code&gt;shell.draw&lt;/code&gt;  and  &lt;code&gt;shell.keypressed&lt;/code&gt;  that programs within my environment will have to call. And I finally figured out why I feel so strongly about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L√ñVE has a function to return the bounds of the device/window. You typically can draw between x coordinates 0 and some width. And this information is often used to draw UI elements near the edges and corners. So should we now override functions like  &lt;code&gt;line&lt;/code&gt;  to adjust coordinates and keep them in the client area? There's a lot of surface area to cover here. Bugs will inevitably happen, and when they do our attempts to create a seamless abstraction will cause more confusion.&lt;/li&gt;
&lt;li&gt;Ranting more broadly, the desire for a "seamless experience" is a disease. The provider wants to "own the customer relationship," so that the user can forget there's anything in the universe but themselves and the app. Just like a casino. I'd rather not pretend we can wish the universe away with its possibility of errors. Let's me and the user treat each other as grown-ups, and not hide irreducible complexity in our supply chains. Here are the functions I provide, here are the functions L√ñVE provides. I recommend you use my stuff where possible, but you don't have to. Yes, it's confusing. Welcome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="carousel-shell-mockup.png" src="http://history.futureofcoding.org/history/msg_files/F06/F065TCK9XS9.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/devlog-together.html#2023-11-16T18:10:16.496Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last night I built a little program to help first-graders drill on addition -- and promptly found a bug while recording this üòÇ (You can see me show the generated solution at the end. It's wrong!)&lt;/p&gt;
&lt;p&gt;(Fear not, this will go through usability/correctness testing with the teacher/mother before the kids are subject to it.)&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F065P7NBVBR.webm"&gt;Sum Grid Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/_VvoZbsmces"&gt;Creating a basic glsl shader using a pull-based flow&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/devlog-together.html#2023-11-18T17:55:43.951Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/_VvoZbsmces/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi, since I've started building visual programming systems, I have always used a push-based approach where a node triggers another node that follows it. This is much inspired by flow based programming. But since I want to build a generic visual programming system, I think that it is also important to support different ways.. basic statecharts I already support, but a pull-based system is not yet something that I had build with my system. Until now! .. so in this video you can see how I construct a flow that is used to construct a glsl fragment shader. Here the output node pulls in the data from the node's cominh before it in the flow, so working backwards through a flow. &lt;/p&gt;
&lt;p&gt;Although it's not my goal to build a full product around this alone.. a lot better and much more extensive applications already exist for building shaders this way. But still helpful to look at my project from a different perspective, which leads to some refactoring, bug fixing, insights and inspiration.&lt;/p&gt;
&lt;p&gt;Yesterday I was really in doubt if this was the right route for this week's time spent on my project because of the awesome demo that tldraw made with gpt4-vision api, very cool! So,I also had to play with it together with my own application and was also amazed with the possibilities! Probably my next video will have this as a topic. Anyway, for now, enjoy my short video where I construct a very simple shader which runs on the GPU via webgl.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/devlog-together.html#2023-11-19T00:35:20.193Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm finally starting to think about scrollbars.&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrollbars" src="http://history.futureofcoding.org/history/msg_files/F06/F066FUMPVRA.png"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F066FUMSN2G.webm"&gt;Scrollbar Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Gregor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/thinking-together.html#2023-11-13T17:28:16.554Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there a good catalogue of programming languages? Preferably with the option of searching by feature or comparing languages on some dimensions?&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://notes.billmill.org/link_blog/2023/11/Life-critical_side_projects.html"&gt;Life-critical side projects&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/thinking-together.html#2023-11-18T16:30:49.419Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt; It wasn‚Äôt on-topic in the thread you started a while back, my but first thought when considering building software like that is ‚ÄúWriting a social media app is frightening‚Äù (or more generally, ‚ÄúStoring user data is frightening‚Äù), as this post just reminded me: &lt;a href="https://notes.billmill.org/link_blog/2023/11/Life-critical_side_projects.html"&gt;Life-critical side projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/thinking-together.html#2023-11-19T14:58:02.617Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I built a Magic Inky interface at work a while back. A metadata editor that presented as a nested bulleted list of English sentences with clickable words, like:&lt;/p&gt;
&lt;p&gt;‚ÄúFrom [time T1] to [time T2], an [event type] happens with [property P], and it‚Äôs very [adjective].‚Äù&lt;/p&gt;
&lt;p&gt;The event descriptions are highly multi-dimensional and resonate well with this information design, though the timestamps suffer a bit. They want to be on a timeline, but I didn‚Äôt have the budget. Despite this, the UI has saved us loads of time and people  ~&lt;em&gt;&lt;em&gt;love&lt;/em&gt;&lt;/em&gt;~  the sentence-based configuration compared to the forty-column table of dropdowns they envisioned when I started the project.&lt;/p&gt;
&lt;p&gt;The biggest failure was that enforcing a few global constraints was  ~&lt;em&gt;&lt;em&gt;also&lt;/em&gt;&lt;/em&gt;~  outside my budget. Lacking those has led to data loss‚Äînever more than a few minute‚Äôs worth, but still. I felt bad. Thankfully, someone else recently picked up the project and will be correcting those omissions.&lt;/p&gt;
&lt;p&gt;But we disagreed immediately on how to do it! I thought we should  ~&lt;em&gt;&lt;em&gt;present&lt;/em&gt;&lt;/em&gt;~  the errors: ‚ÄúThese events overlap!‚Äù The other person thought we should make the errors impossible: when you edit a timestamp, you implicitly edit all the others that are involved in the constraint.&lt;/p&gt;
&lt;p&gt;I generally agree with their approach. I mean, it‚Äôs baked into the rest of the UI. When you change an event type, it changes the rest of the sentence. But if you change the type back, the sentence structure is restored and your previous values all come back. Cascading edits are more destructive than that. They force you to be careful about what you change and to be observant of unintended side-effects.&lt;/p&gt;
&lt;p&gt;The block editor problem of representing invalid states is another way to look at it. Sometimes the most efficient path between two valid states passes through an invalid one. If you want to reorder two events, for example, a first step might be to copy the start and end times from one to the other, as part of an ‚Äúa = b; b = oldA‚Äù sequence. They overlap until you‚Äôre done. To do the same without ever breaking global constraints requires user ingenuity or a more featureful editor with a ‚Äúswap events‚Äù button. Requiring user ingenuity wastes a lot of time and energy and happiness over the lifetime of the UI, but observing users and adding features to address every desired editing operation takes a lot of dev time too, and it has to happen  ~&lt;em&gt;&lt;em&gt;now&lt;/em&gt;&lt;/em&gt;~ , or else people editing this data will be blocked whenever they find an impossible edit.&lt;/p&gt;
&lt;p&gt;Anyway, not too many answers here, but I thought it was an interesting case study, with thought-provoking  ~&lt;em&gt;&lt;em&gt;questions&lt;/em&gt;&lt;/em&gt;~  at least!&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/mrmkrs/status/1725959207365583196"&gt;Tweet from @mrmkrs&lt;/a&gt; via &lt;strong&gt;Scott&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/thinking-together.html#2023-11-19T18:28:26.013Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An idea is starting to form for me around prototype-based modeling being a good metaphor for programming effectively with LLMs. Essentially you can provide an example of a patttern/component/class/etc and have it return a version of it modified in specific ways, which can then be used as a prototype for future generations/instantiations.&lt;/p&gt;
&lt;p&gt;A version of this idea can be seen &lt;a href="https://twitter.com/mrmkrs/status/1725959207365583196"&gt;here with tldraw&lt;/a&gt; where he generates the next more specific interface step off the previous one.&lt;/p&gt;
&lt;p&gt;Another I'm kind of using this in my agent framework: &lt;a href="https://github.com/sublayerapp/sublayer/blob/main/lib/sublayer/agents/generate_sublayer_agent_agent.rb"&gt;generate_sublayer_agent_agent.rb&lt;/a&gt; where we generate new agents based off a simple agent template (and works surprisingly well).&lt;/p&gt;
&lt;p&gt;I know Hofstatder digs into this concept in GEB and Steve Yegge calls it the &lt;a href="https://steve-yegge.blogspot.com/2008/10/universal-design-pattern.html"&gt;Universal Design Pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does this resonate with anyone here? Is anyone familiar with any other writing about prototype-based modeling/prototypal inheritance/etc for me to take this further?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.applevis.com/forum/app-development-programming/work-progress-vosh-third-party-screen-reader-macintosh"&gt;I‚Äôm excited to see where this 3rd party screen-reader for macOS goes.&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/linking-together.html#2023-11-13T14:56:22.712Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.applevis.com/forum/app-development-programming/work-progress-vosh-third-party-screen-reader-macintosh"&gt;I‚Äôm excited to see where this 3rd party screen-reader for macOS goes.&lt;/a&gt; On windows there are 2 first-in-class options available outside of the OS, JAWS and NVDA. On macOS there is only the system provided VoiceOver.&lt;/p&gt;
&lt;p&gt;I think VoiceOver is a pretty solid competitor to NVDA, but, it is very very very opinionated, and makes some unusual choices. I think this has a knock on effect where, since VoiceOver is the easiest screen-reader for most web devs to reach for, a lot of implementations end up being hyper-focused on supporting VoiceOver‚Äôs specific flavor of handling the accessibility tree. Having more diversity in the space, I think could hopefully mitigate this. While this isn‚Äôt directly related to the future of coding as we normally talk about it here, I think projects like this are just the sort of thing that can help to shape things for years to come.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=5uZnTskMOTc"&gt;Editing Motion Graphics Video via Motion Vectorization and Transformation&lt;/a&gt; via &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/linking-together.html#2023-11-13T16:34:26.976Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/5uZnTskMOTc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Inferring SVG animations from motion graphics videos, then providing various tools to edit the inferred material&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=16X0RB_YrvE&amp;amp;t=1330s&amp;amp;ab_channel=caltech"&gt;Neurosymbolic Programming - Yisong Yue&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/linking-together.html#2023-11-14T05:25:05.650Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/16X0RB_YrvE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This may interest you. It talks about combining programming by example (ML) and traditional means.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://blog.vero.site/post/noulith"&gt;Designing a Programming Language to Speedrun Advent of Code&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/linking-together.html#2023-11-14T19:47:54.481Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚Äúshouldn‚Äôt this have been published a few months ago?‚Äù yeah, probably. I even considered submitting it to the AoC contest. time is a real beast.
The title is clickbait. I did not design and implement a programming language for the sole or even primary purpose of leaderboarding on Advent of Code. It just turned out that the programming language I was working on fit the task remarkably well.
I can‚Äôt name just a single reason I started work on my language, Noulith, back in July 2022, but I think the biggest one was even more absurdly niche: I solve and write a lot of puzzlehunts, and I wanted a better programming language to use to search word lists for words satisfying unusual constraints, such as, ‚ÄúFind all ten-letter words that contain each of the letters A, B, and C exactly once and that have the ninth letter K.‚Äù1 I have a folder of ten-line scripts of this kind, mostly Python, and I thought there was surely a better way to do this. Not necessarily faster ‚Äî there is obviously no way I could save time on net by optimizing this process. But, for example, I wanted to be able to easily share these programs such that others could run them. I had a positive experience in this with my slightly older golflang Paradoc, which I had compiled into a WASM blob and put online and, just once, experienced the convenience of sharing a short text processing program through a link. (Puzzle: what does this program do?) I also wanted to write and run these programs while booted into a different operating system, using a different computer, or just on my phone.
...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/playlist?list=PLt-CsM4G1WoadONHl3zPN_Ts5PqH8TgMZ"&gt;CrystalConf 2023&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/linking-together.html#2023-11-17T14:23:43.880Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;practical Diagrams as Syntax for program development at &lt;a href="http://Kagi.com"&gt;Kagi.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Marcelle Rusu (they/them)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/of-ai.html#2023-11-15T13:46:52.366Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don't know much about LLMs, so I'm purely asking out of ignorance.&lt;/p&gt;
&lt;p&gt;AFAIK Open AI has a powerful LLM system in large part due to large compute power.&lt;/p&gt;
&lt;p&gt;Is there a future where small business / people can compete with mega-corps in the LLM space, or will we be renting GPT (or similar) until end the of time?&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://openai.com/blog/openai-announces-leadership-transition"&gt;OpenAI announces leadership transition&lt;/a&gt; via &lt;a href="https://twitter.com/JoshCho321"&gt;Josh Cho&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/of-ai.html#2023-11-18T01:58:07.524Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://www.theverge.com/2023/11/9/23953901/humane-ai-pin-launch-date-price-openai"&gt;Humane officially launches the AI Pin, its OpenAI-powered wearable&lt;/a&gt; via &lt;a href="https://pel-daniel.github.io/cv/"&gt;Daniel Garcia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W3/of-ai.html#2023-11-18T19:40:27.242Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-3/</guid><pubDate>Sun, 19 Nov 2023 23:59:21 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/11 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üì¢ Algorithmic Pattern Salon 2023 üéº Notation Must Die üå≤ The Expanding Dark Forest &amp;amp; Generative AI&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üì¢ &lt;a href="https://salon.algorithmicpattern.org/"&gt;Algorithmic Pattern Salon 2023&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/share-your-work.html#2023-11-08T09:58:45.620Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An online event I'm co-running - Algorithmic Pattern Salon 2023&lt;/p&gt;
&lt;p&gt;Talk sessions over five days, exploring contemporary and heritage algorithms in weaving, braiding, music, typography, live coding, juggling, etc etc&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://levlo.com/"&gt;Levlo&lt;/a&gt; via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/share-your-work.html#2023-11-09T07:04:06.034Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's still early, but what do you all think about &lt;a href="https://levlo.com"&gt;levlo.com&lt;/a&gt;? Any feedback is welcome, but I'd especially love to hear how do you understand the product based on the messaging on the site. What would you build with it?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Levlo is a textual no-code platform that allows you to create, share, and monetize expert applications without coding. Start building your app today!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://www.latentcenters.com/personification-of-computer-processes"&gt;Personification of computer processes&lt;/a&gt; via &lt;strong&gt;Tomaz Zlender&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/share-your-work.html#2023-11-09T09:25:32.966Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've published an essay &lt;a href="https://www.latentcenters.com/personification-of-computer-processes"&gt;Personification of computer processes&lt;/a&gt; where I introduce a metaphor that will allow us to program computers in a game-like (and also in "&lt;a href="https://dynamicland.org"&gt;Dynamic Land&lt;/a&gt;"-like) environments. The website Latent Centers is a digital garden I started recently where I will continue to publish related work. The aim is to invent &lt;a href="https://www.latentcenters.com"&gt;computing that makes us feel more alive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm looking forward to hearing your thoughts!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://open.substack.com/pub/duncancragg/p/turning-the-blob-inside-out?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=email"&gt;Turning the Blob inside out&lt;/a&gt; via &lt;a href="https://twitter.com/duncancragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/share-your-work.html#2023-11-10T14:29:09.753Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone, my latest article on The Object Network and OnexOS is out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://open.substack.com/pub/duncancragg/p/turning-the-blob-inside-out?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=email"&gt;Turning the Blob inside out&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Idiosyncratic apps come between you and your data...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It discusses "The Blob" - apps - and how we can free our data by "simply" not having those nasty apps coming between us and our precious digital stuff...&lt;/p&gt;
&lt;p&gt;‚ñ∂Ô∏è &lt;a href="https://www.plato.io/blog/introducing-macros"&gt;Introducing Macros: Automate Apps with Record and Replay&lt;/a&gt; via &lt;strong&gt;Michael Gummelt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/share-your-work.html#2023-11-10T19:37:20.076Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're experimenting with a novel form of "Programming by Example", similar to Excel macros: &lt;a href="https://www.plato.io/blog/introducing-macros"&gt;plato.io/blog/introducing-macros&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think it can scale quite well to a complete programming system with branching, looping, etc.. Thoughts?&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F065YBMC596.mp4"&gt;Macro Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üì± &lt;a href="https://dflate.io/shady-phoney"&gt;Shady Phoney&lt;/a&gt; via &lt;strong&gt;Gregor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/share-your-work.html#2023-11-11T12:01:11.973Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have started experimenting with a mobile shader editor and wrote about it over on my blurgh: &lt;a href="https://dflate.io/shady-phoney"&gt;dflate.io/shady-phoney&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can play with it here: &lt;a href="https://shd.is"&gt;shd.is&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And if you wanna signal boost me: &lt;a href="https://c.im/@gregor/111391784315627784"&gt;mastodon&lt;/a&gt;, &lt;a href="https://bsky.app/profile/dflate.io/post/3kdvwnhzzts2v"&gt;bsky&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/watware/status/1723309016745398771"&gt;twtr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But most of all I'd be curious to read your thoughts, associations, etc. üôÇ&lt;/p&gt;
&lt;p&gt;üí≠ by &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/devlog-together.html#2023-11-09T05:24:16.115Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that I've started inserting coroutines into my apps (&lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-2/?fromDate=2023-10-29&amp;amp;toDate=2023-11-04&amp;amp;channel=two-minute-week&amp;amp;filter=#2023-11-01T06:07:08.191Z"&gt;üí¨ #two-minute-week&lt;/a&gt;) to make them more debuggable, I'm starting to find and plug gaps in error recovery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have to be careful to check the results of coroutine operations, because the underlying coroutine might have thrown an error.&lt;/li&gt;
&lt;li&gt;Errors in Lua include a call stack, but errors within coroutines don't return the stack by default.&lt;/li&gt;
&lt;li&gt;If I create a higher-order helper to abstract away the coroutine munging just to smear a computation across frames, does that impact the quality of debug information in the call stack? (Answer: no it doesn't in Lua, but it wasn't obvious.)&lt;/li&gt;
&lt;li&gt;Call stacks returned by L√ñVE aren't  &lt;em&gt;quite&lt;/em&gt;  as clean as plain Lua.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üí≠ by &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/devlog-together.html#2023-11-11T19:13:54.975Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've cleaned up the code for my debug infrastructure of &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-2/?fromDate=2023-10-29&amp;amp;toDate=2023-11-04&amp;amp;channel=two-minute-week&amp;amp;filter=#2023-11-01T06:07:08.191Z"&gt;üí¨ #two-minute-week&lt;/a&gt; and improved the error flow; now you get decent call stacks even if there's a coroutine in the middle somewhere.&lt;/p&gt;
&lt;p&gt;The debug infrastructure lives on the surface. I frequently tinker with it while debugging.&lt;/p&gt;
&lt;p&gt;&lt;img alt="driver-map.png" src="http://history.futureofcoding.org/history/msg_files/F06/F0654TJTCPQ.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Arcade Wise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/thinking-together.html#2023-11-09T01:31:59.455Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone know of any systems that let you take the output value on a repl, edit it, and then edit the code so that your edit is true?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Dane Filipczak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/thinking-together.html#2023-11-10T23:54:06.577Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What are some examples of successful UIs over constraint solving systems?&lt;/p&gt;
&lt;p&gt;I'm about to do a bit of research on this topic but thought I'd start here.&lt;/p&gt;
&lt;p&gt;Off the dome I can think of excel (numerical constraints) and rhino grasshopper (architectural / physical constraints).&lt;/p&gt;
&lt;p&gt;I realize this is vague, but what I have in mind is a UI that allows for constraints to be defined which are then composed together and solved behind the scenes.&lt;/p&gt;
&lt;p&gt;In particular, I'm wondering how to represent the case where there are multiple valid solutions and offer cycling through them to the user.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Xavier Lambein&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/thinking-together.html#2023-11-11T10:20:07.782Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm thinking about ways to represent/interact with a (computational) graph. I could come up with three different interfaces off the top of my head: 1) names/identifiers and application, 2) combinators/stack operations, and 3) boxes and wires. I'm curious to know if y'all can think of any other?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìü &lt;a href="https://github.com/anze3db/django-tui#demo"&gt;django-tui&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/linking-together.html#2023-11-06T21:07:04.205Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really interesting looking tool ‚Äì though admittedly for a very niche use-case.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=Eq3bUFgEcb4"&gt;Notation Must Die: The Battle For How We Read Music&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/linking-together.html#2023-11-07T15:09:21.849Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Eq3bUFgEcb4/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/CapsuleWire/"&gt;Grasshopper 2.0 (@CapsuleWire) / X&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/linking-together.html#2023-11-07T16:06:00.046Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go check &lt;a href="https://twitter.com/CapsuleWire/"&gt;twitter.com/CapsuleWire&lt;/a&gt; (Version 2 of the Grasshopper Algorithmic Modelling plugin for Rhinoceros 3D). for some real world node-and-wire-core inspiration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/CapsuleWire/"&gt;Grasshopper 2.0 (@CapsuleWire) / X&lt;/a&gt;: Version 2 of the Grasshopper Algorithmic Modelling plugin for Rhinoceros 3D.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="go1.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F065B9Z5PQQ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="go2.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F064FLTAEK0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="go3.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F064FLTJHT8.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=qhVehcHwOB8"&gt;THROAT NOTES&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/linking-together.html#2023-11-09T03:07:33.176Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/qhVehcHwOB8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been looking for an excuse to share this somewhere, so it might as well go here.&lt;/p&gt;
&lt;p&gt;It's a beautifully animated film by Felix Colgrave titled &lt;a href="https://www.youtube.com/watch?v=qhVehcHwOB8"&gt;Throat Notes&lt;/a&gt;. While all of his recent animations are breathtaking and delightful and worth your attention (since, like Jacob Collier, Felix is just frustratingly talented), this video in particular will be of interest to the FoC community for its contributions to classic GUI design.&lt;/p&gt;
&lt;p&gt;ü§ñ &lt;a href="https://githubnext.com/projects/copilot-workspace"&gt;GitHub Next | Copilot Workspace&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/linking-together.html#2023-11-09T05:43:03.796Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Repo-wide code writing by AI&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Next Project: How can developers overcome the high effort of getting started on complex tasks and truly collaborate with AI to make progress quickly?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=rfmkzp76M4M"&gt;The Essence &amp;amp; Origins of Functional Reactive Programming ‚Ä¢ Conal Elliott ‚Ä¢ YOW! 2015&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/linking-together.html#2023-11-09T11:45:20.946Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/rfmkzp76M4M/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I enjoyed this talk by Conal Elliott on Functional Reactive Programming (FRP)&lt;/p&gt;
&lt;p&gt;and also enjoying some previous discussion about Conal's version of FRP here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linen.futureofcoding.org/t/49387/does-anyone-know-the-current-state-of-the-art-in-functional-"&gt;Does anyone know the current state of the art in functional reactive animation?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üå≤ &lt;a href="https://maggieappleton.com/forest-talk"&gt;Talk: The Expanding Dark Forest and Generative AI&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W2/of-ai.html#2023-11-10T12:20:34.267Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I keep directing people to this talk: &lt;a href="https://maggieappleton.com/forest-talk"&gt;maggieappleton.com/forest-talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Maggie Appleton&lt;/strong&gt; explores it better than anyone else&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An exploration of the problems and possible futures of flooding the web with generative AI content&lt;/p&gt;
&lt;/blockquote&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-2/</guid><pubDate>Sun, 12 Nov 2023 22:33:55 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/11 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéß Future of Scrappy Music ‚å®Ô∏è Wordplay Beta üé• Demos with Squares, Disks &amp;amp; Loops&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F063QU4LCSE.webm"&gt;Debug Coroutine Demo&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/two-minute-week.html#2023-11-01T06:07:08.191Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been experimenting with ways to debug my live programs.&lt;/p&gt;
&lt;p&gt;(Kind of a follow-up to &lt;a href="https://archive.org/details/akkartik-mu-2021-05-17"&gt;archive.org/details/akkartik-mu-2021-05-17&lt;/a&gt;, if you squint.)&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F063QU4LCSE.webm"&gt;Debug Coroutine Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F063QPFPKDK.mp4"&gt;Projected AR&lt;/a&gt; by &lt;strong&gt;Arcade Wise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/two-minute-week.html#2023-11-01T15:54:22.446Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not quite 2 minutes, but a fun little set-up for messing around with projected AR concepts!&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F063QPFPKDK.mp4"&gt;Projected AR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F063WUUVB2A.webm"&gt;Rectangle World&lt;/a&gt; by &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/two-minute-week.html#2023-11-03T05:43:33.638Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rectangle World, a little test bed for exploring easy versions of some problems, along with techniques for writing easy-to-debug programs.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F063WUUVB2A.webm"&gt;Rectangle World&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;‚å®Ô∏è &lt;a href="https://wordplay.dev"&gt;Wordplay beta&lt;/a&gt; via &lt;strong&gt;Amy Ko&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/share-your-work.html#2023-10-31T15:06:38.778Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wordplay.dev"&gt;Wordplay beta&lt;/a&gt; is live! We‚Äôd love your feedback on everything (language design, APIs, tools, editors), and your contributions, if you‚Äôre so inclined.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/bits-and-behavior/wordplay-accessible-language-inclusive-interactive-typography-e4b9027eaf10"&gt;Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wordplaydev/wordplay"&gt;Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/Jh2Qq9husy"&gt;Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üé® &lt;a href="https://www.mightymeld.com/"&gt;MightyMeld: a future kind of dev tool&lt;/a&gt; via &lt;strong&gt;Steven Schkolne&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/share-your-work.html#2023-11-01T19:43:40.599Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey everyone -- long-time lurker, first time poster. Thrilled to share the open beta launch of MightyMeld, a visual dev tool for React I've been building with some friends of mine. &lt;a href="https://www.mightymeld.com/"&gt;mightymeld.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just posted this blog post telling the story and why I'm excited -- &lt;a href="https://mightymeld.com/blog/open-beta"&gt;mightymeld.com/blog/open-beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Would love to hear your thoughts! I'm a former academic who's been driven into industry out of a desire to make the theoretical practical. MightyMeld is a "visual coding" that is not like any kind of "visual coding" i would've imagined if we hadn't've built this thing starting from real production code and saying "how can we make this more visual".&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://duncancragg.substack.com/p/from-app-trap-to-freedom-space"&gt;From app trap to freedom space&lt;/a&gt; via &lt;a href="https://twitter.com/duncancragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/share-your-work.html#2023-11-02T11:54:34.657Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hiya, if you're interested in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End-User Programming, Declarative languages&lt;/li&gt;
&lt;li&gt;Digital Gardens or Personal Knowledge Managers/Graphers&lt;/li&gt;
&lt;li&gt;Decentralisation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then you clearly need to read my latest fine work: &lt;a href="https://duncancragg.substack.com/p/from-app-trap-to-freedom-space"&gt;From app trap to freedom space&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TL;DR: we can break free of the "app trap" by simply building an  &lt;em&gt;OS without apps&lt;/em&gt; !&lt;/p&gt;
&lt;p&gt;(Don't forget to subscribe so you won't miss future updates, right into your mailbox...)&lt;/p&gt;
&lt;p&gt;üéß &lt;a href="http://arroost.com"&gt;arroost.com&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/share-your-work.html#2023-11-03T18:35:14.363Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello everyone I've been making a new tool called arroost. It's for making scrappy music. Please do make something in it and send it to me.&lt;/p&gt;
&lt;p&gt;I will post some examples of its use in the replies&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://guitarvydas.github.io/2023/10/29/Experimenting-With-ChatGPT-As-My-Ghost-Writer.html"&gt;Experimenting with chatgpt as my ghost writer&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/devlog-together.html#2023-11-01T01:35:54.703Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm developing a cutting-edge tool that leverages ChatGPT to ghost-write prose based on my point-form outlines, particularly focusing on ‚Äònew ideas‚Äô that the AI wasn‚Äôt trained on. The challenge lies in preventing hallucinations and incorrect extrapolations from the outline. Early experimental results have been promising prompting me to create a dedicated workflow tool. This tool enables me to swiftly input point-form outlines, using the user-friendly Kinopio platform for brainstorming. I then paste the outline to ChatGPT, transforming it into coherent and readable prose. Join me in revolutionizing idea development and content creation with this innovative solution! [ChatGPT]&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0648SKJLPM.webm"&gt;Rectangle World II&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/devlog-together.html#2023-11-04T05:25:11.054Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today's follow-up to &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-1/?fromDate=2023-10-31&amp;amp;toDate=2023-11-06&amp;amp;channel=two-minute-week&amp;amp;filter=#2023-11-03T05:43:33.638Z"&gt;üí¨ #two-minute-week@2023-11-03&lt;/a&gt; as I try to come up with more pleasing random arrangements in Rectangle World.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0647F7ERFF.webm"&gt;Poisson Disk Sampling Debug UI&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/devlog-together.html#2023-11-05T04:52:05.534Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some satisfying debug UI for Poisson Disk Sampling (&lt;a href="https://sighack.com/post/poisson-disk-sampling-bridsons-algorithm"&gt;sighack.com/post/poisson-disk-sampling-bridsons-algorithm&lt;/a&gt;; thanks &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt; for pointing me at it)&lt;/p&gt;
&lt;p&gt;Couple more videos in üßµ&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F0647F7ERFF.webm"&gt;Poisson Disk Sampling Debug UI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/cnD-AlDQJDk"&gt;Creating new flow using a "back-loop" and placing the "back-loop" connection on a separate layer&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/devlog-together.html#2023-11-05T13:37:58.844Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/cnD-AlDQJDk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi, the last month I've been focussing a lot on fixing some bugs in the way nodes are connected and improving the different path types that are used.&lt;/p&gt;
&lt;p&gt;This small demo video &lt;a href="https://youtu.be/cnD-AlDQJDk"&gt;(Creating new flow using a "back-loop" and placing the "back-loop" connection on a separate layer)&lt;/a&gt; shows creating a very small flow from scratch, the functionality of the flow is not important here.. but the thing I wanted to show is the way a "backloop" is created. The system uses a different svg path for backloops: normal nodes are connected using a bezier curve but when the output node is placed before the start node, the path changes to a "back-loop". &lt;/p&gt;
&lt;p&gt;Another thing to notice is the layering.. the back-loop is placed on its own layer, hopefully keeping bigger flows more clear. You can toggle which layer is in front. &lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üßë‚Äçüé® &lt;a href="https://www.figma.com/proto/rOhbNvD6U1MEkM3zeznLeJ/music-thing?page-id=0%3A1&amp;amp;type=design&amp;amp;node-id=2-3&amp;amp;viewport=436%2C-512%2C0.9&amp;amp;t=mYfeXCUoQZiP9aDh-1&amp;amp;scaling=contain&amp;amp;starting-point-node-id=2%3A3&amp;amp;mode=design"&gt;music thing&lt;/a&gt; via &lt;strong&gt;Arcade Wise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/thinking-together.html#2023-10-30T14:55:56.638Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been working on learning UI design, what do y'all think of this?  &lt;a href="https://www.figma.com/proto/rOhbNvD6U1MEkM3zeznLeJ/music-thing?page-id=0%3A1&amp;amp;type=design&amp;amp;node-id=2-3&amp;amp;viewport=436%2C-512%2C0.9&amp;amp;t=mYfeXCUoQZiP9aDh-1&amp;amp;scaling=contain&amp;amp;starting-point-node-id=2%3A3&amp;amp;mode=design"&gt;music thing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;John Flockton&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/thinking-together.html#2023-11-02T17:27:38.130Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey folks! I'm doing some research into code formatters/pretty printers, with a view to potentially building my own. Does any one have any examples of code formatters that they've found especially fast, or that they know of which have a special focus on performance?&lt;/p&gt;
&lt;p&gt;I'm interested in learning about some of the potential techniques at play - what sort of caching and parallelization is being done, are they doing incremental parsing like tree-sitter etc..&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Mike Austin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/thinking-together.html#2023-11-02T19:37:50.722Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Over the years, I've thought about different ways of creating an interactive tutorial about writing a simple programming language. For example, you can create a "wizard" style with next and back buttons, or you can create one single page with the code floating on the right side of the content (possibly sticky). One detail is that each example would grow in size (for the complete code), but would only focus on one sub-section. I thought about collapsing sections already covered, but being able to expand them, or just have a single button to expand all the hidden code. Has anyone had experience or have seen articles that use a "build from small to large", showing code along the way?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Arcade Wise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/linking-together.html#2023-11-04T00:48:42.654Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a cute little section from the wordmaster manual :&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F064MA50997.png"&gt;&lt;/p&gt;
&lt;p&gt;I did in fact get the 12 lines&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F063U53HMGF.png"&gt;&lt;/p&gt;
&lt;p&gt;considered harmful?&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F0648K1M0KV.png"&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nicolay Gerold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2023/11/W1/of-ai.html#2023-10-30T11:27:49.861Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey üôÇ&lt;/p&gt;
&lt;p&gt;I am looking for inspiration in building frontends with LLMs. I am looking for companies, which have LLMs (their own or wrappers around GPT) deployed in customer-facing applications (B2B and B2C) at some level of scale.&lt;/p&gt;
&lt;p&gt;Something like Sudowrite and Jasper.&lt;/p&gt;
&lt;p&gt;Also if you know some impressive solobuilders, feel free to name drop them üôÇ&lt;/p&gt;
&lt;p&gt;I would appreciate any link or name dropped in the thread üòâ&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202311-week-1/</guid><pubDate>Sun, 05 Nov 2023 22:09:47 GMT</pubDate></item></channel></rss>