<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Sun, 26 May 2024 21:14:15 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2024/05 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üì° Propagator Networks üåØ Visual Language for Polymorphic Types ü§® NoCode Will Not Bring Computing to the Masses &lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üêö &lt;a href="https://automat.org/"&gt;Automat&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/two-minute-week.html#2024-05-22T16:13:58.208Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Context: Automat aims to be a general purpose visual shell - it's meant to control other apps &amp;amp; pass their data around. It has a website at &lt;a href="https://automat.org"&gt;automat.org&lt;/a&gt;. The MVP version is going to record &amp;amp; replay desktop macros. Last week I've pretty much finished the work on connections and now I'm working on the new  &lt;em&gt;timeline&lt;/em&gt;  object! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automat is a FOSS software that allows anyone to control their computers by combining interactive blocks.&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/mafikpl/status/1793307785112805456"&gt;Marek Rogalski (@mafikpl) on X&lt;/a&gt;: Working on the most complex Automat object so far - the Timeline. It should be able to control other objects according to its embedded tracks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1793306906657775617/pu/img/NmBrSltxp6cVXfuf.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/Cxqlv8IoaH8"&gt;PID controller build with codeflowcanvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/two-minute-week.html#2024-05-24T14:21:07.906Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Cxqlv8IoaH8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/Cxqlv8IoaH8"&gt;In this video&lt;/a&gt; I show a &lt;a href="https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller"&gt;PID-controller&lt;/a&gt;  build with my visual programming system &lt;a href="http://codeflowcanvas.io"&gt;codeflowcanvas.io&lt;/a&gt; ... the PID-controller example can be found on &lt;a href="http://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It uses expression nodes, global variables and flow-variables to handle the calculations and state. In a bar-chart the output of the mechanism can be seen. In this example the target value is 100 , and when moving the input value slider, that value is used as a measurement and the algorithm brings the measurement to the wanted value (100). This process is visualised in the bar-chart.&lt;/p&gt;
&lt;p&gt;When the speed of the flow is set to maximum (in the top left corner), the "program-counter"-animation is not shown and it runs as fast as it can in realtime. That helps for these kind of algorithms.&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üì° &lt;a href="https://holograph-1.vercel.app/"&gt;Propagator Networks&lt;/a&gt; via &lt;strong&gt;Dennis Hansen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-22T21:33:18.853Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello! So after much obsession with Propagator Networks as discussed on this slack &lt;a href="https://history.futureofcoding.org/?fromDate=2024-03-18&amp;amp;toDate=2024-03-24&amp;amp;channel=thinking-together&amp;amp;filter=#2024-03-21T19:26:33.915Z"&gt;üí¨ #thinking-together@2024-03-21&lt;/a&gt;, i decided to make a little propagator network simulator on top of tldraw.&lt;/p&gt;
&lt;p&gt;In short: Propagator networks enabling bi-directional computation via independently operating nodes- in the gif you can see one for converting temperatures. Propagators (squares) listen to changing inputs, run code, and update connected outputs.&lt;/p&gt;
&lt;p&gt;You can make your own &lt;a href="https://t.co/nxVo5UAShy"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Put your variables in circles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put your JS in squares (you can write a return or not)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw arrows from circles to squares with text that matches the variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw arrows from squares to the circles to be updated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's lot of awesome stuff than can be made with these (maybe everything?). If you want to have fun with it, try to make a conditional or a switch. Its fun üôÇ&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ezgif-2-f1371da04b.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F075CT1UMKJ.gif"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-23T16:45:02.374Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßµ for &lt;a href="https://github.com/colelawrence"&gt;Cole Lawrence&lt;/a&gt;'s demo today.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-23T17:16:41.059Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßµ for &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;'s demo today.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/share-your-work.html#2024-05-23T18:16:22.433Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;forgot to share this in the demo&lt;/p&gt;
&lt;p&gt;&lt;img alt="gloodata-inception.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F074VKZFB8B.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;ü§ñ &lt;a href="https://github.com/nileshtrivedi/autogen"&gt;github.com/nileshtrivedi/autogen&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/devlog-together.html#2024-05-23T18:19:56.164Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have started porting Microsoft's multi-agent framework "autogen" to Elixir: &lt;a href="https://github.com/nileshtrivedi/autogen"&gt;github.com/nileshtrivedi/autogen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Got basic multi-agent collaboration and code execution working. Now need to make Elixir functions available to agents as tools.&lt;/p&gt;
&lt;p&gt;I feel Elixir will become more and more important for AI because of its excellent support for real-time communication (audio/video etc), and single-language stack (LiveView etc.)&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üåØ &lt;a href="https://arxiv.org/pdf/2405.12699"&gt;GeckoGraph: A Visual Language for Polymorphic Types&lt;/a&gt; via &lt;strong&gt;Don Abrams&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/reading-together.html#2024-05-22T14:34:08.401Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Beautiful study on a visual representation of abstract types (Haskell in this case but generalizable). Conclusion: intuitive and helpful for beginners, but distracting &lt;a href="https://arxiv.org/pdf/2405.12699"&gt;GeckoGraph: A Visual Language for Polymorphic Types&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/thinking-together.html#2024-05-20T16:05:49.765Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is one of those questions where I don‚Äôt really know yet how to ask it, so let me fumble and handwave a little bit and see where this goes:&lt;/p&gt;
&lt;p&gt;In computing history we went from printers to screens, and on those screens from a brief stint with vector graphics to bitmap displays, and on those bitmap displays from text mode to frame buffer, and in those frame buffers from sprites and blitting to rasterization and compositing. In the early days, when there wasn‚Äôt enough RAM for a full-screen bitmap frame buffer, character glyphs and sprites were brought in from ROM. Now we have so much memory that we have double-/triple-buffering and realtime compositing of separately stored textures that often exceed the number of screen pixels available by an order of magnitude or more.&lt;/p&gt;
&lt;p&gt;I‚Äôm particularly interested in the early transition to raster graphics. At some point (and I assume that was probably with PostScript?) it became feasible to compute graphics on the fly instead of having them prepared as bitmaps in ROM or on disk. If I remember this correctly, PostScript was invented because due to the different font sizes it was more economical to ship instructions to generate glyphs on the fly on the printer than to ship all possible glyphs as bitmaps in all the different font sizes.&lt;/p&gt;
&lt;p&gt;In a way we went from a ‚Äúfinal‚Äù representation of a map of bits restricted to a certain grid size to an ‚Äúintermediate‚Äù representation of instructions that have to be executed to generate the final map of bits in the desired size. Alternatively, we could see that as swapping space (memory) for time (compute).&lt;/p&gt;
&lt;p&gt;Are you aware of any papers or other material that compares both sides of this transition?&lt;/p&gt;
&lt;p&gt;For instance in terms of performance in space and time, ie. how much compute is needed for how much memory saved. Or in the broader sense of how we settled on certain graphics primitives, because they were cheap enough to implement in terms of compute, and how we settled on certain data formats, because they were small enough in terms of memory usage, so that this trade-off made sense.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=2Cq8S3jzJiQ"&gt;Grail Demo from CHM tape&lt;/a&gt; via &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/thinking-together.html#2024-05-24T12:23:03.680Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/2Cq8S3jzJiQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Does anyone know if there is somewhere a new implementation of something similar to GRAIL system from Rand corporation ? &lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üï∏Ô∏è &lt;a href="https://dify.ai/blog/dify-ai-workflow"&gt;Dify's new workflows feature&lt;/a&gt; via &lt;strong&gt;John Choi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/linking-together.html#2024-05-22T04:32:07.916Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone tried using Dify's new &lt;a href="https://dify.ai/blog/dify-ai-workflow"&gt;workflows feature&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;It seems to be a Node-RED-like visual programming tool that supports Python/Node scripting in addition to HTTP requests and LLM invocations for nodes.&lt;/p&gt;
&lt;p&gt;(The parent app (Dify) is clearly positioned in the AI domain, but the workflows feature seems pretty general.)&lt;/p&gt;
&lt;p&gt;I'm looking into it but also interested in hearing others' initial impressions/assessments of limitations üëÄ&lt;/p&gt;
&lt;p&gt;ü§® &lt;a href="https://buttondown.email/hillelwayne/archive/nocode-will-not-bring-computing-to-the-masses/"&gt;NoCode Will Not Bring Computing to the Masses&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/linking-together.html#2024-05-22T09:54:38.461Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's not enough for a tool to solve your problem for you to use that tool. You have to also A) recognize the problem you have is solvable, B) recognize the tool can solve it, and C) be reasonably confident that you 
 &lt;em&gt;personally&lt;/em&gt; can solve the problem with the tool. You need knowledge, skill, and the right mentality. Even programmers, who  &lt;em&gt;already have that mentality&lt;/em&gt;, don't automatically generalize it to all applicable domains. Otherwise we'd be doing a lot more with our phones.&lt;/p&gt;
&lt;p&gt;It's unreasonable to expect the average person will use any NoCode to solve their problems, regardless of how easy the tools are. This leaves the people for whom it provides economic value, which is why all modern NoCode tools are oriented towards business.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="http://www.softwarepreservation.org/projects/FORTRAN/BackusEtAl-Preliminary%20Report-1954.pdf"&gt;FORTRAN Report 1954&lt;/a&gt; via &lt;strong&gt;Marcel Weiher&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W4/linking-together.html#2024-05-22T10:02:21.044Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course ‚Äúno code‚Äù and ‚Äúlo code‚Äù are just new versions of ‚Äúcode‚Äù.  Well, the ones that work at least.&lt;/p&gt;
&lt;p&gt;My favorite quote on this topic encapsulates it nicely:  ‚ÄúSince FORTRAN should virtually eliminate coding and debugging‚Ä¶‚Äù   ‚Äî FORTRAN Report 1954&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-4/</guid><pubDate>Sun, 26 May 2024 21:13:50 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/05 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üíª Bend: a parallel language üé• New Graphical Programming Language for Audio Research &amp;amp; Developers üí° The Alternative Implementation Problem&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;ü™© &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4/"&gt;Exploring Spaces 4: Sphere&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/share-your-work.html#2024-05-13T18:21:11.290Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made an article about üåê spheres and input spaces that wrap around like spheres üåê. Let me know how it feels to move around the spheres. Does the way they are synchronized make sense? &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4/"&gt;vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F073LFNMEUR.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://jaredforsyth.com/"&gt;Jared Forsyth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/share-your-work.html#2024-05-15T20:27:51.418Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi friends! As part of my unending pursuit of creating The Best Programming Language, I've ended up building a structured editor / literate programming environment for creating self-hosted languages ... and that has turned into "An Interactive Tutorial about Compilers &amp;amp; Type Inference", that includes interactive implementations of the papers "Algorithm W Step by Step" and "Typing Haskell in Haskell" (with more planned). I'm currently looking for beta testers to look it over before I make a general release, and I imagine there are many people here with relevant experience üòÑ.&lt;/p&gt;
&lt;p&gt;So if any of y'all are interested, send me a message! As a teaser, here's the start of the intro document:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F073F7MTV46.png"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/devlog-together.html#2024-05-17T06:42:21.832Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Got to a major milestone in v2 development for ¬ßBlawx, this week. The visual code editing environment is now back to feature parity with v1, which means I can move on to re-implementing the reasoner on the back end. That's the last major obstacle before I can start doing some much more compelling neuro-symbolic AI demos.&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Jacob Zimmerman&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/reading-together.html#2024-05-17T16:23:20.487Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone worked through ‚ÄúSoftware Foundations‚Äù, and did you find it valuable?&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/swardley/status/1787851368528576829"&gt;Tweet from @swardley&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/thinking-together.html#2024-05-16T08:09:21.582Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://twitter.com/swardley/status/1787851368528576829"&gt;this tweet&lt;/a&gt; , Simon Wardley compares making software systems explainable via moldable development (my expansion of his reference to Glamorous Toolkit) to creating maps. That sounds like a very useful metaphor to me. Many of us are interested in or even working on visual coding tools, and I wonder what their take on this metaphor is. Maps are inherently visual, but they are not the territory, i.e. the code with all the details. To me, visual tools are obviously the right choice for creating maps, but I remain unconvinced about their appropriateness for code.&lt;/p&gt;
&lt;p&gt;I am thinking in particular of &lt;a href="https://twitter.com/OrionReedOne"&gt;Orion Reed&lt;/a&gt;‚Äôs recent demo of infinite canvasses as user interfaces. For making multi-faceted maps to software systems, that looks like a very appopriate representation.&lt;/p&gt;
&lt;p&gt;üïπÔ∏è &lt;a href="https://www.youtube.com/watch?v=gWNXGfXOrro"&gt;The 100 Games That Taught Me Game Design&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/thinking-together.html#2024-05-17T11:33:35.115Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/gWNXGfXOrro/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;An interesting video: &lt;a href="https://www.youtube.com/watch?v=gWNXGfXOrro"&gt;The 100 Games That Taught Me Game Design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would like to see "The 100 Applications That Taught Me Application Design".&lt;/p&gt;
&lt;p&gt;Which ones are yours?&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Daniel Sosebee&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/thinking-together.html#2024-05-17T20:42:21.417Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Loose set of thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;could you make a type system that somehow captures all information possible about every value in a codebase? Like where the following is true: if typeof(a) === number, then typeof(a + 1 + 2) === number+3 !== typeof(a) ‚Ä¶&lt;/li&gt;
&lt;li&gt;I might want to ‚Äúpin‚Äù and ‚Äúunpin‚Äù my types - e.g. before refactoring a function, to ‚Äúpin‚Äù its return type. If I had a more powerful type system like described in part one, I wouldn‚Äôt want to have to write out the whole type, I would want to just say ‚Äúpin this such that whatever changes I make could not possibly effect the outcome of the function for any input, or else give me errors describing exactly what part of the input space no longer maps logically the same to the output space‚Äù&lt;/li&gt;
&lt;li&gt;Another way to think of this might be to say, rather than writing tests, to be able to say ‚Äúassume infinite test coverage of this codebase (and all tests are passing), now let me refactor things‚Äù.&lt;/li&gt;
&lt;li&gt;I have no idea how this would work, but it makes me think of getting fractions into ‚Äúsimplest form‚Äù. Maybe you could get two functions into ‚Äúsimplest form‚Äù to test their similarity?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wonder if anything like that exists, or if this is gesturing at some existing area of research?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üí° &lt;a href="https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/"&gt;The Alternative Implementation Problem&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-13T15:55:39.888Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/"&gt;The Alternative Implementation Problem&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I‚Äôve concluded, based on experience, is that positioning your project as an alternative implementation of something is a losing proposition. It doesn‚Äôt matter how smart you are. It doesn‚Äôt matter how hard you work. The problem is, when you build an alternative implementation, you‚Äôve made yourself subject to the whims of the canonical implementation. They have control over the direction of the project, and all you can do is try to keep up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ü™§ &lt;a href="https://www.wired.com/story/inside-the-cult-of-the-haskell-programmer/"&gt;Inside the Cult of the Haskell Programmer&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-13T15:57:09.499Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.wired.com/story/inside-the-cult-of-the-haskell-programmer/"&gt;Inside the Cult of the Haskell Programmer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That Haskell never gained widespread adoption exemplifies a paradoxical truth in software engineering: Great programming languages aren‚Äôt always great for programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìë &lt;a href="https://damaged.bleu255.com/"&gt;Damaged Earth Catalog&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-14T06:56:23.447Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://damaged.bleu255.com/"&gt;Damaged Earth Catalog&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are humans and might as well get used to it. So far, remotely done power and glory‚Äîas via government, big business, formal education, church‚Äîhas succeeded to the point where gross profits obscure actual loss. In response to this dilemma and to these losses a realm of intimate, community power is developing‚Äîpower of communities to conduct their own education, find their own inspiration, shape their own environment, and share their knowledge with others. Practices that aid this process are sought and promoted by the DAMAGED EARTH CATALOG.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/uYUblZhbG1A?si=-9HzHkusy2PWOjjb"&gt;NO MORE CODE: New Graphical Programming Language for Audio Research and Developers - ChangHun Sung&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-14T14:49:58.574Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/uYUblZhbG1A/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/uYUblZhbG1A?si=-9HzHkusy2PWOjjb"&gt;New Graphical Programming Language for Audio&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Audio software development is rapidly moving towards incorporating machine learning-based processing. While research scientists are continuously presenting us with inventive results in the field of AI, there is a lack of software engineering tools to utilize these results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üíª &lt;a href="https://higherorderco.com/"&gt;Bend: a parallel language&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-17T10:07:48.296Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://higherorderco.com/"&gt;Bend: a parallel language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With &lt;em&gt;Bend&lt;/em&gt; 
 you can write parallel code for multi-core CPUs/GPUs without being a C/CUDA expert with 10 years of experience. It feels just like Python!
No need to deal with the complexity of concurrent programming: locks, mutexes, atomics... 
 &lt;em&gt;any&lt;/em&gt;  work that can be done in parallel &lt;em&gt;will&lt;/em&gt; be done in parallel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/VictorTaelin/status/1791213162525524076"&gt;Twitter announcement (includes a short video demo)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After almost 10 years of hard work, tireless research, and a dive deep into the kernels of computer science, I finally realized a dream: running a high-level language on GPUs. And I'm giving it to the world! Bend compiles modern programming features, including: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lambdas with full closure support &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unrestricted recursion and loops &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast object allocations of all kinds &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Folds, ADTs, continuations and much more &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To HVM2, a new runtime capable of spreading that workload across 1000's of cores, in a thread-safe, low-overhead fashion. As a result, we finally have a true high-level language that runs natively on GPUs!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://developer-success-lab.gitbook.io/code-review-anxiety-workbook-1"&gt;Today they published the workbook that they produced from that research! &lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/linking-together.html#2024-05-17T13:04:22.588Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once upon a time somewhere here, lost to the sands of a freemium slack instance, I shared a link about research some friends of mine were doing through the developer success lab on code review anxiety. &lt;a href="https://developer-success-lab.gitbook.io/code-review-anxiety-workbook-1"&gt;Today they published the workbook that they produced from that research! &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nicolay Gerold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/of-ai.html#2024-05-14T03:45:39.483Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not really sharing but a question for the curious:&lt;/p&gt;
&lt;p&gt;What new use-cases do you think are now possible with gpt-4o that weren‚Äôt possible before (natively multimodal)?&lt;/p&gt;
&lt;p&gt;What use-cases are now possible with way cheaper gpt-4-turbo? &lt;/p&gt;
&lt;p&gt;What are you excited to try / build?&lt;/p&gt;
&lt;p&gt;I will start: I want to try and build a better screen reader for visually impaired people. &lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/of-ai.html#2024-05-14T17:09:00.981Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are some call-heavy agentic or personic processes that are going to get more feasible, like what Park did in "Human Simulacra." I'm hoping to use 4o or turbo to have a more structured step by step approach to code generation in domain specific visual languages.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://www.chrismaughan.com/"&gt;Chris Maughan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/of-ai.html#2024-05-15T10:00:52.532Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What struck me when playing with it via the 'voice chat/conversation' thing, was a) how brilliant the voice recognition is, b) how brilliant the synthesised voice is, and c) how I was drawn into having a conversation with an AI.  I don't know if it's a use case, but what I can see happening is that more and more people are going to start treating the AI as a 'friend'.  I think that is quite sad, and will further isolate people from real life conversations, but I can also see how it will fill a need in some folks;  especially once the iPhone integration happens.&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W3/present-company.html#2024-05-15T01:11:04.432Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚ùá  &lt;em&gt;Thoughts and observations from today's Google I/O.&lt;/em&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-3/</guid><pubDate>Sun, 19 May 2024 21:29:28 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/05 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üßë‚Äçüè´ Live Programming for the Classroom ü§ñ LLM-focused canvas üí° Software in Natural Language&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=cd4gXl9Z78g&amp;amp;lc=UgzL4at29mLqlN7F6U94AaABAg"&gt;DB48X v0.7.5 quick update&lt;/a&gt; via &lt;strong&gt;Christophe de Dinechin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/share-your-work.html#2024-05-07T09:25:22.459Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/cd4gXl9Z78g/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The most powerful scientific calculator in the world just got one tiny step closer towards 1.0. &lt;/p&gt;
&lt;p&gt;üñåÔ∏è &lt;a href="https://fig.sonnet.io/"&gt;Fig&lt;/a&gt; via &lt;strong&gt;Rafa≈Ç Pastuszak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/share-your-work.html#2024-05-07T10:42:51.956Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hej! I made a drawing app where every pixel has a lifespan and eventually dies, check it out here: &lt;a href="https://fig.sonnet.io"&gt;fig.sonnet.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(also it has hackable, programmable brushes and a trippy geocities-eque gradients)&lt;/p&gt;
&lt;p&gt;Motivated by a dead fig tree in my garden, not associated with the exquisite dead fish above, and partially inspired by this poem by my brother‚Äôs 3yo daughter:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Little ducklings walked&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;then they fell&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;and they died.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;(something tells me she‚Äôll turn out to be a goth like her uncle)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://untested.sonnet.io/Fig"&gt;untested.sonnet.io/Fig&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nothing lasts forever, so let's draw just for the fun of it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí¨ &lt;a href="https://github.com/colelawrence"&gt;Cole Lawrence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/share-your-work.html#2024-05-10T21:37:46.910Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm making an AI pipeline REPL directly into ‚ÄúForethink,‚Äù and I just put in live previewing, so you can observe individual executions üôÇ&lt;/p&gt;
&lt;p&gt;I think this will slowly evolve depending on the features we need to build. It‚Äôs nice to build purposefully and not need to worry about being too generalizable or pretty.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F072SKJDECE.mp4"&gt;2024-05-10-Forethink-placeholder-resolution-for-single-execution&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/K-956F6Vwps"&gt;Quality of life improvements to code-flow-canvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/devlog-together.html#2024-05-12T14:22:52.169Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/K-956F6Vwps/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've made some very nice UX improvements to the visual programming system that I am working on: it's now possible to replace a node with compatible node-types without hassle. When a node is selected, compatible node-types are shown in a dropdown. This helps especially when doing more creative work when creating a shader/gl flow for example and getting more feeling on what the impact is of certain mathematical operations (in the video &lt;a href="https://youtu.be/K-956F6Vwps"&gt;youtu.be/K-956F6Vwps&lt;/a&gt; I change a multiply node to an arctan calculation).&lt;/p&gt;
&lt;p&gt;Another improvement is being able to insert a node into an existing connection.. also taking compatibility into account. This speeds up the creation process of flows in general.&lt;/p&gt;
&lt;p&gt;Under the hood I've also made a nice improvement: I can now use jsx components using vanilla DOM without the use of react or other libraries. This is a nice DX improvement when developing my project.&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.petemillspaugh.com/a-small-matter-of-programming"&gt;some wandering notes&lt;/a&gt; via &lt;strong&gt;Pete Millspaugh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/reading-together.html#2024-05-08T19:11:51.574Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;^I finished the book a while back and just got around to jotting down &lt;a href="https://www.petemillspaugh.com/a-small-matter-of-programming"&gt;some wandering notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Would anyone be interested in doing a zoom book club discussion? Slack threads per chapter are nice for participation across time zones, but I prefer the format of reading then chatting about the whole book in one sitting&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://guitarvydas.github.io/2024/05/02/Banning-the-Use-of-IF-THEN-ELSE.html"&gt;Banning the use of if Then Else&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/thinking-together.html#2024-05-07T03:09:04.765Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thinking about banning the use of IF-THEN-ELSE... &lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=eJm44LJDU44"&gt;Bootstrapping Research &amp;amp; Dynamicland, Dec 2019&lt;/a&gt; via &lt;strong&gt;JP Posma&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/thinking-together.html#2024-05-08T05:12:51.715Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/eJm44LJDU44/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The best Bret Victor talk you've never seen&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/thinking-together.html#2024-05-08T14:57:10.786Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello Future of Coding!&lt;/p&gt;
&lt;p&gt;I'm looking for something which I would describe in the following way. There was a few years ago a article on hackernews where someone showed a kind of dynamic state transition visualization. One could setup multiple nodes and avalue flow from one node to the next but there would be also a flow back to the original node. So my question would be does anyone know what I refer to? What was the name of the diagram. I tried to search for dynamic state transition diagram but it is very scary how bad search engines are these days. So the Name of the diagram , the hackernews article or related reousces would be most welcome. Thank you üôÇ&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üßë‚Äçüè´ &lt;a href="https://harc.github.io/seymour-live2017/"&gt;Seymour: Live Programming for the Classroom&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/linking-together.html#2024-05-07T07:33:32.837Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07232XK8JJ.png"&gt;&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://github.com/dmotz/trystero"&gt;github.com/dmotz/trystero&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/linking-together.html#2024-05-07T23:07:19.030Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This seems clever! WebRTC matchmaking over BitTorrent, Nostr, MQTT, IPFS, and Firebase - removing the need for centralized signaling servers for multiplayer real-time webapps.&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/tpEfLAsyO28"&gt;Hunch.tools winning demo at Latent Space's AI UX event in SF&lt;/a&gt; via &lt;strong&gt;Greg Bylenok&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/of-ai.html#2024-05-06T13:16:45.125Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/tpEfLAsyO28/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Couple of links from some recent digital wanderings:&lt;/p&gt;
&lt;p&gt;Hunch Tools LLM-focused canvas, from a recent AI/UX meetup&lt;/p&gt;
&lt;p&gt;üí° &lt;a href="https://githubnext.com/projects/speclang/"&gt;GitHub Next | SpecLang&lt;/a&gt; via &lt;strong&gt;Greg Bylenok&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W2/of-ai.html#2024-05-06T13:18:45.325Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second link: SpecLang from Github Next, which  &lt;em&gt;"is an attempt at lifting the developer experience to a higher level of abstraction, closer to how we conceptually think about our programs"&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;(Github Next is worth exploring and they appear to be doing quite a bit of FoC-related work)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-2/</guid><pubDate>Sun, 12 May 2024 20:58:00 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/05 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üèπ Arrow toolkit üéπ Tone Dome üìù The cognitive surface of software üì¢ FoC Berlin Meetup&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP"&gt;Introducing autocomplete for canvas&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-04-30T12:37:21.447Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/r6ls8Gw9MmY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been (trying) to build autocomplete for canvas. keen to hear thoughts/ideas from anyone else who's worked on anything similar-ish!&lt;/p&gt;
&lt;p&gt;üèπ &lt;a href="https://github.com/Little-Languages/quiver"&gt;Quiver: arrow toolkit for the web&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-01T00:13:21.546Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the last month I've been working on an arrow toolkit for the web, called Quiver üèπ. It's exploring 3 problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if visual connection could be declaratively expressed in HTML? &lt;/li&gt;
&lt;li&gt;What if there was a tiny toolkit that enabled all kinds of connection/arrows to be built? &lt;/li&gt;
&lt;li&gt;How do we break arrows out from spatial canvases and enable them to used on any website?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently I'm prototyping some pre-built arrows/connection: curved arrows, orthogonal edges, Xanadu links and hyperedges. But the library is also explicitly designed to be extensible so you can use your own layout algorithms or designs. Part of the extensibility means the ability to easily animate objects along the arrow (for all of those dataflow VPLs out there üòú) or add arbitrary labels/annotations to arrows.&lt;/p&gt;
&lt;p&gt;Given that connection is probably one of the most commonly used relationships in visual programming systems, I'm curious if there are any other types of arrows or functionality you would find useful in your own projects? Its not published to NPM yet, but the repo is &lt;a href="https://github.com/Little-Languages/quiver"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="quiver.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F0718E6CQJ2.gif"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0710H1P9RD.mov"&gt;Screen Recording&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://github.com/bicycle-codes/progress-indicator"&gt;github.com/bicycle-codes/progress-indicator&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-01T06:27:18.011Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another day, another module. Learning some things about web components this time.&lt;/p&gt;
&lt;p&gt;üîç &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_3_and_a_half/"&gt;Exploring Spaces 3.5: Zoomable Number Line&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-03T18:56:58.104Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a zoomable number line üôÇ &lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2024-05-03 at 2.56.38‚ÄØPM.png" src="http://history.futureofcoding.org/history/msg_files/F07/F071HFPCPDM.png"&gt;&lt;/p&gt;
&lt;p&gt;üêü &lt;a href="https://drawdeadfish.com/"&gt;Draw dead fish&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-04T23:27:08.948Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a new experimental tool where you have to draw dead fish&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drawdeadfish.com"&gt;drawdeadfish.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üéπ &lt;a href="https://tonedome.surge.sh"&gt;tonedome.surge.sh&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/devlog-together.html#2024-05-01T00:48:29.120Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ink &amp;amp; Switch are having a hack week, and I'm working on a generative sound project. You can check out the current version (likely to change as the week progresses) here: &lt;a href="https://tonedome.surge.sh"&gt;tonedome.surge.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It sounds a little different every time you run it, but it's also synced to the system clock. So if you run it on, say, every device you own and scatter them around the room, it creates a rather neat immersive aural space.&lt;/p&gt;
&lt;p&gt;Would appreciate any bug reports, especially on Android!&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://guitarvydas.github.io/2024/04/27/Bloatware.html"&gt;Bloatware&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-04-29T09:35:12.740Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;preliminary musings on bloatware&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://science-in-the-digital-era.khinsen.net/#The%20cognitive%20surface%20of%20software"&gt;The cognitive surface of software&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-04-30T15:19:28.887Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trying to name a concept: &lt;a href="https://science-in-the-digital-era.khinsen.net/#The%20cognitive%20surface%20of%20software"&gt;The cognitive surface of software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has something similar already been discussed, or at least introduced?&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://futureofcoding.slack.com/archives/CC2JRGVLK/p1714619157913519"&gt;intro post&lt;/a&gt; via &lt;strong&gt;Assaf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-05-02T22:54:52.856Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm exploring strategies to enable scientists (biologists in pharma) without computational expertise be able to interact with big data more intuitively. My ultimate goal is to have users ask biological questions, and the system to generate and execute analytical workflows utilizing existing methods from the scientific domain to answer these questions with data visualizations,&lt;/p&gt;
&lt;p&gt;I evaluated the non-interpretable and inaccurate "chat your data" LLM solutions. I'm currently thinking about the possibilities of developing/using a DSL as intermediary output prior to code generation to make the process more interpretable. I am also considering what would be the most efficient abstraction strategies of the analytical functionalities/libraries in certain biological domains to improve the accuracy of the outputs (of the higher level strategy and the actual code). I would love to brainstorm about these problems offline/online. Here's my &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-1/?fromDate=2024-04-29&amp;amp;toDate=2024-05-05&amp;amp;channel=introduce-yourself&amp;amp;filter=#2024-05-02T03:05:57.913Z"&gt;üí¨ #introduce-yourself@2024-05-02&lt;/a&gt; for a bit more context about me.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-05-03T21:52:38.564Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am once again looking at pages of notes I wrote three years ago attempting to find a way to declaratively diagram concurrent legal processes so as to illuminate the steps available to the parties as the process unfolds. I feel like I have something worth exploring, but to illustrate it I need a diagramming language that allows me to nest nodes inside of one another, and draw edges that originate and terminate at arbitrary depths of nodes. DOT won't let you draw an arrow starting at the edge of a subgraph, and doesn't have any way of nesting actual nodes, for example. Is anyone aware of a text-based graphing language that will let me nest objects and draw edges between arbitrary depths?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üöú &lt;a href="https://functional-art.org/2024/"&gt;International Workshop on Functional Art, Music, Modeling and Design&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-04-29T13:13:40.894Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FARM (aka ACM SIGPLAN International Workshop on Functional Art, Music, Modeling and Design) is taking place in Milan, Italy this year, September 2nd. The call for papers, demos and performances is open, deadline June 1st.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://functional-art.org/2024/"&gt;functional-art.org/2024&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/OrionReedOne/status/1784871153787420920"&gt;Tweet from @OrionReedOne&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-04-29T17:15:53.740Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is an interesting 2.5D experiment for those who like the canvas approach. I'm pretty sure it could have some practical applications. &lt;a href="https://twitter.com/OrionReedOne/status/1784871153787420920"&gt;2D canvases have a whole dimension spare....&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0715TMBNHG.mp4"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/72y2EC5fkcE?si=MI2T1IME2SH3OCjp"&gt;Tomorrow Corporation Tech Demo&lt;/a&gt; via &lt;a href="http://www.chrismaughan.com/"&gt;Chris Maughan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-04-29T18:53:25.041Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/72y2EC5fkcE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The tooling here is next-level.  Bret Victor would be proud&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=zLd1RUDmX6w"&gt;Laurie Spiegel - Waveshaper TV Ep.6 (Part 1 of 3: Bell Labs)&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-01T08:19:33.798Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/zLd1RUDmX6w/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üëÅÔ∏è &lt;a href="https://vyaakaran.vercel.app/"&gt;Vyaakaran - Visualize automata, parsers, grammars for free&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-01T17:13:51.566Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really good Automata and formal language visualizer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://vyaakaran.vercel.app/"&gt;Vyaakaran - Visualize automata, parsers, grammars for free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visualize automata, parsers and formal languages right on the browser in an easy to use interface with Vyaakaran.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=GXetjTQhd2g&amp;amp;t=1103s"&gt;Resonite VR November 2023 (Content Showcase)&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-03T18:06:03.106Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/GXetjTQhd2g/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been following Resonite - ex-NeosVR - for a while now, but for some reason I never thought to link it here, perhaps because it's mostly about social VR. But it has an interesting 3D in-world programming system&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://x.com/hieuSSR/status/1786270259206668643"&gt;Hieu :rocket: (@hieuSSR) on X&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-04T02:01:21.929Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Design principles of SQL from it‚Äôs creator&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://x.com/hieuSSR/status/1786270259206668643"&gt;Hieu üöÄ (@hieuSSR) on X&lt;/a&gt;: Inventor of SQL talks about how they come up with the language&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Naresh R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/of-ai.html#2024-04-29T16:31:36.844Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been thinking about this tweet from John Carmack (who created Doom), and just generally about a future where AI does most of the coding and I'm managing AI - and... I hate it? It's not to say that I don't see this happening. There's a ton of capital flying around to make it happen, and I think end-users will inevitably gain the capability to build certain categories of simple, customised software.&lt;/p&gt;
&lt;p&gt;But as someone who has deeply loved the practice of programming for more than a decade, the future that GitHub (who - in the midst of me writing this - launched Copilot Workspace), Devin, and the rest are painting seems to be leaving out so much of nuances that comes with building anything non-trivial. I absolutely love the idea of operating at a higher level of abstraction (just like how I enjoy writing modern programming languages compared to C or assembly) and getting my ideas/work out faster. But not spending my entire day just asking AI to do things or reviewing code all day - which makes me wonder: how do developers even get good at reviewing code if they aren't spending a ton of time writing code and problem solving? What's the right level of abstraction in this "promised future" that lets me get into the nuances of building software for anything non-trivial and continue problem solving in general? This is perhaps not even a question, and just a general thought I've been thinking a lot about.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F070R3MQK71.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/jryans"&gt;J. Ryan Stinnett&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/present-company.html#2024-05-01T15:24:39.904Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am looking around for tools / frameworks / UI patterns that are roughly of the shape "spreadsheet with editable computation pipeline". What do people know of that's in that category?&lt;/p&gt;
&lt;p&gt;To clarify, I realise spreadsheets alone can achieve computation... but I am thinking more of projects where the computation is a bit more "visual" than just formulas in cells, perhaps like a nodes or blocks environment that then feeds into a table / spreadsheet to display data. &lt;strong&gt;@Paul Shen&lt;/strong&gt;'s Natto is one such example of the kind of thing I am thinking of. There might be other ways to do this beyond just a series of nodes that feed into a table... I'm curious to see what else might be out there already. I wonder if there are projects in the data analysis / computational science spaces that might fit...?&lt;/p&gt;
&lt;p&gt;Apologies if my question is too vague, I'm still trying to work out what I'm even looking for. üôÇ&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/present-company.html#2024-05-03T11:37:59.561Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[April 10th, 2024 8:20 PM] mariano: :loudspeaker: Future of Coding Berlin Meetup: Show and Tell + Walk and Talk on June 1st!&lt;/p&gt;
&lt;p&gt;We are organizing an informal meetup the day after &lt;a href="https://www.localfirstconf.com/"&gt;https://www.localfirstconf.com/&lt;/a&gt; in Berlin, the idea is to meet early in the day somewhere TBD, do a show and tell and then if you are willing go for a walk through Berlin stopping for food/drinks/resting every now and then.&lt;/p&gt;
&lt;p&gt;If you are interested send me a DM with your email (will only be used to share updates and info about this), the places are limited so please contact me as soon as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-1/</guid><pubDate>Sun, 05 May 2024 20:47:24 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/03 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202003-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Welcome! Starting this week I will expand the "Demos" section to include original content created by Future of Coding members.&lt;/p&gt;
&lt;p&gt;The "From our Community" section will have content shared by members but that comes from "outside".  &lt;/p&gt;
&lt;p&gt;But first things first, there's a &lt;strong&gt;new podcast episode&lt;/strong&gt;, great topic and impressive production, check it out:&lt;/p&gt;
&lt;p&gt;&lt;img alt="üéôÔ∏è" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f399_fe0f/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399062-futureofcoding.org/episodes/045?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Future of Coding ‚Ä¢ Episode 45: Orca, with Devine Lu Linvega&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Orca is typically encountered as an inky black and seafoam green alphabet soup, pulsating to some species of broody electronic industrial throb. But it is also a forgiving learning environment that doesn‚Äôt crash, puts code and data together in the same space, lets you directly manipulate code and data interchangeably, allows generous recovery from mistakes, and supports discovery through freeform play.&lt;/p&gt;
&lt;p&gt;This is one of those "a very special episode" sort of things where.. it's going to be a bit different from the episodes I make for the forseeable future. Hope you enjoy it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Demos &amp;amp; Community Original Content&lt;/h3&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399066-twitter.com/geoffreylitt?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Geoffrey Litt&lt;/a&gt; shared an update on his website customization with spreadsheets project: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399070-twitter.com/geoffreylitt/status/1231962052727582726?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;More examples of customizing Hacker News with a spreadsheet&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;show estimated read times (fetched from an API)&lt;/li&gt;
&lt;li&gt;sort longest reads first, prioritize deeper content&lt;/li&gt;
&lt;li&gt;add personal annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in 1 minute, just using formulas. So many possibilities!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;strong&gt;Sol Bekic&lt;/strong&gt; has been working on/with a new interaction model for livecoding for a while, and just put together the first comprehensive summary of the approach: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399074-s-ol.nu/alivecoding?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;alivecoding: livecoding with persistent expressions &lt;/a&gt; (&lt;img alt="üßµ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399078-futureofcoding.slack.com/archives/ccl5vvban/p1582737045011100?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399082-twitter.com/warianoguerra?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Mariano Guerra&lt;/a&gt; shared a short demo of a UI feature: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399086-twitter.com/warianoguerra/status/1232663924581044226?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;All the Small UX Things: repeat column names in the footer to shorten drop distance to cells below&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The example shows how to reorder columns and configures an aggregation of attendance by home team when the away team is "Arsenal"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;img alt="üåê" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399090-ballerina.io/?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;https://ballerina.io/&lt;/a&gt;: A Programming Language for Network Distributed Applications (&lt;img alt="üßµ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt;&lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399094-futureofcoding.slack.com/archives/c5t9gpwfl/p1582566821024100?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever possible, Ballerina prioritizes programmer convenience &amp;amp; productivity with familiarity, clearer abstractions, and easier concepts over uber system performance.&lt;/p&gt;
&lt;p&gt;In Ballerina, every program is a sequence diagram that illustrates distributed and concurrent interactions automatically. The diagram is the code. The code is the diagram.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üíª" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4bb/32.png"&gt; &lt;strong&gt;Karki&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399098-github.com/hediet/vscode-debug-visualizer/tree/master/extension?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Debug Visualizer&lt;/a&gt;: A VS Code extension for visualizing data structures while debugging.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399102-twitter.com/rafael_luque?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Rafael Luque&lt;/a&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399106-gist.github.com/luque/97235d8cf7d36cce02f47e24af441493?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;"Some old thoughts about the need for a new way of thinking about software."&lt;/a&gt; via &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reality is that a usual software project stack involves an increasingly larger number of programming languages, DSLs, frameworks, systems, tools, techniques and processes, so it is a fact that the accidental complexity in our day-to-day software projects is increasing to unbearable levels.&lt;/p&gt;
&lt;p&gt;We plan to build a new breed of dynamic and fully conceptual modeling environment in order to enable programmers to work through every development stage --analysis, specification, design, implementation, deployment, evolution, etc.-- at the conceptual level and explore their dynamic models as a thinking and learning tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üåê" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399110-www.physicsofsoftware.com/?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;The Physics of Software&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"This work is about a possible theory of forces in software, and how it can inform the way we design, the way we talk about design, and the way we think about design."&lt;/p&gt;
&lt;p&gt;Some interesting philosophizing - discussion about software as a material and the true nature of software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;img alt="üéÆ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3ae/32.png"&gt; &lt;strong&gt;Will Crichton&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399114-www.youtube.com/watch?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Dreams | Release Date Trailer | PS4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seems interesting to view as a commercial end-user programming system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;strong&gt;Scott Anderson&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399118-www.graycrawford.com/thesis?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Developing Embodied Familiarity with Hyperphysical Phenomena&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interesting set of VR interaction prototypes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;strong&gt;Scott Anderson&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399122-www.youtube.com/watch?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Example-based procedural placement in a dialogue system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;strong&gt;Charlie Roberts&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399126-eater.net/quaternions?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Visualizing quaternions quaternions: An explorable video series&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ‚Äúexplorable‚Äù videos in this quaternion explanation are nicely done with an interesting reactive ui&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202003-week-1/</guid><pubDate>Thu, 02 May 2024 06:42:37 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 5</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-5/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üç© Exploring Spaces üê¶ Bootstrapping Research &amp;amp; Dynamicland üì¢ LIVE Workshop on Live Programming&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/aiAdsL64veg?si=Fu3DGPGWlDaZvWdl"&gt;Live Probe&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/two-minute-week.html#2024-04-22T04:23:25.937Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/aiAdsL64veg/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I have some progress in miqula, it can now show the current data of a node.&lt;/p&gt;
&lt;p&gt;The video is with voiceover, hopefully makes it easier to follow. (albeit this is not a tutorial of sorts)&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.linkedin.com/posts/jarnomontonen_natural-language-programming-opens-up-significant-activity-7189573670875385857-B0K3?utm_source=share&amp;amp;utm_medium=member_desktop"&gt;LLM code generation for Levlo&lt;/a&gt; via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/two-minute-week.html#2024-04-26T10:45:45.638Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Been playing around with &lt;a href="https://www.linkedin.com/posts/jarnomontonen_natural-language-programming-opens-up-significant-activity-7189573670875385857-B0K3?utm_source=share&amp;amp;utm_medium=member_desktop"&gt;LLM code generation for Levlo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üîë &lt;a href="https://github.com/bicycle-codes/link"&gt;github.com/bicycle-codes/link&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-22T01:22:13.474Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just factored out the "linking" code. Its intended to be the simplest possible way to securely get the same  AES key onto multiple machines.&lt;/p&gt;
&lt;p&gt;‚úÖ &lt;a href="https://github.com/nichoth/level-todo/"&gt;Level DB + E2E encryption + todo lists&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-22T05:13:37.417Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a demo app for an upcoming blog post&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] local-first&lt;/li&gt;
&lt;li&gt;[x] E2E encrypted&lt;/li&gt;
&lt;li&gt;[x] multiple devices per user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üéà &lt;a href="https://gtoolkit.com/"&gt;Glamorous Toolkit&lt;/a&gt; via &lt;a href="https://twitter.com/girba"&gt;Tudor Girba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-23T10:54:13.921Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those that are intrigued by &lt;a href="https://gtoolkit.com"&gt;Glamorous Toolkit&lt;/a&gt;, perhaps the following talk can be interesting:&lt;/p&gt;
&lt;p&gt;Wednesday, April 24, 8pm CET&lt;/p&gt;
&lt;p&gt;UK Smalltalk User Group&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Glamorous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;



&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Glamorous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pharo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;others&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;'s a knowledge management system. Others might see a code analysis platform, a data visualization or an API browsing tool. Yet others see the graphical stack with its interactive editors. Glamorous Toolkit is all of these. But it'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;really&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;also&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;these&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;These&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;merely&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;molded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;there&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Glamorous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primarily&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;makes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;possible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;experiences&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seamlessly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contextually&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;leads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;programming&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Moldable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Join remotely here: &lt;a href="https://www.meetup.com/ukstug/events/300575234/"&gt;meetup.com/ukstug/events/300575234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üç© &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_1/"&gt;Exploring Spaces 1: Torus&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-23T14:41:54.432Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yesterday I taped together a paper torus, built some inputs that wrap around like a torus, and drew some lines on a torus. I wrote a little post about my exploration! &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_1/"&gt;Exploring Spaces 1: Torus&lt;/a&gt; Would love to hear your feedback, criticism, adjacent thoughts, etc!&lt;/p&gt;
&lt;p&gt;‚ôæÔ∏è &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_2/"&gt;Exploring Spaces 2: Twisted Taping&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-25T14:19:14.885Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote another little post, "Exploring Spaces 2: Twisted Taping". I made a twisted paper strip this time, and made some more interactive spaces you can try moving around in &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_2/"&gt;Exploring Spaces 2: Twisted Taping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really enjoyed the feedback and adjacent thoughts on the last one from &lt;a href="https://twitter.com/qualmist"&gt;Joshua Horowitz&lt;/a&gt; and &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;! Once again, I'd love to hear feedback, criticism, and adjacent thoughts üôÇ&lt;/p&gt;
&lt;p&gt;üõ∏ &lt;a href="https://diode.zone/videos/watch/5ac43123-91fa-4b2b-a2d8-4ce0254fa2b8"&gt;A moldable inspector for Common Lisp&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-25T18:06:14.831Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A video &lt;a href="https://diode.zone/videos/watch/5ac43123-91fa-4b2b-a2d8-4ce0254fa2b8"&gt;introduction to my moldable inspector for Common Lisp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üíª &lt;a href="https://codeberg.org/khinsen/clog-moldable-inspector"&gt;clog-moldable-inspector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A moldable Common Lisp object inspector based on CLOG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üßÆ &lt;a href="https://calcwithdec.dev/posts/you-draw-inflation/"&gt;You Draw Inflation üìà&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-25T21:50:35.649Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a 'you draw it' type input widget where you draw inflation. I'm trying to permit being a little bit deliberate about scenarios too. It's something I'll develop for defining scenarios for other calculation models. It's &lt;a href="https://calcwithdec.dev/posts/you-draw-inflation/"&gt;in a short blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-26T13:35:39.873Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The future of code involves waiting for Copilots (Even though they get faster all the time, we'll just ask more and more of them).&lt;/p&gt;
&lt;p&gt;We took a stab at visualizing the design decisions that our Copilot makes while it's coding the design you've prompted it for.&lt;/p&gt;
&lt;p&gt;Instead of just spinners or the raw stream of text like chat UIs, we overlay this visualization where the design will appear on the canvas. Each visualization reflects a design variant that Copilot works on, and is computed in real-time based on the token streams from the LLM.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F070RU602R3.mp4"&gt;copilot streaming - music player&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F070URPQSTC.mp4"&gt;copilot streaming - vacation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üîÑ &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_3/"&gt;Exploring Spaces 3: Taping Infinity&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-26T21:44:43.661Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is my 3rd exploring spaces post about taping -‚àû and +‚àû together üôÇ‚ôæ&lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_3/"&gt;Exploring Spaces 3: Taping Infinity&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/devlog-together.html#2024-04-22T11:31:42.596Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently experimenting with this idea of adding Types and Reactivity to JSON as a domain-specific language for LLMs to generate miniapps or reactive documents on the fly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06UZJ8B0P9.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06UZJBM9N3.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üîå &lt;a href="https://johnaustin.io/articles/2024/composability-designing-a-visual-programming-language"&gt;Composability: Designing a Visual Programming Language&lt;/a&gt; via &lt;strong&gt;John Austin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-24T06:50:30.437Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok, I've been thinking a lot about composable systems recently, and why I don't find visual programming languages like blueprints very flexible. Wrote up a blog post about it. Basically, I think the value graph is a more fundamental primitive for computation than execution graphs. &lt;a href="https://johnaustin.io/articles/2024/composability-designing-a-visual-programming-language"&gt;Composability: Designing a Visual Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Greg Bylenok&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-25T16:28:00.601Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone else think of "configuring" as distinct from "programming"? Some activities I consider "configuring" and not "programming": much devops work such as Terraform, YML files for build pipelines, even commonly labeled "programming" of a VCR/DVR.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://chebykin.org/posts/openapic"&gt;openapic: openapi compiler like protoc | Ivan Chebykin&lt;/a&gt; via &lt;strong&gt;Ivan Chebykin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-26T20:43:42.337Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone, I'm currently trying to think of ways to improve OpenAPI developer experience, can someone check out the design doc for a simplified OpenAPI generator:  &lt;a href="https://chebykin.org/posts/openapic"&gt;chebykin.org/posts/openapic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Dennis Hansen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-27T20:34:10.851Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Random thought/question. I've noticed canvas based design tools have converged on a panel configuration of "Layers | Canvas | Properties | (and sometimes Timeline)"-- as opposed solving the underlying needs another way. Is this pattern the end-all-be-all? Or a local maxima? I tend to think the later.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://archive.org/details/kuhn-metagov-20240320"&gt;Nanopublications: Rethinking global knowledge sharing (Tobias Kuhn)&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-22T13:32:39.191Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nanopublications are looking really interesting to me, I hope for you too üôÇ : &lt;a href="https://archive.org/details/kuhn-metagov-20240320"&gt;Nanopublications: Rethinking global knowledge sharing (Tobias Kuhn)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://knowledgepixels.com/slides/metagov-nanopubs/"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nanopub.net/"&gt;nanopub.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üê¶ &lt;a href="https://www.youtube.com/watch?v=eJm44LJDU44"&gt;Bootstrapping Research &amp;amp; Dynamicland, Dec 2019&lt;/a&gt; via &lt;strong&gt;Dennis Hansen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-25T01:57:34.618Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Someone on twitter scraped Dynamicland to find a few amazing unlisted Bret Victor talks on YouTube. Don‚Äôt think he‚Äôd mind this community seeing them :). &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://x.com/janpaul123/status/1783006294464692553?s=46"&gt;JP Posma (@JanPaul123) on X&lt;/a&gt;: The best Bret Victor talk you‚Äôve never seen. &lt;a href="https://www.youtube.com/watch?v=eJm44LJDU44"&gt;Bootstrapping Research &amp;amp; Dynamicland, Dec 2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1783005925898690560/pu/img/eBsIkglu1D9PMXm4.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üèùÔ∏è &lt;a href="https://www.causalislands.com/"&gt;causalislands.com&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-25T21:18:14.809Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is new to me. Anyone ever heard of it?&lt;/p&gt;
&lt;p&gt;üì¢ &lt;a href="https://liveprog.org/"&gt;LIVE 2024: The Tenth Workshop on Live Programming&lt;/a&gt; via &lt;a href="https://twitter.com/qualmist"&gt;Joshua Horowitz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-25T23:19:10.203Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This year I‚Äôm helping organize &lt;a href="https://liveprog.org/"&gt;LIVE&lt;/a&gt;, the Workshop on Live Programming. A lot of folk here in FoC are working on projects related to liveness‚Ä¶ I encourage you to consider submitting your work!&lt;/p&gt;
&lt;p&gt;(Here, ‚Äúlive programming‚Äù means ‚Äúgetting immediate feedback on the behavior of your program even while you‚Äôre programming it‚Äù. That includes ‚ÄúLearnable Programming‚Äù-style interfaces, spreadsheets, notebooks, REPL-y stuff, interfaces for live performances with code, many interfaces for making art with code...)&lt;/p&gt;
&lt;p&gt;LIVE is an academic conference, but it‚Äôs attracted great work from people both in and outside the academy. Submitting a project to LIVE might be an opportunity to communicate about your work in a new way and get thoughtful feedback on it from a new community. (We have some tips for non-academics in our &lt;a href="https://liveprog.org/#faq"&gt;FAQ&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The submission deadline is  &lt;em&gt;July 7&lt;/em&gt; . The workshop will be some day TBD  &lt;em&gt;October 20-25, 2024 in Los Angeles&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Feel free to DM me if you have questions or concerns; I‚Äôd be excited to help out. üôè&lt;/p&gt;
&lt;p&gt;&lt;img alt="liveprog.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07144KSF89.png"&gt;&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="http://voyant.bio"&gt;platform&lt;/a&gt; via &lt;strong&gt;Assaf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/of-ai.html#2024-04-25T15:05:38.676Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anybody interested in bio/drug discovery applications? I‚Äôm working on a &lt;a href="http://voyant.bio"&gt;platform&lt;/a&gt; which aims to answer complex biological questions by talking to scientists. It‚Äôs not an autocomplete or a copilot. It‚Äôs a real AI developer that does all the coding while scientists give it feedback. Would love to chat about this domain or specific application and get your feedback.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-5/</guid><pubDate>Mon, 29 Apr 2024 14:17:29 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéôÔ∏è FoC 71 ‚Ä¢ Elephant in the Room üß∂ Stitching worlds üé• bi-directional data flow using visual programming&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.scattered-thoughts.net/writing/zest-syntax/"&gt;Zest: syntax&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/share-your-work.html#2024-04-17T01:57:17.603Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If syntax isn't important why does this feel so good...&lt;/p&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://futureofcoding.org/episodes/071"&gt;Future of Coding 71 ‚Ä¢ Elephant in the Room&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/share-your-work.html#2024-04-21T04:11:02.908Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/906418692"&gt;Inventing on Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/64895205"&gt;Stop Drawing Dead Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/71278954"&gt;The Future of Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, all three of them in one episode. Phew!&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/devlog-together.html#2024-04-15T22:36:44.752Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm playing with electronics and crocheting atm. Imagining what other ways there are to interact with a computer, other than keyboard and mouse. This is a custom made bend/pressure sensor using copper sheets, velostat as a semi-conductive layer in between, with a crochet leaf on top and felt on the bottom, for a soft, non metallic feel üêë&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06UH8UNSA0.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üîô &lt;a href="https://mastodon.social/@spiralganglion/112282956696254310"&gt;How can you even reverse a function?&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/devlog-together.html#2024-04-17T01:43:28.682Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://mastodon.social/@spiralganglion/112282956696254310"&gt;shared&lt;/a&gt; some &lt;a href="https://mastodon.social/@spiralganglion/112284014138207711"&gt;thoughts&lt;/a&gt; about  &lt;em&gt;my personal definition of&lt;/em&gt;  reversible computing over on Mastodon today. (Yeah, I slightly mangled the example of a surjective function ‚Äî should have said  &lt;em&gt;nonnegative&lt;/em&gt;  integers.)&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/3vINEOECt9w"&gt;bi-directional data flow using visual programming&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/devlog-together.html#2024-04-20T07:28:58.971Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/3vINEOECt9w/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/3vINEOECt9w"&gt;In this video&lt;/a&gt; I show a small celsius to fahrenheit converter (this is one of the tasks from 7Gui) that I build using my visual programming system and extended it where needed.&lt;/p&gt;
&lt;p&gt;The solution uses an observe-variable node-type which triggers a flow when a variable gets set. I've also build a new user-input node with decimal formatting option (in the near future I will extend this to be configurable forms for collecting user-input).&lt;/p&gt;
&lt;p&gt;You can see what happens as you type in the celsius or fahrenheit temperature in the input fields (you see the data flowing though the flow). To prevent an infinite loop, the flow-engine uses a call-stack which stops running when a node gets run twice.&lt;/p&gt;
&lt;p&gt;I am still thinking of different solutions but for now this works (some nodes gets run unneeded, I think this can be optimized). Per node-call the node-id, scope-id and input port-name is stored on the call-stack, this is needed to keep other things working like the recursive functions in the quicksort example.&lt;/p&gt;
&lt;p&gt;The celsius-to-fahrenheit converter can be tried out here : &lt;a href="https://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; via the examples dropdown.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üß∂ &lt;a href="https://www.stitchingworlds.net/"&gt;Stitching worlds&lt;/a&gt; via &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/linking-together.html#2024-04-15T22:28:51.596Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stitching worlds - a magazine imagining ‚ÄúWhat if electronics emerged from textile techniques such as knitting, weaving, crochet, and embroidery?‚Äù - &lt;a href="https://fedora.phaidra.bibliothek.uni-ak.ac.at/fedora/get/o:34528/bdef:Content/get"&gt;Stitching worlds&lt;/a&gt; (&lt;a href="https://www.stitchingworlds.net/"&gt;stitchingworlds.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;An embroidered computer using gold embroidery and magnetic beads (in the magazine): &lt;a href="http://ireneposch.net/the-embroidered-computer/"&gt;ireneposch.net/the-embroidered-computer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://www.stitchingworlds.net/"&gt;stitchingworlds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stitching Worlds is an artistic research project funded by the Program for Arts-Based Research (PEEK) of the Austrian Science Fund (FWF). The project is hosted by the University of Applied Arts Vienna, Institute of Design, Department of Industrial Design 2.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="http://ireneposch.net/the-embroidered-computer/"&gt;The Embroidered Computer | Irene Posch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Embroidered Computer uses historic gold embroidery materials to craft a programmable 8 bit computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://www.kobakant.at/DIY/?cat=26"&gt;sesnors&lt;/a&gt; via &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/linking-together.html#2024-04-16T07:10:29.256Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, a treasure trove of ideas for ways of making DIY &lt;a href="https://www.kobakant.at/DIY/?cat=26"&gt;sesnors&lt;/a&gt;/&lt;a href="https://www.kobakant.at/DIY/?p=7966"&gt;connections&lt;/a&gt;/&lt;a href="https://www.kobakant.at/DIY/?cat=28"&gt;actuators&lt;/a&gt; and random other things - &lt;a href="https://www.kobakant.at/DIY/"&gt;How to get what you want&lt;/a&gt; (DIY wearable technology documentation)&lt;/p&gt;
&lt;p&gt;Great name too üòÑ&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://osf.io/preprints/psyarxiv/8k5a4"&gt;Understanding and Effectively Mitigating Code Review Anxiety&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/linking-together.html#2024-04-16T14:28:30.709Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not a 1:1 future of coding article, &lt;a href="https://osf.io/preprints/psyarxiv/8k5a4"&gt;but this paper recently published by the dev. success lab is pretty neat&lt;/a&gt;, especially if you are interested in helping to foster learning culture.&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/of-ai.html#2024-04-19T17:51:50.312Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone done any work with the memory design from the human simulacrum paper by Joon Sung Park? Saw a presentation last week at Stanford, the boss is having me experiment with his code base. Would like to exchange notes.&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/present-company.html#2024-04-19T23:41:22.930Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My favorite loosely-syntaxed calculator finally has another mobile release!
 &lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06V85G8BGB.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-4/</guid><pubDate>Tue, 23 Apr 2024 10:01:57 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/ElNTPWdWfFQ"&gt;visual programming with improved timeline slider&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/two-minute-week.html#2024-04-14T12:41:22.387Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ElNTPWdWfFQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been improving the timeline-slider in my visual programming system code-flow-canvas.. you can try it out here : &lt;a href="https://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; (best experience is on desktop since the mobile and touch responsiveness is still lacking). &lt;/p&gt;
&lt;p&gt;Additionally the state-machine node now also shows its transitions when executing a flow or using the timeline slider. &lt;/p&gt;
&lt;p&gt;Also some the nodes that are used to visualize data have been connected to the flow-execution history. Some changes were needed in keeping track of state and updating nodes visually when using the timeline slider. &lt;/p&gt;
&lt;p&gt;In this video I &lt;a href="https://youtu.be/ElNTPWdWfFQ"&gt;show some of the examples together with the timeline slider here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/932149150?share=copy"&gt;Building an everything shell&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-09T19:38:16.681Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1829727771-aef54e2cc7a9e469617424036e8a51cd8e778736101a608d414b59390ec3a04b-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I've started building an "everything shell". It uses my language EYG and a structural editor. the whole thing is be hosted with the idea that the resources you can ask about (instead of filesystems and processes) are every cloud system I have.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Ivan Lugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-10T19:55:43.134Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚ÄúIt‚Äôs a Unix system‚Ä¶ I know this!‚Äù&lt;/p&gt;
&lt;p&gt;Something from a year or two ago that I built and iterated on since then. Ever wanted to see all your files in 3D to get a mental map? No problem - use  &lt;code&gt;CherrierView&lt;/code&gt;  - a terminal-style, colorized  &lt;code&gt;.dae&lt;/code&gt;  blit of arbitrary directories into space.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06TTTR3HTN.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=-FgAHiI3ZNY"&gt;Torn Leaf Zero&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-14T13:17:27.302Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/-FgAHiI3ZNY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I made a video to introduce an exhibition im making called TORN LEAF ZERO&lt;/p&gt;
&lt;p&gt;It features a collaborative artwork with over one hundred participants&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.exaequos.com"&gt;exaequos.com&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/devlog-together.html#2024-04-13T18:18:35.754Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been playing with a new platform that I hope will be quite convivial. Hosted üò¨ but no Javascript and seems easy to build and self-host. Created by a single person, so decent chance of staying simple over time. It seems to be a fork of emscripten that's been made habitable. In particular, it includes raylib and some Lua bindings to it, so I'm starting to feel at home.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.exaequos.com"&gt;exaequos.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ported one of my early L√ñVE apps to it, for geometric constructions. There's an app store and I've published my app there, so you should be able to run it for yourself and inspect the source code. (All apps on the app store are available right in the file system, under  &lt;code&gt;/usr/store&lt;/code&gt; !)&lt;/p&gt;
&lt;p&gt;Disclaimers. It's slow, like dialing up over a phone line. Still lots of bugs. I had to reboot the VM several times while recording this video. Commands often hang or crash, then completely stop working until I reload. It's never lost my data, though. Data is stored in local storage on the browser until you publish something to the app store.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06U6BTNW7M.webm"&gt;exaequOS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/hamish_todd"&gt;Hamish Todd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-08T10:57:20.034Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm thinking about spreadsheets. Has anyone ever made a convincing interface for  &lt;em&gt;defining functions&lt;/em&gt; , using a spreadsheet interface?&lt;/p&gt;
&lt;p&gt;(I am aware that you can define functions in most modern spreadsheets, but this requires you to go to a traditional coding interface. This is obviously cheating!)&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-13T09:07:51.756Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi FoC Community üôÇ  I'm looking for something that i found a couple of years ago and apparently my fuzzy descriptions fail my zettelkasten or a search engine for that matter. I think I'm looking for a clojure talk in which someone presented also a tool. This tool used a UI of 2 or Three circles as a kind of number REPL which explained for example how the map function works in clojure. I hope that isn'T too vague if you know the name of the tool, that would be very cool. Thank you!!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://medium.com/@bitteldany/where-does-constant-data-go-b650338b2ee9"&gt;Where does constant data go?&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-14T12:34:59.807Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote a blog post about constant data in PL. Which is kind of curious in text based PL and a place where more visual approaches can really shine. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All of the programming languages I know make an interesting distinction, between two groups of constants, depending on type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/"&gt;Future of Coding Weekly 2020/02 Week 1&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/linking-together.html#2024-04-10T08:15:55.321Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìú Past Futures of Coding February 2020 Edition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/"&gt;Future of Coding Weekly 2020/02 Week 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/"&gt;Future of Coding Weekly 2020/02 Week 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/"&gt;Future of Coding Weekly 2020/02 Week 3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/"&gt;Future of Coding Weekly 2020/02 Week 4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/linking-together.html#2024-04-10T12:52:24.771Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve been reviewing classic papers about simplicity, complexity, and adjacent topics, both for my current series of essays and an essay I‚Äôm writing for Onward!&lt;/p&gt;
&lt;p&gt;So far I have reviewed (or downloaded for review):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Herbert A. Simon, The Architecture of Complexity (1962)&lt;/li&gt;
&lt;li&gt;Melvin E. Conway, How Do Committees Invent? (1968)&lt;/li&gt;
&lt;li&gt;Peter Naur, Programming as Theory Building (1985)&lt;/li&gt;
&lt;li&gt;Frederick P. Brooks, Jr., No Silver Bullet ‚Äî Essence and Accident in Software Engineering (1986)&lt;/li&gt;
&lt;li&gt;Richard P. Gabriel, Worse is Better (1991)&lt;/li&gt;
&lt;li&gt;Rich Hickey, Simple Made Easy (2011)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What am I missing? What else should be on that list?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-3/</guid><pubDate>Tue, 16 Apr 2024 13:51:43 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;On the experiment side, this week I started playing with emojis to allow quick scans for content of interest, I will try to be consistent with the emoji usage so people can use them to orient around a previously dry wall of text (the tool I use doesn't excel at promoting creative expression)&lt;/p&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://twitter.com/geoffreylitt/status/1229251217118892032"&gt;New little demo of end user software customization&lt;/a&gt; by &lt;a href="https://twitter.com/geoffreylitt"&gt;Geoffrey Litt&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort Hacker News by total points descending, for a more stable ranking&lt;/li&gt;
&lt;li&gt;Remove the articles I've already read&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üíª" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4bb/32.png"&gt; &lt;a href="https://twitter.com/ccorcos"&gt;Chet Chorcos&lt;/a&gt; shared a &lt;a href="https://github.com/ccorcos/datalog-prototype"&gt;full-stack prototype of collaborate web application backed by a Datalog-inspired database&lt;/a&gt; he built in one day.&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìë" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4d1/32.png"&gt; Useful resources mentioned in the &lt;a href="https://github.com/ccorcos/datalog-prototype#how-does-it-work"&gt;How does it work?&lt;/a&gt; section of the readme.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; A brief walk-through on the steps needed to &lt;a href="https://www.youtube.com/watch?v=6t9VSyyE4to"&gt;create launch visualizations from the SpaceX HTTP JSON API&lt;/a&gt; (cameo of the basket to ease drag and drop of multiple things in targets far apart from the source). Also short demos about &lt;a href="https://www.youtube.com/watch?v=XMzP2KVLRR8"&gt;Premier League Attendance and Goals by Team from CSV File&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=80f_J5goHMo"&gt;Sales KPIs from an Excel Spreadsheet&lt;/a&gt; by &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=0msyWHrw40A"&gt;Beyond Snapping: Persistent, Tweakable Alignment and Distribution with StickyLines&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UIST 2016: Proceedings of the 29th Annual ACM Symposium on User Interface Software &amp;amp; Technology&lt;/p&gt;
&lt;p&gt;Aligning and distributing graphical objects is a common, but cumbersome task. In a preliminary study (six graphic designers, six non-designers), we identified three key problems with current tools: lack of persistence, unpredictability of results, and inability to 'tweak' the layout.&lt;/p&gt;
&lt;p&gt;We created StickyLines, a tool that treats guidelines as first-class objects: Users can create precise, predictable and persistent interactive alignment and distribution relationships, and 'tweaked' positions can be maintained for subsequent interactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=KfxE99eN44c"&gt;Beyond Grids: Interactive Graphical Substrates to Structure Digital Layout&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CHI'17: ACM CHI Conference on Human Factors in Computing Systems Session: Spatial &amp;amp; Temporal Design&lt;/p&gt;
&lt;p&gt;Traditional graphic design tools emphasize the grid for structuring layout. Interviews with professional graphic designers revealed that they use surprisingly sophisticated structures that go beyond the grid, which we call graphical substrates.&lt;/p&gt;
&lt;p&gt;We present a framework to describe how designers establish graphical substrates based on properties extracted from concepts, content and context, and use them to compose layouts in both space and time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=lX1BBMyY1bc"&gt;Project Lincoln: Adobe MAX 2017 (Sneak Peeks)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lincoln is a data visualization tool for designers to link graphics to data without the need to code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://data-illustrator.com/"&gt;Data Illustrator: Create infographics and data visualizations without programming&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Augmenting Vector Design Tools with Lazy Data Binding for Expressive Visualization Authoring.&lt;/p&gt;
&lt;p&gt;Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, 2018&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üåê" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;a href="https://charticulator.com/"&gt;Charticulator: Create Bespoke Chart Designs without Programming&lt;/a&gt;. ( &lt;a href="https://charticulator.azureedge.net/videos/charticulator-supplemental.mp4"&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; Video&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=xvoJsymzRkw"&gt;Jennifer Mary Jacobs - Domain Specific Programming Platforms for Creativity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;a href="http://blog.rfox.eu/en/Programmer_s_critique_of_missing_structure_of_oper.html"&gt;Programmer's critique of missing structure of operating systems&lt;/a&gt; by &lt;a href="https://twitter.com/bystroushaak"&gt;@bystroushaak&lt;/a&gt; who expresses his frustration in using raw text (files, command parameters, environment variables, socket...) as unique way to communicate at the OS level.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìë" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4d1/32.png"&gt; A &lt;a href="https://github.com/pel-daniel/mind-bicycles"&gt;list of future of programming projects&lt;/a&gt; maintained by &lt;a href="https://pel-daniel.github.io/cv/"&gt;Daniel Garc√≠a Carmona&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üßµ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; A &lt;a href="https://threadreaderapp.com/thread/927593460642615296.html"&gt;twitter thread&lt;/a&gt; by &lt;a href="https://twitter.com/gravislizard"&gt;@gravislizard&lt;/a&gt; argues that keyboard based old text UI was faster and not necessary less intuitive than web UI with mouse: &amp;gt; almost everything on computers is perceptually slower than it was in 1983 amber-screen library computer in 1998: type in two words and hit F3. search results appear instantly. now: type in two words, wait for an AJAX popup. get a throbber for five seconds. oops you pressed a key, your results are erased.&lt;/p&gt;
&lt;p&gt;Follows a &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1582130078216300"&gt;Slack thread&lt;/a&gt; which eventually discusses distributed, interactive, stateful apps/systems.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://vimeo.com/392454807"&gt;Stamper: An Artboard-Oriented Creative Coding Environment&lt;/a&gt; by &lt;a href="https://twitter.com/supercgeek"&gt;Cameron Burgess&lt;/a&gt; (&lt;img alt="üßµ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1582133029218800"&gt;Slack Thread&lt;/a&gt;, &lt;a href="https://twitter.com/supercgeek/status/1230163240815955968"&gt;Twitter Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stamper is an alternative editor for p5.js, inspired by design software with Artboards (e.g. Sketch, Illustrator)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; Read more here: &lt;a href="https://paper.dropbox.com/doc/Stamper-An-Artboard-Oriented-Programming-Environment-QXtfMXshBFBNCu6iCtx2J"&gt;Stamper: An Artboard Oriented Programming Environment&lt;/a&gt;&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/</guid><pubDate>Wed, 10 Apr 2024 08:08:35 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Announcing the awesome program for the &lt;a href="https://2020.programming-conference.org/home/salon-2020#program"&gt;Convivial Computing Salon 2020 - ‚ÄπProgramming‚Ä∫ 2020&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Demos&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Raathi Kugarajan&lt;/strong&gt; shared his project &lt;a href="https://github.com/Raathigesh/JSBubbles"&gt;JSBubbles&lt;/a&gt;: Re-imagining reading and navigating JavaScript codebases in VSCode&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was tinkering with a VSCode extension inspired by Code Bubbles but my effort was mostly focused on navigating and reading JavaScript code bases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrew Reece&lt;/strong&gt; posted a second DevLog for WhiteBox, a live debugger/REPL for C(++) - now with a GUI, a familiar debugger-like data tree, graphing variable value changes across a function.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lZX8I0w7jJ4"&gt;WhiteBox DevLog 2 - GUI, data trees and graphing values over time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/E-l15Re1lUU"&gt;Bloques Web Update&lt;/a&gt; by &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An update to the tool to teach HTML/CSS/JS to non programmers, added new high level blocks, some even for layout, two lower level layers that get closer and closer to textual HTML. Also added import/export.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;From our Community&lt;/h4&gt;
&lt;p&gt;Talk presenting &lt;a href="https://www.youtube.com/watch?v=tX4H_ctggYo"&gt;Geometric Algebra for Computer Graphics&lt;/a&gt; which seems to simplify operations compared to other representations.&lt;/p&gt;
&lt;p&gt;More information on the website &lt;a href="https://bivector.net/"&gt;https://bivector.net/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clifford's Geometric Algebra enables a unified, intuitive and fresh perspective on vector spaces, giving elements of arbitrary dimensionality a natural home.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementations in Javascript, c++, c#, rust and python at the &lt;a href="https://github.com/enkimute/ganja.js/"&gt;ganja.js&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jasonlaster11/status/1226965515144482827"&gt;Jason Laster&lt;/a&gt; shared &lt;a href="https://webreplay.io/"&gt;Web Replay&lt;/a&gt; which supports &lt;a href="https://webreplay.io/features/time-travel-debugging.html"&gt;Time Travel Debugging&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web Replay records your entire application, so you can track bugs down faster, understand your code better, and always get perfect bug reports.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/podcasts/debugging-record-replay-data/"&gt;Greg Law on Debugging, Record &amp;amp; Replay of Data, and Hyper-Observability&lt;/a&gt; by &lt;a href="https://twitter.com/gregthelaw"&gt;Greg Law&lt;/a&gt; via &lt;strong&gt;Karki&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Topics discussed included: the challenges with debugging modern software systems, the need for ‚Äúhyper-observability‚Äù and the benefit of being able to record and replay exact application execution; and the challenges with implementing the capture of nondeterministic system data in Undo‚Äôs LiveRecorder product for JVM-based languages that are Just-In-Time (JIT) compiled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rcn.com/david-moon/Lunar/all_programming_languages_are_wrong.html"&gt;All Programming Languages are Wrong&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/David_A._Moon"&gt;David A. Moon&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581503038102000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most current-day programming languages seem to be based on the idea that computation is slow, so the user and the compiler must work hard to minimize the number of instructions executed.&lt;/p&gt;
&lt;p&gt;Compromises to minimize instructions extend so far as to make familiar-looking operators like + and &amp;lt; behave in unintuitive ways. If as a result a program does not work correctly in some cases, it is considered to be the programmer's fault. But it is really the language designer's fault.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ryanflorence/status/1227629264259801088?s=20"&gt;Ryan Florence&lt;/a&gt; on twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever I talk to teenagers about programming they want to do it on their phone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And an interesting &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581608876136700"&gt;Slack conversation&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/graydon_pub"&gt;Graydon Hoare&lt;/a&gt; on "text is already a highly-structured graphical notation" via &lt;strong&gt;yoshiki&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;many technical innovations are latent in textual notations. Visually unambiguous yet uniform symbol sets, combinatorial-positional word formation, linear spatio-temporal segregation, punctuation and structured page layout .. these are all technologies in writing that we had to laboriously invent, and they have purposes, advantages! Similarly in coding, we had to invent and adapt technologies from verbal and mathematical notations refined over millennia: lines and columns, indentation, block layout, juxtaposition and precedence, scope, evaluation order, comments, grammars, version control, diff and merge algorithms ... the pile of structuring technologies embedded in the textual representation of programs isn't free, and it isn't useless&lt;/p&gt;
&lt;p&gt;So I'm just really cautious when people suggest throwing it all out for some hypothetical reinvention. You need those structures: so you've got an immediate problem of "what are you going to use instead", and a longer-term question of "what makes you think you're not going to wind up right back at the same place ten thousand years of refining graphemes-on-a-page wound up"?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's more where those quotes came from: &lt;a href="https://graydon2.dreamwidth.org/253769.html?thread=692809#cmt692809"&gt;Re: Graphical Editors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chris Knott&lt;/strong&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581499317101600"&gt;shares an interesting story about evolving clocks to solve a particular problem in a Slack conversation&lt;/a&gt;. A similar story about the &lt;a href="https://en.wikipedia.org/wiki/MacCready_Gossamer_Albatross"&gt;MacCready Gossamer Albatross&lt;/a&gt; is shared there too.&lt;/p&gt;
&lt;p&gt;Some quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;importance of not confusing incidental problems for fundamental problems&lt;/p&gt;
&lt;p&gt;the entire issue is not solved, but sidestepped&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/</guid><pubDate>Wed, 10 Apr 2024 08:07:20 GMT</pubDate></item></channel></rss>