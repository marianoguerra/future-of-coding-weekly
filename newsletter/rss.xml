<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Mon, 07 Oct 2024 07:59:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2024/10 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202410-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎥 Boxer demo ✍ Exploration of Drawing as Programming Language 🧦 We have Dynamicland at home&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;h3&gt;🎥 &lt;a href="https://youtu.be/2OIE6HoVOfo"&gt;k means clustering algorithm implemented in code flow canvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/two-minute-week.html#2024-10-04T13:08:51.559Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/2OIE6HoVOfo/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here's a new &lt;a href="https://youtu.be/2OIE6HoVOfo"&gt;video&lt;/a&gt; where I show the k-means clustering algorithm build in code flow canvas using some escape hatches. You can try it yourself on &lt;a href="http://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; (it's available in the examples)&lt;/p&gt;
&lt;h3&gt;💬 client-side RAG and ticky UI holder for Observable by &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/two-minute-week.html#2024-10-06T20:47:36.831Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I got excited about a client-side RAG thing working this week, but the most videoable thing I also got working was a sticky UI holder for Observable, which will be useful for hanging notebook extension upon.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07QPFZHQ9J.mov"&gt;sticky view&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;h3&gt;🎥 &lt;a href="https://youtu.be/OD_SN99Sy8Q"&gt;The Coronavirus dashboard on Kendraio App&lt;/a&gt; via &lt;strong&gt;Daniel Harris&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/share-your-work.html#2024-09-30T12:53:31.071Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/OD_SN99Sy8Q/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone! I just made &lt;a href="https://history.futureofcoding.org/?fromDate=2024-09-27&amp;amp;toDate=2024-10-03&amp;amp;channel=introduce-yourself&amp;amp;filter=#2024-09-30T12:53:21.324Z"&gt;💬 #introduce-yourself@2024-09-30&lt;/a&gt; and promised a glimpse of our work. We (the &lt;a href="https://www.kendra.io"&gt;Kendraio&lt;/a&gt; &lt;a href="https://www.linkedin.com/posts/kendraio_kendraio-kendraioapp-interoperability-activity-7199366975783858177-3vKL"&gt;team&lt;/a&gt;) are currently experimenting with no-code, local-first and malleable-software isms.&lt;/p&gt;
&lt;p&gt;We want to create a local environment where it is really easy for end-users and non-developers to build workflows and manage their own data, whilst also being able to plug into the services (apps and websites) that they currently use and build their own user-interfaces for those services. It's a big dream and we've started small.&lt;/p&gt;
&lt;p&gt;A few years ago during the pandemic we built a &lt;a href="https://app.kendra.io/kendraio/coronavirus"&gt;dashboard for COVID-19 data&lt;/a&gt;. Our Flow plugged into various APIs and then visualised the received data on one page – so a good demonstration of one aspect of our dream. The dashboard still exists but shows historical data. We wrote an &lt;a href="https://medium.com/kendraio/covid-19-kendraio-creates-coronavirus-dashboard-within-kendraio-app-a0185e526b25"&gt;article&lt;/a&gt; about the dashboard which also has an accompanying &lt;a href="https://youtu.be/OD_SN99Sy8Q"&gt;video&lt;/a&gt; explaining how it works and how you can edit the Flow while it's running.&lt;/p&gt;
&lt;p&gt;Enjoy! Look forward to any comments or questions. Cheers!&lt;/p&gt;
&lt;h3&gt;📝 &lt;a href="https://watwa.re/mietencheck"&gt;How we built mietencheck.de&lt;/a&gt; via &lt;strong&gt;Gregor&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/share-your-work.html#2024-09-30T22:10:38.525Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Come for the rent price rant, stay for the i-cant-believe-its-no-code editor&lt;/p&gt;
&lt;h3&gt;📑 &lt;a href="https://2024.splashcon.org/"&gt;SPLASH&lt;/a&gt; via &lt;strong&gt;Thomas van Binsbergen&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/share-your-work.html#2024-10-06T08:13:38.739Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My students and I have worked on three papers (two prototypes) that will be presented at &lt;a href="https://2024.splashcon.org/"&gt;SPLASH&lt;/a&gt; at end of October&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Christopher Esterhuyse -- &lt;a href="https://ltvanbinsbergen.nl/files/papers/sle2024.pdf"&gt;Cooperative Specification via Composition Control &lt;/a&gt;(SLE2024)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This paper investigates control mechanisms in declarative languages that can be used by a programmer to have guarantees about the written program even when it is extended by other programmers. The work is motivated by distributed systems governed by policies in which the actors that provide the policies may have been competing interests. Concretely, think about (data sharing) contracts that are embedded in a federated cloud infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Damian Frölich -- &lt;a href="https://ltvanbinsbergen.nl/files/papers/gpce2024.pdf"&gt;On the Soundness of Auto-completion Services for Dynamically Typed Languages &lt;/a&gt;(GPCE2024)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This paper investigates the use of "abstract interpretation" to give sound auto-complete suggestions for dynamic languages and demonstrates the technique on a subset of Python. Here "sound" means: if you select a given candidate, the inserted code will not contain variables that turns out to be undefined when the code runs. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Max Boksem -- &lt;a href="https://ltvanbinsbergen.nl/files/papers/paint2024.pdf"&gt;Bridging Incremental Programming and Complex Software Development Environments &lt;/a&gt;(PAINT2024)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This paper demos a prototype that we built to investigate a modular graph structure for representing and running source code. The tool allows you to create different projections out of the code such as code structure, documentation view, and execution history. The tool supports incremental and exploratory programming and "nested graphs" (importing a graph as a node) for hierarchical views, although this is a more recent add-on. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;h3&gt;📝 &lt;a href="https://git.sr.ht/~akkartik/notebook.love"&gt;My notebook&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/devlog-together.html#2024-10-01T04:46:52.831Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git.sr.ht/~akkartik/notebook.love"&gt;My notebook&lt;/a&gt; now synchronizes the results of computation into named blanks in prose.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07Q5K5CZRP.webm"&gt;notebook eval&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/devlog-together.html#2024-10-02T16:30:19.582Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This debug UI has been surprisingly handy over the last few days. I'm able to visualize a parse tree even after it's been flattened, just using color transparency. All I'm doing is painting all the rects that contain the mouse cursor. Since the color is transparent, it doesn't matter what order they're in. (The larger rects actually come later; they're fall-backs if a more fine-grained rect isn't found.)&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07Q30NJ0JE.webm"&gt;notebook debug&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;📝 &lt;a href="https://akkartik.name/tabs.html"&gt;A plain-text notebook with tabsl&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/devlog-together.html#2024-10-06T15:01:36.991Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07QDV3BMCN.webm"&gt;Notebook tabs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;h3&gt;📝 &lt;a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4129683"&gt;Eudability: A New Construct at the Intersection of End-User Development and Computational Literacy&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/reading-together.html#2024-09-30T20:05:33.453Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;through the visualization literacy working group, an extensive discussion of end-user development models &amp;amp; overlap with computational thinking. the two design axes alone are worth the price of admission::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;component-based / rule-based / programming-by-demonstration&lt;/li&gt;
&lt;li&gt;direct manipulation / conversational interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;h3&gt;🪵 &lt;a href="https://pinokio.computer/"&gt;pinokio&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/thinking-together.html#2024-09-30T11:13:09.803Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey 👋  I was recently searching again how "usable"  "AI" became. So I stumbled on this tool: &lt;a href="https://pinokio.computer/"&gt;pinokio&lt;/a&gt; . Its all just JSON. Before just evalutating the tool I might describe the criteria I would be interested in. Broadly speaking I would like to have tool similar to what we see in this clip: &lt;a href="https://www.youtube.com/watch?v=HGYFEI6uLy0"&gt;youtube.com/watch?v=HGYFEI6uLy0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Consider The following more specific scenario:&lt;/p&gt;
&lt;p&gt;I have a PKM Zettelkasten and I have some friends. Now my workflow is to write and then to publish. I want to provide for them a Voice assistant that can summarize contents based on various parameters: By time e.g. topics of last 3 months, last week. But I also want to provide overviews on specific topics as well as interesting interconnections.&lt;/p&gt;
&lt;p&gt;Do you know of any tools that could help with creating such use cases?&lt;/p&gt;
&lt;h3&gt;💬 &lt;strong&gt;Tomas Petricek&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/thinking-together.html#2024-10-01T23:59:57.316Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very random thought - but something that I've been occasionally wondering for some time now. If we have lambda calculus as a model of functional languages and Turing machines as a model of imperative languages, what would be a good model for programming systems that have "document" as the basic underlying structure (Subtext is an example of this) - i.e., you have some tree structure and the program evaluates by modifying this document - appending new things or rewriting evaluated bits. (Lambda calculus itself is basically a tree, but what if this also allows imperative document edits?)&lt;/p&gt;
&lt;p&gt;Could this be something like a "Turing machine" that works on trees rather than tapes? There would be "current location" which can move in various ways around the tree and modify it. If your document has references (perhaps you can have  &lt;code&gt;../../foo&lt;/code&gt;  to refer to  &lt;code&gt;foo&lt;/code&gt;  of a parent of a parent), the machine would have to somehow walk up the tree, remembering that it wants to copy a value back to the original location - and then walk over the tree back to put the value in place of the reference).&lt;/p&gt;
&lt;p&gt;Is this something completely silly or something that lots of people have already done but under different names?&lt;/p&gt;
&lt;h3&gt;💬 &lt;strong&gt;Rafi Khan&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/thinking-together.html#2024-10-03T00:52:53.338Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Would anyone be interested in a browser based smalltalk environment that tries to simplify the task of building software?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;h3&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=MJlBGZ-kpg0"&gt;Boxer demo by Michael Ballantyne&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/linking-together.html#2024-10-03T01:22:52.802Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/MJlBGZ-kpg0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=MJlBGZ-kpg0"&gt;A rare and precious video walking us through Boxer.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;🧦 &lt;a href="https://forkingpaths.dev/posts/24-10-02/wheel_reinvention_jam_writeup.html"&gt;A little wheel invention jam making a realtalk like environment. &lt;/a&gt; via &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/linking-together.html#2024-10-03T01:44:11.676Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forkingpaths.dev/posts/24-10-02/wheel_reinvention_jam_writeup.html"&gt;A little wheel invention jam making a realtalk like environment. &lt;/a&gt;Super neat project. Love some of the implementation questions at the end as well. &lt;/p&gt;
&lt;h3&gt;🧦 &lt;a href="https://handmade.network/p/590/bret-victor-s-worst-nightmare/"&gt;Bret Victor's Worst Nightmare&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/linking-together.html#2024-10-03T01:58:29.718Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oh wow, so there were two Dynamicland homages in the jam! I was following &lt;strong&gt;@Ben Visness&lt;/strong&gt;'s project.&lt;/p&gt;
&lt;h3&gt;✍ &lt;a href="https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/"&gt;λ-2D: An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus – MIT Media Lab&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/linking-together.html#2024-10-03T16:53:33.801Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus&lt;/p&gt;
&lt;h3&gt;🐦 &lt;a href="https://x.com/maxencefaldor/status/1842211478796918945"&gt;Maxence Faldor (@maxencefaldor) on X&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/linking-together.html#2024-10-05T09:43:35.819Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://x.com/maxencefaldor/status/1842211478796918945"&gt;CAX: Cellular Automata Accelerated in JAX, a high-performance and  flexible library designed to accelerate cellular automata research. &lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/maxencefaldor/status/1842211478796918945"&gt;Maxence Faldor (@maxencefaldor) on X&lt;/a&gt;: Interested in emergence, self-organization or morphogenesis?&lt;/p&gt;
&lt;p&gt;Introducing CAX: Cellular Automata Accelerated in JAX, a high-performance and flexible library designed to accelerate cellular automata research. 🦎&lt;/p&gt;
&lt;p&gt;📄: &lt;a href="https://arxiv.org/abs/2410.02651"&gt;CAX: Cellular Automata Accelerated in JAX&lt;/a&gt;
🌟: https://github.com/maxencefaldor/cax
🧵1/12&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/media/GZDHN7JWMAAhTZO.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;h3&gt;🎹 &lt;a href="https://lisp.trane.studio/?tutor"&gt;trane is a music playground&lt;/a&gt; via &lt;strong&gt;Greg Ash&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/of-music.html#2024-10-02T20:59:13.273Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few people were asking for a link at the London meetup earlier, so posting here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lisp.trane.studio/?tutor"&gt;lisp.trane.studio/?tutor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code/docs &lt;a href="https://github.com/gwegash/trane"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;h3&gt;💬 &lt;strong&gt;William Taysom&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/of-ai.html#2024-10-03T04:05:32.704Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fiddling with OpenAI o1-preview, I didn't know it cannot run Python to draw charts.  Still it tried its darndest using ASCII art... Not bad except when you compare with the data it's trying to chart.&lt;/p&gt;
&lt;p&gt;&lt;img alt="not-quite-right.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07QUJSFHH6.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="raw-data.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07Q2V14WLV.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;h3&gt;🎥 &lt;a href="https://youtu.be/Q-rvkIQ0lu8?si=YyzrHUJZnVxbKNo2"&gt;Back to Basics with Technology - Future of Coding Meetup - London, 2nd Oct 2024&lt;/a&gt; via &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/10/W1/present-company.html#2024-10-06T22:33:54.574Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/Q-rvkIQ0lu8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is the talk I gave at the last Future of Coding London Meetup - Back to Basics with Technology. It goes through some of my recent explorations in electronics, crochet and light + a bunch of ideas I’ve been mulling over: &lt;a href="https://youtu.be/Q-rvkIQ0lu8?si=YyzrHUJZnVxbKNo2"&gt;Back to Basics with Technology&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also in blog form: &lt;a href="https://www.forestinthetree.com/blog/back-to-basics"&gt;forestinthetree.com/blog/back-to-basics&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202410-week-1/</guid><pubDate>Mon, 07 Oct 2024 07:59:00 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/09 Week 5</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-5/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;✍ Bloom: Optimization-Driven Interactive Diagramming 🔮 The Future of Programming Systems 💬 FoC Bangalore Demos&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;h3&gt;✍ &lt;a href="https://penrose.cs.cmu.edu/blog/bloom"&gt;Bloom: Optimization-Driven Interactive Diagramming&lt;/a&gt; via &lt;strong&gt;Josh Sunshine&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/share-your-work.html#2024-09-24T18:46:55.988Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We just released Bloom, new way to create interactive diagrams and visual explanations. Creating interactive diagrams usually requires a programmer to write tedious event handling, collision detection, and tree update code. In Bloom, you simply tell the library what properties you want to maintain and the system does the hard work for you. Read &lt;a href="https://penrose.cs.cmu.edu/blog/bloom"&gt;this blog post&lt;/a&gt; to see cool example diagrams and learn more about Bloom.&lt;/p&gt;
&lt;h3&gt;💬 &lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/share-your-work.html#2024-09-26T07:21:12.619Z"&gt;Some demos shown at the FOC meetup in Bangalore&lt;/a&gt; by &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/share-your-work.html#2024-09-26T07:21:12.619Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this thread: Some demos shown at the FOC meetup in Bangalore yesterday (not everyone has joined this Slack yet):&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;h3&gt;💬 &lt;a href="https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1727029942017819"&gt;my parser&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/devlog-together.html#2024-09-24T21:14:09.714Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It took a couple of days but I've now completely rewritten &lt;a href="https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1727029942017819"&gt;my parser&lt;/a&gt; so it can serve both for display and computation duties. Displaying requires keeping track of spaces. Computation requires detecting invalid statements.&lt;/p&gt;
&lt;p&gt;Now &lt;a href="https://history.futureofcoding.org/?fromDate=2024-09-15&amp;amp;toDate=2024-09-21&amp;amp;channel=devlog-together&amp;amp;filter=#2024-09-18T03:35:09.724Z"&gt;💬 #devlog-together@2024-09-18&lt;/a&gt; can perform computations in (indented) code lines.&lt;/p&gt;
&lt;p&gt;Still missing: synchronization between code lines and prose lines. The screenshot for example shows me redundantly defining  &lt;code&gt;ice_kg = 2&lt;/code&gt;  to provide it to code lines. Also,  &lt;code&gt;heat_flux&lt;/code&gt;  is computed in code, but not yet filled in the blank space in prose.&lt;/p&gt;
&lt;p&gt;I'm continuing to accumulate design principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(generalizing from &lt;a href="https://futureofcoding.slack.com/archives/C03RR0W5DGC/p1726811395937989"&gt;before&lt;/a&gt;) Everything is visible and easy to discover, whether it's the formula for a blank or the syntax to define a new blank or how to change colors. Any pattern you see on screen is easy to copy with the keyboard. (The one exception right now is the use of  &lt;code&gt;|&lt;/code&gt;  characters in blanks and  &lt;code&gt;/&lt;/code&gt;  in code. Both turn into horizontal lines.)&lt;/li&gt;
&lt;li&gt;What you typed in is saved in the document -- except what you put into blanks in prose. Blanks are not saved, but can override default values defined in code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="notebook-eval2.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07NYFM2PC4.png"&gt;&lt;/p&gt;
&lt;h3&gt;🔌 &lt;a href="https://demo.codeflowcanvas.io/"&gt;demo.codeflowcanvas.io&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/devlog-together.html#2024-09-29T17:21:20.018Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi, this weekend I spend a lot of time tweaking and improving some stuff under the hood of Code Flow Canvas.. and I finally started building some unit/integration tests for the runtime flow engine as I want to reliably know when a flow is finished. I found some situations with certain node-types (the map and foreach node-types) that had some bugs in it that I didn't notice before. Also when the flow-engine was used in a none DOM environment there was a nasty bug somewhere deep in the system which caused nodes not to be reached... building tests for this really helped and save me some time debugging. All of this is important anyway but especially for the demo that I will give remotely at Live this year, because I don't want to surprise myself and anyone else 😊...&lt;/p&gt;
&lt;p&gt;In the attached screenshot you can see a new flow example that I made and hopefully make a video of next week: the K-Means clustering algorithm including visualisation of the clusters and centroids. You can already try it on &lt;a href="https://demo.codeflowcanvas.io/"&gt;demo.codeflowcanvas.io&lt;/a&gt; (it's in the examples).&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07PXT3KGDP.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;h3&gt;💬 &lt;strong&gt;Declan&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/thinking-together.html#2024-09-23T00:03:32.369Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have lots of functions that map sets of inputs to values - depending on some rules (if branches). Now I want to enumerate all the rules/code paths; it will help me to analyse, optimise, explain, understand.&lt;/p&gt;
&lt;p&gt;This can't be new, I guess it should be a thing that's feasible in any functional programming language. Maybe there is a name for this? Or a tool that does this?&lt;/p&gt;
&lt;p&gt;I'm thinking about writing something, but it seems like a typechecker like tsc would have a lot of related logic, and if I can I'll experiment using some other friendly tool first. Any tips/references please shout, thanks!&lt;/p&gt;
&lt;h3&gt;💬 &lt;strong&gt;Dany&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/thinking-together.html#2024-09-23T06:31:35.141Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Should code completion preselect in the dropdown?&lt;/p&gt;
&lt;p&gt;For example, if I write "object.l", this opens a dropdown with "length". Should the length be selected, so pressing "enter", inserts it directly or should I first need to press "down arrow"?&lt;/p&gt;
&lt;p&gt;In visual studio, it is not preselect if I write a function, but does preselect for members. Is there some common approach?&lt;/p&gt;
&lt;h3&gt;🔮 &lt;a href="https://blog.waleson.com/2024/09/the-future-of-programming-systems-four.html"&gt;The Future of Programming Systems - four thoughts&lt;/a&gt; via &lt;strong&gt;Jouke Waleson&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/thinking-together.html#2024-09-23T07:41:26.414Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not sure if this is the right place to post this and whether this is interesting to this group, but I gave a short presentation last week about the  &lt;em&gt;future of programming systems&lt;/em&gt;  and curious what you think about it. I wrote it down in a blog post here: &lt;a href="https://blog.waleson.com/2024/09/the-future-of-programming-systems-four.html"&gt;blog.waleson.com/2024/09/the-future-of-programming-systems-four.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are four thoughts that I think will shape the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Software development systems have a lot of vestigial parts (left-overs from the way it evolved)&lt;/li&gt;
&lt;li&gt;Understanding is crucial to development, and with the right mediums we can understand the subject much faster&lt;/li&gt;
&lt;li&gt;Most software platforms developed bottom-up, from the silicon, instead of focusing on the needs of the people&lt;/li&gt;
&lt;li&gt;Software is truly different from other technologies in the freedom it gives us, so we can and should invent new abstractions that make things simpler than they are now&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn't in the post, but I think that in the future we'll see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Great integration between design tools, version control, IDEs, databases, monitoring &amp;amp; logging systems.&lt;/li&gt;
&lt;li&gt;High-level concepts as first class systems in the programming systems. Simple examples are an email or phone number type as a database primitive, instead of strings.&lt;/li&gt;
&lt;li&gt;Better reasoning / business logic rules so that IDEs can give feedback on "you are not allowed to store PII in this database".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way all stakeholders can collaborate and the system can check correctness much better, and we require less discipline/in-depth knowledge from the team members.&lt;/p&gt;
&lt;p&gt;I suspect most of these ideas have come by in this community already, but still curious what you think!&lt;/p&gt;
&lt;h3&gt;📝 &lt;a href="https://open.substack.com/pub/programmingsimplicity/p/functional-programming-is-letting?r=1egdky&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&amp;amp;showWelcomeOnShare=true"&gt;Functional Programming Is Letting Us Down&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/thinking-together.html#2024-09-24T01:17:32.150Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;💬 &lt;strong&gt;Tomas Petricek&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/thinking-together.html#2024-09-25T21:45:07.881Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been looking at programming by demonstration recently (somewhat inspired by Pygmalion). There are some nice recent examples of using PbD for things like data wrangling (clean up data, extraction, etc.) and I know some examples for visual things (bar chart) - but I was hoping to use PbD to create something like TODO list app - do people in this group know if there are any systems (recent or ancient) that do something like this?&lt;/p&gt;
&lt;p&gt;I actually have a prototype where I can construct adding of new items to the list using PbD (you do a sequence of actions to create and add an item and then you can replay that), but other things are trickier - e.g. to count checked items or to remove items that are completed, there needs to be some way of parameterizing the actions (so that they can be applied to all items) and specifying pre-conditions (so that they only apply to certain items) - I'm really not quite sure how to best do those...&lt;/p&gt;
&lt;h3&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/thinking-together.html#2024-09-28T17:47:43.136Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today in non-convivial computing experiences: I found out a modern car can get into a state where it won't turn off. And can't be put into neutral (so it can't be towed).&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;h3&gt;📝 &lt;a href="https://docs.google.com/spreadsheets/d/1KAauJp9MiblyAInIbgS2ndc2ArAmnhd1FIODYZEVFHc/edit?gid=1263411346#gid=1263411346"&gt;Conway’s Game of Life implemented in PURE (no scummy Apps Script) Google Sheets&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/linking-together.html#2024-09-24T00:08:19.439Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(also related my – admittedly less dynamic – &lt;a href="https://docs.google.com/spreadsheets/d/1629UXZ07lVK1-LVR0T7u1RDVKeW4f55K688CAtS5maw/edit?gid=0#gid=0"&gt;Cellular Automata Google Sheet&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;💬 &lt;strong&gt;Robin Allison&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/linking-together.html#2024-09-25T06:54:58.811Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey future of coding folks,&lt;/p&gt;
&lt;p&gt;I want to advertise the idea of non-abelian spreadsheets. The idea has slowly drifted into the center of my thinking this last year. I'm not sure if its a good idea or not. It kinda depends on how you build on it. So for now I just want to convey the general idea.&lt;/p&gt;
&lt;p&gt;Picture in your mind a normal spreadsheet. In some sense it is 'abelian' (commutative) because from any cell going down and then right is the same as going right and then going down. If we make it non-abelian, so the order we go right and down matters, we get something like the picture attached below.&lt;/p&gt;
&lt;p&gt;If you tilt your head slightly you may recognize it as the infinite binary tree. So an infinite binary tree is just the non-abelian version of the usual grid-based spreadsheet. The nodes of the tree are the cells. We can also think of finite binary trees as the analogue of tables.&lt;/p&gt;
&lt;p&gt;A key feature of regular spreadsheets is the ability to write formulas with relative references. For instance in a regular spreadsheet you can use relative references so a formula always refers to the cell to the right of the given one, and in a tree you can write a formula that always refers to the cell you get by going down and to the right from the given cell.&lt;/p&gt;
&lt;p&gt;Another key feature of spreadsheets is that you put stuff in cells! And we do that with trees all the time. For example if we write down the syntax tree for (a+b)*c what we are doing is putting each of the symbols into a cell of the tree.&lt;/p&gt;
&lt;p&gt;We can push this analogy to account for all trees (in particular all syntax trees). This tree can't really be visualized because it branches infinitely at each node. It is much easier to describe algebraically. I'll use the term 'free monoid on a set X', which if you aren't in the know just means the set of strings made out of the elements of X regarded as distinct characters. The infinite binary tree, or more precisely the set of nodes of the infinite binary tree, can be described as the free monoid on a two element set {L, R}. e.g. RLL describes the node you get by going right, then left, and then left again. Now let X_n denote a set with n elements and X the disjoint union of the X_n for all n. It suffices to take the free monoid on X.&lt;/p&gt;
&lt;p&gt;A reasonable question at this point is what is the interface for an infinitely branching tree? You would think it is even worse than an infinite dimensional grid, which is the abelian version. But if we are restricting ourselves to trees coming from symbolic expressions then for the most part we already have the interface. It is just the symbolic expressions we would have written down in the first place.&lt;/p&gt;
&lt;p&gt;I'll leave it at that.&lt;/p&gt;
&lt;p&gt;&lt;img alt="unnamed.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07NH9CRN31.png"&gt;&lt;/p&gt;
&lt;h3&gt;🍄 &lt;a href="https://wiki.futureofcoding.org/Propagators/"&gt;Propagators&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/linking-together.html#2024-09-25T20:01:00.365Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created a wiki page about &lt;a href="https://wiki.futureofcoding.org/Propagators/"&gt;Propagators&lt;/a&gt; any resource you would add? Do you know of related ideas?&lt;/p&gt;
&lt;h3&gt;🧑‍🎨 &lt;a href="https://jaspervdj.be/turnstyle/"&gt;Turnstyle&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/linking-together.html#2024-09-26T14:19:41.583Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jaspervdj.be/turnstyle/"&gt;Turnstyle&lt;/a&gt; is a graphical &lt;a href="https://en.wikipedia.org/wiki/Esoteric_programming_language"&gt;esoteric programming language&lt;/a&gt; loosely inspired by &lt;a href="https://www.dangermouse.net/esoteric/piet.html"&gt;Piet&lt;/a&gt;. Both encode programs as images, however, the similarities end at the syntax level.&lt;/p&gt;
&lt;p&gt;Where Piet is really a stack machine in disguise, Turnstyle is an encoding of the (untyped) &lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus"&gt;Lambda calculus&lt;/a&gt;. This allows for building more reusable images at a higher level of abstraction, while still keeping the specification small, making it relatively easy to develop new interpreters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://jaspervdj.be/turnstyle/"&gt;Turnstyle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Turnstyle is an graphical esoteric programming language based on lambda calculus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;h3&gt;💬 &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W5/present-company.html#2024-09-28T03:43:37.653Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyone else here going to splash? I know &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt; and &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt; are presenting. I’ll be attending. Just wanted to see if anyone else is going to &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-5/</guid><pubDate>Sun, 29 Sep 2024 20:50:11 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/09 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🤖 Bret Victor on AI 📝 Functional reactive programming 📢 Unconference by Ink &amp;amp; Switch&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/sSrvrYvAbss"&gt;codeflowcanvas swagger endpoint generation&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/two-minute-week.html#2024-09-22T12:14:58.017Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/sSrvrYvAbss/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In this &lt;a href="https://youtu.be/sSrvrYvAbss"&gt;video&lt;/a&gt; I show a new feature that I am working on in my codeflowcanvas project (which is a visual programming system and language): exporting a flow to typescript so that it can be used in other code-bases. In this example it's a nodejs-hono project for creating an api with a swagger/openapi documentation page&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=R7x5zefEUnc"&gt;Visualizing Vector Embeddings in 3D with transformers.js and t-SNE/UMAP&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/share-your-work.html#2024-09-17T10:13:19.236Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/R7x5zefEUnc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I made a small tool: &lt;a href="https://www.youtube.com/watch?v=R7x5zefEUnc"&gt;Visualizing Vector Embeddings in 3D with transformers.js, t-SNE/UMAP and echarts-gl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Get it here: &lt;a href="https://github.com/marianoguerra/webvectors"&gt;github.com/marianoguerra/webvectors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💻 &lt;a href="https://motifdesigner.netlify.app/"&gt;Motif Designer&lt;/a&gt; via &lt;strong&gt;Natalie Freed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/share-your-work.html#2024-09-18T20:08:32.752Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello! I just listened to the AgentSheets episode and wanted to share that I’m working on a PBE + block programming educational tool. It’s a work in progress but the vision is of something like “a macro recorder for Kid Pix” that lets you switch between drawing and code editing. &lt;a href="https://motifdesigner.netlify.app/"&gt;motifdesigner.netlify.app&lt;/a&gt; Target audience is elementary school age kids, though it’s also meant to be fun for adults to tinker with.&lt;/p&gt;
&lt;p&gt;I’m excited that there seems to be a bit more traction (or at least interest?) around PBE again. I thought it was an interesting point in the paper/episode that it hasn’t necessarily gone out of fashion because it wasn’t a good idea, but because other solutions emerged to some of the problems it was trying to solve.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://open.substack.com/pub/programmingsimplicity/p/experiments-with-text-to-text-transpilation?r=1egdky&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;Experiments With Text to Text Transpilation&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/devlog-together.html#2024-09-16T03:25:14.498Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;... Chipping away at articles regarding a bunch of experiments towards creating higher level syntax for programming languages. Thus far, I've managed to consolidate t2t (text-to-text transpilation) into a single .mjs file and to redocument it. Wrote an adjunct article about experimenting with "t2t" using a toy meta-programming language to generate code in existing languages. "T2T creates DSLs. T2T reduces the amount of work required to build a DSL. You should be able to create a new DSL in an afternoon. ..."&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/devlog-together.html#2024-09-18T03:35:09.724Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very initial draft of a notebook UI.&lt;/p&gt;
&lt;p&gt;There are 2 kinds of lines here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular lines are prose, but you can also insert named blanks into them using the syntax  &lt;code&gt;[value|name]&lt;/code&gt; , which renders vertically across 2 lines. You can't nest blanks within blanks. These lines can wrap, but a single blank can't wrap across multiple lines on screen.&lt;/li&gt;
&lt;li&gt;Indented lines (though the indentation is currently subtle) are code. They can render fractions using the syntax  &lt;code&gt;(a/b)&lt;/code&gt;  as I showed before. (Not sure I'll keep this in the long term.) You can nest fractions within fractions. These lines don't support wrapping.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Planned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronizing blanks with the same name&lt;/li&gt;
&lt;li&gt;using code in indented lines to compute derived names without values inline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspirations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kragen Sitaker's &lt;a href="https://www.mail-archive.com/kragen-tol@canonical.org/msg00058.html"&gt;bicicleta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jonathoda/"&gt;Jonathan Edwards&lt;/a&gt;'s &lt;a href="https://vimeo.com/451278506"&gt;Subtext 1&lt;/a&gt; (&lt;a href="https://history.futureofcoding.org/?fromDate=2024-08-26&amp;amp;toDate=2024-09-01&amp;amp;channel=linking-together&amp;amp;filter=#2024-08-29T22:36:31.598Z"&gt;💬 #linking-together@2024-08-29&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="20240917-notebook.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07MTARRBPX.png"&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/devlog-together.html#2024-09-20T05:49:55.937Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today I've added some rudimentary styling syntax to my notebook.&lt;/p&gt;
&lt;p&gt;It looks like I care about always making the styling very transparent, so it's possible in principle to guess what characters one needs to type to copy the look of something one sees on screen. So the style directives will never be hidden.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07N9ELF5NE.webm"&gt;Style&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://futureofcoding.slack.com/archives/C050QK4917D/p1726968241664499?thread_ts=1726886907.818599&amp;amp;cid=C050QK4917D"&gt;Cross-link to a different thread.&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/devlog-together.html#2024-09-22T18:32:22.017Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's a bug in my parser. Here's a debug UI showing it at a glance. The parse tree in the background is for the line the mouse pointer is hovering on.&lt;/p&gt;
&lt;p&gt;One fun thing is the couple of lines in the middle there. I reached for a notebook to scribble some equations for myself, but then realized all I wanted was to be able to draw the fraction line horizontally -- and I'm sitting in a tool that can do that. Using the tool to debug the tool 💥 (At least until I have no tools because I broke my tools using my tools. &lt;a href="https://history.futureofcoding.org/?fromDate=2024-09-19&amp;amp;toDate=2024-09-25&amp;amp;channel=of-ai&amp;amp;filter=#2024-09-22T01:24:01.664Z"&gt;💬 #of-ai@2024-09-22&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="notebook-debug.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07NEKXSFNH.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://designengineers.substack.com/p/the-myopia-of-professionalism"&gt;The Myopia of Professionalism&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/thinking-together.html#2024-09-16T23:02:56.289Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am now blogging about design engineering in organizations that deal with lots of domain knowledge(s). This post covers metrics that don't do what your manager thinks they do, and why interdisciplinary work has trouble finding a good home.&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Misha A&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/thinking-together.html#2024-09-17T10:36:32.396Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is "program"? essentially, conceptually.&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/lesliexin/status/1836643348490187183"&gt;leslie (@lesliexin) on X&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/thinking-together.html#2024-09-19T19:13:22.938Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like this metaphor of translucent software both as a callback to the translucent hardware aesthetic of the 2000s, but also to progressively display the underlying mechanisms of software  ~&lt;em&gt;&lt;em&gt;if&lt;/em&gt;&lt;/em&gt;~  you want to see it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/lesliexin/status/1836643348490187183"&gt;leslie (@lesliexin) on X&lt;/a&gt;: Finally got around to building this :) &lt;/p&gt;
&lt;p&gt;Try it at https://translucentweb.site/&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1836643326537129984/pu/img/WHwkOV9cVDHOiUQZ.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📢 &lt;a href="https://lu.ma/2024-unconf-losangeles"&gt;Unconference hosted by Ink &amp;amp; Switch&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/linking-together.html#2024-09-16T17:02:48.803Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tight zoom-in — mid-September 2024 — virtual roomful of online humanoid computer brains who maintain material co-presence in LA, or are translocating to SPLASH in October&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;There's going to be an &lt;a href="https://lu.ma/2024-unconf-losangeles"&gt;unconference hosted by Ink &amp;amp; Switch&lt;/a&gt; on the 26th of October.&lt;/p&gt;
&lt;p&gt;This has not been broadly announced yet. We're in the "invite the people who you really want to be there" phase. That means all of you!&lt;/p&gt;
&lt;p&gt;Take a look at the list of attendees. Brilliant weirdos, the lot. You should come, you should come, you should come.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://dthompson.us/posts/functional-reactive-user-interfaces-with-propagators.html"&gt;Functional reactive programming&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/linking-together.html#2024-09-17T15:45:33.655Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A full-blown tutorial on DIY &lt;a href="https://dthompson.us/posts/functional-reactive-user-interfaces-with-propagators.html"&gt;functional reactive programming&lt;/a&gt;, from one of the Spritely folks. Also collects relevant PL dissertations on dataflow, e.g. FrTime and propagators, as well as explorables like &lt;a href="https://github.com/dennishansen/holograph"&gt;Holograph&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://google.github.io/swissgl/tutorials/reaction_torus.html"&gt;SwissGL tutorial: Reaction-Diffusion donut&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/linking-together.html#2024-09-18T04:25:28.062Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🕸️ &lt;a href="http://1997.webhistory.org/www.lists/www-talk.1992/0065.html"&gt;1992 mailing list post from Tim Berners-Lee&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/linking-together.html#2024-09-18T15:32:04.756Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A fascinating &lt;a href="http://1997.webhistory.org/www.lists/www-talk.1992/0065.html"&gt;1992 mailing list post from Tim Berners-Lee&lt;/a&gt; where he briefly outlines his desires for a programming language for the web — basically, what JavaScript could have been.&lt;/p&gt;
&lt;p&gt;The principles of hypertext are on full display:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You need something really powerful, but at the same time ubiquitous. Remember a facet of the web is universal readership.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then there's the PL nerdery:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ideally, the language should include object-oriented inheritance, a basically functional nature, and a clean syntax. It should be interpretable and compilable. At least one public domain. A pre-compiled standard binary form would be cool too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My favourite bit, though, is the desire for the client/server to negotiate over the language of the executable document, just like they negotiate other details. There are some wild  &lt;em&gt;isomorphism&lt;/em&gt;  implications here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, what we would be able to offer you real soon now with document format negotiation is the ability to return a document in some language for execution, with the option of being able to provide it in several languages, the language being a "data format" which can be negotiated between client and server at run-time. For, for example, one could provide it in viola script and/or in /bin/sh which would cover most ofthe unix world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://stephenfry.substack.com/p/ai-a-means-to-an-end-or-a-means-to"&gt;Stephen Fry on technology and AI&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/of-ai.html#2024-09-16T17:32:59.411Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stephenfry.substack.com/p/ai-a-means-to-an-end-or-a-means-to"&gt;Stephen Fry on technology and AI&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Machines are capable of bias, hallucination, drift and overfitting on their own, but a greater and more urgent problem in my view is their use, abuse and misuse by the three Cs . They are 
 &lt;em&gt;Countries&lt;/em&gt; 
 with their specific ambitions, paranoias, enmities and pride; 
 &lt;em&gt;Corporations&lt;/em&gt; 
 with their unaccountable rapacity and of course 
 &lt;em&gt;Criminals&lt;/em&gt; 
. All of them united by one deadly sin: greed. Greed for power, for status, for money, for control.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=M9YOO7N5jF8&amp;amp;ab_channel=KyleKabasares"&gt;ChatGPT o1 preview + mini Wrote My PhD Code in 1 Hour*—What Took Me ~1 Year&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/of-ai.html#2024-09-17T00:09:22.355Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/M9YOO7N5jF8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;💻 &lt;a href="https://observablehq.com/@tomlarkworthy/ai-written-decompiler"&gt;Test Driven Development with AI: Writing a Decompiler&lt;/a&gt; via &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/of-ai.html#2024-09-17T07:34:31.043Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I got test-driven-development working with AI ( &lt;code&gt;o1-preview&lt;/code&gt; ) and it is totally nuts. It can do complex stuff, I am making serious progress with a decompiler with it&lt;/p&gt;
&lt;p&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/ai-written-decompiler"&gt;Test Driven Development with AI: Writing a Decompiler&lt;/a&gt;. The key was feeding the test suite results back into context (plus o1-preview's ability to improve code without forgetting half the stuff in the middle)&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://www.wheresyoured.at/subprimeai/"&gt;Very AI-skeptical article&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/of-ai.html#2024-09-17T12:34:17.084Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just read this &lt;a href="https://www.wheresyoured.at/subprimeai/"&gt;very AI-skeptical article&lt;/a&gt;, that basically says that today's generative AI has no credible business model and is unlikely to improve significantly enough to get one. While I am aware of counter-arguments to the technical aspects, I wonder if there are more positive takes on the financial/business aspects, coming from anyone else than AI vendors.&lt;/p&gt;
&lt;p&gt;🤖 &lt;a href="https://dynamicland.org/archive/2017/Is_this_the_civilization_we_really_want%3F"&gt;Bret Victor on AI&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/of-ai.html#2024-09-21T02:48:27.818Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;🎙️ &lt;a href="https://www.patreon.com/posts/112141797"&gt;A new bonus episode of the FoC podcast&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W4/present-company.html#2024-09-16T03:30:31.755Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For our Patreon supporters, there's &lt;a href="https://www.patreon.com/posts/112141797"&gt;a new bonus episode of the FoC podcast&lt;/a&gt; where we try… really, we do try… to talk about the new &lt;a href="https://dynamicland.org"&gt;Dynamicland archive website&lt;/a&gt;, and the cool stuff on it. But, it's just damned hard to take all of this new material without considering a bunch of bigger picture questions about society, and visions of the future, and what it means to be "open" about your work. So hard.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-4/</guid><pubDate>Mon, 23 Sep 2024 17:02:16 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/09 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;📑 Little Languages Reading Club 🐛 Debugging in the Multiverse 💡 DrawTalking: Building Interactive Worlds by Sketching and Speaking&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;h3&gt;🎥 &lt;a href="https://youtu.be/7JG20yprxIs"&gt;warping text in webgl space&lt;/a&gt; via &lt;strong&gt;Leonard Pauli&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/two-minute-week.html#2024-09-11T18:35:59.352Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/7JG20yprxIs/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;h3&gt;💻 &lt;a href="https://git.sr.ht/~akkartik/fractions.love#readme"&gt;An editor for text that renders fractions vertically&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/share-your-work.html#2024-09-09T07:53:01.776Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A minimalist project for creating arbitrary policies for drawing text to screen while remembering where you put everything so you can respond to mouse and keyboard events.&lt;/p&gt;
&lt;h3&gt;🎥 &lt;a href="https://youtu.be/owuuFxDBQh4"&gt;Juice demo (vim++)&lt;/a&gt; via &lt;strong&gt;Zak Miller&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/share-your-work.html#2024-09-09T14:57:37.804Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/owuuFxDBQh4/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Very early days (and not as innovative as a lot of the things I see on here), but I started working on a vscode extension that takes some ideas from semantic editing to build something sort of vimlike but that has things like functions, parameters, etc as first class ideas so you can e.g. press f to select the nearest function, press q to go to parameters, and then press a to append a new parameter at the end (which adds a comma and space, or newline and space, or whatever, and then drops you in insert mode) &lt;a href="https://youtu.be/owuuFxDBQh4"&gt;Here's a little video if you're interested &lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;🧮 &lt;a href="https://howmuchis13billioneuros.com"&gt;HowMuchIs13BillionEuros.com&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/share-your-work.html#2024-09-11T21:25:47.701Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi all, I made a page to contextualize 13 billion euros (or 14): an amount owed to Ireland in an EU Apple tax case and all over the airwaves here this week. I use some pretty silly back-of-the-envelope type calculations (the same ones also repeated a lot here this week!).&lt;/p&gt;
&lt;p&gt;These calculations aren't especially interesting, but I think I'll use this example to illustrate a close link between numbers: the type that we read and report about everyday, and their formulas/workings - because all numbers have these.&lt;/p&gt;
&lt;p&gt;Here you can also change numbers in calculang (e.g. change that 13Bn to 14Bn) and related numbers on the page will flash with updates.&lt;/p&gt;
&lt;p&gt;I was glad of this exercise to focus on something a little more relatable to a simple spreadsheet, but portable and structured in terms of calculations imo, unlike a spreadsheet.&lt;/p&gt;
&lt;p&gt;And I needed to face a wee small bit about the pains of finding data, and even afterwards: "linking" to it 🤒 (i did a lot of c&amp;amp;p hardcode :dotted_line_face:)&lt;/p&gt;
&lt;p&gt;The page is: &lt;a href="https://howmuchis13billioneuros.com"&gt;HowMuchIs13BillionEuros.com&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=qWlTxQAcFQQ"&gt;Future of Coding Schrödinger's Wiki as a Gloodata Plugin&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/share-your-work.html#2024-09-12T10:38:49.214Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/qWlTxQAcFQQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;My contribution to the wikijam: &lt;a href="https://www.youtube.com/watch?v=qWlTxQAcFQQ"&gt;Schrödinger's Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A wiki with  &lt;em&gt;all the articles&lt;/em&gt;  in it, each page "collapses" into existence on the first observation/visit.&lt;/p&gt;
&lt;p&gt;The generation process uses Slack messages, podcast transcripts and community-adjacent papers to produce articles grounded in FoC's ideas.&lt;/p&gt;
&lt;p&gt;It also has hypermedia features to navigate and explore the references in the same application.&lt;/p&gt;
&lt;h3&gt;📊 &lt;a href="http://graph.cubode.com"&gt;graph.cubode.com&lt;/a&gt; via &lt;strong&gt;Rebeca Garcia&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/share-your-work.html#2024-09-12T11:16:46.586Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey guys, we built, documented, and soft-launched &lt;a href="http://graph.cubode.com"&gt;graph.cubode.com&lt;/a&gt; using agentic AI technology.&lt;/p&gt;
&lt;p&gt;It’s a basic micro platform that auto-generates customisable graphs from csv your data files, it then renders an embeddable web component and we’ve used echarts, which we’re very happy with.&lt;/p&gt;
&lt;p&gt;It took us one month to build it and another month to ship it, (highlighting a potential opportunity in AI deployment infrastructure). We’re rolling out new features weekly like a filtering settings, improvements in the AI Engine or pulling data from Notion DBs directly,  we’re gathering user feedback to refine the UX and functionalities if you use it and like it/dislike it let me know!&lt;/p&gt;
&lt;p&gt;Or if anyone is interested in the Medium articles look for Cubode and they’re all there with step by step guides on AI architecting.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07LXT0J09L.mp4"&gt;Cubode Product Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;h3&gt;📝 &lt;a href="https://programmingsimplicity.substack.com/p/peeking-behind-the-curtain?r=1egdky"&gt;Peeking Behind the Curtain&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/devlog-together.html#2024-09-13T09:42:00.470Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a one-liner reply to someone turned into something with more lines than 1 ...&lt;/p&gt;
&lt;p&gt;My biggest interest is in thinking about  &lt;em&gt;programming&lt;/em&gt;  instead of  &lt;em&gt;coding&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Make reprogrammable electronic machines do something using whatever means possible.&lt;/p&gt;
&lt;p&gt;ATM, I'm using &lt;a href="http://draw.io"&gt;draw.io&lt;/a&gt;[1] to draw programs, then t2t to compile &lt;a href="http://draw.io"&gt;draw.io&lt;/a&gt;'s XML (graphML[2]) to code (say Python), then run.&lt;/p&gt;
&lt;p&gt;Articles on my desktop, awaiting attention (coded and running and in github, but need more expansive docs and/or people with more energy) ...&lt;/p&gt;
&lt;h3&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/devlog-together.html#2024-09-14T15:33:56.892Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've got a REPL loaded up with all of FoC archives.&lt;/p&gt;
&lt;p&gt;Just Lua, not something powerful like Common Lisp or Smalltalk. Still quite nice.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;h3&gt;🗭 &lt;a href="https://futureofcoding.org/episodes/073"&gt;My reaction to something mentioned in the latest FoC podcast &lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/thinking-together.html#2024-09-10T14:42:54.057Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FWIW, my reaction to something mentioned in the latest FoC podcast (&lt;a href="https://futureofcoding.org/episodes/073"&gt;futureofcoding.org/episodes/073&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;Computer Science isn’t about  &lt;em&gt;programming&lt;/em&gt; . Computer Science is about mapping computational thinking into the digital domain and discovering problems in an ad-hoc manner, then fixing the problems to make the mapping work on reprogrammable electronic machines.&lt;/p&gt;
&lt;h3&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/thinking-together.html#2024-09-12T00:50:08.402Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I started my law firm, I thought everything I knew about a client matter needed to be in "the file". I wasted a lot of time moving things that were perfectly fine where they were. I realized that "the file" was a naive metaphor I took from law firms pre-cloud. That changed my outlook about data models. I don't want my digital model of things to mimic the real world artifacts involved, and spend a lot of time trying to explain to my colleagues that just because a person files a motion by delivering a real or digital pile of pages with real or digital ink on them doesn't mean that the document and the motion are the same thing. A motion doesn't have a page orientation, and a document isn't potentially vexatious. But when I argue that we should be modeling the domain, not only the artifacts, my colleagues — who are all also former lawyers — don't seem to disagree so much as act as though I'm speaking heavenly script. Does anyone have any tips for persuading people who haven't been converted to the wisdom of domain modeling that maybe our systems should deal with the things we care about, and not only the things we can download or touch?&lt;/p&gt;
&lt;h3&gt;📱 &lt;a href="https://www.youtube.com/watch?v=qe5dJCRWifo"&gt;Huawei's triple foldable display phone&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/thinking-together.html#2024-09-12T08:35:28.675Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/qe5dJCRWifo/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Could &lt;a href="https://www.youtube.com/watch?v=qe5dJCRWifo"&gt;Huawei's triple foldable display phone&lt;/a&gt; combined with software like &lt;a href="https://www.samsung.com/us/apps/dex/"&gt;Samsung Dex&lt;/a&gt; liberate portable devices from being consumption-oriented devices? 🤔&lt;/p&gt;
&lt;p&gt;Apple has kept a strong hold on keeping ipadOS from threatening macOS. But the Android ecosystem does not have that limitation (see &lt;a href="https://waydro.id/"&gt;Waydroid&lt;/a&gt; or &lt;a href="https://blissos.org/"&gt;BlissOS&lt;/a&gt; or &lt;a href="https://postmarketos.org/"&gt;PostmarketOS&lt;/a&gt; for example)&lt;/p&gt;
&lt;p&gt;Projecting in the future, we might even get briefcase size displays/machines that unfold into a full tabletop-style communal computing interface.&lt;/p&gt;
&lt;h3&gt;🍰 &lt;a href="https://mastodon.social/@spiralganglion/113139647325964835"&gt;The main ideas behind Hest are...&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/thinking-together.html#2024-09-15T04:26:42.150Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mastodon.social/@spiralganglion/113139647325964835"&gt;Reposting ;)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Periodic self-reminder.&lt;/p&gt;
&lt;p&gt;The main ideas behind Hest are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nobody’s made a good computer code out of things moving through space.&lt;/li&gt;
&lt;li&gt;Moving through space is also about moving through time. Rewind is table stakes.&lt;/li&gt;
&lt;li&gt;If moving through space is meaningful, then space itself is part of that meaning. Position, distance, velocity — they mean something.&lt;/li&gt;
&lt;li&gt;You can do things with this meaningful space-time visual code that you simply can't do in a non-moving visual code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🤔 Are there languages that emphasize the single-datum &amp;lt;=&amp;gt; collection-of-data duality? by &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/thinking-together.html#2024-09-15T14:01:53.644Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Are there languages that emphasize the single-datum &amp;lt;=&amp;gt; collection-of-data duality?  E.g. making loop-with- &lt;code&gt;if&lt;/code&gt;  &amp;lt;=&amp;gt;  &lt;code&gt;filter&lt;/code&gt; -on-the-whole look very similar?&lt;/p&gt;
&lt;p&gt;But that's just a programming curiousity; I'm more interested if there are any mind bicycles that help one think about local vs. global rules?&lt;/p&gt;
&lt;p&gt;Physics is rich with examples where seeing both perspectives is insightful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local  &lt;em&gt;F = ma&lt;/em&gt;  &amp;lt;=&amp;gt; conservation of  &lt;em&gt;potential energy&lt;/em&gt;  independent of specific path (for certain forces)&lt;/li&gt;
&lt;li&gt;Gauss's laws relating single-point "differential" &amp;lt;=&amp;gt; volume/surface "integral" &lt;a href="https://en.wikipedia.org/wiki/Maxwell%27s_equations#Formulation_with_Gaussian_quantities"&gt;formulations of Maxwell equations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Noether%27s_theorem"&gt;Noether's theorem&lt;/a&gt; is certainly up there, relating shapes of laws with conserved stuff, but I'll admit over my head...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example task: For a while now I've dreamed of making a model of weather that's simple enough for paper+pen+tokens, or generally something "board game-ish".  Lies-to-children are fine, but would like it to demonstrate at least basic mechanics: (A) wind caused by hotter air rising and leaving a vacuum; (B) evaporation over sea =&amp;gt; rain over land (C) "&lt;a href="https://en.wikipedia.org/wiki/Rain_shadow"&gt;rain shadow&lt;/a&gt;" beyond a mountain (my country has this).&lt;/p&gt;
&lt;p&gt;It's not easy to discretize continuous-quantity equations into something like a cellular automaton...  I'm leaning towards representing conserved quantities like water with tokens you can move, rather than per-cell state.&lt;/p&gt;
&lt;p&gt;And I don't want some huge "simulation"—I'd love to find rules that can demonstrate these processes in few enough steps to follow by hand.&lt;/p&gt;
&lt;p&gt;Hmm say I have air that wants to go up + right, and it holds just 1 water token—which way do I move it?  Well I suppose I want a bit larger numbers so quantization won't matter that much...  And I probably want alternating horizontal vs. vertical game phases (also dealing with 1D slice at a time can reduce previous-vs-next-state confusions).&lt;/p&gt;
&lt;p&gt;Any advice for tools to help think about rules/mechanics and what can emerge from them,  &lt;em&gt;beyond&lt;/em&gt;  "try and see what what happens"?&lt;/p&gt;
&lt;p&gt;(But I guess I really should play with large "sand" style models, then try to scale down! try-and-see  &lt;em&gt;is&lt;/em&gt;  more powerful than merely keeping in my head.)&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;h3&gt;📑 &lt;a href="https://github.com/Little-Languages/reading-club/tree/main/topics"&gt;Little Languages - Reading Club&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/linking-together.html#2024-09-09T09:30:39.142Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Little-Languages/reading-club/tree/main/topics"&gt;Little Languages - Reading Club&lt;/a&gt; a list of reading resources around programming languages organized by topic&lt;/p&gt;
&lt;h3&gt;💡 &lt;a href="https://ktrosenberg.github.io/drawtalking/DrawTalking.pdf"&gt;DrawTalking: Building Interactive Worlds by Sketching and Speaking&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/linking-together.html#2024-09-10T10:36:26.450Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Don't know if this already got linked here but... very cool paper about creating interactive scenes by drawing and talking&lt;/p&gt;
&lt;h3&gt;🐛 &lt;a href="https://antithesis.com/blog/multiverse_debugging/"&gt;Debugging in the Multiverse&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/linking-together.html#2024-09-10T15:19:03.835Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Antithesis simulates a purely deterministic universe. The reasons we do that are to find bugs faster, and to make them perfectly reproducible once found.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;🤔 &lt;a href="https://xkcd.com/1988/"&gt;Containers&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/linking-together.html#2024-09-12T16:36:38.568Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/1988/"&gt;This XKCD&lt;/a&gt; still hits with the force of revelation 5 years later.&lt;/p&gt;
&lt;h3&gt;🧦🎥 &lt;a href="https://youtu.be/uI7J3II59lc"&gt;Hypercard in the World, May 2016&lt;/a&gt; via &lt;a href="https://pel-daniel.github.io/cv/"&gt;Daniel Garcia&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/linking-together.html#2024-09-13T02:08:29.411Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/uI7J3II59lc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/uI7J3II59lc"&gt;HyperCard in the world&lt;/a&gt;. A laser-powered live-programming environment for the real world.&lt;/p&gt;
&lt;h3&gt;📝 &lt;a href="https://github.com/ianarawjo/notate-jupyter"&gt;a turnkey solution for making inline canvases as a Jupyter extension&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W3/linking-together.html#2024-09-13T22:37:09.703Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There might be &lt;a href="https://github.com/ianarawjo/notate-jupyter"&gt;a turnkey solution for making inline canvases as a Jupyter extension&lt;/a&gt;. Good luck identifying logical objects, but there must be some advantages over drag-and-drop. I'd use this for my current prototype but that my target domain's existing DSL is not (yet) graphical. For any other paper tool, diagram, nonlinear algebraic notation, what have you, there is a lot of potential.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-3/</guid><pubDate>Sun, 15 Sep 2024 21:17:41 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/09 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;📢 PAINT &amp;amp; Causal Islands Berlin 💻 Decode: an augmented coding canvas 🎥 Roboco-op: mimetic engineering&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/two-minute-week.html#2024-09-02T22:54:58.390Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Working on performance improvements now. Getting some &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07K5QJ25NK.mp4"&gt;nice visual effects thanks to uninitialized memory.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🧑‍🔬 Account of the research project we’re doing at JetBrains by &lt;strong&gt;Pavel Mikhailovskii&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/share-your-work.html#2024-09-04T07:55:52.259Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone!&lt;/p&gt;
&lt;p&gt;I’d like to give an account of the research project we’re doing at JetBrains.&lt;/p&gt;
&lt;p&gt;It is called Ludwig after Ludwig Wittgenstein and has an ambitious goal of re-engineering the foundations of the software development stack.&lt;/p&gt;
&lt;p&gt;At the moment, we are still at a very early design and prototyping stage, but we believe that this project will let us create the next generation of development tools.&lt;/p&gt;
&lt;p&gt;Here are the most important ideas we’re trying to materialize:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Liberation of code from the shackles of textual representation&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Human-readable textual notations were a great innovation back in the 1950s. However, we have made great progress in the ways we store complex data structures since then, and the typical codebase sizes have also grown by a few orders of magnitude.&lt;/p&gt;
&lt;p&gt;Code is essentially a graph with one tree-like perspective more important than others. An adequate way of storing such complex and evolving data as code would be to put it in a versioned graph / linked document database, supporting Git-like branching and merging. That would get rid of the need for continuous parsing, indexing, symbol resolution and typechecking that constitute the code editing workflow in modern IDEs.  We would resolve symbols once, at the moment of typing and store their unique identifiers (not just names!) in an indexed by construction and preserving referential integrity database.&lt;/p&gt;
&lt;p&gt;That would also make such intentions as Rename, Move, Find Usages or Go To Definition trivial to implement. Of course, structural representation of code will come hand-in-hand  with structural (semantic) diff and merge.&lt;/p&gt;
&lt;p&gt;This graph-like representation should allow for a fine-grained tracking of changes and dependencies and dramatically reduce feedback times in such scenarios as incremental compilation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A minimalist approach towards programming language design&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;To prevent our language from becoming “fat and weak” as John Backus has put it in his famous &lt;a href="https://dl.acm.org/doi/pdf/10.1145/359576.359579"&gt;lecture&lt;/a&gt;, we want to pass our language through a series of aggressive optimization rounds or distillation passes.&lt;/p&gt;
&lt;p&gt;This should result in something comparable with Smalltalk’s “syntax on a postcard”. Actually, we believe that we could make it even more symmetric by eliminating the distinctions between methods, named and anonymous functions, operators and statements. (As you know, Smalltalk has different syntaxes and different behavior of return statements for methods and blocks and “surprising” execution order rules for different kinds of messages).&lt;/p&gt;
&lt;p&gt;The goal is to come up with a language that would be easy to learn and read and straightforward to reason about for all kinds of agents-be it humans, static analysis tools or AI.&lt;/p&gt;
&lt;p&gt;In terms of notation, it will look like an indentation-based syntax for a tiny subset of Lisp, but without its macros or the zoo of “special forms”. Being freed from the limitations of plain text, we’re going to use semantic coloring to make the notation even more expressive and compact.&lt;/p&gt;
&lt;p&gt;Obviously, our programming language, as any other, should be able to express computation logic and code structure; what is less common is that we also want it to be able to express data, configurations and knowledge, thus eliminating the need for additional DSLs. A YAML-like data notation emerges from our tiny language as naturally as JSON emerged from JavaScript. The only difference is that JSON was discovered by chance, and our language is consciously designed to be able to declaratively describe complex data structures.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Unification of Object-Oriented and Functional programming&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;As a part of our minimalist program, we are aiming to heal the great schism that divided programming into the object-oriented and the functional worlds.&lt;/p&gt;
&lt;p&gt;We believe that the class-free approach in the form &lt;a href="https://youtu.be/DxnYQRuLX7Q"&gt;proposed&lt;/a&gt; by Douglas Crockford will let us make OOP an integral part of functional programming, thus converging the two into what could be called unified programming. This form of OOP will keep the best parts—encapsulation and polymorphism and get rid of the "considered harmful" implementation inheritance.  There will be no need for classes, constructors, prototypes, visibility modifiers, this and new - just immutable structures and anonymous functions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An IDE designed for focus and context awareness&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;We want to build an immersive Smalltalk-like environment with structural navigation, a smaller editing scope and richer and more dynamic context compared to the traditional file- and text-based IDEs. This seems well-aligned with both the minimalist design of the language and the non-textual storage format. The latter should allow us to store some additional information alongside the code. That will include all kinds of metadata, normally invisible to the users, but also some unusual forms of embedded content. Think of a documentation comment containing a video explaining the algorithm or a discussion between multiple developers linked to a certain place in the code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Smart typing&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;We also have some ideas on how we could implement some smart typing techniques, combining the convenience of automatic type inference with the solidness and discipline of explicit type annotations.&lt;/p&gt;
&lt;p&gt;The key idea is that the flexibility of the non-textual representation will eliminate the need for the user to choose between the two worlds. Manual annotations can be hidden to reduce visual distraction, automatically inferred types can be displayed and persisted in the code database, etc.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Designed to be AI-fitting&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Finally, we want the whole thing to be future-proof and provide better support for AI-aided development compared to the traditional languages. The simplicity of the language as well as its fine granularity and its property of always having all the symbols resolved should allow for high-quality “understanding” and retrieval-augmented generation of code compared to such languages as Python or Java.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As I said, at the moment we’re still at a very early stage. Many of our challenges are not technical, but about finding the way of how we could shape this set of ideas into a product vision. We are, of course, open to collaboration with like-minded people.&lt;/p&gt;
&lt;p&gt;I will be happy to answer your questions and hear your feedback.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/DxnYQRuLX7Q"&gt;code::dive 2017 – Douglas Crockford – The better parts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="code::dive 2017 – Douglas Crockford – The better parts" src="https://i.ytimg.com/vi/DxnYQRuLX7Q/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;💬 &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/share-your-work.html#2024-09-06T12:13:10.441Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Added tabular data and document template import to my notebook demo so now it can be used to fill/generate documents from csv/spreadsheet rows. Would any of you find something like this useful? I know there are a bunch of document generators, but the ones I've seen seem kinda crappy. Happy to hear about experiences using any of the existing solutions and why they suck though 😆.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07L925PQN7.mp4"&gt;Document Generation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://duncancragg.substack.com/about"&gt;About - The Parallel Reality Computer&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/share-your-work.html#2024-09-08T14:11:20.701Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hiya folks, now that many of you have been digging in to Dynamicland's website for a bit and are in the right frame of mind, I was hoping that you may have had your neurons tickled in just the right ways to be open to reading about a project with some similarities: mine! 🤗&lt;/p&gt;
&lt;p&gt;So I updated my About page, and I was hoping that it's now short and accessible enough to be just the info needed for you to "get" what my project is all about:&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://duncancragg.substack.com/about"&gt;About - The Parallel Reality Computer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/devlog-together.html#2024-09-05T02:17:23.000Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Still lots missing, but &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07KTFXV45C.webm"&gt;check this out.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lol, look at how it renders hyperlinks. This isn't going to be useful without some sort of delimiter or fence around math.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fractions-bug.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07LD4W9PQV.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;🪼 &lt;a href="https://m.youtube.com/watch?si=VpS2zmWQgoVUkvid&amp;amp;v=3OmkehAJoyo&amp;amp;feature=youtu.be"&gt;Physics of JellyCar: Soft Body Physics Explained&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/thinking-together.html#2024-09-03T03:05:46.830Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/3OmkehAJoyo/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;What are ways we can make computation more squishy with soft-body physics? Most visual notations are overwhelmingly rigid and structured!&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;💻 &lt;a href="https://getdecode.dev"&gt;Decode&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-03T15:59:33.701Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://getdecode.dev"&gt;Decode&lt;/a&gt; — a new tldraw-based augmented coding canvas tool from &lt;strong&gt;@Francois Laberge&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://www.researchgate.net/publication/342855224_Situated_Computations_Bridging_Craft_and_Computation_in_the_Trinidad_and_Tobago_Carnival"&gt;Situated Computations: Bridging Craft and Computation in the Trinidad and Tobago Carnival&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-03T21:20:30.511Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a paper from an architectural journal that combines an ethnography with a sculptural grammar ('situated computations').&lt;/p&gt;
&lt;p&gt;🧦 &lt;a href="https://dynamicland.org/"&gt;dynamicland.org&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-04T14:35:53.288Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hear &lt;a href="https://dynamicland.org/"&gt;dynamicland.org&lt;/a&gt; will update sometime today..&lt;/p&gt;
&lt;p&gt;💡 &lt;a href="https://dynamicland.org/donate/"&gt;Donate to dynamicland&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-04T21:55:15.501Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Somewhat buried in the new DL webpage — you can now directly &lt;a href="https://dynamicland.org/donate/"&gt;donate&lt;/a&gt; to support their work. This is absolutely the sort of thing I'd back on Patreon, so I'm glad to see they offer those sorts of $n/month options.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://www.washingtonpost.com/opinions/interactive/2024/michael-lewis-chris-marks-the-canary-who-is-government/"&gt;The Canary&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-05T05:09:24.078Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No coding here, but this is fantastic.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.washingtonpost.com/opinions/interactive/2024/michael-lewis-chris-marks-the-canary-who-is-government/"&gt;The Canary&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And yet even now his father hovered in the background both as a rhyme and a presence. The careers of both men had been redirected by a simple question posed in a college class. Both spent their lives measuring the stress in stone. Both used scientific methods to answer questions that had seemed to everyone else beyond the reach of science. Both sought to understand what prevented roofs from collapsing. The father’s work had received a lot of public attention and the son’s had not. But that was just an accident of what people cared about. A lot of people cared about Gothic cathedrals; fewer were concerned with whatever was happening to workers deep underground.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;📢 &lt;a href="https://2024.splashcon.org/series/paint"&gt;PAINT: Programming Abstractions and Interactive Notations, Tools, and Environments&lt;/a&gt; via &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-05T20:50:16.344Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looking at SPLASH '24 program, I knew &lt;a href="https://liveprog.org"&gt;LIVE&lt;/a&gt; workshop is always very relevant (this year majority of lectures involve folks here); but also found &lt;a href="https://2024.splashcon.org/series/paint"&gt;PAINT&lt;/a&gt; which sounds great too 👀&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the workshop on Programming Abstractions and Interactive Notations, Tools, and Environments (PAINT), we want to discuss programming environments that support users in working with and creating notations and abstractions that matter to them. We are interested in the relationship between people centric notations and general-purpose programming languages and environments. How do we reflect the various experiences, needs, and priorities of the many people involved in programming — whether they call it that or not?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Areas of interest to PAINT include but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design and implementation of program representations and their means of interaction for end-users of all ages&lt;/li&gt;
&lt;li&gt;Design and implementation of visual programming environments&lt;/li&gt;
&lt;li&gt;Block-based environments and their application&lt;/li&gt;
&lt;li&gt;Projectional editors and their application&lt;/li&gt;
&lt;li&gt;Languages and their environments with mixed notations&lt;/li&gt;
&lt;li&gt;Meta tools or tool creation frameworks&lt;/li&gt;
&lt;li&gt;Methods to support working with abstractions, such as example-based programming&lt;/li&gt;
&lt;li&gt;Input and output devices for interacting with programming environments&lt;/li&gt;
&lt;li&gt;Theories of the above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PAINT format is flipped, kinda critical review, and not recorded IIUC.  But the past papers look interesting.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://graydon2.dreamwidth.org/313862.html"&gt;A note on the PERQ computer&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-07T14:29:44.991Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A fun little rollercoaster of computing history shared in &lt;a href="https://graydon2.dreamwidth.org/313862.html"&gt;this short blog post&lt;/a&gt; by Graydon Hoare, looking at the lesser known Xerox Alto descendant, the PERQ.&lt;/p&gt;
&lt;p&gt;📢 &lt;a href="https://berlin.causalislands.com/"&gt;Causal Islands Berlin&lt;/a&gt; via &lt;a href="https://twitter.com/OrionReedOne"&gt;Orion Reed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-07T15:38:24.618Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://berlin.causalislands.com/"&gt;Causal Islands Berlin&lt;/a&gt; conference (organised by me, Boris Mann, and Jack Rusher) is happening next month (Oct 4 &amp;amp; 5). Would love to see some of you there. It'll be quite small (100-ish capacity) but loaded with great talks and conversations. We'll also be doing a more full-size conference in May next year. The vibes are "future of computing" and "spiritual successor to Strange Loop" with a more socio-political bent.&lt;/p&gt;
&lt;p&gt;Also, there is a &lt;a href="https://causalislands.getgrist.com/forms/4n86BCQeVyR3EsBMEDqjTK/7"&gt;CfP&lt;/a&gt; up if you want to submit a presentation!&lt;/p&gt;
&lt;p&gt;🧑‍💻 &lt;a href="https://ianarawjo.com/docs/To_Write_Code_Arawjo_CHI2020.pdf"&gt;To Write Code: The Cultural Fabrication of Programming Notation and Practice&lt;/a&gt; via &lt;strong&gt;Joel Chan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/linking-together.html#2024-09-07T18:44:24.210Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;greetings! am thoroughly enjoying &lt;a href="https://futureofcoding.org/episodes/073"&gt;the latest podcast episode on agentsheets&lt;/a&gt;, and the discussion of “is programming a Language(TM)” and the history of how it came to be that programming was considered language in the sense of “has a formal grammar” reminded me of this paper by Ian Arawjo on the history of programming notation and its cultural referents (e.g., typewriters, and how it moved away from more “visual” forms and converged around “programming as typing on a typewriter”: &lt;a href="https://ianarawjo.com/docs/To_Write_Code_Arawjo_CHI2020.pdf"&gt;To Write Code: The Cultural Fabrication of Programming Notation and Practice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;i found the resulting frame of programming as translation work of “mapping one culture to another” provocative too!&lt;/p&gt;
&lt;p&gt;&lt;img alt="CleanShot 2024-09-07 at 14.41.31@2x.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07KZFYA5U7.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="CleanShot 2024-09-07 at 14.43.59@2x.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07LE2V8D1Q.png"&gt;&lt;/p&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/of-ai.html#2024-09-03T04:01:21.046Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TIL:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07KZPXHKT3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07KM4A5GSE.png"&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=8cNRZUZSSS8"&gt;Roboco-op explainer&lt;/a&gt; via &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W2/of-ai.html#2024-09-06T14:26:18.361Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/8cNRZUZSSS8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I thought I had shared roboco-op here but it seems I had not. The idea is to mix code/runtime/chat context into a single materialised human editable representation to enable "mimetic engineering". Copy and pasting "skills" between notebooks and therefore engineering the AIs context to suit the task at hand, all while having a machine checked code based conversation (I demoed this at Berlin's GenAI meetup) withou context switches.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-2/</guid><pubDate>Mon, 09 Sep 2024 07:59:35 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/09 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎙️ FoC 73 • Moving Beyond Syntax 📢 Onward! and LIVE Papers Announced 🧦 Hypercard in the World &lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Karl Svartholm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/two-minute-week.html#2024-08-26T07:03:30.113Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trying to make Duplo more interesting... So far it is working (probably), seem to have encouraged my daughter to learn to stack two pieces together! 😃&lt;/p&gt;
&lt;p&gt;Actually the next step after a fanfare is probably (not the stars but) to have pieces make different sounds and/or beats depending on sensors (ex sensing colors, stacking, proximity or sound) — a music machine. Perhaps more important: a programmer base plate; where you stack pieces &amp;amp; program them (from ex Arduino studio, for now). Inter-piece communication could also be interesting? Ideas?&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07JD745561.mp4"&gt;Video 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07J1GQ3VGX.mp4"&gt;Video 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_20240826_084224.jpg" src="http://history.futureofcoding.org/history/msg_files/F07/F07JJHZ4FC4.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎙️ &lt;a href="https://futureofcoding.org/episodes/073"&gt;Future of Coding 73 • Moving Beyond Syntax: Lessons from 20 Years of Blocks Programming in AgentSheets by Alexander Repenning&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/share-your-work.html#2024-08-25T21:34:12.182Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, a title with appropriate length given the duration and depth of its episode. May it swiftly be surpassed.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Alexander_Repenning"&gt;Alexander Repenning&lt;/a&gt; created &lt;a href="https://en.wikipedia.org/wiki/AgentSheets"&gt;AgentSheets&lt;/a&gt;, an environment to help kids develop computational thinking skills. It wrapped an unusual computational model with an even more unusual user interface. The result was divisive. It inspired so many other projects, whilst being rejected at every turn and failing to catch on the way Scratch later did. So in 2017, Repenning published this obit of a paper, &lt;a href="https://agentsheets.com/img/educators/20YearsofBlockProgramingLessonsLearned_published.pdf"&gt;Moving Beyond Syntax: Lessons from 20 Years of Blocks Programming in AgentSheets&lt;/a&gt;, which covers his findings over the years as AgentSheets evolved and transformed, and gives perspective on block-based programming, programming-by-example, agents / rule / rewrite systems, automata, and more.&lt;/p&gt;
&lt;p&gt;This is probably the most “normal” episode we’ve done in a while — we stay close to the text and un-clam many a thought-tickling pearl. I’m saying that sincerely now to throw you off our scent the next time we get totally lost in the weeds. I hear a clock ticking.&lt;/p&gt;
&lt;p&gt;🤔 &lt;a href="https://marianoguerra.github.io/experiments/bloquecitos/"&gt;Bloquecitos: the ultimate visual programming language&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/share-your-work.html#2024-08-26T17:11:20.129Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Inspired by the podcast episode above I created bloquecitos: the ultimate visual programming language&lt;/p&gt;
&lt;p&gt;Try it here: &lt;a href="https://marianoguerra.github.io/experiments/bloquecitos/"&gt;marianoguerra.github.io/experiments/bloquecitos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07J4HZ7BD5.mp4"&gt;Bloquecitos Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/devlog-together.html#2024-08-28T19:03:30.150Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Leveling up goals: a shower thought&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Life: "cells maintain the environment in which RNA molecules originated." (&lt;a href="https://www.tim-taylor.com/assets/docs/barricelli-suggestions-for-starting-theoretic-papers-6-6-1987.pdf"&gt;tim-taylor.com/assets/docs/barricelli-suggestions-for-starting-theoretic-papers-6-6-1987.pdf&lt;/a&gt;; page 2)&lt;/li&gt;
&lt;li&gt;Bureaucracy: you create a system that can outlive you. The system outlives its own usefulness.&lt;/li&gt;
&lt;li&gt;Permaculture: design systems to try to make themselves less and less necessary to the functioning of the ecosystem. (&lt;a href="https://merveilles.town/@neauoire/113040776489493243"&gt;merveilles.town/@neauoire/113040776489493243&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://web.archive.org/web/20110604050051/https://www.aaai.org/Papers/ICMAS/1995/ICMAS95-042.pdf"&gt;BDI Agents: From Theory to Practice&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/reading-together.html#2024-08-28T11:52:29.439Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LLMs are forcing me to think about non-deterministic yet rational "computation".&lt;/p&gt;
&lt;p&gt;Agents are beyond what traditionally computation has been. When an agent starts performing a task, and the environment changes, they need to find the balance between too much rethinking (classical decision theory) and not enough rethinking (computation).&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07JPFEFU9L.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Guyren Howe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/thinking-together.html#2024-08-28T05:35:23.121Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just had a thought.&lt;/p&gt;
&lt;p&gt;Is anyone aware of any work on a non-programmer-friendly UI for editing pattern matching? Semantically, I’m looking for Datalog. So I guess a Datalog query UI, although I could imagine a pattern matching UI being developed outside of a use with Datalog.&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/thinking-together.html#2024-08-28T18:54:49.168Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m trying to figure out why you (&lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;) think that using OhmJS to produce the wiki would create a dependency, while I (&lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;) don’t think so.  Here’s a diagram of how I understand the situation...&lt;/p&gt;
&lt;p&gt;&lt;img alt="tonedown.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07JYNX5FFU.png"&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/thinking-together.html#2024-08-30T08:49:42.404Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been thinking about how neurosymbolic AI might be achieved. The first problem is that of memory/knowledge. Triple stores are often recommended. But I am failing to see how triples are THE definitive choice for knowledge representation.&lt;/p&gt;
&lt;p&gt;The classic example would be: How to store the fact "Bob's age is 23yrs". This maps to the Entity-Attribute-Value or Subject-Predicate-Object pattern and the triple  &lt;code&gt;(Bob, age, 23yrs)&lt;/code&gt;  works.&lt;/p&gt;
&lt;p&gt;But on one hand, even a 2-store can be used:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;(Bob, Bob's age)

(Bob's age, 23yrs)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This has more layers of indirections, yes. But the primitives become simpler.&lt;/p&gt;
&lt;p&gt;On the other hand, if the fact was "Bob bought this camera in Singapore for 100$", the same layers of indirections show up in triple stores as well.&lt;/p&gt;
&lt;p&gt;Arbitrary knowledge seems multidimensional (time, place, context etc etc). Is there a reason to believe that triple stores achieve the best tradeoff between simplicity and expressivity?&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://www.scattered-thoughts.net/log/0048/#zest-ordering"&gt;0048: zest progress, zest ordering, wasm alignment, umbra papers, future of fast code, new internet, books, other stuff&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/thinking-together.html#2024-09-01T03:17:16.476Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone have thoughts about equality vs ordering in maps/sets?&lt;/p&gt;
&lt;p&gt;I have some pondering here - &lt;a href="https://www.scattered-thoughts.net/log/0048/#zest-ordering"&gt;scattered-thoughts.net/log/0048/#zest-ordering&lt;/a&gt; but the decision tree at the end is the main thing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Order isn't observable at all.&lt;/li&gt;
&lt;li&gt;Iteration order is either non-deterministic or expensive.&lt;/li&gt;
&lt;li&gt;Determism can be manually recovered by storing both a map and a list of keys, but at the cost of storing two copies of each key.&lt;/li&gt;
&lt;li&gt;Order is observable.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Order doesn't affect equality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Equality is not extensional ie  &lt;code&gt;a == b&lt;/code&gt;  does not imply that  &lt;code&gt;f(a) == f(b)&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If  &lt;code&gt;[a: 0, b: 1] == [b: 1, a: 0]&lt;/code&gt;  then we must have  &lt;code&gt;struct[a: i64, b: i64] == struct[b: i64, a: i64]&lt;/code&gt; , but we still have to remember that the field order is different, which implies that type equality can't rely on interning and pointer comparison.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Order affects equality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sets become surprising / less useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If I want to add query planning, I can't promise that  &lt;code&gt;f(db) == optimize-query(f)(db)&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;💡 &lt;a href="https://2024.splashcon.org/track/splash-2024-Onward-Essays#event-overview"&gt;SPLASH 2024 - Onward! Essays - SPLASH 2024&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/linking-together.html#2024-08-26T06:21:09.818Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The accepted contributions to &lt;a href="https://2024.splashcon.org/track/splash-2024-Onward-Essays#event-overview"&gt;Onward! Essays&lt;/a&gt; and &lt;a href="https://2024.splashcon.org/track/splash-2024-Onward-papers#event-overview"&gt;Onward! papers&lt;/a&gt; have been announced. Many of the titles/abstracts sound very relevant for our community. And three essays have authors from FoC.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=si9iqF5uTFk&amp;amp;t=1s"&gt;Capt. Grace Hopper on Future Possibilities: Data, Hardware, Software, and People (Part One, 1982)&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/linking-together.html#2024-08-29T09:57:05.887Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/si9iqF5uTFk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Capt. Grace Hopper on Future Possibilities: Data, Hardware, Software, and People, 1982&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Part One&lt;/em&gt; * &lt;a href="https://www.youtube.com/watch?v=si9iqF5uTFk&amp;amp;t=1s"&gt;youtube.com/watch?v=si9iqF5uTFk&amp;amp;t=1s&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;20:58 - We’ve Always Done It This Way&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;47:10 - Systems Of Computers, Not Bigger Computers&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;48:00 - Get Out Of The Plane Of Paper&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Part Two&lt;/em&gt; * &lt;a href="https://www.youtube.com/watch?v=AW7ZHpKuqZg"&gt;youtube.com/watch?v=AW7ZHpKuqZg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;0:00 - Security&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;8:42 - Bloatware&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;9:57 - 2FA&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;12:12 - Specialized Machines Are Faster Than General Purpose Machines&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;12:59 -We Have To Overcome The Concept Of Only One Computer&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;14:58 - Dependency Analysis&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;18:53 - Use independent modules&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;22:15 - Advocate the use of standard high level languages&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;27:19 - Buying Computer Time&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;34:49 - Management vs. Leadership&lt;/em&gt; *&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://programmingsimplicity.substack.com/p/capt-grace-hopper-on-future-possibilities?r=1egdky"&gt;my thoughts on the above issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🧦🎥 &lt;a href="https://www.youtube.com/watch?v=uI7J3II59lc"&gt;Hypercard in the World, May 2016&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/linking-together.html#2024-08-29T19:32:54.524Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/uI7J3II59lc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Just in case you missed it&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://vimeo.com/451278506"&gt;Subtext 1&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/linking-together.html#2024-08-29T22:36:31.598Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/946055606-52ef32281796f0ef4be3ccc079e6346ca12f6c6d341b7f81a906827058b7e17e-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I had no idea &lt;a href="https://twitter.com/jonathoda/"&gt;Jonathan Edwards&lt;/a&gt;'s landmark Subtext is almost 20 years old.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/451278506"&gt;Subtext 1&lt;/a&gt; (2005) is still hugely compelling. I hadn't watched this until today. If you're like me, you're in for a treat.&lt;/p&gt;
&lt;p&gt;This work predates Bret Victor's &lt;a href="https://vimeo.com/906418692"&gt;"Inventing on Principle"&lt;/a&gt; by 7 years!&lt;/p&gt;
&lt;p&gt;📑 &lt;a href="https://liveprog.org/"&gt;Workshop on Live Programming (LIVE)&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/linking-together.html#2024-08-30T09:18:10.725Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The accepted list of papers for liveprog can be seen here &lt;a href="https://liveprog.org"&gt;liveprog.org&lt;/a&gt; and I notice that FoC is very well represented by quite some folks from this community, very nice! 😎&lt;/p&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/of-ai.html#2024-08-30T08:50:22.794Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The holy grail of AI. Any thoughts on how this kind of integration can be achieved?&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07K1PTTAT0.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;🔠 &lt;a href="https://departuremono.com/"&gt;Departure Mono&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/present-company.html#2024-08-28T06:56:26.083Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEPARTURE MONO IS A MONOSPACED PIXEL FONT WITH A LO-FI TECHNICAL VIBE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=v0DDj3OBWdc"&gt;Virtual Meetup 4 • August 28, 2024&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/09/W1/present-company.html#2024-08-31T19:16:55.770Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/v0DDj3OBWdc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here's the recording of the &lt;a href="https://www.youtube.com/watch?v=v0DDj3OBWdc"&gt;Future of Coding Virtual Meetup 4&lt;/a&gt;. We saw a textual projectional editor from &lt;strong&gt;@Jarno Montonen&lt;/strong&gt;, an Observable-based exploration of visualizations from &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;, and I shared an update on the FoC Wiki.&lt;/p&gt;
&lt;p&gt;Next month, rather than demos, we're going to host a little event where we all get together on a call and write wiki articles. Should be fun, likely chaotic. See you there!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202409-week-1/</guid><pubDate>Mon, 02 Sep 2024 08:19:50 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/08 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🧮 Scrapsheets demo 🎥 Why Star Trek's Graphic Design Makes Sense 🔌 Visual Neural Networks&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;🔌🎥 &lt;a href="https://youtu.be/xOKzC77NgRU"&gt;Neural network training using mnist dataset in code-flow-canvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/two-minute-week.html#2024-08-20T12:36:32.101Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/xOKzC77NgRU/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After lots of reading (books and other people's code), watching video's, thinking, asking chatgpt for help (it needed help itself), experimenting and frustration, I finally managed to get a neural network working including the training using backward propagation, in my visual programming system!! You can see a &lt;a href="https://youtu.be/xOKzC77NgRU"&gt;small video where I demo it here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The results are far from perfect and neither is the visual flow itself. Currently I only used a subset of mnist to train (9000 images) and on every training iteration the weights are updated per training image. Also the network can for sure be improvement by using a different layer setup and configuration parameters (different learning rate and activation / cost functions). From a visual programming perspective there are also lots of things to improve: currently a lot of the needed functionality is inside the nodes instead of being visible in the flow. So the neural and training nodes are black boxes as well as the node that loads the mnist dataset and handles some of the logic in the training proces. I want to change this in the near future though. You currently can't even see the resulting weights and biases.&lt;/p&gt;
&lt;p&gt;Hopefully it is clear from the neural node types how the neural network is structured: it shows the number of nodes in the layer and an icon illustrating whether a node represents an input, hidden or output layer.&lt;/p&gt;
&lt;p&gt;In the video I show a slow and fast run of the training proces: by putting the speed slider to the right you can run the flow without animations otherwise it takes too long.&lt;/p&gt;
&lt;p&gt;There's also a custom node type that can be used to draw a digit manually and provide the digit which the drawing represents for purpose of calculating the error cost/loss.&lt;/p&gt;
&lt;p&gt;Anyway, for now I am happy with the result. More to follow in the future :-)&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/two-minute-week.html#2024-08-21T14:18:34.103Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They may be totally invisible in the video but objects in Automat now drop shadows! They're drawn using fairly sophisticated procedures that were developed a copule of years ago for Google's Material Design system. Each object actually drops two different shadows - one coming from environmental light (a.k.a. ambient occlusion) and one from directional light (which is modelled as a disk with the same width as window and is positioned in 3d space roughly in front of the title bar). The cool thing about those shadows is that they're not using either shadow maps nor gaussian blurs (except concave shapes). The library takes some shape (vector contour of the object dropping shadow) + parameters of the light and computes a physically based analytical shadow mesh that is then drawn in the background. This manages to render fairly realistic shadows even while elevation of objects is being dynamically changed.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07HPHT904E.mp4"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html"&gt;Call Return Spaghetti&lt;/a&gt; by &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/share-your-work.html#2024-08-19T01:15:04.795Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the essay referenced below, I examine why a diagram of a Call/Return system makes less sense than a diagram of a concurrent system.&lt;/p&gt;
&lt;p&gt;Call/Return operates in a LIFO - last-in first-out, stack-like - manner.&lt;/p&gt;
&lt;p&gt;Adopting an alternate perspective - FIFO, first-in first-out, queue-like manner - allows us to represent diagrams more easily.&lt;/p&gt;
&lt;p&gt;CPU chips implement CALL and RETURN instructions as single opcodes, but, they do not implement queue behaviour as single opcodes.&lt;/p&gt;
&lt;p&gt;Most popular languages are generally function-based, e.g. C, Haskell, Python, Javascript, Smalltalk, etc. Such function-based languages tend to adopt a LIFO (callstack) perspective and tend to use CALL and RETURN opcodes to fake out the function-based paradigm.&lt;/p&gt;
&lt;p&gt;Such languages allow programmers to implement FIFO queues, but, such languages encourage the use of LIFO stacks. This seemingly small difference subtly affects designs with function-based - stack-based - thinking. This difference ultimately encourages single-threaded design while making multi-threaded design more difficult to imagine and to implement, as witnessed by the fact that most languages relegate multi-threading to hefty code libraries, while treating functions as basic building blocks.&lt;/p&gt;
&lt;p&gt;This subtle encouragement towards function-based thinking has led to the general impression that Visual Programming Languages (VPLs), node-and-wire Diagrammatic Programming Languages (DPLs), Actors, etc., are ineffective programming tools.&lt;/p&gt;
&lt;p&gt;I argue that VPLs, DPLs, Actors, etc. are effective programming tools, but that their use is are ultimately discouraged by the over-use of the function-based paradigm.&lt;/p&gt;
&lt;p&gt;Further&lt;/p&gt;
&lt;p&gt;💻 &lt;a href="https://github.com/kaBeech/tensort?tab=readme-ov-file#tensort-"&gt;Tensort&lt;/a&gt; via &lt;strong&gt;Kyle Beechly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/share-your-work.html#2024-08-23T20:27:01.212Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just published &lt;a href="https://github.com/kaBeech/tensort?tab=readme-ov-file#tensort-"&gt;Tensort&lt;/a&gt;, a family of sorting algorithms (slash research paper?) inspired by Ivan's remark near the end of &lt;a href="https://futureofcoding.org/episodes/070"&gt;Beyond Efficiency by Dave Ackley&lt;/a&gt; about Robustsort not existing yet. I'd love to hear what y'all think! 💙&lt;/p&gt;
&lt;p&gt;📼 &lt;a href="https://marianoguerra.org/posts/bootstrapping-oop-part-3-who-parses-the-parser/"&gt;Bootstrapping OOP Part 3: Who Parses the Parser?&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/share-your-work.html#2024-08-24T09:54:44.880Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do we feed the prelude if there's no parser (yet)?&lt;/p&gt;
&lt;p&gt;💡 If code is data then a data serialization format is a binary representation of a program&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/devlog-together.html#2024-08-23T06:32:59.027Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Getting ready for Slack apocalypse.&lt;/p&gt;
&lt;p&gt;&lt;img alt="motd.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07JKHB6RAM.png"&gt;&lt;/p&gt;
&lt;p&gt;🔌🎥 &lt;a href="https://youtu.be/dvZrWEz1W4k"&gt;Improved neural network layer node visualization in code flow canvas.&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/devlog-together.html#2024-08-25T11:22:57.594Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/dvZrWEz1W4k/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've made some visualization improvements for the neural network layer nodes in my visual programming system "code flow canvas". Nodes can now have meta information to show internal data which is stored on the node level that is not shown on the node itself. For the neural network nodes this are the weights and biases.&lt;/p&gt;
&lt;p&gt;Also the structure of the neural network itself can be viewed in a scalable way instead of just the nodes on the canvas itself. And with scalable I mean not showing all the nodes, but only a max of 10 per layer and add smaller dots in between to illustrate that there are more nodes then just the max 10 that are shown per layer. The number of dots are different depending on the total node count to make it clear that layers differ in total node count.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/dvZrWEz1W4k"&gt;You can see it here&lt;/a&gt; or try it yourself at &lt;a href="http://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; and select the neural network mnist training &amp;amp; testing example.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Yuriy Zymlex&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/thinking-together.html#2024-08-25T13:35:04.941Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have a few questions/topics about which I would like to get your opinion. Since I'm interested in the underlying logic of this things, this may look banal.&lt;/p&gt;
&lt;p&gt;If the essence of every programming language is the  &lt;em&gt;construction of logic&lt;/em&gt; , have there ever been any attempts to bring that process __ into minimal separate entity for purpose of wider use than just programming?&lt;/p&gt;
&lt;p&gt;By purposes, I mean the creation of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text instructions - as you can see them in Jira, Org-Mode, Markdown (or detailed program's log)&lt;/li&gt;
&lt;li&gt;Graphical - MindMap or here it is good to remember "data flow diagrams" from informatics, but it can be expanded to any other kind&lt;/li&gt;
&lt;li&gt;Actually programming itself, but as building any "pseudo" code (including graphical) for convenient use with a theoretical possibility of converting "pseudo" code back to logic&lt;/li&gt;
&lt;li&gt;... (other variants)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🧮🎥 &lt;a href="https://www.youtube.com/watch?v=1ihGUs8eJ9k"&gt;scrapsheets splash demo&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/linking-together.html#2024-08-19T06:09:46.117Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/1ihGUs8eJ9k/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1ihGUs8eJ9k"&gt;Demo of a spreadsheet-like tool.&lt;/a&gt; To be presented at SPLASH? By &lt;strong&gt;@Taylor Troesh&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/D24tYFIVyv0?si=YAFonX8yrFR33Ajv"&gt;Why Star Trek's Graphic Design Makes Sense&lt;/a&gt; via &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/linking-together.html#2024-08-20T14:21:25.904Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/D24tYFIVyv0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;YouTube served &lt;a href="https://youtu.be/D24tYFIVyv0?si=YAFonX8yrFR33Ajv"&gt;this older video&lt;/a&gt; to me, but I couldn’t help noticing a few things in relation to (the future of) coding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All the models and (fake screens) etc. are now considered art, but they weren’t created as art. They were functional props on a movie/TV show set put together under tight timelines. How often do we put together functional code under tight deadlines? And how often is what we do regarded as art later? Almost never, I reckon.&lt;/li&gt;
&lt;li&gt;His expertise: When he talks about smoked acrylic and how almost everybody doesn’t listen to him because “You’re losing light", even though he clearly knows exactly what he’s talking about, that reminds me of about a million conversations about how some clearly less experienced engineer tells an experienced veteran why their code isn’t good.&lt;/li&gt;
&lt;li&gt;Oh, the pragmatism! The ship models? Hacked together from repurposing strange parts they had lying around. The details? Just enough to make it look great. The blinking buttons interface? Just a few lightbulbs behind the buttons that were supposed to blink. If that doesn’t remind you of software development, you’re not doing it right. Or you are, and that’s part of the problem. 😉&lt;/li&gt;
&lt;li&gt;I know, there’s some physicality to all the examples in the video, but the LCARS interface points to the possibility of designing something in software only that can transcend its functional framing and become more than just a prop. We have a few examples of that in software (“You had me at scrolling”), but not nearly as much as we should have, I think.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where are the videos like this that celebrate achievements in software design?&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://lithub.com/the-20th-century-computer-science-debate-that-foretold-our-21st-century-technological-fears"&gt;The Competing Predictions of Edsger Dijkstra and Douglas Engelbart&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W4/linking-together.html#2024-08-25T08:38:03.104Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He who would do good to another must do it in minute particulars
General Good is the plea of the scoundrel, hypocrite and flatterer
For Art and Science cannot exist but in minutely organised particulars
-- William Blake&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-4/</guid><pubDate>Sun, 25 Aug 2024 21:01:56 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/08 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎥 A structured, type safe and web native shell 🐸 Arroost: Unblocking creation with friends 🔌 Nodes &amp;amp; wires experiments&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=ItitokeXx6c"&gt;Draw a Triangle to a Window&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/two-minute-week.html#2024-08-13T12:18:26.256Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ItitokeXx6c/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hello Triangle!&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://vimeo.com/997719570?share=copy"&gt;A structured, type safe and web native shell.&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/share-your-work.html#2024-08-12T20:42:55.007Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1913862209-758e00e32ee5a2fe70bb082eed05ce7d5fcea6eae68cab1ea9dfb360b0d4b349-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;This video is a break from my normal log. This time I assume no previous knowledge and try to show what I thing a structured, type-safe and web-native shell should look like.&lt;/p&gt;
&lt;p&gt;🪜 &lt;a href="https://marianoguerra.org/posts/bootstrap-post-collapse-oop-technology-with-wasm-gc-part-2/"&gt;Bootstrap post-collapse OOP technology with Wasm GC (Part 2)&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/share-your-work.html#2024-08-15T13:28:26.576Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🪜 Bootstrap post-collapse OOP technology with Wasm GC (Part 2)&lt;/p&gt;
&lt;p&gt;A raw WebAssembly (Text Format) implementation that bootstraps a compact object-oriented language in itself&lt;/p&gt;
&lt;p&gt;~1500 lines of WAST, 5.8KB compiled to Wasm&lt;/p&gt;
&lt;p&gt;🐸 &lt;a href="https://www.todepond.com/report/arroost/"&gt;Arroost: Unblocking creation with friends&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/share-your-work.html#2024-08-16T20:04:20.620Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My submission to LIVE just got accepted. Here it is!&lt;/p&gt;
&lt;p&gt;Please read and share and let me know what you think&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/devlog-together.html#2024-08-18T03:09:22.028Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not an exhaustive test, but the gemtext superset / markdown subset is coming along. The parser is really simple. I need to style blockquotes and code blocks (like… at all), and improve the styling on other elements. Also need to document this subset. But hey, getting closer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2024-08-17 at 9.05.00 PM.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07HA586C8M.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2024-08-17 at 9.07.45 PM.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07HD1U0PDG.png"&gt;&lt;/p&gt;
&lt;p&gt;🗺️ &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1724009682290899"&gt;the FoC starmap&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/devlog-together.html#2024-08-18T19:47:26.556Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick aside on "the making of" &lt;a href="https://history.futureofcoding.org/?fromDate=2024-08-15&amp;amp;toDate=2024-08-21&amp;amp;channel=thinking-together&amp;amp;filter=#2024-08-18T19:34:42.290Z"&gt;💬 #thinking-together@2024-08-18&lt;/a&gt;. I've been reading Christopher Alexander's "The Nature of Order". I'm 250 pages (so 1/8th of the way) in, but I tried to make each node (problem statement) a "center" as CA defines it.&lt;/p&gt;
&lt;p&gt;Initially I wanted distances to be meaningful but I couldn't see a way to make it work, so they're mostly meaningless (except for a couple of nodes with very few edges). Instead I ended up focusing on angles. I tried to make every edge unambiguously go to a specific node, and this had the effect of improving use of all 360 degrees around every node.&lt;/p&gt;
&lt;p&gt;I started out putting myself in the center, but eventually realized it was better to start with people who had the most 1s and 2s (for the most part the only edges shown in these graphs).&lt;/p&gt;
&lt;p&gt;&lt;img alt="FoC-starmap3-1.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07H7GW2SNS.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/devlog-together.html#2024-08-18T19:47:26.556Z"&gt;🧵 read more...&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;🔌 &lt;a href="https://www.youtube.com/watch?v=qM2mtAPEmd4"&gt; Writing software without a programming language &lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/thinking-together.html#2024-08-15T10:46:10.309Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/qM2mtAPEmd4/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I’ve been pointed at the Kronark YouTube channel which is only a few days old and purports to show how to build software using nodes.&lt;/p&gt;
&lt;p&gt;Several things jump out at me: (1) nodes do NOT need to return a value (unlike functions, which must always return something ; does the need to return something lead to bloat???) (2) undefined behaviour is allowed (does over-defining of ALL behaviour lead to bloat???) (3) encapsulation and abstraction - 0D defines Container components which encapsulate and elide layers, 0D does this encapsulation at runtime ; Kronark compiles out encapsulation at compile time (AOT). I feel uneasy about this, when taken to the extreme. Maybe 0D should be described as“structured concurrency” (???) Whereas Kronark is just more-of-the-same linear composition (???) that works in a feed-forward, single-threaded manner. It will be interesting to see examples of concurrency and feedback in Kronark. (FTR, “feedback” is not the same as “recursion”).&lt;/p&gt;
&lt;p&gt;🗫 Final-ish state of problem statements and reactions by &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/thinking-together.html#2024-08-18T19:34:42.290Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, a final-ish personal visualization of the "star map of FoC". All the caveats and disclaimers &lt;a href="https://history.futureofcoding.org/?fromDate=2024-08-01&amp;amp;toDate=2024-08-07&amp;amp;channel=thinking-together&amp;amp;filter=#2024-08-04T18:23:55.688Z"&gt;💬 #thinking-together@2024-08-04&lt;/a&gt; continue to apply.&lt;/p&gt;
&lt;p&gt;I'll post some even more personal comments and critiques of people's responses and the whole process in comments. I hope it provokes comments and reflection from others.&lt;/p&gt;
&lt;p&gt;I'm looking forward to putting this up on the &lt;a href="https://futureofcoding.slack.com/archives/CEXED56UR/p1723509401438699"&gt;FoC wiki&lt;/a&gt; in some form.&lt;/p&gt;
&lt;p&gt;🗒️ &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07HDT9NGUA.html"&gt;problems.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="FoC-starmap4-4.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07H7GGBLDU.png"&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🤖 &lt;a href="https://sakana.ai/ai-scientist/"&gt;The AI Scientist: Towards Fully Automated Open-Ended Scientific Discovery&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/linking-together.html#2024-08-13T04:32:58.660Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Curious to see how this  &lt;code&gt;Fully Automated Open-Ended Scientific Discovery&lt;/code&gt;  thing unfolds&lt;/p&gt;
&lt;p&gt;🔌🧮 &lt;a href="https://youtu.be/s5GTnqOxe8k?si=stw2VE4oXPp3fE2b"&gt;They turned MATH into a factory game...&lt;/a&gt; via &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/linking-together.html#2024-08-13T23:04:27.206Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/s5GTnqOxe8k/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Saw *Beltmatic" and thought of Hest. 😅 &lt;/p&gt;
&lt;p&gt;🔌🐦 &lt;a href="https://twitter.com/KennedyRichard/status/1824197928040173783"&gt;@KennedyRichard@fosstodon.org (@KennedyRichard)&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/linking-together.html#2024-08-17T10:29:19.436Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spaghetti-code polemics aside – how cute!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/KennedyRichard/status/1824197928040173783"&gt;🦣 @KennedyRichard@fosstodon.org (@KennedyRichard) on X&lt;/a&gt;: @KenneyNL No guys, hear me out, we might be onto something here! What about tracking eyes that become happy when the connection is reached out? (also in Nodezator's dev branch)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/tweet_video_thumb/GVDZXUXX0AAM-F7.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://www.science.org/doi/10.1126/science.adq9356"&gt;The Turing Test and our shifting conceptions of intelligence&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W3/of-ai.html#2024-08-16T01:26:56.814Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good short article by Melanie Mitchell&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-3/</guid><pubDate>Sun, 18 Aug 2024 21:38:54 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/08 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;📔 Userspace notebook editor ⛏️ Bootstrap post-collapse OOP technology 🔌 cables.gl is now open source&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/two-minute-week.html#2024-08-09T15:39:05.156Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week I've implemented serialization format for machines built in Automat. Simple JSON file (pretty-printed) stored next to the executable. Turns out its quite handy during interactive development. And also opens the way for regression testing. Restoring the window state was (surprisingly) the hardest challenge (due to DPI and monitors) and I didn't manage to correctly persist it. Both on Linux and Windows, the window managers just don't want to share some of the window properties... (especially around window tiling)&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07G79SSBPF.mp4"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📔 &lt;a href="https://observablehq.com/@tomlarkworthy/userspace-editor"&gt;observablehq.com/@tomlarkworthy/userspace-editor&lt;/a&gt; via &lt;a href="https://webcode.run"&gt;Tom Larkworthy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/two-minute-week.html#2024-08-10T14:43:21.759Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What would it take to make an open source front end to the Observable Runtime? One where you have control over the runtime and layout and are free from iframe sandbox restrictions?&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07GAJ8495K.mov"&gt;open-notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;⛏️ &lt;a href="https://marianoguerra.org/posts/bootstrap-post-collapse-oop-technology-part-1/"&gt;Bootstrap post-collapse OOP technology (Part 1)&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/share-your-work.html#2024-08-09T10:29:00.459Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do we preserve the ability to program OOP through civilizational collapse?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="2024-08-09_12-25.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07G8KB1475.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-08-09_12-26.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07G23V1JKG.png"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/devlog-together.html#2024-08-05T05:36:47.656Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Got the visual design of the wiki mostly fleshed out. Fluid layout, one breakpoint that moves elements around for smaller screens, light and dark modes, nice keyboard nav, etc etc. Thoroughly documented too, since I figure some folks might want to peek at the css but aren't up on all the new weird stuff you can do.&lt;/p&gt;
&lt;p&gt;Also, I'll be eating my hat now: everyone who scolded me for attempting to parse a markdown-like syntax with Regex, well, yeah, it kinda stinks. Not sure what to do about this, given the values I'd like to impart in this project. Since it's not a blocker on writing pages, I think I'll ship it half-finished and we can talk about it. This feels like a great area to draw on the wisdom of the crowd.&lt;/p&gt;
&lt;p&gt;Markdown or not, we'll still need a build script, I reckon, unless we want to  ~&lt;em&gt;&lt;em&gt;require&lt;/em&gt;&lt;/em&gt;~  that anyone adding a new page also add their page to any relevant indexes — since, I reckon, we'll need some indexes just to get through the early phase where the wiki will be sparsely interconnected. To start, I'm thinking one index of broad categories (or maybe tags, dunno), and then another that's just a list of all pages. But if anyone has strong feelings about the right way to do this, I'm at least 75% ears.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="http://akkartik.name/post/programming-2024"&gt;How I program in 2024&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/thinking-together.html#2024-08-05T10:28:07.265Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt; is that your blog?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🔌 &lt;a href="http://cables.gl"&gt;cables.gl&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/linking-together.html#2024-08-06T06:16:25.602Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://cables.gl"&gt;cables.gl&lt;/a&gt; visual programming language for making cool WebGL shaders was just &lt;a href="https://cables.gl/standalone"&gt;open-sourced&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/linking-together.html#2024-08-11T20:37:26.404Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just found &lt;a href="https://conversations.mr4th.com/"&gt;Mr. 4th Programming Conversations&lt;/a&gt; podcast which mentions multiple FoC topics 🍰.  Visual programming, Bush &amp;amp; Englebart...&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pod.link/developer-voices"&gt;Developer Voices&lt;/a&gt; podcast is maybe less 1:1 match but interviews many developers building new/experimental/visionary languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Mark Dewing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/of-ai.html#2024-08-07T16:37:31.713Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We now have two examples of systems that can turn text descriptions into code - humans and LLMs.  And we don't understand how either of them works.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://interconnected.org/home/2024/08/09/no-apps-no-masters"&gt;No apps no masters&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/of-ai.html#2024-08-09T17:31:24.596Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W2/present-company.html#2024-08-10T07:25:05.524Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I have this c/c++ codebase, around 116,000 lines of code. A full release compilation takes 6:25 minutes. Not too bad to work on.&lt;/p&gt;
&lt;p&gt;If I break this down, a single line of c/c++ code takes 0.0033s (3.3 miliseconds). For comparison, a game that runs at 60 fps, draws a new frame in under 16 miliseconds. So while a game simulates and renders a frame, a c/c++ compiler compiles 5 lines of code. That is usually not even a single function.&lt;/p&gt;
&lt;p&gt;My cpu avarages at around 10 instructions per clock cycle. At 3.6Ghz it can do 3.6 * 10 * 1,000,000,000 instructions on each core, per second. That's 36,000,000 per milisecond, on 8 cores.. but let's add some cache misses, any instructions can either go full speed 1x or go to main memory around 200x slower.&lt;/p&gt;
&lt;p&gt;We are looking at around 5 million instructions per milisecond.&lt;/p&gt;
&lt;p&gt;If we print out (9pt font) all instructions executed to compile a single line of c/c++ code, we'd end up with over 6 kilometer long paper.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-2/</guid><pubDate>Sun, 11 Aug 2024 21:43:25 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/08 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎥 The future of programming is data-parallel? 💡 A modern and executable specification language 🎥 Spatial Canvases: Towards an Integration Domain for HCI&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/two-minute-week.html#2024-08-02T14:37:21.797Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another major feature implemented - the  &lt;em&gt;toolbar&lt;/em&gt; . I really love the toolbar system used by Vlojure. I never used it personally but I like the idea of many customizable bars. Eventually I'd like to make this one more flexible as well... The animations behave slightly differently than most docks I know (Cairo, Mac OS) - instead of zooming all nearby elements (in a gaussian-distribution like pattern), only the one under the cursor is enlarged. I think this contrast makes it clearer to which action will be selected by clicking. The radar animation also got some love - it now shows the paths to nearby objects, connection name and animates slightly more smoothly.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07FY8R4F3J.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://www.linkedin.com/posts/jarnomontonen_improving-llm-accuracy-with-levlo-languages-activity-7223648019051626497-Ow0i"&gt;Improving LLM Accuracy with Levlo Languages&lt;/a&gt; via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/share-your-work.html#2024-07-29T11:42:13.203Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Did an experiment on improving LLM accuracy with Structured Generation using my stuff: &lt;a href="https://www.linkedin.com/posts/jarnomontonen_improving-llm-accuracy-with-levlo-languages-activity-7223648019051626497-Ow0i"&gt;Improving LLM Accuracy with Levlo Languages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🧮 &lt;a href="https://calcwithdec.dev/posts/actuarial-terms-i/"&gt;Cashflow Profiles and Reserves: Actuarial Terminology I&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/share-your-work.html#2024-07-31T17:46:33.795Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm getting ready to release some actuarial models and outputs that use calculang.&lt;/p&gt;
&lt;p&gt;So I made &lt;a href="https://calcwithdec.dev/posts/actuarial-terms-i/"&gt;an interactive post to introduce some terms actuaries use&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;John Christensen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/share-your-work.html#2024-07-31T21:39:29.553Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's my work in progress node-and-wire system. It's specifically targeting signal processing related work.&lt;/p&gt;
&lt;p&gt;Here, data is all passed between nodes as 1D arrays, so the plots just have the x-axis hardcoded for now. I'm not sure if a pair of x/y array's should be passed together on a single wire, or if they should be passed separately for the most flexibility.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07EJM9KU6B.png"&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/share-your-work.html#2024-08-01T13:17:32.699Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will try to reproduce these two papers that suggest program synthesis (eg: inducing new tactics) for AI to solve math problems or the ARC-AGI puzzles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://royalsocietypublishing.org/doi/epdf/10.1098/rsta.2022.0044"&gt;Peano: learning formal mathematical reasoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2407.00695"&gt;Learning Formal Mathematics From Intrinsic Motivation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a quite a bit of new math/ML/programming for me to learn here.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://programmingsimplicity.substack.com/p/2024-07-30-diagram-compiler-status?r=1egdky"&gt;Diagram Compiler Status&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/devlog-together.html#2024-07-31T02:49:17.118Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m in the process of writing a transpiler that spits out Drawware 0D kernel code in various languages (like Python, Lisp, JS, WASM, etc.) from a higher-than-HLL. I’m using a very simple “circuit” to regression test (Larson Scanner, as seen on T.V. Knight Rider). Current status and “working paper”: &lt;a href="https://programmingsimplicity.substack.com/p/2024-07-30-diagram-compiler-status?r=1egdky"&gt;2024-07-30-Diagram Compiler Status&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/devlog-together.html#2024-07-31T16:20:52.630Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My basement flooded this week. So that's going to set me back a bit. But, hey, here's a quick update on the two FoC-relevant things I'm floating.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DANK WIKI • At the last FoC virtual meetup, we talked about setting up a super lo-fi, friendly-to-nontechnical-folks, hackable community wiki. I've got a repo all set up for that locally, and just have a tiny bit more experimentation to do before it's ready to share. All the pages are just simple HTML or MD. There is a build step — wait, stop, don't run away — it's a build step, but it's cool and different!! There's a really simple spec and a short reference implementation. Zero dependencies, less than 100 loc. Everyone is encouraged to port the script into their language of choice and commit that. That way, other people can check out the repo, add some pages, and build it locally without having to conform to whatever ecosystem the build script requires. I'd ideally like to have impls in each of the most common ecosystems right away (JS, Python, Ruby, maybe bash, etc). Finally, the wiki is (for now) going to be hosted on Github, with an action that runs the reference build script on commit, so if people want to edit it via the Github web interface they can. (I'll be liberal with handing out the commit bit). This is going to be a social experiment as much as a technical one. Excited to see how it goes. Hoping to have the initial version of this go live this weekend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LIFE RAFT • I'm itching to get cracking on a Slack successor. I'm thinking I'll spin up a dedicated channel, and solicit people to drop in whatever random wishes / ideas / requests / suggestions / advice they feel like offering, so that these can filter in to the design process. I'm also hoping to put together goals for an MVP. This will need to include several things, including but not limited to: visual mockups for the GUI on desktop and mobile, technical architecture, priority features, estimated timeline. I intend to be quite restrained here — I want to make the smallest possible  &lt;em&gt;good enough&lt;/em&gt;  thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/TG9TGqM9HCs"&gt;work in progress: building a neural network using code-flow-canvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/devlog-together.html#2024-08-04T20:03:05.237Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/TG9TGqM9HCs/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi, Because I want to understand better how neural networks work and can be trained, the best way to do is, is by building a small one from scratch myself and training it.&lt;/p&gt;
&lt;p&gt;In this video &lt;a href="https://youtu.be/TG9TGqM9HCs"&gt;I show creating and connecting a few neural-nodes together and a show a very small prebuilt neural network&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To be able to do this, I've created 4 new node-types in my visual programming system: neural-input-node, neural-bias-node, neural-node and neural-output-node.. the first 3 output weighted connections. This means that a weight property is attached to the connection and can be changed.. the neural-node and neural-output-node use these weights in there respective calculations.&lt;/p&gt;
&lt;p&gt;The neural-node currently uses sigmoid as its activation function.&lt;/p&gt;
&lt;p&gt;The neural-bias-node only outputs a value of 1 and the output value of a neural-input-node can be changed. When any of these values are changed, they propagate forward through the network.&lt;/p&gt;
&lt;p&gt;In the current example flow, an error is also calculated using an expression node-type depending on the output and expected value.&lt;/p&gt;
&lt;p&gt;The white object-node is also a new node-type and can be used to obtain multiple values and output them in a single object.&lt;/p&gt;
&lt;p&gt;In the near future I hope to implement a neural network that can be trained with the mnist digit dataset, but I have to do a lot more work before I am at that stage I think.&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=vU3ryvZYlkk"&gt;[PLDI24] The Future of Fast Code: Giving Hardware What It Wants&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/reading-together.html#2024-07-31T19:09:12.090Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/vU3ryvZYlkk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The future of programming is data-parallel?&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=csGNVaB83Rk"&gt;Spatial Canvases: Towards an Integration Domain for HCI, with Orion Reed&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/thinking-together.html#2024-07-31T21:30:12.219Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/csGNVaB83Rk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;, I just watched Orion Reed’s talk &lt;a href="https://www.youtube.com/watch?v=csGNVaB83Rk"&gt;youtube.com/watch?v=csGNVaB83Rk&lt;/a&gt;, pointed out by &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;. The talk continuously fired the same neurons in my head as does the phrase “malleable computing”. I’m not in that head-space, but, I continue to wonder if there’s a connection … (YMMV)&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/thinking-together.html#2024-08-01T21:27:07.788Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prompt for everyone here: to the extent that you think about the Future of Coding or have projects to try to improve things,  &lt;em&gt;what problem are you trying to attack?&lt;/em&gt;  Can you state it in a couple of sentences? Without reference to a solution? Try to be precise about the audience. For example, some problems affect everyone, while others affect only professional programmers, or only researchers who use computers in their work.&lt;/p&gt;
&lt;p&gt;My hypothesis is that focusing on problems will help us all find our most promising collaborators in this group. (The next step will be to combat our tendency to be defined by our tools, to let our tools erect barriers that divide and balkanize us. But that's further down the road. For now, let's just "find our homies," the people we share specific dissatisfactions with.)&lt;/p&gt;
&lt;p&gt;There are ideas for problem statements in a couple of earlier threads:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://history.futureofcoding.org/?fromDate=2024-06-12&amp;amp;toDate=2024-06-18&amp;amp;channel=thinking-together&amp;amp;filter=#2024-06-15T10:49:53.662Z"&gt;💬 #thinking-together@2024-06-15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1717926129937119"&gt;what are the goals we are trying to achieve? What are the problems we are trying to solve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://history.futureofcoding.org/?fromDate=2024-07-22&amp;amp;toDate=2024-07-28&amp;amp;channel=present-company&amp;amp;filter=#2024-07-25T01:25:03.344Z"&gt;💬 #present-company@2024-07-25&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But this thread is not for critiquing or analyzing any of those statements. Just add your own, and nothing else.&lt;/p&gt;
&lt;p&gt;(It's totally fine to copy statements from these threads. Many of them were arrived at after tons of consideration so it would be surprising if others didn't care about them. Also feel free to synthesize from multiple statements. Just try to get to something crisp and opinionated.)&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/thinking-together.html#2024-08-02T22:06:39.108Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Falsifiable theory…&lt;/p&gt;
&lt;p&gt;Theory: Function-based thinking greatly restricts thinking about FoC.&lt;/p&gt;
&lt;p&gt;Test: if this theory is true, then examination of the source code for The Mother Of All Demos will reveal that not all parts of the demo system were tightly inter-connected into a single synchronous, functional blob of design.&lt;/p&gt;
&lt;p&gt;How?: Where can we find the source code for TMOAD? If we obtain the source, how can we reverse-engineer the design out from the implementation details? If we can get at the design, we should look for how the sub-units of software are interconnected. We need to examine if the code is designed as many islands of synchrony vs. being designed as just one big blob of synchrony.&lt;/p&gt;
&lt;p&gt;Corollary: if TMOAD was designed as many islands of software and hardware, then it is unlikely that anything as interesting as TMOAD can come of building software on computers using only synchronous languages, like Python, Haskell, using concepts such as thread libraries, theorem-provers,  etc. [Thread libraries are but assembler-level work-arounds that enable the use of the function-based programming paradigm with languages like Python, Haskell, etc. Theorem provers need single islands of synchronous code, to work]&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1722547627788149"&gt;yesterday's prompt on problem statements&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/thinking-together.html#2024-08-03T04:42:03.009Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow-up to &lt;a href="https://history.futureofcoding.org/?fromDate=2024-07-29&amp;amp;toDate=2024-08-04&amp;amp;channel=thinking-together&amp;amp;filter=#2024-08-01T21:27:07.788Z"&gt;💬 #thinking-together@2024-08-01&lt;/a&gt;: post a single comment with a number from 1 to 6 for every comment but yours in yesterday's thread, indicating how close you perceive everyone else's problem statement to be relative to yours. (And don't read other people's comments before you post yours; that's part of the fun here.)&lt;/p&gt;
&lt;p&gt;Here's what the numeric scale means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: This is a rewording of my problem statement.&lt;/li&gt;
&lt;li&gt;2: This overlaps almost entirely with my problem statement.&lt;/li&gt;
&lt;li&gt;3: I care about this problem.&lt;/li&gt;
&lt;li&gt;4: This doesn't seem like a big problem.&lt;/li&gt;
&lt;li&gt;5: This is fine, I don't think it is a problem.&lt;/li&gt;
&lt;li&gt;6: This statement is alien to me, I don't understand it as a problem statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully that makes sense and I haven't missed some major option..&lt;/p&gt;
&lt;p&gt;In a day or two I'll collate the results in the attached table. (You're welcome to do so as well; just download the html file and open it in a browser tab, fill in and hit the 'save' button to save a local copy with your edits. Upload it here if you like, that can be an alternative way to give your votes.)&lt;/p&gt;
&lt;p&gt;🗒️ &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07F5MDAQ5U.html"&gt;problems.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Jari&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/thinking-together.html#2024-08-03T15:32:48.955Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello, I am currently building a lowcode platform for easy and fast backend development. Basically, you write logic using functions which look like excel functions or UDFs. Do you have any opinions on programming using Excel? I have written prototypes many times using it, but main problems have been 1) not being able to use it as a backend 2) more complex sheets are hard to understand and test&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1722547627788149"&gt;the problem statement thread&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/thinking-together.html#2024-08-04T18:23:55.688Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the current state of people's reactions to each other's problem statements. If you haven't added your reactions yet, please consider doing so! If you haven't written a problem statement yet, please do so before reacting to those of others. I know it's a non-trivial bit of work. I tend to open Slack on two windows somehow to jump between &lt;a href="https://history.futureofcoding.org/?fromDate=2024-07-29&amp;amp;toDate=2024-08-04&amp;amp;channel=thinking-together&amp;amp;filter=#2024-08-01T21:27:07.788Z"&gt;💬 #thinking-together@2024-08-01&lt;/a&gt; and &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1722660123009799"&gt;the problem reaction thread&lt;/a&gt; 🤦 But it does seem like something promising to think about.&lt;/p&gt;
&lt;p&gt;I've also included a very rough, very preliminary, very incomplete stab at visualizing clusters of people's problem statements. There's no reason to think this "space" is Euclidean or 2D, so take it with a huge bucket of salt.&lt;/p&gt;
&lt;p&gt;The visualization is in no way mapping status relationships. The intent is not to exclude anyone, but a very narrow instrumental purpose of finding opportunities to collaborate. If you need an analogy, a better one might be a star chart. It seems safe to assume we're all light years apart given our track record of collaborating 😄 This picture is an initial attempt at making a map based on imprecise measurements from a single point. If you spend any time thinking about the map, try to build your own from the raw data to avoid my inevitable biases.&lt;/p&gt;
&lt;p&gt;I started out with  &lt;code&gt;Kartik&lt;/code&gt;  at the origin (no objectivity here!) and positioned first my 1s, then my 2s, then 3s and so on all the way to 6s. Then I tried to go through others similarly and resolve tensions in a very rough, very manual way. I might do this a few times to try to get better at it.&lt;/p&gt;
&lt;p&gt;Even though this "data set" is almost certainly high-dimensional, a few 1-D relationships popped out at me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kartik -&amp;gt; Tom&lt;/code&gt;  +  &lt;code&gt;Tom -&amp;gt; Paul&lt;/code&gt;  =  &lt;code&gt;Kartik -&amp;gt; Paul&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kartik -&amp;gt; Tom&lt;/code&gt;  +  &lt;code&gt;Tom -&amp;gt; Nilesh&lt;/code&gt;  =  &lt;code&gt;Kartik -&amp;gt; Nilesh&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I responded by putting the 4 of us on a straight line. There may be a spectrum here that bridges the incomprehension between the ends.&lt;/p&gt;
&lt;p&gt;This sort of bridging of incomprehension is a common pattern. I initially had  &lt;code&gt;Ivan&lt;/code&gt;  as far away from  &lt;code&gt;Kartik&lt;/code&gt;  as  &lt;code&gt;Paul&lt;/code&gt; . But several connections drew the  &lt;code&gt;Ivan&lt;/code&gt; / &lt;code&gt;Eli&lt;/code&gt;  cluster closer.  &lt;code&gt;Dany&lt;/code&gt;  too might be as far from me as  &lt;code&gt;Paul&lt;/code&gt; , but is just 1 away from  &lt;code&gt;Jimmy&lt;/code&gt; .  &lt;code&gt;Guyren&lt;/code&gt;  too, but is close to  &lt;code&gt;Tom&lt;/code&gt;  and  &lt;code&gt;Dany&lt;/code&gt; . So some of these edges have more "tension" than others, and I haven't come up with a way yet to show that.&lt;/p&gt;
&lt;p&gt;(I'm currently showing edges labeled 1-3. If we get more data I might need to prune that further. The edges are directional but unfortunately &lt;a href="https://git.sr.ht/~akkartik/snap.love"&gt;my tool&lt;/a&gt; doesn't have arrows.)&lt;/p&gt;
&lt;p&gt;Anyways. Add your problem statements and reactions!&lt;/p&gt;
&lt;p&gt;🗒️ &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07F89D2H8W.html"&gt;problems.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problems.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07FEQSQ4RZ.png"&gt;&lt;/p&gt;
&lt;p&gt;🗒️ &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F07FTJ850RX.text"&gt;problem-clusters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem-clusters.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07FHD8RWPN.png"&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://calculatingempires.net"&gt;Calculating Empires: A Genealogy of Technology and Power since 1500&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/linking-together.html#2024-07-29T03:42:55.586Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Via &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt; on Mastodon…&lt;/p&gt;
&lt;p&gt;&lt;a href="https://calculatingempires.net"&gt;Calculating Empires: A Genealogy of Technology and Power since 1500&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's an enormous map of illustrations of various advancements toward, within, and around computers. Note that it's wildly horizontal. I tried exploring it a bit on my phone but found that unsatisfying. I recommend using the largest monitor you've got.&lt;/p&gt;
&lt;p&gt;💡 &lt;a href="https://quint-lang.org/docs/lang"&gt;Quint: A modern and executable specification language&lt;/a&gt; via &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/linking-together.html#2024-07-31T14:53:39.442Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just saw Hillel Wayne link to Quint on LinkedIn, and I finally want to try writing TLA+ as a result...&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=F2_C5lpb2Bg"&gt;Midinous - Non-linear MIDI Sequencer - Official Trailer&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/linking-together.html#2024-08-02T09:29:42.661Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/F2_C5lpb2Bg/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=F2_C5lpb2Bg"&gt;Midinous - Non-linear MIDI Sequencer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🐇 &lt;a href="https://news.ycombinator.com/item?id=41131181"&gt;Hundred Rabbits is a small collective exploring the failability of modern tech&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/linking-together.html#2024-08-03T10:13:25.247Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello 👋 Future of coding,&lt;/p&gt;
&lt;p&gt;I hope you are doing well :)&lt;/p&gt;
&lt;p&gt;So I found one of those interesting HN posts:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=41131181"&gt;news.ycombinator.com/item?id=41131181&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hadn’t heard of 100 rabbits before :&lt;/p&gt;
&lt;p&gt;&lt;a href="https://100r.co/site/about_us.html"&gt;100r.co/site/about_us.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The comments in the HN are also very interesting. For me they feel very  ~&lt;em&gt;&lt;em&gt;much&lt;/em&gt;&lt;/em&gt;~  related to the future of coding. &lt;/p&gt;
&lt;p&gt;Like this one:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=41136056"&gt;news.ycombinator.com/item?id=41136056&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this respect, their page for hacking baguettes by sun&amp;amp;sea is my personal favourite&lt;/p&gt;
&lt;p&gt;&lt;a href="https://100r.co/site/solar_cooking_experiment.html"&gt;100r.co/site/solar_cooking_experiment.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;100Rabbits is like the coming true of Grothendieck's 1972 permatech lecture given at CERN*&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lapin0t/grothendieck-cern"&gt;github.com/Lapin0t/grothendieck-cern&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"I think that agriculture, stockbreeding, decentralized energy production, medicine of a certain kind, very different from the medicine that prevails today, will come to the fore. It's impossible to say which part purely creative joy will play in these new developments. My hope is, it will be a creative development in which there will be no essential difference between conceptual activities and manual physical activities. When people become masters of their own needs to the point where an appreciable part of their creativity remains free---and this will take a time we can't predict, it may be a generation, it may be ten, no one knows---at that point, anyone, not just a certain scientific elite, will be able to devote a significant part of their time to purely creative, purely speculative, purely playful research"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://dark.properties/from-silicon-to-slime/"&gt;this slimy interview&lt;/a&gt; via &lt;strong&gt;Arvind Thyagarajan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/linking-together.html#2024-08-04T16:55:41.117Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;apropos of verbalising favourite problem statements, I found a wonderful one in &lt;a href="https://dark.properties/from-silicon-to-slime/"&gt;this slimy interview&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How can we align our interests with what living organisms and systems naturally do? How can we yoke ourselves to what they’re doing so that our relationship is no longer exploitative, but rather one where we’re putting existing capabilities to productive ends?&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://www.upi.com/Top_News/World-News/2024/08/02/ar-using-ai-to-stop-crime-early/3981722571581/"&gt;Argentina to use AI to stop crime before it happens - UPI.com&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/of-ai.html#2024-08-02T11:30:59.332Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Argentina to use AI to stop crime before it happens&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Argentina has announced plans to use artificial intelligence to predict crimes before they're committed, the country recently announced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;📡 &lt;a href="http://webrtcforthecurious.com"&gt;webrtcforthecurious.com&lt;/a&gt; via &lt;strong&gt;Guyren Howe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/08/W1/present-company.html#2024-08-01T03:20:00.548Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently trying to use WebRTC from Flutter. I just want a way to find my external IP address and port, and to share data through it. Seems like a simple requirement.&lt;/p&gt;
&lt;p&gt;I am  &lt;em&gt;utterly&lt;/em&gt;  astounded at the complexity of WebRTC. I’ve just never see anything quite like it. The Flutter plugin just flat doesn’t work for me, and there is no debugging information available to let me know why. The plugin uses an opaque C library, and I’m no C hacker.&lt;/p&gt;
&lt;p&gt;I’m down to using a headless browser, which I’m pretty sure I will get working. But holy moley. This: &lt;a href="http://webrtcforthecurious.com"&gt;webrtcforthecurious.com&lt;/a&gt; is about the friendliest introduction I can find.&lt;/p&gt;
&lt;p&gt;Tragic, because ad hoc peer-to-peer connections should be a large part of the Future of Computing.&lt;/p&gt;
&lt;p&gt;File under: hopefully  &lt;em&gt;not&lt;/em&gt;  the future of computing.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202408-week-1/</guid><pubDate>Mon, 05 Aug 2024 08:21:14 GMT</pubDate></item></channel></rss>