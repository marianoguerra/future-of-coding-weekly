<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Sun, 05 May 2024 20:47:45 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2024/05 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🏹 Arrow toolkit 🎹 Tone Dome 📝 The cognitive surface of software 📢 FoC Berlin Meetup&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP"&gt;Introducing autocomplete for canvas&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-04-30T12:37:21.447Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/r6ls8Gw9MmY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been (trying) to build autocomplete for canvas. keen to hear thoughts/ideas from anyone else who's worked on anything similar-ish!&lt;/p&gt;
&lt;p&gt;🏹 &lt;a href="https://github.com/Little-Languages/quiver"&gt;Quiver: arrow toolkit for the web&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-01T00:13:21.546Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the last month I've been working on an arrow toolkit for the web, called Quiver 🏹. It's exploring 3 problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if visual connection could be declaratively expressed in HTML? &lt;/li&gt;
&lt;li&gt;What if there was a tiny toolkit that enabled all kinds of connection/arrows to be built? &lt;/li&gt;
&lt;li&gt;How do we break arrows out from spatial canvases and enable them to used on any website?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently I'm prototyping some pre-built arrows/connection: curved arrows, orthogonal edges, Xanadu links and hyperedges. But the library is also explicitly designed to be extensible so you can use your own layout algorithms or designs. Part of the extensibility means the ability to easily animate objects along the arrow (for all of those dataflow VPLs out there 😜) or add arbitrary labels/annotations to arrows.&lt;/p&gt;
&lt;p&gt;Given that connection is probably one of the most commonly used relationships in visual programming systems, I'm curious if there are any other types of arrows or functionality you would find useful in your own projects? Its not published to NPM yet, but the repo is &lt;a href="https://github.com/Little-Languages/quiver"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="quiver.gif" src="http://history.futureofcoding.org/history/msg_files/F07/F0718E6CQJ2.gif"&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0710H1P9RD.mov"&gt;Screen Recording&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💻 &lt;a href="https://github.com/bicycle-codes/progress-indicator"&gt;github.com/bicycle-codes/progress-indicator&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-01T06:27:18.011Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another day, another module. Learning some things about web components this time.&lt;/p&gt;
&lt;p&gt;🔍 &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_3_and_a_half/"&gt;Exploring Spaces 3.5: Zoomable Number Line&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-03T18:56:58.104Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a zoomable number line 🙂 &lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2024-05-03 at 2.56.38 PM.png" src="http://history.futureofcoding.org/history/msg_files/F07/F071HFPCPDM.png"&gt;&lt;/p&gt;
&lt;p&gt;🐟 &lt;a href="https://drawdeadfish.com/"&gt;Draw dead fish&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/share-your-work.html#2024-05-04T23:27:08.948Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a new experimental tool where you have to draw dead fish&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drawdeadfish.com"&gt;drawdeadfish.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;🎹 &lt;a href="https://tonedome.surge.sh"&gt;tonedome.surge.sh&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/devlog-together.html#2024-05-01T00:48:29.120Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ink &amp;amp; Switch are having a hack week, and I'm working on a generative sound project. You can check out the current version (likely to change as the week progresses) here: &lt;a href="https://tonedome.surge.sh"&gt;tonedome.surge.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It sounds a little different every time you run it, but it's also synced to the system clock. So if you run it on, say, every device you own and scatter them around the room, it creates a rather neat immersive aural space.&lt;/p&gt;
&lt;p&gt;Would appreciate any bug reports, especially on Android!&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://guitarvydas.github.io/2024/04/27/Bloatware.html"&gt;Bloatware&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-04-29T09:35:12.740Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;preliminary musings on bloatware&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://science-in-the-digital-era.khinsen.net/#The%20cognitive%20surface%20of%20software"&gt;The cognitive surface of software&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-04-30T15:19:28.887Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trying to name a concept: &lt;a href="https://science-in-the-digital-era.khinsen.net/#The%20cognitive%20surface%20of%20software"&gt;The cognitive surface of software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has something similar already been discussed, or at least introduced?&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://futureofcoding.slack.com/archives/CC2JRGVLK/p1714619157913519"&gt;intro post&lt;/a&gt; via &lt;strong&gt;Assaf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-05-02T22:54:52.856Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm exploring strategies to enable scientists (biologists in pharma) without computational expertise be able to interact with big data more intuitively. My ultimate goal is to have users ask biological questions, and the system to generate and execute analytical workflows utilizing existing methods from the scientific domain to answer these questions with data visualizations,&lt;/p&gt;
&lt;p&gt;I evaluated the non-interpretable and inaccurate "chat your data" LLM solutions. I'm currently thinking about the possibilities of developing/using a DSL as intermediary output prior to code generation to make the process more interpretable. I am also considering what would be the most efficient abstraction strategies of the analytical functionalities/libraries in certain biological domains to improve the accuracy of the outputs (of the higher level strategy and the actual code). I would love to brainstorm about these problems offline/online. Here's my &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-1/?fromDate=2024-04-29&amp;amp;toDate=2024-05-05&amp;amp;channel=introduce-yourself&amp;amp;filter=#2024-05-02T03:05:57.913Z"&gt;💬 #introduce-yourself@2024-05-02&lt;/a&gt; for a bit more context about me.&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/thinking-together.html#2024-05-03T21:52:38.564Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am once again looking at pages of notes I wrote three years ago attempting to find a way to declaratively diagram concurrent legal processes so as to illuminate the steps available to the parties as the process unfolds. I feel like I have something worth exploring, but to illustrate it I need a diagramming language that allows me to nest nodes inside of one another, and draw edges that originate and terminate at arbitrary depths of nodes. DOT won't let you draw an arrow starting at the edge of a subgraph, and doesn't have any way of nesting actual nodes, for example. Is anyone aware of a text-based graphing language that will let me nest objects and draw edges between arbitrary depths?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🚜 &lt;a href="https://functional-art.org/2024/"&gt;International Workshop on Functional Art, Music, Modeling and Design&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-04-29T13:13:40.894Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FARM (aka ACM SIGPLAN International Workshop on Functional Art, Music, Modeling and Design) is taking place in Milan, Italy this year, September 2nd. The call for papers, demos and performances is open, deadline June 1st.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://functional-art.org/2024/"&gt;functional-art.org/2024&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/OrionReedOne/status/1784871153787420920"&gt;Tweet from @OrionReedOne&lt;/a&gt; via &lt;strong&gt;Marek Rogalski&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-04-29T17:15:53.740Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is an interesting 2.5D experiment for those who like the canvas approach. I'm pretty sure it could have some practical applications. &lt;a href="https://twitter.com/OrionReedOne/status/1784871153787420920"&gt;2D canvases have a whole dimension spare....&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F0715TMBNHG.mp4"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/72y2EC5fkcE?si=MI2T1IME2SH3OCjp"&gt;Tomorrow Corporation Tech Demo&lt;/a&gt; via &lt;a href="http://www.chrismaughan.com/"&gt;Chris Maughan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-04-29T18:53:25.041Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/72y2EC5fkcE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The tooling here is next-level.  Bret Victor would be proud&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=zLd1RUDmX6w"&gt;Laurie Spiegel - Waveshaper TV Ep.6 (Part 1 of 3: Bell Labs)&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-01T08:19:33.798Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/zLd1RUDmX6w/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;👁️ &lt;a href="https://vyaakaran.vercel.app/"&gt;Vyaakaran - Visualize automata, parsers, grammars for free&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-01T17:13:51.566Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Really good Automata and formal language visualizer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://vyaakaran.vercel.app/"&gt;Vyaakaran - Visualize automata, parsers, grammars for free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visualize automata, parsers and formal languages right on the browser in an easy to use interface with Vyaakaran.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=GXetjTQhd2g&amp;amp;t=1103s"&gt;Resonite VR November 2023 (Content Showcase)&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-03T18:06:03.106Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/GXetjTQhd2g/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been following Resonite - ex-NeosVR - for a while now, but for some reason I never thought to link it here, perhaps because it's mostly about social VR. But it has an interesting 3D in-world programming system&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/hieuSSR/status/1786270259206668643"&gt;Hieu :rocket: (@hieuSSR) on X&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/linking-together.html#2024-05-04T02:01:21.929Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Design principles of SQL from it’s creator&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/hieuSSR/status/1786270259206668643"&gt;Hieu 🚀 (@hieuSSR) on X&lt;/a&gt;: Inventor of SQL talks about how they come up with the language&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Naresh R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/of-ai.html#2024-04-29T16:31:36.844Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been thinking about this tweet from John Carmack (who created Doom), and just generally about a future where AI does most of the coding and I'm managing AI - and... I hate it? It's not to say that I don't see this happening. There's a ton of capital flying around to make it happen, and I think end-users will inevitably gain the capability to build certain categories of simple, customised software.&lt;/p&gt;
&lt;p&gt;But as someone who has deeply loved the practice of programming for more than a decade, the future that GitHub (who - in the midst of me writing this - launched Copilot Workspace), Devin, and the rest are painting seems to be leaving out so much of nuances that comes with building anything non-trivial. I absolutely love the idea of operating at a higher level of abstraction (just like how I enjoy writing modern programming languages compared to C or assembly) and getting my ideas/work out faster. But not spending my entire day just asking AI to do things or reviewing code all day - which makes me wonder: how do developers even get good at reviewing code if they aren't spending a ton of time writing code and problem solving? What's the right level of abstraction in this "promised future" that lets me get into the nuances of building software for anything non-trivial and continue problem solving in general? This is perhaps not even a question, and just a general thought I've been thinking a lot about.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F07/F070R3MQK71.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/jryans"&gt;J. Ryan Stinnett&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/present-company.html#2024-05-01T15:24:39.904Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am looking around for tools / frameworks / UI patterns that are roughly of the shape "spreadsheet with editable computation pipeline". What do people know of that's in that category?&lt;/p&gt;
&lt;p&gt;To clarify, I realise spreadsheets alone can achieve computation... but I am thinking more of projects where the computation is a bit more "visual" than just formulas in cells, perhaps like a nodes or blocks environment that then feeds into a table / spreadsheet to display data. &lt;strong&gt;@Paul Shen&lt;/strong&gt;'s Natto is one such example of the kind of thing I am thinking of. There might be other ways to do this beyond just a series of nodes that feed into a table... I'm curious to see what else might be out there already. I wonder if there are projects in the data analysis / computational science spaces that might fit...?&lt;/p&gt;
&lt;p&gt;Apologies if my question is too vague, I'm still trying to work out what I'm even looking for. 🙂&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/05/W1/present-company.html#2024-05-03T11:37:59.561Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[April 10th, 2024 8:20 PM] mariano: :loudspeaker: Future of Coding Berlin Meetup: Show and Tell + Walk and Talk on June 1st!&lt;/p&gt;
&lt;p&gt;We are organizing an informal meetup the day after &lt;a href="https://www.localfirstconf.com/"&gt;https://www.localfirstconf.com/&lt;/a&gt; in Berlin, the idea is to meet early in the day somewhere TBD, do a show and tell and then if you are willing go for a walk through Berlin stopping for food/drinks/resting every now and then.&lt;/p&gt;
&lt;p&gt;If you are interested send me a DM with your email (will only be used to share updates and info about this), the places are limited so please contact me as soon as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202405-week-1/</guid><pubDate>Sun, 05 May 2024 20:47:24 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/03 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202003-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Welcome! Starting this week I will expand the "Demos" section to include original content created by Future of Coding members.&lt;/p&gt;
&lt;p&gt;The "From our Community" section will have content shared by members but that comes from "outside".  &lt;/p&gt;
&lt;p&gt;But first things first, there's a &lt;strong&gt;new podcast episode&lt;/strong&gt;, great topic and impressive production, check it out:&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎙️" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f399_fe0f/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399062-futureofcoding.org/episodes/045?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Future of Coding • Episode 45: Orca, with Devine Lu Linvega&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Orca is typically encountered as an inky black and seafoam green alphabet soup, pulsating to some species of broody electronic industrial throb. But it is also a forgiving learning environment that doesn’t crash, puts code and data together in the same space, lets you directly manipulate code and data interchangeably, allows generous recovery from mistakes, and supports discovery through freeform play.&lt;/p&gt;
&lt;p&gt;This is one of those "a very special episode" sort of things where.. it's going to be a bit different from the episodes I make for the forseeable future. Hope you enjoy it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Demos &amp;amp; Community Original Content&lt;/h3&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399066-twitter.com/geoffreylitt?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Geoffrey Litt&lt;/a&gt; shared an update on his website customization with spreadsheets project: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399070-twitter.com/geoffreylitt/status/1231962052727582726?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;More examples of customizing Hacker News with a spreadsheet&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;show estimated read times (fetched from an API)&lt;/li&gt;
&lt;li&gt;sort longest reads first, prioritize deeper content&lt;/li&gt;
&lt;li&gt;add personal annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in 1 minute, just using formulas. So many possibilities!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="📝" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;strong&gt;Sol Bekic&lt;/strong&gt; has been working on/with a new interaction model for livecoding for a while, and just put together the first comprehensive summary of the approach: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399074-s-ol.nu/alivecoding?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;alivecoding: livecoding with persistent expressions &lt;/a&gt; (&lt;img alt="🧵" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399078-futureofcoding.slack.com/archives/ccl5vvban/p1582737045011100?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399082-twitter.com/warianoguerra?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Mariano Guerra&lt;/a&gt; shared a short demo of a UI feature: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399086-twitter.com/warianoguerra/status/1232663924581044226?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;All the Small UX Things: repeat column names in the footer to shorten drop distance to cells below&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The example shows how to reorder columns and configures an aggregation of attendance by home team when the away team is "Arsenal"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;img alt="🌐" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399090-ballerina.io/?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;https://ballerina.io/&lt;/a&gt;: A Programming Language for Network Distributed Applications (&lt;img alt="🧵" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt;&lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399094-futureofcoding.slack.com/archives/c5t9gpwfl/p1582566821024100?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever possible, Ballerina prioritizes programmer convenience &amp;amp; productivity with familiarity, clearer abstractions, and easier concepts over uber system performance.&lt;/p&gt;
&lt;p&gt;In Ballerina, every program is a sequence diagram that illustrates distributed and concurrent interactions automatically. The diagram is the code. The code is the diagram.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="💻" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4bb/32.png"&gt; &lt;strong&gt;Karki&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399098-github.com/hediet/vscode-debug-visualizer/tree/master/extension?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Debug Visualizer&lt;/a&gt;: A VS Code extension for visualizing data structures while debugging.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="📝" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399102-twitter.com/rafael_luque?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Rafael Luque&lt;/a&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399106-gist.github.com/luque/97235d8cf7d36cce02f47e24af441493?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;"Some old thoughts about the need for a new way of thinking about software."&lt;/a&gt; via &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reality is that a usual software project stack involves an increasingly larger number of programming languages, DSLs, frameworks, systems, tools, techniques and processes, so it is a fact that the accidental complexity in our day-to-day software projects is increasing to unbearable levels.&lt;/p&gt;
&lt;p&gt;We plan to build a new breed of dynamic and fully conceptual modeling environment in order to enable programmers to work through every development stage --analysis, specification, design, implementation, deployment, evolution, etc.-- at the conceptual level and explore their dynamic models as a thinking and learning tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🌐" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399110-www.physicsofsoftware.com/?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;The Physics of Software&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"This work is about a possible theory of forces in software, and how it can inform the way we design, the way we talk about design, and the way we think about design."&lt;/p&gt;
&lt;p&gt;Some interesting philosophizing - discussion about software as a material and the true nature of software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;img alt="🎮" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3ae/32.png"&gt; &lt;strong&gt;Will Crichton&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399114-www.youtube.com/watch?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Dreams | Release Date Trailer | PS4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seems interesting to view as a commercial end-user programming system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="📝" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;strong&gt;Scott Anderson&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399118-www.graycrawford.com/thesis?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Developing Embodied Familiarity with Hyperphysical Phenomena&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interesting set of VR interaction prototypes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;strong&gt;Scott Anderson&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399122-www.youtube.com/watch?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Example-based procedural placement in a dialogue system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;strong&gt;Charlie Roberts&lt;/strong&gt; shared &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-03-week-1/16399126-eater.net/quaternions?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;Visualizing quaternions quaternions: An explorable video series&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The “explorable” videos in this quaternion explanation are nicely done with an interesting reactive ui&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202003-week-1/</guid><pubDate>Thu, 02 May 2024 06:42:37 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 5</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-5/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🍩 Exploring Spaces 🐦 Bootstrapping Research &amp;amp; Dynamicland 📢 LIVE Workshop on Live Programming&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/aiAdsL64veg?si=Fu3DGPGWlDaZvWdl"&gt;Live Probe&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/two-minute-week.html#2024-04-22T04:23:25.937Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/aiAdsL64veg/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I have some progress in miqula, it can now show the current data of a node.&lt;/p&gt;
&lt;p&gt;The video is with voiceover, hopefully makes it easier to follow. (albeit this is not a tutorial of sorts)&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.linkedin.com/posts/jarnomontonen_natural-language-programming-opens-up-significant-activity-7189573670875385857-B0K3?utm_source=share&amp;amp;utm_medium=member_desktop"&gt;LLM code generation for Levlo&lt;/a&gt; via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/two-minute-week.html#2024-04-26T10:45:45.638Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Been playing around with &lt;a href="https://www.linkedin.com/posts/jarnomontonen_natural-language-programming-opens-up-significant-activity-7189573670875385857-B0K3?utm_source=share&amp;amp;utm_medium=member_desktop"&gt;LLM code generation for Levlo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🔑 &lt;a href="https://github.com/bicycle-codes/link"&gt;github.com/bicycle-codes/link&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-22T01:22:13.474Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just factored out the "linking" code. Its intended to be the simplest possible way to securely get the same  AES key onto multiple machines.&lt;/p&gt;
&lt;p&gt;✅ &lt;a href="https://github.com/nichoth/level-todo/"&gt;Level DB + E2E encryption + todo lists&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-22T05:13:37.417Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a demo app for an upcoming blog post&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] local-first&lt;/li&gt;
&lt;li&gt;[x] E2E encrypted&lt;/li&gt;
&lt;li&gt;[x] multiple devices per user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🎈 &lt;a href="https://gtoolkit.com/"&gt;Glamorous Toolkit&lt;/a&gt; via &lt;a href="https://twitter.com/girba"&gt;Tudor Girba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-23T10:54:13.921Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those that are intrigued by &lt;a href="https://gtoolkit.com"&gt;Glamorous Toolkit&lt;/a&gt;, perhaps the following talk can be interesting:&lt;/p&gt;
&lt;p&gt;Wednesday, April 24, 8pm CET&lt;/p&gt;
&lt;p&gt;UK Smalltalk User Group&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Glamorous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;



&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Glamorous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pharo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;others&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;'s a knowledge management system. Others might see a code analysis platform, a data visualization or an API browsing tool. Yet others see the graphical stack with its interactive editors. Glamorous Toolkit is all of these. But it'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;really&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;also&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;these&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;These&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;merely&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;molded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;there&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Glamorous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primarily&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;makes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;possible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;experiences&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seamlessly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contextually&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;leads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;programming&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Moldable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Join remotely here: &lt;a href="https://www.meetup.com/ukstug/events/300575234/"&gt;meetup.com/ukstug/events/300575234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🍩 &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_1/"&gt;Exploring Spaces 1: Torus&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-23T14:41:54.432Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yesterday I taped together a paper torus, built some inputs that wrap around like a torus, and drew some lines on a torus. I wrote a little post about my exploration! &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_1/"&gt;Exploring Spaces 1: Torus&lt;/a&gt; Would love to hear your feedback, criticism, adjacent thoughts, etc!&lt;/p&gt;
&lt;p&gt;♾️ &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_2/"&gt;Exploring Spaces 2: Twisted Taping&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-25T14:19:14.885Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote another little post, "Exploring Spaces 2: Twisted Taping". I made a twisted paper strip this time, and made some more interactive spaces you can try moving around in &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_2/"&gt;Exploring Spaces 2: Twisted Taping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really enjoyed the feedback and adjacent thoughts on the last one from &lt;a href="https://twitter.com/qualmist"&gt;Joshua Horowitz&lt;/a&gt; and &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;! Once again, I'd love to hear feedback, criticism, and adjacent thoughts 🙂&lt;/p&gt;
&lt;p&gt;🛸 &lt;a href="https://diode.zone/videos/watch/5ac43123-91fa-4b2b-a2d8-4ce0254fa2b8"&gt;A moldable inspector for Common Lisp&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-25T18:06:14.831Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A video &lt;a href="https://diode.zone/videos/watch/5ac43123-91fa-4b2b-a2d8-4ce0254fa2b8"&gt;introduction to my moldable inspector for Common Lisp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💻 &lt;a href="https://codeberg.org/khinsen/clog-moldable-inspector"&gt;clog-moldable-inspector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A moldable Common Lisp object inspector based on CLOG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🧮 &lt;a href="https://calcwithdec.dev/posts/you-draw-inflation/"&gt;You Draw Inflation 📈&lt;/a&gt; via &lt;strong&gt;Declan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-25T21:50:35.649Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made a 'you draw it' type input widget where you draw inflation. I'm trying to permit being a little bit deliberate about scenarios too. It's something I'll develop for defining scenarios for other calculation models. It's &lt;a href="https://calcwithdec.dev/posts/you-draw-inflation/"&gt;in a short blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-26T13:35:39.873Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The future of code involves waiting for Copilots (Even though they get faster all the time, we'll just ask more and more of them).&lt;/p&gt;
&lt;p&gt;We took a stab at visualizing the design decisions that our Copilot makes while it's coding the design you've prompted it for.&lt;/p&gt;
&lt;p&gt;Instead of just spinners or the raw stream of text like chat UIs, we overlay this visualization where the design will appear on the canvas. Each visualization reflects a design variant that Copilot works on, and is computed in real-time based on the token streams from the LLM.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F070RU602R3.mp4"&gt;copilot streaming - music player&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F07/F070URPQSTC.mp4"&gt;copilot streaming - vacation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔄 &lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_3/"&gt;Exploring Spaces 3: Taping Infinity&lt;/a&gt; via &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/share-your-work.html#2024-04-26T21:44:43.661Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is my 3rd exploring spaces post about taping -∞ and +∞ together 🙂♾&lt;a href="https://vezwork.github.io/polylab/dist/demo/articles/exploring_spaces_3/"&gt;Exploring Spaces 3: Taping Infinity&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/devlog-together.html#2024-04-22T11:31:42.596Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently experimenting with this idea of adding Types and Reactivity to JSON as a domain-specific language for LLMs to generate miniapps or reactive documents on the fly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06UZJ8B0P9.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06UZJBM9N3.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;🔌 &lt;a href="https://johnaustin.io/articles/2024/composability-designing-a-visual-programming-language"&gt;Composability: Designing a Visual Programming Language&lt;/a&gt; via &lt;strong&gt;John Austin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-24T06:50:30.437Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok, I've been thinking a lot about composable systems recently, and why I don't find visual programming languages like blueprints very flexible. Wrote up a blog post about it. Basically, I think the value graph is a more fundamental primitive for computation than execution graphs. &lt;a href="https://johnaustin.io/articles/2024/composability-designing-a-visual-programming-language"&gt;Composability: Designing a Visual Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Greg Bylenok&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-25T16:28:00.601Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone else think of "configuring" as distinct from "programming"? Some activities I consider "configuring" and not "programming": much devops work such as Terraform, YML files for build pipelines, even commonly labeled "programming" of a VCR/DVR.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://chebykin.org/posts/openapic"&gt;openapic: openapi compiler like protoc | Ivan Chebykin&lt;/a&gt; via &lt;strong&gt;Ivan Chebykin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-26T20:43:42.337Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone, I'm currently trying to think of ways to improve OpenAPI developer experience, can someone check out the design doc for a simplified OpenAPI generator:  &lt;a href="https://chebykin.org/posts/openapic"&gt;chebykin.org/posts/openapic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Dennis Hansen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/thinking-together.html#2024-04-27T20:34:10.851Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Random thought/question. I've noticed canvas based design tools have converged on a panel configuration of "Layers | Canvas | Properties | (and sometimes Timeline)"-- as opposed solving the underlying needs another way. Is this pattern the end-all-be-all? Or a local maxima? I tend to think the later.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://archive.org/details/kuhn-metagov-20240320"&gt;Nanopublications: Rethinking global knowledge sharing (Tobias Kuhn)&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-22T13:32:39.191Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nanopublications are looking really interesting to me, I hope for you too 🙂 : &lt;a href="https://archive.org/details/kuhn-metagov-20240320"&gt;Nanopublications: Rethinking global knowledge sharing (Tobias Kuhn)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://knowledgepixels.com/slides/metagov-nanopubs/"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nanopub.net/"&gt;nanopub.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://www.youtube.com/watch?v=eJm44LJDU44"&gt;Bootstrapping Research &amp;amp; Dynamicland, Dec 2019&lt;/a&gt; via &lt;strong&gt;Dennis Hansen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-25T01:57:34.618Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Someone on twitter scraped Dynamicland to find a few amazing unlisted Bret Victor talks on YouTube. Don’t think he’d mind this community seeing them :). &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/janpaul123/status/1783006294464692553?s=46"&gt;JP Posma (@JanPaul123) on X&lt;/a&gt;: The best Bret Victor talk you’ve never seen. &lt;a href="https://www.youtube.com/watch?v=eJm44LJDU44"&gt;Bootstrapping Research &amp;amp; Dynamicland, Dec 2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/ext_tw_video_thumb/1783005925898690560/pu/img/eBsIkglu1D9PMXm4.jpg:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🏝️ &lt;a href="https://www.causalislands.com/"&gt;causalislands.com&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-25T21:18:14.809Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is new to me. Anyone ever heard of it?&lt;/p&gt;
&lt;p&gt;📢 &lt;a href="https://liveprog.org/"&gt;LIVE 2024: The Tenth Workshop on Live Programming&lt;/a&gt; via &lt;a href="https://twitter.com/qualmist"&gt;Joshua Horowitz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/linking-together.html#2024-04-25T23:19:10.203Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This year I’m helping organize &lt;a href="https://liveprog.org/"&gt;LIVE&lt;/a&gt;, the Workshop on Live Programming. A lot of folk here in FoC are working on projects related to liveness… I encourage you to consider submitting your work!&lt;/p&gt;
&lt;p&gt;(Here, “live programming” means “getting immediate feedback on the behavior of your program even while you’re programming it”. That includes “Learnable Programming”-style interfaces, spreadsheets, notebooks, REPL-y stuff, interfaces for live performances with code, many interfaces for making art with code...)&lt;/p&gt;
&lt;p&gt;LIVE is an academic conference, but it’s attracted great work from people both in and outside the academy. Submitting a project to LIVE might be an opportunity to communicate about your work in a new way and get thoughtful feedback on it from a new community. (We have some tips for non-academics in our &lt;a href="https://liveprog.org/#faq"&gt;FAQ&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The submission deadline is  &lt;em&gt;July 7&lt;/em&gt; . The workshop will be some day TBD  &lt;em&gt;October 20-25, 2024 in Los Angeles&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Feel free to DM me if you have questions or concerns; I’d be excited to help out. 🙏&lt;/p&gt;
&lt;p&gt;&lt;img alt="liveprog.png" src="http://history.futureofcoding.org/history/msg_files/F07/F07144KSF89.png"&gt;&lt;/p&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="http://voyant.bio"&gt;platform&lt;/a&gt; via &lt;strong&gt;Assaf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W5/of-ai.html#2024-04-25T15:05:38.676Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anybody interested in bio/drug discovery applications? I’m working on a &lt;a href="http://voyant.bio"&gt;platform&lt;/a&gt; which aims to answer complex biological questions by talking to scientists. It’s not an autocomplete or a copilot. It’s a real AI developer that does all the coding while scientists give it feedback. Would love to chat about this domain or specific application and get your feedback.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-5/</guid><pubDate>Mon, 29 Apr 2024 14:17:29 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎙️ FoC 71 • Elephant in the Room 🧶 Stitching worlds 🎥 bi-directional data flow using visual programming&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://www.scattered-thoughts.net/writing/zest-syntax/"&gt;Zest: syntax&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/share-your-work.html#2024-04-17T01:57:17.603Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If syntax isn't important why does this feel so good...&lt;/p&gt;
&lt;p&gt;🎙️ &lt;a href="https://futureofcoding.org/episodes/071"&gt;Future of Coding 71 • Elephant in the Room&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/share-your-work.html#2024-04-21T04:11:02.908Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/906418692"&gt;Inventing on Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/64895205"&gt;Stop Drawing Dead Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/71278954"&gt;The Future of Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, all three of them in one episode. Phew!&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/devlog-together.html#2024-04-15T22:36:44.752Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m playing with electronics and crocheting atm. Imagining what other ways there are to interact with a computer, other than keyboard and mouse. This is a custom made bend/pressure sensor using copper sheets, velostat as a semi-conductive layer in between, with a crochet leaf on top and felt on the bottom, for a soft, non metallic feel 🐑&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06UH8UNSA0.mp4"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔙 &lt;a href="https://mastodon.social/@spiralganglion/112282956696254310"&gt;How can you even reverse a function?&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/devlog-together.html#2024-04-17T01:43:28.682Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://mastodon.social/@spiralganglion/112282956696254310"&gt;shared&lt;/a&gt; some &lt;a href="https://mastodon.social/@spiralganglion/112284014138207711"&gt;thoughts&lt;/a&gt; about  &lt;em&gt;my personal definition of&lt;/em&gt;  reversible computing over on Mastodon today. (Yeah, I slightly mangled the example of a surjective function — should have said  &lt;em&gt;nonnegative&lt;/em&gt;  integers.)&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/3vINEOECt9w"&gt;bi-directional data flow using visual programming&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/devlog-together.html#2024-04-20T07:28:58.971Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/3vINEOECt9w/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/3vINEOECt9w"&gt;In this video&lt;/a&gt; I show a small celsius to fahrenheit converter (this is one of the tasks from 7Gui) that I build using my visual programming system and extended it where needed.&lt;/p&gt;
&lt;p&gt;The solution uses an observe-variable node-type which triggers a flow when a variable gets set. I've also build a new user-input node with decimal formatting option (in the near future I will extend this to be configurable forms for collecting user-input).&lt;/p&gt;
&lt;p&gt;You can see what happens as you type in the celsius or fahrenheit temperature in the input fields (you see the data flowing though the flow). To prevent an infinite loop, the flow-engine uses a call-stack which stops running when a node gets run twice.&lt;/p&gt;
&lt;p&gt;I am still thinking of different solutions but for now this works (some nodes gets run unneeded, I think this can be optimized). Per node-call the node-id, scope-id and input port-name is stored on the call-stack, this is needed to keep other things working like the recursive functions in the quicksort example.&lt;/p&gt;
&lt;p&gt;The celsius-to-fahrenheit converter can be tried out here : &lt;a href="https://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; via the examples dropdown.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🧶 &lt;a href="https://www.stitchingworlds.net/"&gt;Stitching worlds&lt;/a&gt; via &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/linking-together.html#2024-04-15T22:28:51.596Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stitching worlds - a magazine imagining “What if electronics emerged from textile techniques such as knitting, weaving, crochet, and embroidery?” - &lt;a href="https://fedora.phaidra.bibliothek.uni-ak.ac.at/fedora/get/o:34528/bdef:Content/get"&gt;Stitching worlds&lt;/a&gt; (&lt;a href="https://www.stitchingworlds.net/"&gt;stitchingworlds.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;An embroidered computer using gold embroidery and magnetic beads (in the magazine): &lt;a href="http://ireneposch.net/the-embroidered-computer/"&gt;ireneposch.net/the-embroidered-computer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://www.stitchingworlds.net/"&gt;stitchingworlds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stitching Worlds is an artistic research project funded by the Program for Arts-Based Research (PEEK) of the Austrian Science Fund (FWF). The project is hosted by the University of Applied Arts Vienna, Institute of Design, Department of Industrial Design 2.&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="http://ireneposch.net/the-embroidered-computer/"&gt;The Embroidered Computer | Irene Posch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Embroidered Computer uses historic gold embroidery materials to craft a programmable 8 bit computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://www.kobakant.at/DIY/?cat=26"&gt;sesnors&lt;/a&gt; via &lt;a href="https://twitter.com/zlog"&gt;Tak Tran&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/linking-together.html#2024-04-16T07:10:29.256Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, a treasure trove of ideas for ways of making DIY &lt;a href="https://www.kobakant.at/DIY/?cat=26"&gt;sesnors&lt;/a&gt;/&lt;a href="https://www.kobakant.at/DIY/?p=7966"&gt;connections&lt;/a&gt;/&lt;a href="https://www.kobakant.at/DIY/?cat=28"&gt;actuators&lt;/a&gt; and random other things - &lt;a href="https://www.kobakant.at/DIY/"&gt;How to get what you want&lt;/a&gt; (DIY wearable technology documentation)&lt;/p&gt;
&lt;p&gt;Great name too 😄&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://osf.io/preprints/psyarxiv/8k5a4"&gt;Understanding and Effectively Mitigating Code Review Anxiety&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/linking-together.html#2024-04-16T14:28:30.709Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not a 1:1 future of coding article, &lt;a href="https://osf.io/preprints/psyarxiv/8k5a4"&gt;but this paper recently published by the dev. success lab is pretty neat&lt;/a&gt;, especially if you are interested in helping to foster learning culture.&lt;/p&gt;
&lt;h2&gt;🤖&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/of-ai.html#2024-04-19T17:51:50.312Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone done any work with the memory design from the human simulacrum paper by Joon Sung Park? Saw a presentation last week at Stanford, the boss is having me experiment with his code base. Would like to exchange notes.&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W4/present-company.html#2024-04-19T23:41:22.930Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My favorite loosely-syntaxed calculator finally has another mobile release!
 &lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06V85G8BGB.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-4/</guid><pubDate>Tue, 23 Apr 2024 10:01:57 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/ElNTPWdWfFQ"&gt;visual programming with improved timeline slider&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/two-minute-week.html#2024-04-14T12:41:22.387Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ElNTPWdWfFQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been improving the timeline-slider in my visual programming system code-flow-canvas.. you can try it out here : &lt;a href="https://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; (best experience is on desktop since the mobile and touch responsiveness is still lacking). &lt;/p&gt;
&lt;p&gt;Additionally the state-machine node now also shows its transitions when executing a flow or using the timeline slider. &lt;/p&gt;
&lt;p&gt;Also some the nodes that are used to visualize data have been connected to the flow-execution history. Some changes were needed in keeping track of state and updating nodes visually when using the timeline slider. &lt;/p&gt;
&lt;p&gt;In this video I &lt;a href="https://youtu.be/ElNTPWdWfFQ"&gt;show some of the examples together with the timeline slider here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://vimeo.com/932149150?share=copy"&gt;Building an everything shell&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-09T19:38:16.681Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1829727771-aef54e2cc7a9e469617424036e8a51cd8e778736101a608d414b59390ec3a04b-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I've started building an "everything shell". It uses my language EYG and a structural editor. the whole thing is be hosted with the idea that the resources you can ask about (instead of filesystems and processes) are every cloud system I have.&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Ivan Lugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-10T19:55:43.134Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“It’s a Unix system… I know this!”&lt;/p&gt;
&lt;p&gt;Something from a year or two ago that I built and iterated on since then. Ever wanted to see all your files in 3D to get a mental map? No problem - use  &lt;code&gt;CherrierView&lt;/code&gt;  - a terminal-style, colorized  &lt;code&gt;.dae&lt;/code&gt;  blit of arbitrary directories into space.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06TTTR3HTN.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=-FgAHiI3ZNY"&gt;Torn Leaf Zero&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-14T13:17:27.302Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/-FgAHiI3ZNY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I made a video to introduce an exhibition im making called TORN LEAF ZERO&lt;/p&gt;
&lt;p&gt;It features a collaborative artwork with over one hundred participants&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://www.exaequos.com"&gt;exaequos.com&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/devlog-together.html#2024-04-13T18:18:35.754Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been playing with a new platform that I hope will be quite convivial. Hosted 😬 but no Javascript and seems easy to build and self-host. Created by a single person, so decent chance of staying simple over time. It seems to be a fork of emscripten that's been made habitable. In particular, it includes raylib and some Lua bindings to it, so I'm starting to feel at home.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.exaequos.com"&gt;exaequos.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ported one of my early LÖVE apps to it, for geometric constructions. There's an app store and I've published my app there, so you should be able to run it for yourself and inspect the source code. (All apps on the app store are available right in the file system, under  &lt;code&gt;/usr/store&lt;/code&gt; !)&lt;/p&gt;
&lt;p&gt;Disclaimers. It's slow, like dialing up over a phone line. Still lots of bugs. I had to reboot the VM several times while recording this video. Commands often hang or crash, then completely stop working until I reload. It's never lost my data, though. Data is stored in local storage on the browser until you publish something to the app store.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06U6BTNW7M.webm"&gt;exaequOS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/hamish_todd"&gt;Hamish Todd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-08T10:57:20.034Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm thinking about spreadsheets. Has anyone ever made a convincing interface for  &lt;em&gt;defining functions&lt;/em&gt; , using a spreadsheet interface?&lt;/p&gt;
&lt;p&gt;(I am aware that you can define functions in most modern spreadsheets, but this requires you to go to a traditional coding interface. This is obviously cheating!)&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-13T09:07:51.756Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi FoC Community 🙂  I'm looking for something that i found a couple of years ago and apparently my fuzzy descriptions fail my zettelkasten or a search engine for that matter. I think I'm looking for a clojure talk in which someone presented also a tool. This tool used a UI of 2 or Three circles as a kind of number REPL which explained for example how the map function works in clojure. I hope that isn'T too vague if you know the name of the tool, that would be very cool. Thank you!!&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://medium.com/@bitteldany/where-does-constant-data-go-b650338b2ee9"&gt;Where does constant data go?&lt;/a&gt; via &lt;strong&gt;Dany&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-14T12:34:59.807Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote a blog post about constant data in PL. Which is kind of curious in text based PL and a place where more visual approaches can really shine. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All of the programming languages I know make an interesting distinction, between two groups of constants, depending on type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/"&gt;Future of Coding Weekly 2020/02 Week 1&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/linking-together.html#2024-04-10T08:15:55.321Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📜 Past Futures of Coding February 2020 Edition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/"&gt;Future of Coding Weekly 2020/02 Week 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/"&gt;Future of Coding Weekly 2020/02 Week 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/"&gt;Future of Coding Weekly 2020/02 Week 3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/"&gt;Future of Coding Weekly 2020/02 Week 4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W3/linking-together.html#2024-04-10T12:52:24.771Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve been reviewing classic papers about simplicity, complexity, and adjacent topics, both for my current series of essays and an essay I’m writing for Onward!&lt;/p&gt;
&lt;p&gt;So far I have reviewed (or downloaded for review):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Herbert A. Simon, The Architecture of Complexity (1962)&lt;/li&gt;
&lt;li&gt;Melvin E. Conway, How Do Committees Invent? (1968)&lt;/li&gt;
&lt;li&gt;Peter Naur, Programming as Theory Building (1985)&lt;/li&gt;
&lt;li&gt;Frederick P. Brooks, Jr., No Silver Bullet — Essence and Accident in Software Engineering (1986)&lt;/li&gt;
&lt;li&gt;Richard P. Gabriel, Worse is Better (1991)&lt;/li&gt;
&lt;li&gt;Rich Hickey, Simple Made Easy (2011)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What am I missing? What else should be on that list?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-3/</guid><pubDate>Tue, 16 Apr 2024 13:51:43 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;On the experiment side, this week I started playing with emojis to allow quick scans for content of interest, I will try to be consistent with the emoji usage so people can use them to orient around a previously dry wall of text (the tool I use doesn't excel at promoting creative expression)&lt;/p&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://twitter.com/geoffreylitt/status/1229251217118892032"&gt;New little demo of end user software customization&lt;/a&gt; by &lt;a href="https://twitter.com/geoffreylitt"&gt;Geoffrey Litt&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort Hacker News by total points descending, for a more stable ranking&lt;/li&gt;
&lt;li&gt;Remove the articles I've already read&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="💻" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4bb/32.png"&gt; &lt;a href="https://twitter.com/ccorcos"&gt;Chet Chorcos&lt;/a&gt; shared a &lt;a href="https://github.com/ccorcos/datalog-prototype"&gt;full-stack prototype of collaborate web application backed by a Datalog-inspired database&lt;/a&gt; he built in one day.&lt;/p&gt;
&lt;p&gt;&lt;img alt="📑" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4d1/32.png"&gt; Useful resources mentioned in the &lt;a href="https://github.com/ccorcos/datalog-prototype#how-does-it-work"&gt;How does it work?&lt;/a&gt; section of the readme.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; A brief walk-through on the steps needed to &lt;a href="https://www.youtube.com/watch?v=6t9VSyyE4to"&gt;create launch visualizations from the SpaceX HTTP JSON API&lt;/a&gt; (cameo of the basket to ease drag and drop of multiple things in targets far apart from the source). Also short demos about &lt;a href="https://www.youtube.com/watch?v=XMzP2KVLRR8"&gt;Premier League Attendance and Goals by Team from CSV File&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=80f_J5goHMo"&gt;Sales KPIs from an Excel Spreadsheet&lt;/a&gt; by &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=0msyWHrw40A"&gt;Beyond Snapping: Persistent, Tweakable Alignment and Distribution with StickyLines&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UIST 2016: Proceedings of the 29th Annual ACM Symposium on User Interface Software &amp;amp; Technology&lt;/p&gt;
&lt;p&gt;Aligning and distributing graphical objects is a common, but cumbersome task. In a preliminary study (six graphic designers, six non-designers), we identified three key problems with current tools: lack of persistence, unpredictability of results, and inability to 'tweak' the layout.&lt;/p&gt;
&lt;p&gt;We created StickyLines, a tool that treats guidelines as first-class objects: Users can create precise, predictable and persistent interactive alignment and distribution relationships, and 'tweaked' positions can be maintained for subsequent interactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=KfxE99eN44c"&gt;Beyond Grids: Interactive Graphical Substrates to Structure Digital Layout&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CHI'17: ACM CHI Conference on Human Factors in Computing Systems Session: Spatial &amp;amp; Temporal Design&lt;/p&gt;
&lt;p&gt;Traditional graphic design tools emphasize the grid for structuring layout. Interviews with professional graphic designers revealed that they use surprisingly sophisticated structures that go beyond the grid, which we call graphical substrates.&lt;/p&gt;
&lt;p&gt;We present a framework to describe how designers establish graphical substrates based on properties extracted from concepts, content and context, and use them to compose layouts in both space and time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=lX1BBMyY1bc"&gt;Project Lincoln: Adobe MAX 2017 (Sneak Peeks)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lincoln is a data visualization tool for designers to link graphics to data without the need to code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://data-illustrator.com/"&gt;Data Illustrator: Create infographics and data visualizations without programming&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Augmenting Vector Design Tools with Lazy Data Binding for Expressive Visualization Authoring.&lt;/p&gt;
&lt;p&gt;Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, 2018&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🌐" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;a href="https://charticulator.com/"&gt;Charticulator: Create Bespoke Chart Designs without Programming&lt;/a&gt;. ( &lt;a href="https://charticulator.azureedge.net/videos/charticulator-supplemental.mp4"&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; Video&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=xvoJsymzRkw"&gt;Jennifer Mary Jacobs - Domain Specific Programming Platforms for Creativity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="📝" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;a href="http://blog.rfox.eu/en/Programmer_s_critique_of_missing_structure_of_oper.html"&gt;Programmer's critique of missing structure of operating systems&lt;/a&gt; by &lt;a href="https://twitter.com/bystroushaak"&gt;@bystroushaak&lt;/a&gt; who expresses his frustration in using raw text (files, command parameters, environment variables, socket...) as unique way to communicate at the OS level.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="📑" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4d1/32.png"&gt; A &lt;a href="https://github.com/pel-daniel/mind-bicycles"&gt;list of future of programming projects&lt;/a&gt; maintained by &lt;a href="https://pel-daniel.github.io/cv/"&gt;Daniel García Carmona&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🧵" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; A &lt;a href="https://threadreaderapp.com/thread/927593460642615296.html"&gt;twitter thread&lt;/a&gt; by &lt;a href="https://twitter.com/gravislizard"&gt;@gravislizard&lt;/a&gt; argues that keyboard based old text UI was faster and not necessary less intuitive than web UI with mouse: &amp;gt; almost everything on computers is perceptually slower than it was in 1983 amber-screen library computer in 1998: type in two words and hit F3. search results appear instantly. now: type in two words, wait for an AJAX popup. get a throbber for five seconds. oops you pressed a key, your results are erased.&lt;/p&gt;
&lt;p&gt;Follows a &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1582130078216300"&gt;Slack thread&lt;/a&gt; which eventually discusses distributed, interactive, stateful apps/systems.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="🎥" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://vimeo.com/392454807"&gt;Stamper: An Artboard-Oriented Creative Coding Environment&lt;/a&gt; by &lt;a href="https://twitter.com/supercgeek"&gt;Cameron Burgess&lt;/a&gt; (&lt;img alt="🧵" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1582133029218800"&gt;Slack Thread&lt;/a&gt;, &lt;a href="https://twitter.com/supercgeek/status/1230163240815955968"&gt;Twitter Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stamper is an alternative editor for p5.js, inspired by design software with Artboards (e.g. Sketch, Illustrator)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="📝" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; Read more here: &lt;a href="https://paper.dropbox.com/doc/Stamper-An-Artboard-Oriented-Programming-Environment-QXtfMXshBFBNCu6iCtx2J"&gt;Stamper: An Artboard Oriented Programming Environment&lt;/a&gt;&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/</guid><pubDate>Wed, 10 Apr 2024 08:08:35 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Announcing the awesome program for the &lt;a href="https://2020.programming-conference.org/home/salon-2020#program"&gt;Convivial Computing Salon 2020 - ‹Programming› 2020&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Demos&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Raathi Kugarajan&lt;/strong&gt; shared his project &lt;a href="https://github.com/Raathigesh/JSBubbles"&gt;JSBubbles&lt;/a&gt;: Re-imagining reading and navigating JavaScript codebases in VSCode&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was tinkering with a VSCode extension inspired by Code Bubbles but my effort was mostly focused on navigating and reading JavaScript code bases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrew Reece&lt;/strong&gt; posted a second DevLog for WhiteBox, a live debugger/REPL for C(++) - now with a GUI, a familiar debugger-like data tree, graphing variable value changes across a function.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lZX8I0w7jJ4"&gt;WhiteBox DevLog 2 - GUI, data trees and graphing values over time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/E-l15Re1lUU"&gt;Bloques Web Update&lt;/a&gt; by &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An update to the tool to teach HTML/CSS/JS to non programmers, added new high level blocks, some even for layout, two lower level layers that get closer and closer to textual HTML. Also added import/export.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;From our Community&lt;/h4&gt;
&lt;p&gt;Talk presenting &lt;a href="https://www.youtube.com/watch?v=tX4H_ctggYo"&gt;Geometric Algebra for Computer Graphics&lt;/a&gt; which seems to simplify operations compared to other representations.&lt;/p&gt;
&lt;p&gt;More information on the website &lt;a href="https://bivector.net/"&gt;https://bivector.net/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clifford's Geometric Algebra enables a unified, intuitive and fresh perspective on vector spaces, giving elements of arbitrary dimensionality a natural home.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementations in Javascript, c++, c#, rust and python at the &lt;a href="https://github.com/enkimute/ganja.js/"&gt;ganja.js&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jasonlaster11/status/1226965515144482827"&gt;Jason Laster&lt;/a&gt; shared &lt;a href="https://webreplay.io/"&gt;Web Replay&lt;/a&gt; which supports &lt;a href="https://webreplay.io/features/time-travel-debugging.html"&gt;Time Travel Debugging&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web Replay records your entire application, so you can track bugs down faster, understand your code better, and always get perfect bug reports.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/podcasts/debugging-record-replay-data/"&gt;Greg Law on Debugging, Record &amp;amp; Replay of Data, and Hyper-Observability&lt;/a&gt; by &lt;a href="https://twitter.com/gregthelaw"&gt;Greg Law&lt;/a&gt; via &lt;strong&gt;Karki&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Topics discussed included: the challenges with debugging modern software systems, the need for “hyper-observability” and the benefit of being able to record and replay exact application execution; and the challenges with implementing the capture of nondeterministic system data in Undo’s LiveRecorder product for JVM-based languages that are Just-In-Time (JIT) compiled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rcn.com/david-moon/Lunar/all_programming_languages_are_wrong.html"&gt;All Programming Languages are Wrong&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/David_A._Moon"&gt;David A. Moon&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581503038102000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most current-day programming languages seem to be based on the idea that computation is slow, so the user and the compiler must work hard to minimize the number of instructions executed.&lt;/p&gt;
&lt;p&gt;Compromises to minimize instructions extend so far as to make familiar-looking operators like + and &amp;lt; behave in unintuitive ways. If as a result a program does not work correctly in some cases, it is considered to be the programmer's fault. But it is really the language designer's fault.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ryanflorence/status/1227629264259801088?s=20"&gt;Ryan Florence&lt;/a&gt; on twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever I talk to teenagers about programming they want to do it on their phone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And an interesting &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581608876136700"&gt;Slack conversation&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/graydon_pub"&gt;Graydon Hoare&lt;/a&gt; on "text is already a highly-structured graphical notation" via &lt;strong&gt;yoshiki&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;many technical innovations are latent in textual notations. Visually unambiguous yet uniform symbol sets, combinatorial-positional word formation, linear spatio-temporal segregation, punctuation and structured page layout .. these are all technologies in writing that we had to laboriously invent, and they have purposes, advantages! Similarly in coding, we had to invent and adapt technologies from verbal and mathematical notations refined over millennia: lines and columns, indentation, block layout, juxtaposition and precedence, scope, evaluation order, comments, grammars, version control, diff and merge algorithms ... the pile of structuring technologies embedded in the textual representation of programs isn't free, and it isn't useless&lt;/p&gt;
&lt;p&gt;So I'm just really cautious when people suggest throwing it all out for some hypothetical reinvention. You need those structures: so you've got an immediate problem of "what are you going to use instead", and a longer-term question of "what makes you think you're not going to wind up right back at the same place ten thousand years of refining graphemes-on-a-page wound up"?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's more where those quotes came from: &lt;a href="https://graydon2.dreamwidth.org/253769.html?thread=692809#cmt692809"&gt;Re: Graphical Editors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chris Knott&lt;/strong&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581499317101600"&gt;shares an interesting story about evolving clocks to solve a particular problem in a Slack conversation&lt;/a&gt;. A similar story about the &lt;a href="https://en.wikipedia.org/wiki/MacCready_Gossamer_Albatross"&gt;MacCready Gossamer Albatross&lt;/a&gt; is shared there too.&lt;/p&gt;
&lt;p&gt;Some quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;importance of not confusing incidental problems for fundamental problems&lt;/p&gt;
&lt;p&gt;the entire issue is not solved, but sidestepped&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/</guid><pubDate>Wed, 10 Apr 2024 08:07:20 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;&lt;strong&gt;New Future of Coding Podcast&lt;/strong&gt; &lt;a href="https://futureofcoding.org/episodes/044"&gt;#44 - Making Your Own Tools: Devine Lu Linvega | Future of Coding&lt;/a&gt; by &lt;a href="https://twitter.com/spiralganglion"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Devine Lu Linvega and his partner Rekka live on a sailboat. He makes art, music, software, and other cultural artifacts. When Photoshop’s DRM required that he maintain a connection to the internet, he wrote his own creative suite. When his MacBook died in the middle of the ocean, he switched to Linux with hardware he could service. His electricity comes from solar panels, and every joule counts — so that’s out with Chrome and Electron and in with Scheme, C, assembly, and maybe someday Forth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.loom.com/share/cab62c8172404c39bebc4c511a60a389"&gt;Customizing Airbnb with a spreadsheet&lt;/a&gt; by &lt;a href="https://twitter.com/geoffreylitt/status/1224094967922073600"&gt;Geoffrey Litt&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At 3:10 in this demo video, I drag select multiple listings on a website, and bulk perform an action on them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction"&gt;Anders Hejlsberg on Modern Compiler Construction&lt;/a&gt;. By &lt;a href="https://twitter.com/ahejlsberg"&gt;Anders Hejlsberg&lt;/a&gt; via &lt;strong&gt;Daniel&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this video Anders a great foundation of compiler construction by describing the traditional methodologies that have been used in the last 30 or so years. He then uses that foundation to describe modern tooling needs and how compilers have adapted to meet increasing demands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;An interesting &lt;a href="https://twitter.com/Polackio/status/1223303212775739392"&gt;Twitter thread on the preservation of digital art&lt;/a&gt;, including comment on how it hurts that digital artists can't fully manage the media they use. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580664092315400"&gt;Long and interesting Slack Thread&lt;/a&gt;). By &lt;a href="https://twitter.com/Polackio"&gt;Matt Popke&lt;/a&gt; via &lt;strong&gt;Konrad Hinsen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://djrobstep.com/posts/programs-are-a-prison"&gt;Programs are a prison: Rethinking the fundamental building blocks of computing interfaces&lt;/a&gt;. By &lt;a href="https://twitter.com/djrobstep"&gt;djrobstep&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580693035409300"&gt;Slack Thread&lt;/a&gt; via &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We often hear that Apple's ecosystem of apps (or Microsoft's, or Google's) are "walled gardens". But what about the individual applications themselves?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arcan-fe.com/about/"&gt;Arcan&lt;/a&gt; is a powerful development framework for creating virtually anything between user interfaces for specialised embedded applications all the way to full-blown standalone desktop environments. Boot splash screen? no problem. Custom Interface for your Home Automation Project? sure thing. Stream media processing? Of course. &lt;a href="https://www.youtube.com/watch?v=3O40cPUqLbU"&gt;AWB "Desktop" concept ~5min video&lt;/a&gt;. By &lt;a href="https://twitter.com/CrazyLogLad"&gt;Bjorn Stahl&lt;/a&gt; via &lt;strong&gt;S.M Mukarram Nainar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Interesting conversation on Slack about &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580751504462400"&gt;the positive benefits of accidental / incidental complexity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;This week on Slack, &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580718026447200"&gt;a fun prompt&lt;/a&gt; from Brandon Hudgeons (via Kartik Agaram):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get to name an assertion the ___ Paradox (fill in your last name). What do you choose?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Come &lt;a href="https://futureofcoding.org/community"&gt;join Slack&lt;/a&gt; and start a new thread about your paradox!&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://roamresearch.com/"&gt;Roam Research&lt;/a&gt; is looking for a &lt;a href="https://cwhitesullivan.acemlnb.com/lt.php?s=5142d0f360d4e0207722dd3e07dc3d46&amp;amp;i=14A158A1A36"&gt;Full Stack Engineer (Leaning Backend)&lt;/a&gt; by &lt;a href="https://twitter.com/Conaw"&gt;Conor White-Sullivan&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should love Clojure, be comfortable with some devops type work, and ideally have experience with Datomic and datalog.&lt;/p&gt;
&lt;p&gt;Big points if you're familiar with the work of Doug Engelbart, Bret Victor, Michael Nielsen, Andy Matuschak, and Alan Kay.&lt;/p&gt;
&lt;p&gt;SF preferred, but we'll consider remote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Operon 0.5.0 is out, find it from &lt;a href="https://operon.io"&gt;https://operon.io&lt;/a&gt; (Java-binary and pdf-booklet) by &lt;a href="https://twitter.com/OperonGuy"&gt;OperonGuy&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1580674741033000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is also the first public release and I'm hoping for feedback on the most rudimentary things; did you get the queries running (if you had a chance to try)? What was your initial impression on the language? Did you encounter anything illogical or that you could consider as possible design flaw?&lt;/p&gt;
&lt;p&gt;I have not yet documented everything, so there's more to come on later releases. Also none of the components were yet released, so it is just the core that is out now. Love to hear back from you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Summary of a paper: &lt;a href="https://instadeq.com/blog/posts/paper-didnt-read-statecharts-a-visual-formalism-for-complex-systems/"&gt;Paper; Didn't Read - Statecharts: A Visual Formalism For Complex Systems&lt;/a&gt; by &lt;a href="https://twitter.com/instadeq"&gt;instadeq&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;statecharts = state-diagrams + orthogonality + depth + broadcast-communication&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ballingt"&gt;Thomas Ballinger&lt;/a&gt; wrote some posts about "Observable for Jupyter Users".&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/b00406054cfb4875"&gt;Differences between Jupyter and Observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/eceaa744227c4fea"&gt;Visualize a data frame with Observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/c4e1459a8a99cdaf"&gt;Interactivity in Observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/5e82392bae5fb729"&gt;Bonus: JavaScript for Python Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lively discussion in the &lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1580753303039100"&gt;Slack Thread&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'd be particularly interested in whether you think I'm identifying the differences in workflow in a digestible way. The goal is that these are tutorials, not marketing documents, if there's a difference. I guess they're marketing documents for programmers, not CEOs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;An article about &lt;a href="https://gtoolkit.com/"&gt;Glamorous Toolkit&lt;/a&gt; describing what one rendering tree means and the doors it opens for creating new kinds of 2D interfaces: &lt;a href="https://medium.com/feenk/one-rendering-tree-918eae49bcff"&gt;One rendering tree&lt;/a&gt;. Via &lt;a href="https://twitter.com/girba"&gt;Tudor Girba&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1581166076065600"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/</guid><pubDate>Wed, 10 Apr 2024 08:06:12 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;&lt;a href="http://www.ppig.org/content/ppig-2020-call-papers"&gt;Psychology of Programming Interest Group Call for Papers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The 31st Annual Meeting of the Psychology of Programming Interest Group will be hosted for the first time in North America, at OCAD University's Inclusive Design Research Centre in Toronto, Canada, during the week of July 29-31, 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/prathyvsh/Visual-Math-Tools/"&gt;Catalog of Visual Math Tools&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580126222205200"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike Travers&lt;/strong&gt; joins our slack and introduces himself and his work. He worked at MIT MediaLab long time ago on &lt;a href="http://alumni.media.mit.edu/~mt/behave/behave.html"&gt;Behave!&lt;/a&gt; an interesting block based visual language for simple agent programming, that was one of the ancestor of Scratch. He now works on visual programming based on Blockly to help scientist build queries to scientific data (see this &lt;a href="https://www.dropbox.com/s/qabtwa4p6u48gfy/enflame-clojure-meetup.pdf"&gt;presentation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ps3mBPcjySE"&gt;GopherCon Europe 2019: Ivan Daniluk - Rethinking Visual Programming&lt;/a&gt; Presentation. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580180026224700"&gt;Slack Thread&lt;/a&gt;) via &lt;strong&gt;Edward de Jong&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Blog post: &lt;a href="https://divan.dev/posts/visual_programming_go/"&gt;Rethinking Visual Programming with Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.createwithplay.com"&gt;Play: A new approach for creating better mobile apps&lt;/a&gt; via &lt;strong&gt;Achraf Kassioui&lt;/strong&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580357865257500"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Play empowers you to design, build and launch better mobile products, in less time, with fewer barriers - all on your mobile device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariano Guerra&lt;/strong&gt; shared a &lt;a href="https://www.youtube.com/watch?v=UqTLUAWCM4M"&gt;video&lt;/a&gt; showing an educational prototype to produce HTML pages using Blockly to learn what HTML structure looks like without having to worry about syntax at first. The prototype is &lt;a href="https://marianoguerra.github.io/bloques-web/"&gt;online&lt;/a&gt; (in Spanish) and its sources are on &lt;a href="https://github.com/marianoguerra/bloques-web"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Jonathan Blow talking about his past, of course about games, but also about programming today, open source, C++, Rust, the future of programming, and many other issues people here will be interested in (and/or annoyed by his perspective ;-): &lt;a href="https://oxide.computer/blog/on-the-metal-9-jonathan-blow/"&gt;On the Metal Podcast: Jonathan Blow&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580480732286100"&gt;Slack Thread&lt;/a&gt;) via &lt;strong&gt;Stefan Lesser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ChrisKnott/Algojammer"&gt;Algojammer&lt;/a&gt; is an experimental, proof-of-concept code editor for writing algorithms in Python. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580241505237300"&gt;Slack Thread&lt;/a&gt;) via &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://careers.microsoft.com/us/en/job/769490/Internship-Opportunities-Designing-for-spreadsheets-and-programming-languages"&gt;Internship Opportunities: Designing for spreadsheets and programming languages&lt;/a&gt; at Microsoft Research in Cambridge. via &lt;strong&gt;Daniel Garcia&lt;/strong&gt;&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/</guid><pubDate>Wed, 10 Apr 2024 08:02:47 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/04 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🔮 Towards a modern Web stack 🎥 ThinkyCon 2024 👷 FoC Project Updates&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="http://www.chrismaughan.com/"&gt;Chris Maughan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/two-minute-week.html#2024-04-03T13:20:41.156Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A simple demo, trying to show how a pin-hole camera works.  Not really how it works, but kind of. 😉&lt;/p&gt;
&lt;p&gt;The 'film' in the back of the camera is a 'flatland' view of the scene, upside down, of course....&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06SNV978H2.mp4"&gt;balls demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;💻 &lt;a href="https://resheet.dev"&gt;resheet.dev: A notes-spreadsheet-hybrid for programmers&lt;/a&gt; via &lt;strong&gt;Daniel Krüger&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/share-your-work.html#2024-04-01T13:15:00.083Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm currently building &lt;a href="https://resheet.dev"&gt;resheet.dev&lt;/a&gt;, a notion-spreadsheet-hybrid. Started because I often ran into limitations with Notion and with spreadsheets. In Notion I wanted to be able to just do some calculations (or even have some embedded spreadsheet). Spreadsheets are nice, but I always ran into limitations. I always thought these could easily be overcome by having a more feature-complete programming language. Because I previously failed very hard by being too ambitious, I tried to keep this project simple. ReSheet runs JavaScript with React because of the vast ecosystem and wide adoption.&lt;/p&gt;
&lt;p&gt;It was important to me that it's core is simple and extensible: Everything revolves around the concept of a "Block", which can be thought of like a cell in a spreadsheet. Blocks can be nested and you're able to write and then use your custom Block completely in ReSheet itself. As ReSheet itself is just one big Block you can embed ReSheet in itself.&lt;/p&gt;
&lt;p&gt;Maybe sometime in the future I'll get to work on a Block for visual and interactive programming, but currently I'm trying to get it reliably working and useful in the current state.&lt;/p&gt;
&lt;p&gt;I'd love to hear your feedback and to answer any questions! (Documentation is still lacking. Currently working on adding some example documents (in ReSheet) to better show what's possible)&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://johnaustin.io/articles/2024/lattice-now-compiles-to-net-il"&gt;Lattice now compiles to .NET IL — John Austin&lt;/a&gt; via &lt;strong&gt;John Austin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/share-your-work.html#2024-04-02T21:26:41.512Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote up a blog post recently on Lattice, a high performance visual programming system aimed at Unity.&lt;/p&gt;
&lt;p&gt;Thought you all might find it interesting!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://johnaustin.io/articles/2024/lattice-now-compiles-to-net-il"&gt;Lattice now compiles to .NET IL — John Austin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lattice is a high-performance visual scripting system targeting Unity ECS. Read more here . I’ve tried several times to write blog posts about Lattice, and each time I’ve gotten lost in the weeds. It’s hard to pick a point to start. So instead, I’ve resolved to just start writing — quantity o&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🚲 &lt;a href="https://github.com/bicycle-codes/"&gt;Projects related to Bicycle Computing&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/share-your-work.html#2024-04-07T05:57:09.501Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another day, another module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bicycle-codes/scroll-progress"&gt;@bicycle-codes/scroll-progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bicycle-codes/raf-scroll"&gt;@bicycle-codes/raf-scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bicycle-codes/tonic"&gt;@bicycle-codes/tonic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bicycle-codes/copy-button"&gt;@bicycle-codes/copy-button&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;📜 &lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/"&gt;Future of Coding Weekly &lt;strong&gt;2020&lt;/strong&gt;/01 Week 3&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/devlog-together.html#2024-04-03T09:31:18.889Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I got a simple idea to migrate the old newsletter posts to the "blog", here's the first one I have: &lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/"&gt;newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I noticed that all links go through tinyletter but they still seem to work, example: &lt;a href="http://mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-01-week-3/16109598-www.youtube.com/watch?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf"&gt;mail01.tinyletterapp.com/marianoguerra/future-of-coding-weekly-2020-01-week-3/161[…]youtube.com/watch?c=f8edef3a-2c5e-4af4-a34d-904e97c707cf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;there's not enough information to recover them from url itself but since they are still working I should resolve them to the originals as fast as possible in case that service is turned off too 😕&lt;/p&gt;
&lt;p&gt;Update: I wrote &lt;a href="https://github.com/marianoguerra/future-of-coding-weekly/blob/gh-pages/detinyletter.js"&gt;a script&lt;/a&gt; to replace all redirect urls to the original ones, the post above is updated&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/devlog-together.html#2024-04-03T20:55:37.540Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today, I'm trying to get function signatures for all the std lib stuff in JS… at runtime. Current attempt is converting various d.ts files from the typescript package (like, say, es5.d.ts) into a JSON file with just the bits I need. If that fails, I might try parsing the official WebIDL files (that are used to generate these d.ts files — at least, the dom ones).&lt;/p&gt;
&lt;p&gt;If there's a much more obvious way to get this info, let me know. I basically just want something that, for a given function (eg: Array.prototype.splice), gives me some basic signature info (eg: 1-2 args with rest, first arg is called "index", optional second is called "delete", rest is "items"). If all else fails I'll just do .length on these functions, but I'd prefer to get names too.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/3t6XUXdFMZU"&gt;Simple state machine with value slider for brightness control and image in code-flow-canvas&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/devlog-together.html#2024-04-07T19:09:34.158Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/3t6XUXdFMZU/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've been fixing some bugs in the state-machine node-type in my visual programming system "code-flow-canvas" and also added a small media-library node-type which can be used by the show-image node-type.&lt;/p&gt;
&lt;p&gt;The show-image node-type can be controlled by the state-machine together with some UI node-types (button and slider).&lt;/p&gt;
&lt;p&gt;The show-image node-type also has an ability to change it's css and use flow parameters/variables (currently only the incoming value of a event/value special input-type.. I want to make this more generic in the near future so that you can send custom property-bags "over the wire" to other nodes).&lt;/p&gt;
&lt;p&gt;The timeline slider doesn't work together nicely with the slider node-type yet, so I have to work on that further.&lt;/p&gt;
&lt;p&gt;This example can be found on &lt;a href="https://demo.codeflowcanvas.io"&gt;demo.codeflowcanvas.io&lt;/a&gt; in the "examples" drop down: "Simple state machine with image and brightness". &lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://guitarvydas.github.io/2024/04/05/The-Origins-of-Silicon-Valley.html"&gt;The origins of silicon valley&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/thinking-together.html#2024-04-06T03:15:50.726Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Silicon Valley vs. non-compete clauses. &lt;a href="https://guitarvydas.github.io/2024/04/05/The-Origins-of-Silicon-Valley.html"&gt;guitarvydas.github.io/2024/04/05/The-Origins-of-Silicon-Valley.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📝 &lt;a href="https://guitarvydas.github.io/2024/04/05/The-Origins-of-Silicon-Valley.html"&gt;The origins of silicon valley&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I attended this talk &lt;a href="https://events.vtools.ieee.org/m/409693"&gt;https://events.vtools.ieee.org/m/409693&lt;/a&gt; by Paul Wesling in-person, yesterday.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://history.futureofcoding.org/?fromDate=2024-03-28&amp;amp;toDate=2024-04-03&amp;amp;channel=present-company&amp;amp;filter=#2024-03-31T20:15:39.930Z"&gt;Month of Future of Coding Past&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-03T13:57:12.950Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Following the &lt;a href="https://history.futureofcoding.org/?fromDate=2024-03-28&amp;amp;toDate=2024-04-03&amp;amp;channel=present-company&amp;amp;filter=#2024-03-31T20:15:39.930Z"&gt;💬 conversation here&lt;/a&gt; I decided to experiment with a "Month of Future of Coding Past".&lt;/p&gt;
&lt;p&gt;Every week I will dump from tinyletter and re upload one month of the &lt;a href="https://newsletter.futureofcoding.org/"&gt;Future of Coding Newsletter&lt;/a&gt; and publish it as a message here, that way we can all go over past conversations and links and I have a reason and rhythm to make them available again.&lt;/p&gt;
&lt;p&gt;A month re uploaded per week will allow me to catch up faster than "realtime" but still at a pace I can probably keep.&lt;/p&gt;
&lt;p&gt;Here's the first edition, the first two newsletters I have in my email (January 2020):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/"&gt;Future of Coding Weekly 2020/01 Week 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-4/"&gt;Future of Coding Weekly 2020/01 Week 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🕹️ &lt;a href="https://henriquelalves.com/posts/free-software-and-game-development/"&gt;free software and game development&lt;/a&gt; via &lt;a href="https://twitter.com/jna_sh"&gt;Joe Nash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-03T16:27:30.252Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article talks about “Living games” and game engines that enable living games by i.e. having no separation between the editor and the runtime, and gets into some FoC territory I think y’all will enjoy&lt;/p&gt;
&lt;p&gt;🔮 &lt;a href="https://docs.google.com/document/d/1peUSMsvFGvqD5yKh3GprskLC3KVdAlLGOsK6gFoEOD0/edit?resourcekey=0-bPajpoo9IBZpG__-uCBE6w"&gt;Towards a modern Web stack&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-04T21:13:11.536Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-&amp;gt; &lt;a href="https://docs.google.com/document/d/1peUSMsvFGvqD5yKh3GprskLC3KVdAlLGOsK6gFoEOD0/edit?resourcekey=0-bPajpoo9IBZpG__-uCBE6w"&gt;Towards a modern Web stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cool new take on the &lt;a href="https://github.com/extensibleweb/manifesto"&gt;Extensible Web Manifesto&lt;/a&gt;, this one from &lt;a href="https://en.wikipedia.org/wiki/Ian_Hickson"&gt;Hixie&lt;/a&gt; (Acid2, Acid3, WHATWG, Pingback, Flutter, etc).&lt;/p&gt;
&lt;p&gt;I love the breakdown — Wasm, WebGPU, ARIA, and HID. I would build on that stack!&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/Wattenberger/status/1776032867031900608"&gt;Amelia Wattenberger 🪷 (@Wattenberger) on X&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-04T23:52:14.449Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New music genre just dropped&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://x.com/Wattenberger/status/1776032867031900608"&gt;Amelia Wattenberger 🪷 (@Wattenberger) on X&lt;/a&gt;: I did some cutting-edge AI research into the best way to read code. 100% now part of my workflow:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://app.suno.ai/song/f44c966a-7c41-4c13-88a8-8e0e88b492bf/"&gt;"use client"; mongolian throat singing v3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;📑 &lt;a href="https://github.com/jbenet/random-ideas/issues"&gt;a list of random software engg ideas&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-05T08:02:17.111Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A couple of years ago, I noticed how Juan Benet (founder of IPFS) was keeping &lt;a href="https://github.com/jbenet/random-ideas/issues"&gt;a list of random software engg ideas&lt;/a&gt; in a github repo as issues. Since then I too started keeping my own list of "RFH"s ("Request for Hacks") - similar to Request for Comments and Request for Startups - here: &lt;a href="https://codeberg.org/nilesh/request-for-hacks/issues"&gt;codeberg.org/nilesh/request-for-hacks/issues&lt;/a&gt; and recently made it public.&lt;/p&gt;
&lt;p&gt;Posting ideas in a place where public discussion can take place seems like an excellent way to get open feedback or review. I encourage other programmers to do the same. Perhaps,  &lt;code&gt;/&amp;lt;username&amp;gt;/request-for-hacks&lt;/code&gt;  can become a standard way to discover these. 🙂&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06SY9PPPQB.png"&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=BUud1gcbS9k&amp;amp;t=2050"&gt;Alan Kay at MIT-EECS 1998 Fall Semester Colloquium Series (VPRI 834)&lt;/a&gt; via &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-05T20:41:10.291Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/BUud1gcbS9k/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I watched older video by Alan Kay and now I want to give a Squeak another try&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=7kgXBifWQXI&amp;amp;t=12992s"&gt;ThinkyCon 2024 - Day 1&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/04/W2/linking-together.html#2024-04-05T20:58:10.451Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/7kgXBifWQXI/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There's a puzzle game conference called ThinkyCon that's currently running. Some of the talks are about editor tooling (&lt;a href="https://www.youtube.com/watch?v=7kgXBifWQXI&amp;amp;t=5591s"&gt;like this one&lt;/a&gt;, about the dev tooling used for the game A Monster's Expedition), which feels roughly relevant to this community. But there's one talk in particular that I  &lt;em&gt;must&lt;/em&gt;  draw your attention to because this is the internet and I need to earn points. The talk is called "&lt;a href="https://www.youtube.com/watch?v=7kgXBifWQXI&amp;amp;t=12992s"&gt;Rewinding: moving time backwards in planning-based games&lt;/a&gt;". The first example they use of a game that ought to have rewind but doesn't is Opus Magnum, a game by Zachtronics that is the spiritual successor to SpaceChem. I'd argue that both of these games are visual programming environments, and that this talk is basically an argument that visual programming deserves the ability to rewind time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;👨🏽‍💻 By 🐘 &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; 🐦 &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;✉️ Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️ Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202404-week-2/</guid><pubDate>Sun, 07 Apr 2024 21:14:22 GMT</pubDate></item></channel></rss>