<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Tue, 26 Mar 2024 03:36:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2024/03 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéº Strudel REPL üéôÔ∏è a podcast about Hest üïπÔ∏è Playing with Code: Programming-Adjacent Games&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üïπÔ∏è &lt;a href="https://marianoguerra.org/posts/playing-with-code-programming-adjacent-games/"&gt;Playing with Code: Programming-Adjacent Games&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/share-your-work.html#2024-03-19T16:27:58.512Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I collected and summarized the answers to my question about programming-adjacent games&lt;/p&gt;
&lt;p&gt;üìÑ &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06QPL5TLRF.pdf"&gt;Formula for generating distinct colors&lt;/a&gt; via &lt;strong&gt;Fredrik&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/share-your-work.html#2024-03-19T17:55:44.759Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those situations where there's a need to automatically generate a unique color for each item in a set, I've figured out a formula that yields a good distribution based on the oklch color space. The attached document has some pretty infographics.&lt;/p&gt;
&lt;p&gt;You can also see the &lt;a href="https://typst.app/project/roIpfK0qpTfEMeHW-rIfpK"&gt;source code of the document&lt;/a&gt; in Typst. Typst is already the future of programming.&lt;/p&gt;
&lt;p&gt;üìÑ &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06QPL5TLRF.pdf"&gt;Formula for generating distinct colors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/share-your-work.html#2024-03-22T15:22:09.764Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A tangible programming interface inspired by Andean khipu that we've been working on..&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06QQA6NB2A.png"&gt;&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://try-slate.com/"&gt;Slate - A Playground for Ideas&lt;/a&gt; via &lt;strong&gt;Mohit Karekar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/share-your-work.html#2024-03-24T13:19:46.072Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recently thought about combining natural language prompts in code notebooks interface because it seemed like a great use case to me. While working with data, a mixture of low-level capability of writing code and a high-level capability to write transformations or visualization instructions in natural language can be a great advantage. You can code when you want to, and completely skip and offload to an LLM by writing natural language instructions! The notebook executes code and prompts in a single context. Here's something you can try that implements this idea: &lt;a href="https://try-slate.com/"&gt;try-slate.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also wrote some thoughts in a &lt;a href="https://mohitkarekar.com/posts/2024/slate/"&gt;post here&lt;/a&gt; and a short &lt;a href="https://www.loom.com/share/bcde36f3fa424b2f80c860def0b3f164?sid=2bf8cdea-ef9e-4421-9388-570a097e02f9"&gt;video demo here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Similar to traditional code notebooks like Jupyter Notebooks, but with a seamless integration with large-language models. Code when you want, skip when you don't. Export to code for portability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/devlog-together.html#2024-03-21T21:58:14.163Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Playing with UI filter predicates and optional values&lt;/p&gt;
&lt;p&gt;&lt;img alt="gd-preds.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06QPM31S77.gif"&gt;&lt;/p&gt;
&lt;p&gt;ü´∞ &lt;a href="https://git.sr.ht/~akkartik/snap.love"&gt;snap.love: a graph drawing tool&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/devlog-together.html#2024-03-23T17:42:40.540Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of all the apps I've built, perhaps my favorite is &lt;a href="https://git.sr.ht/~akkartik/snap.love"&gt;git.sr.ht/~akkartik/snap.love&lt;/a&gt;, my box and line drawing tool. I use it  &lt;em&gt;constantly&lt;/em&gt;  -- including for work. I have a terrible short term memory, and now I make quick mindmaps for every little situation where a full-screen IDE on a huge monitor is too tiny to show all the parts of the codebase I care about right now.&lt;/p&gt;
&lt;p&gt;I seldom mess with it, but today I modified it to show gridlines any time I drag things around. Should lead to neater maps!&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06RDHYHEU9.webm"&gt;snap gridlines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://www.patreon.com/posts/terminology-take-100835945"&gt;a podcast about Hest recently&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/devlog-together.html#2024-03-24T02:20:06.804Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I listened to &lt;a href="https://www.patreon.com/posts/terminology-take-100835945"&gt;a podcast about Hest recently&lt;/a&gt; (that I wasn't even on!), and have been thinking about taking another crack at it. I'm in a really different situation now, work/life wise, and am less inhibited by idealistic ambitions (like a bunch of NIH making me write my own 3D engine, or an obsession with conceptual purity forcing me to make everything bootstrapped). Now the biggest blocker is that I only have scraps of free time, and I've been using all of it to make music. Oh, how I miss being 20 and free from obligation!&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/mKxsgr3TKtM"&gt;Simple gradient using new form field control for arrays of objects&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/devlog-together.html#2024-03-24T14:44:02.201Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/mKxsgr3TKtM/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I've made a new form field control for arrays of objects. The properties that go into the object can be specified and in this example I've used it to implement a simple gradient color node. This example can be viewed at &lt;a href="https://demo.codeflowcanvas.io/gl"&gt;demo.codeflowcanvas.io/gl&lt;/a&gt; and then select "Moving circle" from the examples drop-down (I just noticed a weird bug on iOS.. so please just try on desktop).&lt;/p&gt;
&lt;p&gt;Or &lt;a href="https://youtu.be/mKxsgr3TKtM"&gt;it can be seen in action here&lt;/a&gt; .. nothing fancy at the moment, but I hope this allows for more fancy stuff in the near future. &lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://gitlab.com/procps-ng/procps/-/blob/master/src/top/top.c"&gt;horrors of manually bikeshedded plain-text languages&lt;/a&gt; via &lt;strong&gt;Fredrik&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/thinking-together.html#2024-03-18T20:16:09.247Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there any wisdom on  &lt;em&gt;how to best lay out code in a visual code browser&lt;/em&gt; ?&lt;/p&gt;
&lt;p&gt;In my experience, code can be layed out either more horizontally on long lines or more vertically on short lines. This is controlled by setting a criterion for how many levels of nesting there can be before a node switches to a multiline layout. Long lines use space efficiently but tend to get hard to read. Short lines are easier to read, as tokens of similar significance line up in columns, but tend to take up much vertical space while leaving most of the horizontal space unused, as the average line is just one key and one value.&lt;/p&gt;
&lt;p&gt;Shall I accept that code gets very vertical, and use the free horizontal space to add multilevel navigation panels, or is there a third option that is more horizontal while still easy to read? I can go really fancy and add tables and multiple columns, since I have full control over the layout function, but not all code is regular enough to fit a tabular format, and I cannot require the person editing the code to manually bikeshed it by editing whitespace or dragging around visual nodes. I've seen the &lt;a href="https://gitlab.com/procps-ng/procps/-/blob/master/src/top/top.c"&gt;horrors of manually bikeshedded plain-text languages&lt;/a&gt; and the horrors of node-based languages where the programmer makes a simple one node change and then has to drag all the nodes around so they line up. Are there any examples of interesting solutions to look at?&lt;/p&gt;
&lt;p&gt;Here's how I mean a more horizontal layout:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[redacted]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's how I mean a more vertical layout:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[redacted]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the more horizontal layout, I can barely parse the surprise structure at a glance, and I can barely see if I've made a mistake in editing. It takes a lot less screen space though.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Jacob Zimmerman&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/thinking-together.html#2024-03-20T17:26:11.143Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I want to build the backend of an as-bidirectional-as-possible spreadsheet/dataflow, does anyone have any favorite techniques?&lt;/p&gt;
&lt;p&gt;I‚Äôd like to prefer a dataflow style solution over a constraint solver. I‚Äôve been reading up on why this problem feels hard and its similarity to the ‚Äúview update problem‚Äù in databases, I‚Äôm curious if there‚Äôs a widely accepted solution that I‚Äôm missing.&lt;/p&gt;
&lt;p&gt;üìë &lt;a href="https://docs.google.com/spreadsheets/d/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc/edit?pli=1#gid=0"&gt;Future of Coding or Programming: Project Comparison&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/thinking-together.html#2024-03-24T10:36:57.466Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi folks, I've been fiddling around with the projects spreadsheet here: &lt;a href="https://docs.google.com/spreadsheets/d/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc/edit?pli=1#gid=0"&gt;Future of Coding or Programming: Project Comparison&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and I thought I'd take this opportunity to ask you all to ensure your entries are complete and up-to-date.&lt;/p&gt;
&lt;p&gt;New users welcome: just add your project! Note: your project should ideally be at least primarily open source.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://www.scattered-thoughts.net/writing/miscellaneous-ideas"&gt;scattered-thoughts.net/writing/miscellaneous-ideas&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/thinking-together.html#2024-03-24T21:30:30.521Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pondering some FoC-adjacent ideas, with the goal of finding a financially sustainable project that can fund more tentative adjacent work - &lt;a href="https://www.scattered-thoughts.net/writing/miscellaneous-ideas"&gt;scattered-thoughts.net/writing/miscellaneous-ideas&lt;/a&gt; / &lt;a href="https://www.scattered-thoughts.net/writing/how-to-trade-software-for-small-money/"&gt;scattered-thoughts.net/writing/how-to-trade-software-for-small-money&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Less FoC-related, I mentioned in the bottom of that post that I'd love to help someone pick up the streaming system testing work that I started in &lt;a href="https://www.scattered-thoughts.net/writing/internal-consistency-in-streaming-systems/"&gt;scattered-thoughts.net/writing/internal-consistency-in-streaming-systems&lt;/a&gt;. It will be a real slog getting momentum, but there's potential to really raise the (incredibly low) bar for reliability and understand-ability in that niche.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://interconnected.org/home/2024/03/20/agents"&gt;Who will build new search engines for new personal AI agents?&lt;/a&gt; via &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/linking-together.html#2024-03-22T11:59:43.712Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some speculation by &lt;strong&gt;@Matt Webb&lt;/strong&gt; about &lt;a href="https://interconnected.org/home/2024/03/20/agents"&gt;the not so far out future of AI agents&lt;/a&gt; and how we can/need to prepare for it. &lt;/p&gt;
&lt;p&gt;In the other corner, some judgy comments about &lt;a href="https://www.garbageday.email/p/clout-world"&gt;AI‚Äôs Looming Reputation Crisis&lt;/a&gt; (scroll down to the middle to find that bit).&lt;/p&gt;
&lt;p&gt;I read both this morning and I know these are different use cases, however they beautifully cover the whole optimism/pessimism spectrum on AI.&lt;/p&gt;
&lt;p&gt;Where do people here fall on that spectrum? Are there use cases that are obviously good/bad, or does that depend on‚Ä¶ well‚Ä¶ what? And are we going to outsource most of our lives soon to AI assistants while simultaneously drowning in mediocre generated bullsh*t trying to scam us?&lt;/p&gt;
&lt;p&gt;Gosh, I miss the time of the early internet when I was excited about everything tech. Somehow I can‚Äôt find back into that mindset these days. Can someone convince me that the future is going to be universally great, like it used to be 20 years ago?&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://informal.systems/2020/09/21/informal-owners/"&gt;Informal Organizations: Iterating on Cooperative Ownership&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/linking-together.html#2024-03-23T07:52:48.555Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the spirit of our &lt;strong&gt;#thinking-together&lt;/strong&gt; capitalism thread. I found &lt;a href="https://informal.systems/2020/09/21/informal-owners/"&gt;informal.systems/2020/09/21/informal-owners&lt;/a&gt; i think this is an interesting example of how to change the bigger structure- capitalism (this time I spelled it out &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt; üòÖ  ) by changing smaller structures I.e. companies to cooperatives.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://informal.systems/2020/09/21/informal-owners/"&gt;Informal Organizations: Iterating on Cooperative Ownership&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our mission at Informal Systems is not just about distributed systems, it&amp;amp;#39;s also about the organizations that grow along with them. Our vision is an open-source ecosystem of cooperatively owned and governed distributed organizations running on reliable distributed systems. To achieve this vision, we begin with ourselves, adopting a democratic structure that aims to rebalance the power dynamics between capital and labour towards something more sustainable and non-extractive; something that nurtures long term employment and real wealth creation through R&amp;amp;D, entrepreneurship, and innovation; something more like a Zebra than a Unicorn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;üéº &lt;a href="https://strudel.cc/?dbk9t_AYAIc8"&gt;Strudel REPL&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W4/of-music.html#2024-03-18T12:40:03.787Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Strudel now has inline visualisation &lt;a href="https://strudel.cc/?dbk9t_AYAIc8"&gt;strudel.cc/?dbk9t_AYAIc8&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://strudel.cc/?dbk9t_AYAIc8"&gt;Strudel REPL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Strudel is a music live coding environment for the browser, porting the TidalCycles pattern language to JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-4/</guid><pubDate>Tue, 26 Mar 2024 03:35:46 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/03 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üöÄ codeflowcanvas.io üé• Collective Problem Solving in Music, Science, Art... ü¶† Demon horde sort&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üöÄ &lt;a href="https://codeflowcanvas.io"&gt;codeflowcanvas.io&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/share-your-work.html#2024-03-17T08:54:31.072Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yes, the time has finally come! I'll share a link to my visual programming project online! I've been mainly showing some video's on the devlog channel about the project.&lt;/p&gt;
&lt;p&gt;Warning upfront: Although I've been working on this for quite some time (I even started from the ground up last year after working on my previous visual programming project for multiple years).. there's still a lot of work to be done and bugs to be fixed. The UI/UX is far from perfect but it is demo-able enough I think. However, it's still just in "demo-stage" and not usable by other projects (I haven't build any npm packages for integrating or vs-code extension for example).&lt;/p&gt;
&lt;p&gt;My goal is to make a generic visual programming system (VPS) with which domain or application specific vpl's can be made. For now I am implementing 2 vpl's on top of the current base: a flow-based-programming inspired system and a "visual shader-toy".&lt;/p&gt;
&lt;p&gt;Since the tool is an infinite canvas, you can zoom and drag the canvas using mouse/wheel/touchpad. I've spend some time getting touchscreen support, but more work definitely needs to be done there.&lt;/p&gt;
&lt;p&gt;When you open up one of the editors, you can use the dropdown in the top-menu to load an example flow.&lt;/p&gt;
&lt;p&gt;Without further ado, here's the link: &lt;a href="https://codeflowcanvas.io"&gt;codeflowcanvas.io&lt;/a&gt; : there are 2 demo playgrounds in which you can play around.&lt;/p&gt;
&lt;p&gt;I'll post some more details in the üßµ.&lt;/p&gt;
&lt;p&gt;Thanks for some feedback!&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/devlog-together.html#2024-03-12T17:13:39.920Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A little thing like an 'edit' button introduces cascading issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L√ñVE (in combination with mobile restrictions) won't let me modify code files in place. I have to overlay my changes in a new location.&lt;/li&gt;
&lt;li&gt;But now I can't pick up any upgrades to my app. Upgrades modify code files in place, but any overlay persists (otherwise you'd completely lose your changes after upgrading).&lt;/li&gt;
&lt;li&gt;But hey I have a programmable editor here! I'll just create a new file called 'scratch' with a one-liner to blow away the overlay. (With my app user's hat on, I know in this case my changes are minor in a way that I don't with my app developer's hat on.)&lt;/li&gt;
&lt;li&gt;(A few hours later.) Wait, now none of my changes are having any effect. And they're completely blown away when I go back to the code.&lt;/li&gt;
&lt;li&gt;ü§¶ Oh it's that 'scratch' file still hanging around. So it needs to be a 2-liner. I have to make any changes I want to the file system -- and then delete 'scratch' to make this a one-time operation.&lt;/li&gt;
&lt;li&gt;I could try to create a screen of helpers for this, along with a comment that says, "insert file system operations here" after which is a delete of 'scratch'.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this way I find myself playing meta-Sokoban.. üôÑ&lt;/p&gt;
&lt;p&gt;Tl;dr - the 'edit' button isn't really usable yet.&lt;/p&gt;
&lt;p&gt;I  &lt;em&gt;really&lt;/em&gt;  don't want to go down the road of building a compare and merge flow üôÑ&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/devlog-together.html#2024-03-13T09:57:36.501Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simple shortest-path routing to reduce some of the drudgery in Sokoban. Integrated with undo.&lt;/p&gt;
&lt;p&gt;Next up: routing while pushing a single crate without moving any other crates. That feels more complicated than this glorified breadth-first search. In particular, I'm not yet sure how to detect cycles. Moving a crate can involve being in the same place over and over again. I think I need to hash the player's location in combination with the crate's location ü§î&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06NVCX4T1V.webm"&gt;sokoban empty path&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/devlog-together.html#2024-03-14T15:29:35.780Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My solver can now push a single crate to a destination without moving any other crates. But I feel ambivalent about this. Devlog in üßµ&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06PN2WJYJY.webm"&gt;sokoban solver&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Stephen De Gabrielle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/thinking-together.html#2024-03-13T11:40:19.429Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does a  ~&lt;em&gt;&lt;em&gt;parametric IDE&lt;/em&gt;&lt;/em&gt;~ exist? &lt;/p&gt;
&lt;p&gt;I‚Äôm not sure if this makes sense, but I‚Äôm thinking similar to Parametric CAD tools(&amp;amp;sketchpad), but for code?&lt;/p&gt;
&lt;p&gt;Maybe making use of type annotations, contracts, interfaces, etc. at  ~&lt;em&gt;&lt;em&gt;edit-time&lt;/em&gt;&lt;/em&gt;~  (instead waiting for  ~&lt;em&gt;&lt;em&gt;compile-time&lt;/em&gt;&lt;/em&gt;~ or  ~&lt;em&gt;&lt;em&gt;run-time&lt;/em&gt;&lt;/em&gt;~ ).&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Kongwei Ying&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/thinking-together.html#2024-03-15T12:15:01.802Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another concept I've been ideating about is how to bring Literate Programming, by Donald Knuth, into my daily work, which involves modern tools and stacks like VSCode and Node.js. I believe inline, rich text snippets which are integrated with some kind of personal knowledge management system is the way to go. This way, instead of having comments like this:&lt;/p&gt;
&lt;p&gt;// TODO: Refactor this to use the revised approach&lt;/p&gt;
&lt;p&gt;It instead would look like using Notion or Obsidian inside VSCode. So above a function, would be a small window into a single page that describes a single function. You can do anything here, like linking references that are relevant to the design of the function. Or you could even have a lengthy design document that explains why a function was written a certain way. Going even further, you could have a page which describes the evolution of a function over time, why at the beginning it was written a certain way, why changes had to be made, and why it looks the way it looks right now.&lt;/p&gt;
&lt;p&gt;And added bonus of this approach is that now it's possible to have a single source of truth for docs and your code. So rather than maintaining a separate Docusaurus that has to be updated to sync it with evolution in code, you can just maintain documentation in line. And then to publish developer docs online, you merely just take all the little snippets above each function and then aggregate them onto a single page.&lt;/p&gt;
&lt;p&gt;Basically, this approach is powerful because instead of 1D strings of text, now you can have the power of rich text in your code. Including diagrams, and even embedding other programs through &lt;iframes&gt; would be possible. And when your code needs to be compiled, all these rich text snippets are simply removed.&lt;/iframes&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.uxtigers.com/post/accessibility-generative-ui"&gt;Accessibility Has Failed: Try Generative UI = Individualized UX&lt;/a&gt; via &lt;strong&gt;Dave Liepmann&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-12T09:49:47.337Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jakob Nielsen asserts that accessibility has failed to serve disabled users because of a mistaken focus on standards. This approach is unable to address the wide variety of disabilities, and because it is by definition a derivative of a GUI, it is doomed to provide a second-class experience to e.g. blind users. He points out differing needs by older and less literate users, and proposes generative UI as a promising solution.&lt;/p&gt;
&lt;p&gt;I was skeptical of the headline and tweet-length summaries. There has been not-insignificant backlash. The full article leaves me still skeptical but certainly willing to see where the idea of bespoke-to-one's-needs UIs could take us.&lt;/p&gt;
&lt;p&gt;üéº &lt;a href="https://cmajor.dev/"&gt;cmajor.dev&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-12T23:17:12.081Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You‚Äôve heard of C, C++, C#, objective-C‚Ä¶ well, Cmajor is a C-family language designed specifically for writing DSP signal processing code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They have a JIT engine, but it also compiles to WASM so it can run on the web. This means old synths can be ported to run on the web!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cmajor.dev/docs/Examples/Pro54/"&gt;cmajor.dev/docs/Examples/Pro54&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=1oeigCANJVQ"&gt;RubyConf 2019 - Keynote - Collective Problem Solving in Music, Science, Art... by Jessica Kerr&lt;/a&gt; via &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-13T19:22:40.542Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/1oeigCANJVQ/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;this is a great inspirational talk about sharing ideas&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://blog.darklang.com/an-overdue-status-update/"&gt;An overdue status update on Darklang&lt;/a&gt; via &lt;strong&gt;Jeffrey Tao&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-13T20:11:43.210Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Haven't checked in on Dark in a few years but it seems they're dropped the custom editing environment, among other changes &lt;a href="https://blog.darklang.com/an-overdue-status-update/"&gt;blog.darklang.com/an-overdue-status-update&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We've been working hard at Darklang for the past year, but haven't been very vocal about what we've been up to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here‚Äôs the ‚ÄúDarklang‚Äù that‚Äôs been live for years:&lt;/p&gt;
&lt;p&gt;Darklang ‚Äì the live version, which we're now calling Darklang classic ‚Äì is a developer tool composed of a few interconnected&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://pldi24.sigplan.org/home/cp-2024"&gt;CP 2024 - Choreographic Programming 2024 - PLDI 2024&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-14T04:59:17.000Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://pldi24.sigplan.org/home/cp-2024"&gt;call for talks&lt;/a&gt; for the first ever workshop on Choreographic Programming at PLDI this summer. Deadline next Friday.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Choreographies are coordination plans for concurrent and distributed systems. A choreography defines the roles of the involved participants and how they are supposed to work together. In the emerging paradigm of choreographic programming (CP), choreographies are programs that can be compiled to executable implementations. 
CP originated primarily in the context of process calculi, with preliminary work done to establish its foundations and experiment with implementations. Recently, several proposals have shown that one can adapt CP to work in synergy with mainstream programming paradigms ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://2024.programming-conference.org/track/programming-2024-arts#About"&gt;‚ÄπProgramming‚Ä∫ 2024 - Arts - ‚ÄπProgramming‚Ä∫ 2024&lt;/a&gt; via &lt;strong&gt;Alex McLean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-14T14:36:43.535Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've only just noticed that there  &lt;em&gt;is&lt;/em&gt;  an arts track at the ongoing &lt;programming&gt; conference this year! awesome &lt;a href="https://2024.programming-conference.org/track/programming-2024-arts?#About"&gt;‚ÄπProgramming‚Ä∫ 2024 - Arts - ‚ÄπProgramming‚Ä∫ 2024&lt;/a&gt;&lt;/programming&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Step into a world where lines of code dance with strokes of creativity! 
At this year‚Äôs edition of the Programming conference, we are opening an Arts track to engage with the idea that art can inform computational practices and their presence in the world. With this track we invite participants of the conference to join a series of presentations and meet with the artists. We hope the Arts track will inspire the programming community to propose artistic projects for future editions. 
Events include: KhipuKoding, a session with live coding by Paola Torres Nunez del Prado; 
 Programming a ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ü¶†üé• &lt;a href="https://youtu.be/G2HSfOjG_uw?si=FWlpVOvBf0xH7C8y"&gt;T2 Matrix Brain Challenge T-2 And Counting - T2sday 3148&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-15T10:21:10.185Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/G2HSfOjG_uw/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Update from Dave Ackley (whose essay we talked about on the last episode)&lt;/p&gt;
&lt;p&gt;A large part of this video is about some initial work on making the 'demon horde sort' better, which is his proposed robust-first way of doing number sorting&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://www.ppig.org/files/2017-PPIG-28th-basman.pdf"&gt;If What We Made Were Real&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/linking-together.html#2024-03-16T07:03:21.034Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚ÄúIf What We Made Were Real:&lt;/p&gt;
&lt;p&gt;Against Imperialism and Cartesianism in Computer Science, and for a discipline that creates real artifacts for real communities, following the faculties of real cognition‚Äù by Basman (2020)&lt;/p&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://venturebeat.com/ai/cognition-emerges-from-stealth-to-launch-ai-software-engineer-devin/"&gt;Cognition emerges from stealth to launch AI software engineer Devin&lt;/a&gt; via &lt;strong&gt;Greg Bylenok&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W3/of-ai.html#2024-03-13T17:26:40.893Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is the future of coding just not coding?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the SWE-bench test, Devin was able to correctly resolve 13.86% of GitHub issues without any assistance, performing far better than GPT-4.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-3/</guid><pubDate>Mon, 18 Mar 2024 13:09:39 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/03 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéôÔ∏è FoC 70 ‚Ä¢ Beyond Efficiency üéà Alan Kay‚Äôs talk at UCLA üëê folk.computer's February status update&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://futureofcoding.org/episodes/070"&gt;Future of Coding 70 ‚Ä¢ Beyond Efficiency&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/share-your-work.html#2024-03-04T03:11:45.644Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://futureofcoding.org/episodes/070"&gt;Future of Coding 70 ‚Ä¢ Beyond Efficiency&lt;/a&gt; by &lt;strong&gt;@Dave Ackley&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dave Ackley‚Äôs paper Beyond Efficiency is three pages long. With just these three pages, he mounts a compelling argument against the conventional way we engineer software. Instead of inflexibly insisting upon correctness, maybe allow a lil slop? Instead of chasing peak performance with cache and clever tricks, maybe measure many times before you cut. So in this episode, we‚Äôre putting every CEO in the guillotine‚Ä¶ (oh, that stands for ‚Äúcorrectness and efficiency only‚Äù, don‚Äôt put us on a list)‚Ä¶ and considering when, where, and how to do the robust thing.&lt;/p&gt;
&lt;p&gt;üå©Ô∏è &lt;a href="https://lfdepombo.com/cloudbugfix"&gt;cloudbugfix: cloud infrastructure that proposes verifiable bugfixes&lt;/a&gt; via &lt;strong&gt;Luifer De Pombo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/share-your-work.html#2024-03-05T18:31:27.346Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sharing some recent thoughts I have had about verifying LLM-generated bugfixes automatically with cloud infrastructure: &lt;a href="https://lfdepombo.com/cloudbugfix"&gt;lfdepombo.com/cloudbugfix&lt;/a&gt;. Today we validate LLM-generated code by looking at it or manually running it within our codebase. However if the expected behavior of the code is verifiable, there is a less painful workflow where the mistakes made by the LLM are not visible to us.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://en.wikipedia.org/wiki/Oberon_(operating_system)"&gt;Oberon&lt;/a&gt; via &lt;strong&gt;Doug Thompson&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/share-your-work.html#2024-03-06T13:13:49.580Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alrighty, here's the post I mentioned I'd make in &lt;strong&gt;#introduce-yourself&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;I want to create a computing ecosystem that solves most of the problems in what I call 'unregulated I/O'.&lt;/p&gt;
&lt;p&gt;It is quite possibly mad. Or it might work, and I will be surprised.&lt;/p&gt;
&lt;p&gt;It takes design cues from &lt;a href="https://en.wikipedia.org/wiki/Oberon_(operating_system)"&gt;Oberon&lt;/a&gt;, &lt;a href="https://github.com/google/flatbuffers"&gt;FlatBuffers&lt;/a&gt;, &lt;a href="https://ipfs.tech/"&gt;IPFS&lt;/a&gt;, &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;, &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It also sounds dangerously close to the kind of "great idea" a compsci undergrad would come out with. Yet, I am running out of reasons why this isn't possible (at the very least). This is why I want your opinions üòÖ&lt;/p&gt;
&lt;p&gt;That's all I'll say here - rest is in the üßµ&lt;/p&gt;
&lt;p&gt;üßë‚Äç‚úàÔ∏è &lt;a href="https://omnipilot.ai"&gt;omnipilot.ai&lt;/a&gt; via &lt;strong&gt;Michael Jelly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/share-your-work.html#2024-03-06T16:50:34.765Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôve wondered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;why the only copilot we have is for VSCode&lt;/li&gt;
&lt;li&gt;why not every app is end-user programmable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wondered the same thing, and I‚Äôve built (&lt;a href="https://omnipilot.ai"&gt;omnipilot.ai&lt;/a&gt;), an AI copilot that works everywhere on macOS.&lt;/p&gt;
&lt;p&gt;Specifically it lets you invoke GPT to type into any app ( &lt;em&gt;particularly interesting to me is it works great in Xcode&lt;/em&gt; ), can also autocomplete text in any app, and lets you chat with GPT-4 with context from your recent apps. I‚Äôd really appreciate any feedback or first impressions!&lt;/p&gt;
&lt;p&gt;Re end-user programmability I‚Äôm also working on making it more possible for people to make little ‚Äúautomations‚Äù on their computer, whether it‚Äôs adding buttons to Finder to convert files or recording little AI-enhanced macros.&lt;/p&gt;
&lt;p&gt;Some specific questions I‚Äôd love feedback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How often do you find yourself wanting help editing code outside of a Github Copilot-enabled environment? What are those situations or apps?&lt;/li&gt;
&lt;li&gt;What about text, do you wish you had a copilot for text too?&lt;/li&gt;
&lt;li&gt;What do you think of the ‚Äúworks everywhere‚Äù approach vs. a dedicated app?&lt;/li&gt;
&lt;li&gt;Do the AI-macros sound appealing or meh?&lt;/li&gt;
&lt;li&gt;Any thoughts on the landing page copy/design?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I‚Äôm also happy to answer any other questions. Thanks in advance for sharing your thoughts, it‚Äôs super helpful in shaping the product!&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/devlog-together.html#2024-03-06T05:25:25.709Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Odd feeling: I just opened a terminal, did a double-take and knew instantly there was a leap year bug in code I wrote almost 25 years ago.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/devlog-together.html#2024-03-07T16:52:02.968Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Explorable binary operations' progress report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Program outline&lt;/li&gt;
&lt;li&gt;Expand for instruction details and step execution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="binvm-program.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06NCDB3VMK.gif"&gt;&lt;/p&gt;
&lt;p&gt;first time I include it in the book üôÇ&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-03-07_15-51.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06NURFJBMF.png"&gt;&lt;/p&gt;
&lt;p&gt;üëæ &lt;a href="https://lcamtuf.coredump.cx/sir-box-a-lot"&gt;Sir Box-a-Lot: an 8-bit Sokoban clone&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/devlog-together.html#2024-03-10T05:49:45.779Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The kids and I had a blast playing Baba is You this morning, and it brought up ancient memories of playing Sokoban puzzles  (where all you can do push crates around; in particular no pulling). Now I want to play Sokoban on my phone.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lcamtuf.coredump.cx/sir-box-a-lot"&gt;lcamtuf.coredump.cx/sir-box-a-lot&lt;/a&gt; contains 300 publicly available Sokoban puzzles. It turns out the C syntax that those puzzles are encoded in is just a few search-and-replaces from being perfectly valid and usable Lua. So far I can render the starting state.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06PF66LZ5W.webm"&gt;sokoban levels&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üìó &lt;a href="https://mitpress.mit.edu/9780262140539/a-small-matter-of-programming/"&gt;A Small Matter of Programming by Bonnie A. Nardi&lt;/a&gt; via &lt;strong&gt;Pete Millspaugh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/reading-together.html#2024-03-05T14:44:44.367Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Chapter 2: Conversation and Computers&lt;/em&gt;  (pages 13-25)&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Alex Cruise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/thinking-together.html#2024-03-05T16:14:02.199Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Re "beyond efficiency" podcast episode... I remember reading many years ago about this idea, maybe in Scientific American... Basically, evolved systems tend to be inefficient and full of redundancy, whereas designed systems are efficient and parsimonious... But many evolved systems can still function when many components are damaged&lt;/p&gt;
&lt;p&gt;üïπÔ∏è &lt;a href="https://robotopia-x.github.io/"&gt;Robotopia&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/thinking-together.html#2024-03-07T13:57:11.427Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you know any games where the core game mechanic is about programming?&lt;/p&gt;
&lt;p&gt;Things like Zachtronics games, factorio or &lt;a href="https://robotopia-x.github.io/"&gt;robotopia-x.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/thinking-together.html#2024-03-07T20:14:50.020Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is Alan Kay's diagram at 1:05.11 a veiled challenge? Replace 1972 by 2024. What do we see 30 year in the future? A laptop or tablet with 100,000 CPUs? Fosbury Flop? Breaking the Four Minute Mile?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2024-03-07 at 3.13.33‚ÄØPM.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06NA2T9JRL.png"&gt;&lt;/p&gt;
&lt;p&gt;üê∏ &lt;a href="https://www.todepond.com/wikiblogarden/academia/style/two-beat/"&gt;Todepond dot com&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/thinking-together.html#2024-03-08T09:09:27.546Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;follow up to some recent academia &amp;amp; writing style discussion. I've been trying to formalise some of the writing styles i personally use&lt;/p&gt;
&lt;p&gt;Two beat style&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/thinking-together.html#2024-03-09T10:29:03.296Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Software products are physical products. That's why they're hard to design and engineer!&lt;/p&gt;
&lt;p&gt;The physicality of software is kept at arms-length in a vector-based design tool. Here, the strength and focus is on surface level aesthetics and exploration though mocks ‚Äî many, many mocks. All needed. All useful. But a mock does not a product make. A mock is an incomplete story of software physics. Which brings us the other side of the spectrum...&lt;/p&gt;
&lt;p&gt;The IDEs ‚Äî the code editors. The product you ship is here, so "I guess someone has to go there". First challenge: To most people it's walls of inexplicable symbols and weird (even hostile?) punctuation. Then, with code, you're essentially play-acting as a computer. You have to "speak computer" fluently to feel at home here. It's a love/hate relationship of running programs in your head. Mostly failing to do so. Then learning to get better at debugging. Eureka moments of finally solving the puzzle that unlocks a bugfix! Endlessly restarting programs to reset state. Today, even after multiple decades of investment in IDEs, coding is still 100 times harder and less fun than it should be! How can we truly move the needle?&lt;/p&gt;
&lt;p&gt;A traditional IDE deals with the how to fully describe the physics of a software system. Writing and editing algorithms. Managing data flows. Figuring out logic. Painting pixels. Sending data at the speed of light over the network. But the IDE doesn't actually let you  &lt;em&gt;see&lt;/em&gt;  the program as it manifests to the user in the final medium. It's running somewhere else ‚Äî the browser, on your phone. This is where vector-tools have the IDEs at least partially beat. Yes, they're just mocks, but the vector-tool tool  &lt;em&gt;sees&lt;/em&gt;  the mocks alongside you. This changes your relationship with the tool. Thinking and touching ‚Äî moving, dragging, scaling, rotating, duplicating ‚Äî seamlessly blends on a canvas, and it just  &lt;em&gt;feels&lt;/em&gt;   &lt;em&gt;good, even fun!&lt;/em&gt;  IDEs and editing code as text offers none of those things with today's tools, and it just feels like... friction!&lt;/p&gt;
&lt;p&gt;So the letter to Santa reads as follows:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dear Santa, give me the best parts of a vector-based design tool, plus the best parts of an IDE, rolled into one ‚Äî but with none of the downsides. Thanks!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Christmas can't get here fast enough.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://eli.li/thoughts-on-accessibility-in-smol-computing"&gt;Oatmeal - Thoughts on accessibility in smol computing&lt;/a&gt; via &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/linking-together.html#2024-03-05T21:43:12.467Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don‚Äôt think I‚Äôve &lt;a href="https://eli.li/thoughts-on-accessibility-in-smol-computing"&gt;shared this here&lt;/a&gt; before ‚Äî if so, sorry!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A first instinct may be to think of accessibility as a technical problem that needs a solution. I‚Äôd suggest that it might be an opportunity to reframe how we approach the idea itself; from accessibility to adaptability. Adaptability of methodology, problem solving, software, and devices.
üìù &lt;a href="https://eli.li/thoughts-on-accessibility-in-smol-computing"&gt;Oatmeal - Thoughts on accessibility in smol computing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What follows is my attempt to spark a conversation in a few converging, but separate communities I lurk in. I‚Äôve already had a bunch of amazing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üéà &lt;a href="https://news.ycombinator.com/item?id=39612799"&gt;Alan Kay‚Äôs talk at UCLA (2/21/2024)&lt;/a&gt; via &lt;a href="https://www.viz.gl/"&gt;Srini K&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/linking-together.html#2024-03-06T13:44:51.993Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üåâ &lt;a href="https://solvespace.com"&gt;solvespace.com&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/linking-together.html#2024-03-08T05:09:20.556Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Carrying the torch of Ivan Sutherland's Sketchpad&lt;/p&gt;
&lt;p&gt;üîå &lt;a href="https://news.ycombinator.com/item?id=39628285"&gt;Flyde HN conversation&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/linking-together.html#2024-03-08T13:24:32.959Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=39628285"&gt;HN conversation&lt;/a&gt; about &lt;a href="https://github.com/flydelabs/flyde"&gt;flyde&lt;/a&gt;: Open-source, visual programming for developers. Includes VS Code extension, integrates with existing TypeScript code, browser and Node.js&lt;/p&gt;
&lt;p&gt;üëê &lt;a href="https://folk.computer/newsletters/2024-02"&gt;folk.computer's February status update&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/linking-together.html#2024-03-08T13:47:03.775Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Scott Antipa&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/present-company.html#2024-03-05T16:46:39.656Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone know if any good math communities, online or in sf bay?&lt;/p&gt;
&lt;p&gt;üìë &lt;a href="https://suricrasia.online/iceberg/"&gt;The Cursed Computer Iceberg&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/present-company.html#2024-03-08T16:52:09.734Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's a nice Table of Contents page for a book on the culture of weird things people do with computers.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://tornleaf.gallery/"&gt;Torn leaf gallery&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W2/present-company.html#2024-03-10T17:58:13.011Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would like to invite you all to make a submission for Torn Leaf, an experimental gallery I'm creating.&lt;/p&gt;
&lt;p&gt;Papers on the future of coding are very welcome (or anything else)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-2/</guid><pubDate>Mon, 11 Mar 2024 13:41:56 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/03 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üéôÔ∏è The New Physics (with Stefan Lesser)  üõ∏ Moldable development for Common Lisp üé• Project Updates&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üéôÔ∏è &lt;a href="https://www.patreon.com/posts/new-physics-with-99281699"&gt;The New Physics (with Stefan Lesser)&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/share-your-work.html#2024-02-27T03:16:13.134Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had a lovely call with &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt; a few weeks ago, and he was kind enough to let me record it and release it as the &lt;a href="https://www.patreon.com/posts/new-physics-with-99281699"&gt;patreon bonus podcast episode&lt;/a&gt; this month. We'd been DMing about &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-1/?fromDate=2023-12-29&amp;amp;toDate=2024-01-04&amp;amp;channel=thinking-together&amp;amp;filter=#2024-01-01T21:17:17.966Z"&gt;üí¨ #thinking-together@2024-01-01T21:17:17.966Z&lt;/a&gt;, keen to exchange our thoughts on a (new?) subtle kind of idea: those that can only be expressed (or received) by designing (or playing with) an interactive system. For instance, there's a subjective experience of interacting with a system, and I posit that this feeling engenders a kind of meaningful thought. So we set out to talk about this, and of course about some related things too (such as "the new physics" that exist inside the computer). Lots of fun. Thanks &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt; for the chat, and for letting me share it as  &lt;em&gt;boco&lt;/em&gt; . And thanks to all of you who support our effort to make the best, weirdest, most interesting podcast we can. Look forward to the next main episode‚Ä¶ with a real  &lt;em&gt;subjective experience&lt;/em&gt;  of soon-ness!&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://duncancragg.substack.com/p/the-parallel-reality-computer?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;The Parallel Reality Computer&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/share-your-work.html#2024-02-29T10:37:24.699Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Parallel Reality Computer&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;(very short article!)&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://www.scattered-thoughts.net/writing/zest-dialects-and-metaprogramming/"&gt;Zest: dialects and metaprogramming&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/share-your-work.html#2024-03-01T00:15:54.754Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some thoughts on skirting the line between static and dynamic typing&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://futureofcoding.org/episodes/061.html"&gt;Programming as Theory Building&lt;/a&gt; via &lt;strong&gt;Eoghan Mulcahy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/share-your-work.html#2024-03-01T13:42:11.927Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Inspired by the &lt;a href="https://futureofcoding.org/episodes/061.html"&gt;Programming as Theory Building&lt;/a&gt; episode we are building a tool to help development teams capture &amp;amp; store the theory of their program text.&lt;/p&gt;
&lt;p&gt;We achieve this through auto-generation of logical paths through the codebase which developers explain to each-other through voice and video.&lt;/p&gt;
&lt;p&gt;We would love to hear the thoughts of this community specifically as many of you will see what we are trying to achieve here.&lt;/p&gt;
&lt;p&gt;Checkout out our &lt;a href="https://www.ycombinator.com/launches/KWX-ten-dev-understand-code-remarkably-fast"&gt;launch&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;&lt;img alt="launchdemo-higher-qual.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06MUUE4TA5.gif"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/share-your-work.html#2024-03-02T13:22:59.394Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Had the terrible realization that our code-native multiplayer canvas is the perfect opportunity to troll coworkers üòÇ&lt;/p&gt;
&lt;p&gt;(Instantly send code changes to your coworker's canvas via multiplayer)&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06MHRM9JVB.mp4"&gt;Turing complete trolling&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-26T04:05:44.786Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm getting more and more into a new‚Ä¶ idea? Let's see if I can explain it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are programs, like photoshop, that are tools for artists. You can use them to make art. They're a digital equivalent of traditional art tools. The fact that they're digital has, just to give one example, enabled artists to easily do some things that used to be really hard. This has, in turn, changed the sort of art that gets made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are programs, like flash, that are tools for &lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt; to make tools for artists. (I'm leaving a blank there because‚Ä¶ I could have said "programmers", but I actually want you to not think of them as programmers for a sec. Just go with me.) For example, in the late 00s, I worked as a ______ making tools for artists, and I used flash to do this, because it gave me a programming environment that was designed in tandem with a drawing environment. Really nice fit here. But flash wasn't really designed for people to make tools for artists. It was designed to be a tool for artists, but it was also programmable, which made it a good tool for making tools for artists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are ‚Äî‚Äî‚Äî‚Äî‚Äî, that are tools for making tools for &lt;em&gt;&lt;strong&gt;_&lt;/strong&gt; to make tools for artists. (I'm adding another blank. I could have said "programming languages", but I actually want you to not think of these  &lt;/em&gt;‚Äî‚Äî‚Äî‚Äî‚Äîs_  as programming languages for a sec. Just go with me.) For example, going to school, or reading books, or a good night's sleep, or taking a shower, or having a stimulating conversation with a friend. These are all ‚Äî‚Äî‚Äî‚Äî‚Äî, but they're outside the computer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just as the computer allowed artists to have a new kind of tool that changed the sort of art that got made, I'm interested in how the computer might give us new kinds of ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî, which would in turn make new kinds of &lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;__.&lt;/p&gt;
&lt;p&gt;It's possible that FoC as a community is a ‚Äî‚Äî‚Äî‚Äî‚Äî. But I also think there's ‚Äî‚Äî‚Äî‚Äî‚Äî software that's  &lt;em&gt;not&lt;/em&gt;  a programming language.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-26T11:25:57.889Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Progress on the binary operations explorable: step through binary AND, shift left and shift right.&lt;/p&gt;
&lt;p&gt;&lt;img alt="binvm-and.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06LHPQ8F0D.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="binvm-shift.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06L64TU7K9.gif"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-26T13:49:40.237Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üöÇ All onboard the shift operation train (showing intermediate results during stepping)&lt;/p&gt;
&lt;p&gt;&lt;img alt="binvm-shift-train.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06MA6PM848.gif"&gt;&lt;/p&gt;
&lt;p&gt;üõ∏ &lt;a href="https://codeberg.org/khinsen/clog-inspector"&gt;A moldable Common Lisp object inspector based on CLOG&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-26T13:53:38.202Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moldable development is coming to Common Lisp&lt;/p&gt;
&lt;p&gt;üíª &lt;a href="https://app.splootcode.io/shared/mattia/for-loops-example/EPdLhGOx7p1SbPDIDisgbfpV"&gt;SplootCode tiny program&lt;/a&gt; via &lt;a href="https://twitter.com/MattiaFregola"&gt;Mattia Fregola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-27T00:15:43.623Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;I have a big question about a programming-related problem I only partly understand, hoping not to get an answer, but rather pointers to where I should be looking. Here it goes.&lt;/p&gt;
&lt;p&gt;For the past two years I have been working on SplootCode wanting to make code more accessible to non-engineers. The initial product (as is today) is basically a structured editor with drag and drop a-la-Scratch capabilities, and some other things to help non-engineers see and understand what the code is doing. You can see an example tiny program &lt;a href="https://app.splootcode.io/shared/mattia/for-loops-example/EPdLhGOx7p1SbPDIDisgbfpV"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the interviews I conducted with several people, I bumped into a non-native English speaker who revealed their frustrations with having to learn English in order to code.&lt;/p&gt;
&lt;p&gt;After speaking to another dozen non-native speakers - some of whom teach programming in non-English speaking countries using their native language - I figured that this is a really big problem for a lot people, and I want to solve it.&lt;/p&gt;
&lt;p&gt;Since I have been deep into SplootCode for over two years, I am sure that I am suffering from sunk cost fallacy like crazy, thus the reason I am asking the question here is to get some outside perspective.&lt;/p&gt;
&lt;p&gt;So, to solve the problem for people, I am wanting to address the nested problem that ‚Äì AFAIK ‚Äì the vast majority of programming languages, with the exclusion of any purely symbolic ones, are effectively a subset of the English language.&lt;/p&gt;
&lt;p&gt;My first train of thoughts was: ‚Äúperfect use case for building on top of SplootCode! The structured editing part means half the work is done already since I can label keywords however I want‚Äù.&lt;/p&gt;
&lt;p&gt;Followed by: ‚Äúbut wait! how can this be actually solved so that anyone can use their own tool of choice, which is what people will need?‚Äù&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thus my question is:&lt;/p&gt;
&lt;p&gt;I believe that the proper solution is to add a  &lt;em&gt;layer&lt;/em&gt; * to code ‚Äì call the  &lt;code&gt;tongue&lt;/code&gt;  layer ‚Äì that defines the  &lt;em&gt;label&lt;/em&gt; ** for each  &lt;code&gt;tongue&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What do I need to understand thoroughly, in order to build such a solution? Who should I speak to?&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;layer&lt;/em&gt;  intended as a standalone structure that doesn‚Äôt interact with anything but the semantic label of any literal, variable, operator, or function (or any other atomic structure that may exist within a programming language)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** &lt;em&gt;label&lt;/em&gt;  intended as the human-readable part of an atomic structure of a program. For example, the  &lt;code&gt;if&lt;/code&gt;  in the structure  &lt;code&gt;if () {}&lt;/code&gt;  in javascript, would be  &lt;code&gt;se&lt;/code&gt;  in Italian, and  &lt;code&gt;„ÇÇ„Åó&lt;/code&gt;  in Japanese.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-27T13:53:21.975Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Where are the nibbles?&lt;/p&gt;
&lt;p&gt;&lt;img alt="binvm-bytes-shorts-ints.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06MHDSQ7NU.gif"&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://spectrum.ieee.org/hard-science-fiction-computer"&gt;Science Fiction Short: Hijack&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-02-28T04:36:56.886Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some doggerel while reading &lt;a href="https://spectrum.ieee.org/hard-science-fiction-computer"&gt;spectrum.ieee.org/hard-science-fiction-computer&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;If an Agile org and Private Cloud&lt;/p&gt;
&lt;p&gt;put in a million sprints,&lt;/p&gt;
&lt;p&gt;Do you suppose their OKRs&lt;/p&gt;
&lt;p&gt;might start to overload Mars?&lt;/p&gt;
&lt;p&gt;(With apologies to Lewis Carroll: &lt;a href="https://www.poetryfoundation.org/poems/43914/the-walrus-and-the-carpenter-56d222cbc80a9"&gt; The Walrus and the Carpenter&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="http://alltom.com/pages/ppl-lab-notebook/005.html"&gt;Entry 005: Functions: take 1&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-03-01T22:11:24.550Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pictured: the equivalent of this WebPPL model&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;clamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;})))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;What's new this time? User-defined functions!&lt;/em&gt;  There's one anonymous, single-use function at the top (the one that's passed to  &lt;code&gt;repeat()&lt;/code&gt; ), and a function named  &lt;code&gt;clamp&lt;/code&gt;  below that's written to be reused.  &lt;em&gt;Functions = Boxes.&lt;/em&gt;  Lu took lines, but I think boxes are still available.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The writeup is here:&lt;/em&gt; &lt;a href="http://alltom.com/pages/ppl-lab-notebook/005.html"&gt;alltom.com/pages/ppl-lab-notebook/005.html&lt;/a&gt; If you want to know the whys and the hows, it's for you. I  &lt;em&gt;love&lt;/em&gt;  how the lab notebook / experiment writeup format gives me places to hang all the random things I'd like to write about. Design vicariously with me. üôÇ&lt;/p&gt;
&lt;p&gt;(Even if you don't have the time to read the writeup, I want you to know that I  &lt;em&gt;do not like&lt;/em&gt;  how the clamp function's source code looks. I'm not done. But I decided a few entries back that I was going to dump all the LEGO bricks onto the floor where I could see them before I started picking the ones I wanted in my spaceship.)&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-02-21 clamped sum.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06MY094R6D.gif"&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://youtu.be/y71c1IBBBsk"&gt;mandelbrot fractal in my visual programming environment&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-03-02T19:47:07.747Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/y71c1IBBBsk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The last couple of weeks I've been mainly focussing on the editing/creating of composition nodes in the visual programming system that I am building, which is more work than I expected. At least it's now possible to add input and output ports dynamically for existing compositions.&lt;/p&gt;
&lt;p&gt;Since I also wanted to have some fun (and procastinate) I decided to implement a zoomable mandelbrot fractal in the gl-flow app, which can be seen in this little video &lt;a href="https://youtu.be/y71c1IBBBsk"&gt;youtu.be/y71c1IBBBsk&lt;/a&gt;. This also required some extra node-types and adjustments to the pull-based gl-flow engine. Like having support for a  for-loop-node which can be breaked out of depending on a condition. I implemented both the for-node as the condition as containers due to the way the pull-based engine works.&lt;/p&gt;
&lt;p&gt;To give some background on the implementation of the pull-based flow engine which is used in the gl-flow app: the nodes get executed backwards starting at an end node and their output is glsl-code which can be run by a fragment shader on the gpu. So, the nodes themselves are not executed by the shader but the generated output is.&lt;/p&gt;
&lt;p&gt;The spatial placement of the "end-nodes" is used to determine which node gets executed first and then the input nodes are executed backwards. A container is also an end-node. So, the contained nodes are executed in a code block.&lt;/p&gt;
&lt;p&gt;I think the fractal renderer works quite nicely but you can't zoom very deep because of precision issues. I might try to solve these in the future, but my goal is not to make the perfect visual shadertoyüòä.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="http://alltom.com/pages/ppl-lab-notebook/006.html"&gt;Entry 006: Layout by dragging&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/devlog-together.html#2024-03-03T19:15:51.557Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Catharsis: I finally don't have to lay code out (solely) by typing &lt;x y z&gt; coordinates. üòå&lt;/x&gt;&lt;/p&gt;
&lt;p&gt;The write up is here, though it's more like a programming livestream this time because I didn't iterate on the language much: &lt;a href="http://alltom.com/pages/ppl-lab-notebook/006.html"&gt;alltom.com/pages/ppl-lab-notebook/006.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06MG5YDXKQ.mov"&gt;drag nodes and charts&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/hamish_todd"&gt;Hamish Todd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/thinking-together.html#2024-02-28T11:39:28.482Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey folks. I've been working on a VR ui for animation, inspired by Stop Drawing Dead Fish and a system called Projective Geometric Algebra. In this gif you can see me making something called a PGA Rotor, which is TLDR is an object that generalizes vectors and quaternions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome-capture-2024-1-28.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06M15AMZ0B.gif"&gt;&lt;/p&gt;
&lt;p&gt;You animate by making a bunch of these things, and then "snapping" them together, so they are joined end-to-end for example, and that becomes constantly-updated behaviour.  &lt;em&gt;Problem&lt;/em&gt;  that I'd appreciate input on an idea for is how to visualize the "code"&lt;/p&gt;
&lt;p&gt;Problem: my setup is already cluttered. Eg, animated characters are already surrounded by a halo of crazy clockwork; it's all I can do to hide it. But sometimes you want to see a lot of it. And I don't want to add boxes-and-arrows, and I don't want to add spreadsheets much either. I'm thinking that instead of showing the relations, I just let you fiddle with the things and see what happens&lt;/p&gt;
&lt;p&gt;But maybe someone here has already tried this?&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://www.todepond.com/wikiblogarden/academia/from/the-outside/"&gt;Academia from the outside&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/thinking-together.html#2024-03-03T08:04:25.001Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote down my perceptions of academia as someone on the outside.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üê¶ &lt;a href="https://worrydream.com/Tweets/"&gt;worrydream.com/Tweets&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/linking-together.html#2024-03-02T03:33:09.031Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bret Victor has redesigned his website. Poking around it, I noticed this wing of tweets: &lt;a href="https://worrydream.com/Tweets/"&gt;worrydream.com/Tweets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example content:&lt;/p&gt;
&lt;p&gt;2011-09-30:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spent the last two days trying to write a paragraph. WHY CAN'T I WRITE PARAGRAPH.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚ù§&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://stefan-lesser.com/2020/10/27/how-to-adopt-christopher-alexanders-ideas-in-the-software-industry/"&gt;How to adopt Christopher Alexander‚Äôs ideas in the software industry&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/linking-together.html#2024-03-02T16:23:52.247Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Digging around for Christopher Alexander I found &lt;a href="https://twitter.com/stefanlesser"&gt;Stefan Lesser&lt;/a&gt; üôÇ &lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://codeofmatt.com/list-of-2024-leap-day-bugs/"&gt;List of 2024 Leap Day Bugs&lt;/a&gt; via &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/linking-together.html#2024-03-03T09:13:14.576Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some hilarious examples if "software legalism" ü§¶... (literally legalism in the case of marriage certificates) &lt;a href="https://codeofmatt.com/list-of-2024-leap-day-bugs/"&gt;codeofmatt.com/list-of-2024-leap-day-bugs&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, it's 2024 and leap day has come once again. As I've done in prior leap years, I've captured as many bug reports and outages as I can, along with links to the source where possible. For those have been following along, you'll notice these have been organized a bit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;ü§ñ&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.todepond.com/wikiblogarden/better-computing/worse-computing/artificial-intelligence/bad/good/"&gt;AI is bad/good actually&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/of-ai.html#2024-03-01T07:49:58.723Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'd like to introduce a new way of talking about good/bad bad/good AI&lt;/p&gt;
&lt;p&gt;&lt;img alt="1709279393169.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06MH1XPDGU.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/03/W1/present-company.html#2024-02-27T23:21:04.211Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My 11yo son is learning the piano, and I rigged him a midi-&amp;gt;raspberry pi-&amp;gt;RGB LED strip so keys he plays light up then fade (it's a 144/m strip so nearly 2 leds per key).  &lt;/p&gt;
&lt;p&gt;Now i'd like him to program he visualizer himself.  Tweak the colors, maybe do some analysis like recognize chords, try record/replay, maybe even ignore the music and make some game using the piano as input device?&lt;/p&gt;
&lt;p&gt;He knows Scratch/Snap!, and wants to learn python (which my current script happens to already use), but the audio/visual nature here just screams "missed FoC/live coding opportunity" üòÜ &lt;/p&gt;
&lt;p&gt;What would you recommend?&lt;/p&gt;
&lt;p&gt;[constraint: myself I know zero about music üôâ]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://newsletter.futureofcoding.org/join/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/archive.html"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202403-week-1/</guid><pubDate>Sun, 03 Mar 2024 23:24:27 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/02 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üí° Embracing Software Variability üÜï Experiment visualizing structure diffs üßÆ Calculang&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üï¥Ô∏è &lt;a href="https://vanishing.page/"&gt;vanishing.page&lt;/a&gt; via &lt;strong&gt;nichoth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/share-your-work.html#2024-02-19T06:10:05.166Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New fun side project &lt;a href="https://vanishing.page/"&gt;vanishing.page&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;E2E encrypted messages that disappear&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/914522438?share=copy"&gt;Let's talk about effect types&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/share-your-work.html#2024-02-19T22:26:44.676Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1801089146-b77f020c4c3923347ea0887ef16e15c35a61e33dbb50dd0140bd9fd2216d35e6-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;"Let's talk about Effect types" I built a language workbench to show all the internals of EYG's type inference. It's useful for showing effect typing and I've recently added highlighting for all the places than can raise effects.&lt;/p&gt;
&lt;p&gt;üõ∏ &lt;a href="https://github.com/KinaKnowledge/juno-lang"&gt;github.com/KinaKnowledge/juno-lang&lt;/a&gt; via &lt;strong&gt;Rafi Khan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/share-your-work.html#2024-02-20T04:34:41.093Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A demo of livecoding the dom using junolang and reactjs&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06KEF63TEJ.mov"&gt;junolang react live coding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://dflate.io/emweb"&gt;emweb&lt;/a&gt; via &lt;strong&gt;Gregor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/share-your-work.html#2024-02-20T18:38:08.005Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started thinking, prototyping and now writing about a more interwoven web: &lt;a href="https://dflate.io/emweb"&gt;emweb&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A while ago I migrated some group chats from Twitter to Signal, for a myriad of reasons. One of the things lost in that particular fire was the ability to view tweets embedded directly in the chat‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/devlog-together.html#2024-02-20T08:02:43.806Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_20240219-213852.jpg" src="http://history.futureofcoding.org/history/msg_files/F06/F06KF8S4HC6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/devlog-together.html#2024-02-20T17:09:59.666Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WIP binary interactive explorable explanation&lt;/p&gt;
&lt;p&gt;&lt;img alt="binvm-demo.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06KR7D8683.gif"&gt;&lt;/p&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/686788/lots-of-charts"&gt;Lots of charts&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/devlog-together.html#2024-02-24T00:10:47.111Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few years after I started programming I used to spend lots of free time tweaking my editor and shell configuration. After many years, I find I'm back to doing that üòï, only I then spend a few hours every few days trying to write up my configuration for imaginary others. This most recent post I'd never have gotten around to if I'd known how much proof-reading it would take.&lt;/p&gt;
&lt;p&gt;&lt;img alt="carousel-points.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06LH7ANBU4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="carousel-linespoints.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06LTD47KB3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="carousel-ellipses.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06LH7BDWTE.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="carousel-boxerrorbars.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06L06S31U7.png"&gt;&lt;/p&gt;
&lt;p&gt;‚ôüÔ∏è &lt;a href="https://maiachess.com/"&gt;maiachess.com&lt;/a&gt; via &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/devlog-together.html#2024-02-24T21:08:39.234Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've taken a short break from my language, debugger, and editor to program my digital chess board (Chessnut air). I've been trying to learn/get better at chess for a while now and thought a digital chess board would be a great way to practice away from the computer. It is, except 1) bots don't play like people 2) the apps for the board suck. If fixed the first by using &lt;a href="https://maiachess.com/"&gt;maiachess.com&lt;/a&gt; a chess bot trained on Lichess data to play like real people (it's impressive). I also had to whip up a custom openings book. And 2 by writing my own software for the board. The bluetooth protocol was surprisingly simple (and luckily someone already reverse engineered it for me).&lt;/p&gt;
&lt;p&gt;I think the most fun part about all of this has been building an interface in the chess board itself, rather than in an app. My program has no ui other than the chess board. Want to play a game as black, setup up the pieces, and pick up the black king. The game will start when you place it down. Setup a similar setup for choosing a unique starting position. The UI has changed everything for me. I use it now way more since I don't have to mess with an annoying app on my phone.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;ü§î &lt;a href="https://www.red-lang.org/"&gt;red-lang.org&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/thinking-together.html#2024-02-21T09:48:14.241Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyone here uses/used &lt;a href="https://www.red-lang.org/"&gt;red-lang.org&lt;/a&gt; ? Could you share your thoughts on it?&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=BpJYqC4PWEw"&gt;I just realized why I¬¥m doing the Marble Machine Project&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/thinking-together.html#2024-02-22T11:36:31.573Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/BpJYqC4PWEw/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Why are you doing your FoC project?&lt;/p&gt;
&lt;p&gt;üîå &lt;a href="https://doc.akka.io/docs/akka/current/stream/stream-graphs.html"&gt;Akka GraphDSL&lt;/a&gt; via &lt;strong&gt;Safta Catalin Mihai&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/thinking-together.html#2024-02-22T15:03:29.980Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone know of a: 1. open source, 2. visual programming, 3. streaming ( as in recative streams), 4. statically typed project for visually building a data streaming graph and running it ? &lt;/p&gt;
&lt;p&gt;I think this should be quite natural to do since looking at the code for &lt;a href="https://doc.akka.io/docs/akka/current/stream/stream-graphs.html"&gt;Akka GraphDSL&lt;/a&gt; - it‚Äôs already pretty close to a visual language. &lt;/p&gt;
&lt;p&gt;üê∏ &lt;a href="https://www.todepond.com/wikiblogarden/see-it/prior-art/"&gt;Prior art for See It&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/thinking-together.html#2024-02-22T16:25:08.437Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I mapped out a huge list of prior art for visualised LINES of memory in coding environments.&lt;/p&gt;
&lt;p&gt;I've annotated the LINEs in each example. Please check it out and let me know if it prompts any ideas/thoughts!&lt;/p&gt;
&lt;p&gt;And if you know anything I could add, please send em over!&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06LJGX3HR7.png"&gt;&lt;/p&gt;
&lt;p&gt;üí°üé• &lt;a href="https://www.youtube.com/watch?v=KsAq25yT-CU"&gt;Embracing Software Variability to build Explainable Systems&lt;/a&gt; via &lt;strong&gt;Francisco Garau&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/thinking-together.html#2024-02-24T11:23:01.363Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/KsAq25yT-CU/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nice presentation of the Glamorous Toolkit in the latest Vamos 2024 Conference in Bern.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vamosconf.net/"&gt;vamosconf.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vamos2024.inf.unibe.ch/"&gt;vamos2024.inf.unibe.ch&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üõ∏ &lt;a href="https://github.com/KinaKnowledge/juno-lang"&gt;github.com/KinaKnowledge/juno-lang&lt;/a&gt; via &lt;strong&gt;Rafi Khan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/linking-together.html#2024-02-19T17:23:50.679Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An image based lisp in the browser that plays well with JavaScript. &lt;/p&gt;
&lt;p&gt;You can do live programming on the Dom!&lt;/p&gt;
&lt;p&gt;üßÆ &lt;a href="https://calculang.dev/"&gt;calculang&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/linking-together.html#2024-02-21T09:49:08.383Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;calculang is a language for calculations, It aims to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shareable, communicable üí¨ üíå&lt;/li&gt;
&lt;li&gt;transparent, verifiable üïµÔ∏è‚Äç‚ôÄÔ∏è&lt;/li&gt;
&lt;li&gt;understandable, concise üìñ&lt;/li&gt;
&lt;li&gt;flexible, reusable ‚ôª&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;only for calculations ‚áî numbers ‚áî workings&lt;/p&gt;
&lt;p&gt;calculang doesn‚Äôt ‚Äòdo things‚Äô (‚Äúside-effects‚Äù) like regular programming languages üí•&lt;/p&gt;
&lt;p&gt;This serves to simplify, permitting the aims above for  &lt;em&gt;calculations, numbers,&lt;/em&gt;  and their  &lt;em&gt;workings&lt;/em&gt;  ‚úÖÔ∏è&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://20y.hu/~slink/journal/xylophone-duplo"&gt;The Xylophone Maze: Screen-free coding for children | Gabor Torok&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/linking-together.html#2024-02-22T17:42:28.351Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Help papa find her daughter&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My child is 3 years old. I was looking for a game that we could play together and would be her first programming-like activity. I wasn‚Äôt keen to teach her anything specifically but rather offer her the option to explore what coding or algorithmic thinking tasted like (similarly when you would give your child a sheet of paper, brush, and paint to play with). I evaluated some computer game options but I wished to find screen-free, unplugged alternatives, especially since she has not been used to interact with a computer or screen at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üÜï &lt;a href="https://alarmingdevelopment.org/?p=1713"&gt;Experiment visualizing structure diffs&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/linking-together.html#2024-02-24T01:54:29.306Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An experiment in diffing structured data by &lt;a href="https://twitter.com/jonathoda/"&gt;Jonathan Edwards&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://spectrum.ieee.org/lean-software-development"&gt;Why Bloat Is Still Software‚Äôs Biggest Vulnerability&lt;/a&gt; via &lt;a href="https://twitter.com/chatur_shalabh"&gt;Shalabh Chaturvedi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W4/linking-together.html#2024-02-25T20:45:25.428Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-4/</guid><pubDate>Sun, 25 Feb 2024 21:35:58 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/02 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üì¢ You should write an Onward! paper üí° Maybe Everything Is a Coroutine ﬂ∑ Unison Cloud Demo &lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Robin Allison&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/two-minute-week.html#2024-02-12T01:51:39.312Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06JC690LUC.mov"&gt;A screen recording from a program I did a while ago. Its an idea.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=04itLyq6Mdg"&gt;Embed an Extensible AI Copilot in Any Web Application&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/share-your-work.html#2024-02-16T15:42:49.164Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/04itLyq6Mdg/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Making Gloodata embeddable using Web Components and Shadow DOM&lt;/p&gt;
&lt;p&gt;The demo embeds Gloodata in the Future of Coding history search web app and shows how it can do external requests to the app and get information back from it.&lt;/p&gt;
&lt;p&gt;Shadow DOM allows to isolate all scripts and styles from both sides and allow embedding in any web app using vanilla js/DOM and Web Components.&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/devlog-together.html#2024-02-12T06:29:12.951Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started all this by saying PPLs were surprisingly visual and physical, so I'm concentrating on the interaction loop that I had in mind when I said those things: every time you edit a program, you see how it affects the distributions of data flowing through.&lt;/p&gt;
&lt;p&gt;So in the attached GIF, there's a dataflow graph for a simple model where every few seconds I add an additional wire.&lt;/p&gt;
&lt;p&gt;PPLs don't solve for a result‚Äîthey  &lt;em&gt;converge&lt;/em&gt; . So I expected the visualizations to have a very springy response to changes. And that's what I get! In fact, the juiciness of the program output contrasts so much with the stilted UI that I might have to resubscribe to some game design blogs sooner than later. üò¨&lt;/p&gt;
&lt;p&gt;But this is good. I have ideas for where to take the language that are milquetoast but implementable by me in my spare time, at a pace that I think should allow me to explore complex models within my lifetime.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-02-11 binomialish buildup.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06JZ0874GY.gif"&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="http://alltom.com/pages/ppl-lab-notebook/"&gt;Lab notebook for ‚ÄúTom‚Äôs PPL‚Äù&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/devlog-together.html#2024-02-14T07:58:44.563Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've actually been keeping a lab notebook for this project. Tonight I decided to put it online, since it explains some of my design choices at a length that wouldn't be appropriate in Slack. &lt;/p&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/678890/new-version-after-51-days"&gt;New version after 51 days&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/devlog-together.html#2024-02-16T23:20:25.251Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just published a new version of my thing, with focus not on the new version number but on the number of days the previous version lasted. Because I find these numbers in our statements subconsciously go from facts to bragging to metrics..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I just published a new version with a few changes. Firstly, an incompatibility: creating an editor now requires a font, where it used to implicitly use the current font. I'm fixing one previous Devlog...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí¨ &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/devlog-together.html#2024-02-17T16:12:19.259Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven't been doing much coding lately (past ~4 months), so I'm doing a tiny side project to test out some new ways of working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I'm converting an old CLJS project to TypeScript. I really wanted to authentically  &lt;em&gt;live in&lt;/em&gt;  CLJS, but after months and months of trying, I never got over pain caused by the tooling. (This was back in ~2016, and I hear things have come a long way since. I'd give it another shot, but I no longer have much free time to learn languages/ecosystems.) I tried to get GPT to actually just convert the whole CLJS codebase. It was a mixed success. This is why I chose TypeScript, rather than (my preference) some dynamically-typed language. As it passes through an intentional state of  &lt;em&gt;chaotic mush&lt;/em&gt; , I want as much  &lt;em&gt;structure&lt;/em&gt;  as possible to be imposed upon my work. Once the conversion is done and I'm ready to resume work on the actual capabilities of the system, I'll probably gradually convert it to JS so that I can get away from needing a build step at all.&lt;/li&gt;
&lt;li&gt;Inspired by &lt;strong&gt;@Maggie Appleton&lt;/strong&gt;, I'm using native apps for Whisper and GPT. When I want to know how to do something, I just ramble out loud. Eg: "Does JavaScript have any syntax yet for iterating over the keys and values of an object without using object.entries?" I've found that for certain kinds of question, it feels really fluid. It might not be any faster than switching to my browser, typing &lt;a href="http://mdn.io"&gt;mdn.io&lt;/a&gt; followed by my query, and then scanning the page. But it often is, and even when it isn't it just feels really nice to get some help from the computer without having to touch the keyboard. (I have a weird relationship with my sense of touch ‚Äî for instance, I really dislike touching anything made of metal and think we need to put all the metal back in the ground where it belongs, we've awoken a demon of unhindered conduction and are reaping the consequences, we're all damn fools ‚Äî so it's nice to be able to converse directly with my computer without having to touch anything)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üìù &lt;a href="http://alltom.com/pages/ppl-lab-notebook/003.html"&gt;What's immediately next?&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/devlog-together.html#2024-02-18T16:12:04.227Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've resigned myself to the fact that models in my language are going to get worse before they get better. There are things I love about this representation already, but I can already see it getting mired in "syntax".&lt;/p&gt;
&lt;p&gt;I'll get to it. I want to work on model  &lt;em&gt;editing&lt;/em&gt;  so badly that I'm just throwing in first drafts of the language features that I need in order to implement more interesting models as quickly as possible. I'm only a few away.&lt;/p&gt;
&lt;p&gt;I added new entries in the lab notebook about &lt;a href="http://alltom.com/pages/ppl-lab-notebook/003.html"&gt;why&lt;/a&gt; and &lt;a href="http://alltom.com/pages/ppl-lab-notebook/004.html"&gt;how&lt;/a&gt;, and created this lovely GIF for you. This is a "trait attribution" model that infers whether an exam is fair based on an assumption about the base rate of exams being fair, and how many people pass. (Only one person took this particular test‚Äîand they failed. üò∞) Cute and small.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-02-17 fair exam - one failure.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06L2FX0SFJ.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://dl.acm.org/doi/pdf/10.1145/800027.808431"&gt;Programming-in-the-large versus programming-in-the-small by DeRemer and Kron (1975)&lt;/a&gt; via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/reading-together.html#2024-02-13T05:01:10.651Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://mitpress.mit.edu/9780262140539/a-small-matter-of-programming/"&gt;A Small Matter of Programming Perspectives on End User Computing By Bonnie A. Nardi&lt;/a&gt; via &lt;strong&gt;Stephen De Gabrielle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/reading-together.html#2024-02-16T15:13:18.023Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;~&lt;em&gt;&lt;em&gt;Chapter 1 Introduction&lt;/em&gt;&lt;/em&gt;~  (11 pages) &lt;/p&gt;
&lt;p&gt;&lt;a href="https://mitpress.mit.edu/9780262140539/a-small-matter-of-programming/"&gt;A Small Matter of Programming
Perspectives on End User Computing
By Bonnie A. Nardi&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Guyren Howe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/thinking-together.html#2024-02-15T08:12:15.036Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trying to see what I can do with the relational model, only supporting multi-model. Tagging each row of tables with a ‚Äúmodel‚Äù identifier, much as temporal databases attach an interval or whatever to a row.&lt;/p&gt;
&lt;p&gt;This would be give us a First Order Modal logic. I could have some fund pondering what various modal logics can do here (I‚Äôve studied Modal Logic, but not recently). It occurred to me to ask about existing work in the area. At least what the concept is called, so I can go look for prior art.&lt;/p&gt;
&lt;p&gt;Think of having a Datalog database and being able to set a ‚Äúcurrent model‚Äù or being able to do separate parts of queries in different models.&lt;/p&gt;
&lt;p&gt;I‚Äôm also interested in the idea of merging multiple models to build new ones.&lt;/p&gt;
&lt;p&gt;What should I look for?&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;
&lt;p&gt;üìº &lt;a href="https://vidkidz.github.io/"&gt;WAFlash is a WebAssembly AS2/AS3 Flash compatible player developed with HTML5, WebGL, WebAssembly and Emscripten.&lt;/a&gt; via &lt;strong&gt;Justin Janes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/thinking-together.html#2024-02-16T04:54:35.628Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm not sure which channel this belongs in or the usernames of the podcast but i‚Äôve been working through the podcasts backlog. I wanted to share that Flash isn‚Äôt entirely dead and it‚Äôs based on a usable and sandboxed Wasm. &lt;/p&gt;
&lt;p&gt;‚ùì &lt;a href="https://app.myinnergenius.com/ibm/techtypes/"&gt;app.myinnergenius.com/ibm/techtypes&lt;/a&gt; via &lt;strong&gt;Justin Janes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/thinking-together.html#2024-02-17T17:30:11.149Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm not planning on working for IBM/Rhel when i share this but - i did learn in 2015-2016 that for a long time IBM was the third largest employer of psychologists and therefore they have good assessments and profiling quizes lol.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3665" src="http://history.futureofcoding.org/history/msg_files/F06/F06K5C4283Y.png"&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/Duncan__Cragg/status/1757168903875108906"&gt;Duncan Cragg on X&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/linking-together.html#2024-02-12T22:32:58.320Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;üê¶ &lt;a href="https://twitter.com/Duncan__Cragg/status/1757168903875108906"&gt;Duncan Cragg (@Duncan__Cragg) on X&lt;/a&gt;: @jonathoda I'm a "crazy, misfit, rebel, trouble-making" person, who "sees things differently"&lt;/p&gt;
&lt;p&gt;I don't just "provide entertainment for jaded developers" in my blog; I want to "add to human knowledge"&lt;/p&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://t.co/oTZHbNBVYB"&gt;https://t.co/oTZHbNBVYB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I see folk stifled by conformist academia&lt;/p&gt;
&lt;p&gt;What did I miss?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tweet Thumbnail" src="https://pbs.twimg.com/media/GGK0h0WWAAAjMkl.png:large"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üí° &lt;a href="https://adam.nels.onl/blog/maybe-everything-is-a-coroutine"&gt;Maybe Everything Is a Coroutine - Adam Nelson&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/linking-together.html#2024-02-13T17:44:21.905Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Coroutines as a foundation for state machines, effect types and resumable exceptions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was inspired, after reading the excellent blog post Let Futures Be Futures, by the author's thought experiment of a language in which all functions are coroutines and this is used to express asynchr‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://youtube.com/watch?v=72y2EC5fkcE"&gt;Tomorrow Corporation Tech Demo&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/linking-together.html#2024-02-15T00:08:44.023Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/72y2EC5fkcE/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Reposting a classic in case any of the new folks here haven't seen it. &lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://trent.mirror.xyz/GDDRqetgglGR5IYK1uTXxLalwIH6pBF9nulmY9zarUw"&gt;Capital and enclosure in software commons: Linux &amp;amp; Ethereum&lt;/a&gt; via &lt;a href="https://twitter.com/curious_reader"&gt;Andreas S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/linking-together.html#2024-02-16T09:26:08.812Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stumbled upon this interesting perspective on Commons&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Entities which extract profits from software commons like Linux and Ethereum have the greatest incentive and capacity to co-opt them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=uSNJFGITta8"&gt;Creating and Deploying Slackbots with Unison Cloud&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/linking-together.html#2024-02-18T11:36:32.088Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/uSNJFGITta8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This video guides you through creating a Slackbot in Unison and deploying it to Unison Cloud, starting with a simple example and finishing with a ChatGPT bot.&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üì¢ &lt;a href="https://alarmingdevelopment.org/?p=1708"&gt;To the crazy ones&lt;/a&gt; via &lt;a href="https://twitter.com/jonathoda/"&gt;Jonathan Edwards&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W3/present-company.html#2024-02-12T22:02:20.371Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To:&lt;/em&gt;  the crazy ones, the misfits, the rebels, the troublemakers, the ones who see things differently&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Subject:&lt;/em&gt;  you should write an Onward! paper&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-3/</guid><pubDate>Sun, 18 Feb 2024 21:32:03 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/02 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üí° Notation &amp;amp; representation ü™¢ Combine nodes into compositions ü¶† Will Wright's Dynamics for Designers&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üí° &lt;a href="https://www.scattered-thoughts.net/writing/notation-and-representation/"&gt;Zest: notation and representation&lt;/a&gt; via &lt;a href="https://scattered-thoughts.net/"&gt;Jamie Brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/share-your-work.html#2024-02-05T19:21:14.591Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Struggling with nominal types sneaking in everywhere&lt;/p&gt;
&lt;p&gt;üëÑ &lt;a href="https://www.papercup.com/blog/realistic-synthetic-voices"&gt;Teaching computers to speak: the prosody problem&lt;/a&gt; via &lt;strong&gt;Kilian Butler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/share-your-work.html#2024-02-08T23:46:38.659Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote this article which covers speech synthesis ML, with a focus on the most challenging + interesting problem in speech: prosody generation. &lt;/p&gt;
&lt;p&gt;Understanding this is key to building multi-modal input/output for LLMs&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~_*Teaching computers to talk: the prosody problem*_~&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.papercup.com/blog/realistic-synthetic-voices"&gt;papercup.com/blog/realistic-synthetic-voices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If anyone‚Äôs interested in the topic hit me up ü§©&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=3tQfLwGhZUs"&gt;Gloodata: Smart Labels &amp;amp; Mistral Model using Anyscale Endpoints&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/share-your-work.html#2024-02-09T16:44:46.263Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/3tQfLwGhZUs/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Smart labels are a visual indication that a value has detailed information and contextual actions accessible with a click&lt;/p&gt;
&lt;p&gt;Plugins can register their own smart label types and detailed views and contextual actions for those types or types registered by other plugins&lt;/p&gt;
&lt;p&gt;First demo using an open model instead of ChatGPT&lt;/p&gt;
&lt;p&gt;üí≠ &lt;a href="http://tldraw.com"&gt;tldraw.com&lt;/a&gt; via &lt;strong&gt;Daniel Buckmaster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/share-your-work.html#2024-02-10T00:33:55.949Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not exactly a project, but I was thinking about the way I use &lt;a href="http://tldraw.com"&gt;tldraw.com&lt;/a&gt; as an infinite  &lt;em&gt;single&lt;/em&gt;  notepad - not starting new files, just gradually moving to a new part of the canvas as I need to. And as I was thinking I thought it'd be amusing to show off my canvas. This is about a year's worth of intermittent diagramming. I still use pen and paper a lot, and I don't yet know what the trigger is for me to get on tldraw instead of reaching for my notebook.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06HZEWL3GW.png"&gt;&lt;/p&gt;
&lt;p&gt;üê∏üé• &lt;a href="https://www.youtube.com/watch?v=QRKnrFEjDF0"&gt;DreamBerd Vision Pro [FULL COMPREHENSIVE REVIEW]&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/share-your-work.html#2024-02-11T18:43:04.124Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/QRKnrFEjDF0/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Introducing the DreamBerd Vision Pro&lt;/p&gt;
&lt;p&gt;(satire)&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/devlog-together.html#2024-02-08T06:07:08.954Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The future of coding may involve rendering histograms of random variables in Three.js, so here we are.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-02-07 animated histogram.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06HTADN1JP.gif"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/devlog-together.html#2024-02-08T16:51:59.969Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's all smoke and mirrors, but seeing the charts fill up was part of the UX that I wanted to test first, and‚Ä¶ oh yeah, that's what I was hoping for. üëå&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-02-08 marginals with code.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06HQBNR17G.gif"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/devlog-together.html#2024-02-08T22:55:18.721Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06HWBA65D3.mp4"&gt;is this silly?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ü™¢ &lt;a href="https://youtu.be/iFga2bfptBk"&gt;Combine nodes into compositions in a visual programming system&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/devlog-together.html#2024-02-10T14:56:46.843Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/iFga2bfptBk/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hi, &lt;a href="https://youtu.be/iFga2bfptBk"&gt;in this video&lt;/a&gt; I show the progress on a new feature that I really wanted for quite some time: combining nodes into reusable compositions. This helps in making flows smaller. The compositions can be accessed from within the node-type selector so they can be added to the flow. One thing that I really like is how the inputs and outputs to compositions are created based on the connections which cross the bounds of the selected area. I've also finally added a way to copy &amp;amp; paste nodes which is a nice productivity improvement. &lt;/p&gt;
&lt;p&gt;In the video I demonstrate my other flow engine instance with which you can create fragment shaders in webgl and here I've recreated a shader form shadertoy made by kishimisu (see &lt;a href="https://www.shadertoy.com/view/mtyGWy"&gt;shadertoy.com/view/mtyGWy&lt;/a&gt; ). I had to extend the node-types to make this possible. Currently I cant yet create nested compositions but once that is possible I hope it will help decrease the "node-spaghetti" further. Because I do think that the textual shadertoy code is still easier to read then my visual version. Which obviously I want to improve. &lt;/p&gt;
&lt;p&gt;I am almost ready to send out a link to my visual editor but decided to work on it a little bit more for ar least this month. I want to extend and improve some features and create more example flows.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://probmods.org/chapters/conditioning.html"&gt;Cognition and conditioning&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/devlog-together.html#2024-02-10T15:26:46.420Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wanted to make a pit stop at this tug-of-war example from &lt;a href="https://probmods.org/chapters/conditioning.html"&gt;ProbMods&lt;/a&gt; before I moved on to working on the code editor because it's one of the most eye-opening in terms of what's possible in PPLs, and because  &lt;em&gt;this&lt;/em&gt;  is the visual I wanted that I couldn't get in WebPPL, in two ways: 1) all the plots, arranged how I wanted them, and 2) always-on plots that let me see the samples as they come in, with the charts getting smoother and smoother the longer I'm willing to wait.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024-02-10 tug-of-war.gif" src="http://history.futureofcoding.org/history/msg_files/F06/F06J750JQ0K.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://www.ppig.org/papers/2017-ppig-28th-basman/"&gt;If What We Made Were Real: Against Imperialism and Cartesianism in Computer Science, and for a discipline that creates real artifacts for real communities, following the faculties of real cognition&lt;/a&gt; via &lt;strong&gt;Stephen De Gabrielle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/reading-together.html#2024-02-05T17:01:29.784Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;If What We Made Were Real: Against Imperialism and Cartesianism in Computer Science, and for a discipline that creates real artifacts for real communities, following the faculties of real cognition&lt;/em&gt;&lt;/em&gt;~&lt;/p&gt;
&lt;p&gt;Antranig Basman&lt;/p&gt;
&lt;p&gt;Abstract: I argue that we have not yet succeeded in constructing any real software, but merely simulations or cardboard prototypes of software‚Ä¶&lt;/p&gt;
&lt;p&gt;PPIG 2017 - 28th Annual Workshop&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ppig.org/papers/2017-ppig-28th-basman/"&gt;ppig.org/papers/2017-ppig-28th-basman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not new, but new to me. Indeed PPIG seems to be a goldmine&lt;/p&gt;
&lt;p&gt;üñäÔ∏è &lt;a href="https://searchworks.stanford.edu/view/jm095fy2355"&gt;video: Mobile Pen-based Computing (1992)&lt;/a&gt; via &lt;strong&gt;Pietu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/reading-together.html#2024-02-06T06:02:25.318Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An inspiring &lt;a href="https://searchworks.stanford.edu/view/jm095fy2355"&gt;video: Mobile Pen-based Computing (1992)&lt;/a&gt;. 1hr 3 min.&lt;/p&gt;
&lt;p&gt;In the conference recording, &lt;a href="https://en.wikipedia.org/wiki/Terry_Winograd"&gt;Terry Winograd&lt;/a&gt; demos the &lt;a href="https://en.wikipedia.org/wiki/PenPoint_OS"&gt;PenPoint OS&lt;/a&gt;, a mobile operating system focused on the "notebook interface". This is around the time PDA's and Apple Newton were on the radar.&lt;/p&gt;
&lt;p&gt;üó®Ô∏è Software Craftsmanship: The New Imperative via &lt;strong&gt;Dave Liepmann&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/reading-together.html#2024-02-08T19:52:43.937Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pete McBreen's  &lt;em&gt;Software Craftsmanship: The New Imperative&lt;/em&gt;  (2002).&lt;/p&gt;
&lt;p&gt;Most of the book is about the consequences of distinguishing between "software engineering" (defined as armies of programmers going down a waterfall) and "software craftsmanship" (defined as small teams working incrementally). He runs deep with the craftsman metaphor, taking seriously how to make real the "apprentice" and "journeyman" stages in a software developer's career.&lt;/p&gt;
&lt;p&gt;One interesting thread is that he points out how "best practices" are firmly a creation of the software engineering side of his binary, and do not satisfy craftspeople's very different trade-offs. Some by nature will wind around on their own path, custom-fitting each architectural decision to their preferences and the needs of the specific project.&lt;/p&gt;
&lt;p&gt;There is overlap with our &lt;a href="http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-2/?fromDate=2023-12-27&amp;amp;toDate=2024-01-02&amp;amp;channel=thinking-together&amp;amp;filter=#2023-12-30T13:04:55.921Z"&gt;üí¨ #thinking-together@2023-12-30&lt;/a&gt;, exploring &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt;'s ontology of [programming, computer science, software engineering]. It seems useful to me to further distinguish the "strong S.E." that Jack and McBreen use as definitional from the "soft S.E." which we all seem to use colloquially to mean all manner of techniques for making an application error-resistant. The work of the latter may not be intellectually engaging or novel but it lacks the qualities which make strong SE distasteful: centralization of power, treating developers interchangeably, the urge towards monoculture, a cultural belief in "training" instead of learning.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06JM261NM6.png"&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/thinking-together.html#2024-02-11T07:19:52.054Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New visual programming languages don't fail as visual programming languages.&lt;/p&gt;
&lt;p&gt;They fail as programming languages, which is what most new programming languages do.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Guyren Howe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/thinking-together.html#2024-02-11T08:07:28.478Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there an attempt at making a more beginner-friendly, perhaps graphical, form of prolog. Perhaps something like Squeak, but where the computation model is more logic programming than imperative, structured programming?&lt;/p&gt;
&lt;p&gt;Or perhaps some other friendly presentation of logic programming?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìú &lt;a href="https://scrollprize.org/grandprize"&gt;Vesuvius Challenge 2023 Grand Prize awarded: we can read the scrolls!&lt;/a&gt; via &lt;strong&gt;Walker Griggs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/linking-together.html#2024-02-05T18:25:52.420Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This might be old news to some, but: &lt;a href="https://scrollprize.org/grandprize"&gt;Vesuvius Challenge 2023 Grand Prize awarded: we can read the first scroll!&lt;/a&gt;. I'm blanking on who exactly (if it's you, I apologize), but I met someone at a FoC SF meetup last year who was working on this project. Immensely cool work!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The 2000-year-old scroll discusses music, food, and how to enjoy life‚Äôs pleasures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üìù &lt;a href="https://venkatesh-rao.gitbook.io/summer-of-protocols/"&gt;The Unreasonable Sufficiency of Protocols&lt;/a&gt; via &lt;a href="https://twitter.com/galtenberg"&gt;Christopher Galtenberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/linking-together.html#2024-02-06T19:24:14.819Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bumping this from &lt;a href="https://history.futureofcoding.org/history/?fromDate=2023-03-18&amp;amp;toDate=2023-03-24&amp;amp;channel=linking-together&amp;amp;filter=#2023-03-21T19:49:15.127Z"&gt;history&lt;/a&gt;, as a submission for FoC podcast papers to consider, at least a background text to have in the toolbelt ‚Äì as so many of the podcast's conversations are around bridges yet-to-be-built ‚Äì the meta-domain of protocols supplies much of the missing scaffolding&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Protocols, we believe, deserve to be first-class concepts in any discussion of coordination phenomena, at every level: from handshakes to civilizational futures. We believe that protocols, especially ones mediated by computers, will play an increasingly important role across all aspects of modern human life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://venkatesh-rao.gitbook.io/summer-of-protocols/"&gt;venkatesh-rao.gitbook.io/summer-of-protocols&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unreasonable Sufficiency of Protocols snippet.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06HEECHM37.png"&gt;&lt;/p&gt;
&lt;p&gt;ü¶† &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=JBcfiiulw-8"&gt;Will Wright's Dynamics for Designers&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/linking-together.html#2024-02-07T19:27:16.399Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/JBcfiiulw-8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/present-company.html#2024-02-06T04:37:12.050Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Can I be happy writing TypeScript for the browser? I made a Node project that imports Three.js, and Browserify takes almost four seconds to bundle it every time I make a change. Is this how it‚Äôs done?&lt;/p&gt;
&lt;p&gt;üì¢ &lt;a href="https://levlo.com/"&gt;Levlo: looking for the first team member&lt;/a&gt; via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W2/present-company.html#2024-02-06T07:58:17.256Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm  &lt;em&gt;looking for the first team member&lt;/em&gt;  for a natural language programming startup I've been working on since the beginning of 2021: &lt;a href="https://levlo.com"&gt;levlo.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The responsibilities can be defined based on experience and interests to fit somewhere between passionate frontend developer + designer and full-stack developer + product owner/chief product officer.&lt;/p&gt;
&lt;p&gt;I live in Espoo, Finland, but we'd work mostly full-remote. However, due to bureaucracy, residence in Finland is required. Atm I have funding for 12 months of 4200‚Ç¨/month salary (with working time and benefits as defined by Finnish law) and will be offering equity on top. The goal is certainly to find funding for paying the salary going forward as well.&lt;/p&gt;
&lt;p&gt;Since releasing the demo shown on the site, I've been working on rewritting large parts of the underlaying technology to be able to add features required by potential use-cases that have come up. Now, after ~5 months, I've finally been able to start adding those language features and start work towards enabling real world use-cases. Sales effort hase been fairly minimal so far, but I have one confirmed pilot customer (B2B) and will be putting more effort into sales going forward.&lt;/p&gt;
&lt;p&gt;The techstack is C#, Azure and Blazor (similar to Vue). The most important skills would be web frontend development (&amp;amp; design), cloud (Azure), and C#. In that order. The C# you'll need to write will be fairly trivial and it should be easy for anyone familiar with eg. Java or TypeScript to pick it up. But first and foremost I'm looking for someone passionate about the future of programming willing to embark on this hopefully decades long journey with me!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Textual no-code platform for creating logic-focused web apps usable by people and other software&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-2/</guid><pubDate>Sun, 11 Feb 2024 23:17:09 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/02 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://vimeo.com/907533908"&gt;Inventing on Principle for Gleam&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/share-your-work.html#2024-01-29T17:46:21.020Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1790057746-19562913e02543df8bc04fcf8acdffad7e5e0e1f6a9b6e5b9f11c0c43cfcc19e-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I've implemented an interpreter for Gleam, (in Gleam) so that I could make a bunch of tooling quickly. This is my first effort at brett victors version of Live Coding.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://escholarship.org/uc/item/98c6j416#article_main"&gt;Software Instruments&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/share-your-work.html#2024-01-31T20:13:05.271Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My PhD thesis about my ongoing attempts to marry AI and HCI is now up. (A lot of it is about academia, where those two fields  &lt;em&gt;do not like&lt;/em&gt;  to talk.) Plenty of stuff about paper tools, rapid visualization prototyping, and the connection between domain-specific languages and direct-manipulation interfaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Author(s): Otto, Jasmine Tan | Advisor(s): Smith, Adam M | Abstract: Software instruments are intelligent interfaces used by domain experts to manipulate complex artifacts. By contributing the concept of software instruments, this thesis connects the field of data visualization to its relations in both artificial intelligence and computer-supported collaborative work. Software instruments arise from projects carried out by teams with complex datasets in aerospace and narrative design, whom I have worked closely with, and which are developed and documented in this thesis. They are a lens for other computational media practitioners to introspect about their own design processes and artifacts. I argue that the evaluation of software instruments occurs in discussion with expert stakeholders, adopting the lens of critical technical practice to avoid disciplinary silos and narrow strategies of evaluation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üíª &lt;a href="https://github.com/sublayerapp/blueprints"&gt;github.com/sublayerapp/blueprints&lt;/a&gt; via &lt;strong&gt;Scott&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/share-your-work.html#2024-02-01T21:08:22.453Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We just open sourced this concept we've been working on for programming with LLMs we're calling Blueprints. It is kind of an alternative to coding copilots. It allows you to capture patterns/sections/chunks/classes/etc of your code to store as a "blueprint" then use those blueprints as a base template for generating something new - in your particular style. Think about it similarly to how when you work on a new feature, a lot of the time there's similar code in your codebase that you look at and modify for this new use case you're working on.&lt;/p&gt;
&lt;p&gt;The way it works is that when you capture a blueprint, the server generates a description with GPT4 along with vector embeddings of that description so that the next time you want to do something you just need to describe it, it finds the closest description, and uses the description+code to prompt for the new code generation.&lt;/p&gt;
&lt;p&gt;Would love feedback or to chat if this sounds interesting to anyone!&lt;/p&gt;
&lt;p&gt;Repo here: &lt;a href="https://github.com/sublayerapp/blueprints"&gt;github.com/sublayerapp/blueprints&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.loom.com/share/727e449a764e4362b28a74460db84655"&gt;Short demo of it in action&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Elliot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/share-your-work.html#2024-02-02T16:35:11.247Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey y'all. I'm working towards a library for rendering and adding direct-manipulation to infinite recursive things. I want to share this picture showing where I'm at.&lt;/p&gt;
&lt;p&gt;On the left is the rendered infinite recursive thing. On the right is the diagrammatic specification for the thing on the left. The library interprets the diagrammatic spec and produces a program that takes the initial transformation (position, rotation, scale, and skew) of a shape (data for a  &lt;code&gt;t&lt;/code&gt;  in the diagram), and then runs forever, adding more shapes to the left and the right as it runs.&lt;/p&gt;
&lt;p&gt;The arrows in the spec mean "depends on", and the lines mean "depends on" both ways. I could have drawn the lines as two-sided arrows but I found that it was harder to read. Explaining this now I realize its kind of confusing tho lol.&lt;/p&gt;
&lt;p&gt;The self-loop on the  &lt;code&gt;t&lt;/code&gt;  in the spec is what makes the resulting diagram recursive, otherwise it would be a single red, green, and blue thing.&lt;/p&gt;
&lt;p&gt;Currently the diagrammatic spec is actually specified in text üòê&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06GVN8C23F.png"&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Gabriel Grinberg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/share-your-work.html#2024-02-04T21:32:21.199Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey everyone üëã made some big progress with Flyde in the recent months, and would love to share it here!&lt;/p&gt;
&lt;p&gt;Flyde is an open-source, visual programming language. It runs in the IDE, integrates with existing TypeScript code, both browser and Node.js.&lt;/p&gt;
&lt;p&gt;Flyde is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Revamped website - &lt;a href="https://www.flyde.dev"&gt;flyde.dev&lt;/a&gt; (see old one &lt;a href="https://web.archive.org/web/20231205034447/http://www.flyde.dev/"&gt;here&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Online playground - &lt;a href="https://play.flyde.dev"&gt;play.flyde.dev&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Dark mode (!!) in the VSCode extension&lt;/li&gt;
&lt;li&gt;Documentation &lt;a href="https://www.flyde.dev/docs/"&gt;flyde.dev/docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Would love to hear your thoughts and feedback üï∫&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06HT4W169E.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/673935/pong-wars"&gt;Pong Wars&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/devlog-together.html#2024-01-30T15:24:00.348Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have  y'all heard the good word yet about Pong Wars, a.k.a Yin-Yang for Pong, a.k.a Pin-Pong?&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06GCN9SV36.webm"&gt;Ping Pong&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üé≤ &lt;a href="http://alltom.com/pages/webppl-intro/"&gt;Intro to WebPPL, a Probabilistic Programming Language (PPL)&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/devlog-together.html#2024-02-02T16:57:38.945Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the power of View Source, I've embedded WebPPL on a web page of my own site! Just a simple (but perhaps more evocative than usual) intro to the language for now: &lt;a href="http://alltom.com/pages/webppl-intro/"&gt;alltom.com/pages/webppl-intro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/devlog-together.html#2024-02-02T22:43:48.433Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;so this has been developed a while ago, I just wanted to see how üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06GL85PCQP.mov"&gt;code on canvas looks like&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://stackoverflow.blog/2024/01/16/Kian-Katanforoosh-standford-deep-learning-ai-skills/"&gt;The half-life of developer skills is shrinking rapidly - Stack Overflow&lt;/a&gt; via &lt;strong&gt;Salmen Hichri&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/reading-together.html#2024-01-29T11:37:59.329Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A very interesting podcast talking about  &lt;em&gt;the future of software engineering&lt;/em&gt;  üí°&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How classic programming differs from ML/AI programming ..&lt;/li&gt;
&lt;li&gt;How to software engineers can adapt to emerging AI technologies ..&lt;/li&gt;
&lt;li&gt;And few other topics related to AI/ML and software engineering ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üìò &lt;a href="https://aosabook.org/en/"&gt;The Architecture of Open Source Applications&lt;/a&gt; via &lt;a href="https://twitter.com/getflourish"&gt;Florian Schulz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/linking-together.html#2024-02-02T16:07:06.267Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just learned about this: ‚ÄúThe Architecture of Open Source Applications‚Äù&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://alexharri.com/blog/vector-networks"&gt;The Engineering behind Figma's Vector Networks&lt;/a&gt; via &lt;a href="https://twitter.com/chatur_shalabh"&gt;Shalabh Chaturvedi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/linking-together.html#2024-02-04T01:14:27.489Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting read covering vector graphics "paths" and "vector networks" &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A deep dive into the world of vector networks, and the engineering challenges involved in their implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üßëüèΩ‚Äçüíª &lt;a href="https://www.getspectral.io/"&gt;getspectral.io&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/02/W1/linking-together.html#2024-02-04T15:14:53.278Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figma meets Visual Studio Code: Collaboratively navigate, debug and edit your codebase on an infinite canvas&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202402-week-1/</guid><pubDate>Sun, 04 Feb 2024 22:10:57 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/01 Week 5</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-5/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;üìç Spatial Computing üßë‚Äçüè´ Future of Kids Coding &lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://merveilles.town/@akkartik/111798602704749628"&gt;Structured data. Not too much. Mostly text.&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/share-your-work.html#2024-01-22T08:15:50.853Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üìç &lt;a href="https://duncancragg.substack.com/p/spatial-computing-with-links-not?r=1sq2dz&amp;amp;utm_campaign=post&amp;amp;utm_medium=web"&gt;Spatial Computing with links not apps&lt;/a&gt; via &lt;a href="https://twitter.com/Duncan__Cragg"&gt;Duncan Cragg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/share-your-work.html#2024-01-23T16:45:27.071Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My latest article:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Spatial Computing with links not apps&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Freedom from the Metal to the Metaverse&lt;/em&gt; &lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/devlog-together.html#2024-01-23T09:24:08.157Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week I paid off some technical debt, and refactored a single 7500-line file into 134 different JavaScript modules. I did this to myself. No one to blame but me. But it's finished.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/thinking-together.html#2024-01-25T10:31:23.408Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why aren't you using one of these? What's missing in them? is your use case not covered?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gtoolkit.com/"&gt;gtoolkit.com&lt;/a&gt; is the Moldable Development environment. It empowers you to make systems explainable through experiences tailored for each problem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.unison-lang.org/"&gt;unison-lang.org&lt;/a&gt; A new approach to Distributed programming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hyperfiddle/electric"&gt;github.com/hyperfiddle/electric&lt;/a&gt; A reactive DSL for full-stack web development, with compiler-managed frontend/backend network sync&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redplanetlabs.com/"&gt;redplanetlabs.com&lt;/a&gt; a new programming platform that ** reduces the cost of building scalable backends by 100x&lt;/li&gt;
&lt;li&gt;&lt;a href="https://croquet.io/"&gt;croquet.io&lt;/a&gt; Multiplayer Platform for Web and Unity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://enso.org/"&gt;enso.org&lt;/a&gt; Nodes and wires data manipulation &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rvbbit.com/"&gt;rvbbit.com&lt;/a&gt; reactive data boards &amp;amp; flows&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wolfram.com/language/"&gt;wolfram.com/language&lt;/a&gt; a symbolic language, deliberately designed with the breadth and unity needed to develop powerful programs quickly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Jacob Zimmerman&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/thinking-together.html#2024-01-26T02:08:40.563Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just curious for all your thoughts, is being ahead of your time a good thing? I‚Äôm thinking of a conversation I had with &lt;strong&gt;@Toby Schachman&lt;/strong&gt; in the Cuttle discord a while back where he mentioned that Cuttle aimed certain details at a status-quo of programming style unlike it‚Äôs predecessor Apparatus, I thought that was quite profound. I‚Äôm thinking also of Fortran vs Lisp (or perhaps Forth). When is it  &lt;em&gt;not&lt;/em&gt;  worth it to meet people where they are?&lt;/p&gt;
&lt;p&gt;üìçüí¨ &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/thinking-together.html#2024-01-28T14:06:35.055Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wanted to bounce 2 terms I've been thinking of off of this group:&lt;/p&gt;
&lt;p&gt;I dig visual programming, but think the term is like a little bit of a brain poison because it isn't really descriptive of the goals, and, like, almost all textual programming is inherently visual, too...just...in the way text is.&lt;/p&gt;
&lt;p&gt;I think &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt; was the person I first heard float the term "spatial programming," which I dig, but at least for me, it also misses the real value add of what I'm looking for in a "visual" system.&lt;/p&gt;
&lt;p&gt;So, the two terms I've been kicking around:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;relational programming&lt;/li&gt;
&lt;li&gt;cartographic programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither are perfect, and both feel exhaustingly pretentious (a good thing, may haps?) but my intention with both terms is to highlight that these sorts of systems, unlike text-based programming, help make the relationships between different elements (classes, data flow, inheritance, etc.) meaningful using information other than similar names.&lt;/p&gt;
&lt;p&gt;Useful? Stupid? Prior art?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üé• &lt;a href="https://www.youtube.com/watch?v=5IUj1EZwpJY"&gt;The Only Unbreakable Law&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-22T10:10:01.798Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/5IUj1EZwpJY/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A nice talk about Conway's law&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="https://ieeexplore.ieee.org/document/8352050"&gt;Visualization of Cultural Heritage Collection Data: State of the Art and Future Challenges&lt;/a&gt; via &lt;strong&gt;Jasmine Otto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-22T18:55:52.114Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given recent discussion of  &lt;em&gt;what social scientists need from computing&lt;/em&gt; (and is it plain-text scripting?), sharing this recent survey of cultural heritage visualization systems (16p). Section 3.4 (Granularity and Interactivity) will be especially interesting; the authors avoid flattening this idea to a 'file system'.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-22T19:17:34.479Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another one of those developer thriving comics from pluralsight‚Äôs research folks. I like that this one hits on contest culture, and its relationship to AI. (also, love that the PDF includes accessible text)&lt;/p&gt;
&lt;p&gt;üìÑ &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06EUQ0EZU6.pdf"&gt;Brilliant Blobs.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üßë‚Äçüè´üé• &lt;a href="https://youtu.be/dGvG2wCTJK8?si=0JecFvpLgqZX5iLX"&gt;Testing a new programming approach with 11 and 12 year-old children by Agust√≠n R.  Mart√≠nez&lt;/a&gt; via &lt;strong&gt;Beni Cherniavsky-Paskin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-25T19:55:34.780Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/dGvG2wCTJK8/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Whoa.  Similar to &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;'s probabilistic rule-driven VMs,&lt;/p&gt;
&lt;p&gt;plus a touch of Orca?  (Specifically the way the kid  &lt;em&gt;built&lt;/em&gt;  a timer out of a character pacing back and forth, see around 11:10-14:30)&lt;/p&gt;
&lt;p&gt;I particularly love the use of user-drawn icons in lieu of symbols.  Naming is hard (and requires literacy).&lt;/p&gt;
&lt;h2&gt;End User Programming&lt;/h2&gt;
&lt;p&gt;üìù &lt;a href="https://dl.acm.org/doi/pdf/10.1145/3480947"&gt;Myths and Mythconceptions&lt;/a&gt; via &lt;strong&gt;Stephen De Gabrielle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W5/of-end-user-programming.html#2024-01-25T15:59:50.135Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Almost finished listening to the marathon podcast on this paper.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-5/</guid><pubDate>Sun, 28 Jan 2024 21:46:58 GMT</pubDate></item><item><title>Future of Coding Weekly 2024/01 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;ü§ñ Intersection of programming &amp;amp; AI ‚å®Ô∏è Keys, Boxes &amp;amp; Arrows üìö Probabilistic Models of Cognition&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;üéº &lt;a href="https://polygon.iimaginary.com/"&gt;Polygon&lt;/a&gt; via &lt;strong&gt;Clam R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/share-your-work.html#2024-01-15T22:16:24.547Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://polygon.iimaginary.com/"&gt;Polygon&lt;/a&gt;: A spatial approach to sequencing musical rhythms&lt;/p&gt;
&lt;p&gt;Inspired by Bret Victor's lectures and some of the cool stuff i've seen on here, I made a drum sequencer where the relative positions of nodes determines the spaces between notes in a pattern.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generate drum patterns through spatial computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ü§ñüé• &lt;a href="https://www.youtube.com/watch?v=nS1wsif3y94"&gt;Gloodata: Your Personal Productivity Assistant&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/share-your-work.html#2024-01-17T16:35:01.391Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/nS1wsif3y94/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I recorded a short demo showing the latest plugins and improvements I've been working on in gloodata.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=nS1wsif3y94"&gt;Gloodata: Your Personal Productivity Assistant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The demo shows timezone information, weather forecast, maps, routes, content extraction and summarisation plugins.&lt;/p&gt;
&lt;p&gt;üìù &lt;a href="http://public.me/"&gt;public.me&lt;/a&gt; via &lt;strong&gt;Anton Podviaznikov&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/share-your-work.html#2024-01-20T12:27:56.856Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;made a simple tool to publish Apple Reminders online &lt;a href="http://public.me/"&gt;public.me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sounds not impressive, but Apple Reminders gave me an interesting data structure: list of items with predefined format(name, description, date, url, isCompleted, images etc).&lt;/p&gt;
&lt;p&gt;So I was able to build habits tracker directly in reminders and have nice visualizations of streaks like this &lt;a href="https://public.me/anton/daily"&gt;public.me/anton/daily&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ü§ñüê¶ &lt;a href="https://twitter.com/io_sammt/status/1748683055605195087?s=46&amp;amp;t=kvyalr_gJlbdW-jQJstTcg"&gt;Tweet from @io_sammt&lt;/a&gt; via &lt;strong&gt;Samuel Timb√≥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/share-your-work.html#2024-01-20T13:57:51.928Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I see lots of folks here are interested in the intersection of programming and AI (to say little); I finally posted an example combining Unit and LLMs on X. It is a reactive graph for text reasoning and image generation. I start from a statement, then apply commands to transform it, ultimately rendering generated images. &lt;a href="https://twitter.com/io_sammt/status/1748683055605195087?s=46&amp;amp;t=kvyalr_gJlbdW-jQJstTcg"&gt;Take a look &lt;/a&gt;. Full preview:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2024-01-20 at 10.56.26.png" src="http://history.futureofcoding.org/history/msg_files/F06/F06ER1MVBGD.png"&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;üé† &lt;a href="https://akkartik.itch.io/carousel/devlog/668072/a-little-game-integrated-with-its-tools"&gt;A little game integrated with its tools&lt;/a&gt; via &lt;a href="http://akkartik.name/about"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/devlog-together.html#2024-01-19T17:15:06.713Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Integrating a little game with a sprite editor and a maze editor, all on a touch-screen.&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06EJAAQ66S.webm"&gt;sprite game&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/devlog-together.html#2024-01-19T18:44:27.572Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When working on my language I've been frustrated by the lack of symbols and extra information for my JIT compiled code. There is a way to get this kind of information, but it involves building an elf binary in memory. Way too much overhead for this point in my development.&lt;/p&gt;
&lt;p&gt;So I started building my own debugger frontend to lldb. Not much to show right now. But the idea is to specifically tailor it to my language. So you'll get a compiler explorer like experience, but also be able to view the stack and heap and all of that live. See the language level values stored in there.&lt;/p&gt;
&lt;p&gt;The fun part to for me was how to convey the information I need to the debugger. The answer came from the standard JIT interface. How do you tell your debugger things? You make a function that the debugger has a breakpoint in. The function does nothing in the body. You just pass some args that tells the debugger where in memory to get the information it needs. Super clever. So now I'm working on passing all my compiler metadata to the debugger frontend so it can know how to render things intelligently.&lt;/p&gt;
&lt;p&gt;‚å®Ô∏èüé• &lt;a href="https://youtu.be/ApOfXliyGqc"&gt;Using just the keyboard for visual programming&lt;/a&gt; via &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/devlog-together.html#2024-01-21T17:08:18.144Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ApOfXliyGqc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This week I spend a lot of time adding basic keyboaed support in the visual programming system that I am developing. For productivity I think that just using a mouse for creating a visual flow is not enough. One of the reasons why we are so productive when using a text editor for programming is the usage of the keyboard I think. Off course it's not the only reason but I do think it's of major influence. &lt;/p&gt;
&lt;p&gt;So being able to use the keyboard for visual programming seems like a very good idea. In &lt;a href="https://youtu.be/ApOfXliyGqc"&gt;this video&lt;/a&gt; I show exactly that.&lt;/p&gt;
&lt;p&gt;Currently after every update to the flow, the tabindex is set on all the nodes and input elements. In normal webapps this is not a good idea, but here it is the only way to give the browser the proper and logical tab order. When tabbing through the flow, the camera is focused on the selected node overriding default browser scroll-behavior when a focused element is out of the current view. Using ctrl+a you can add a new node and also select the thumbs for the connection.  &lt;/p&gt;
&lt;p&gt;Furthermore I've added some other features like being able to run a flow using the keyboard (ctrl + Enter) and opening the properties popup. A missing feature is being able to add a new node before the currently selected node.&lt;/p&gt;
&lt;p&gt;Lots of small tweaks were needed to make this work, but I am glad I spend the time because this also increases the accessibility.&lt;/p&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/devlog-together.html#2024-01-21T18:46:36.980Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created a simple Linked-Data / RDF console app (I call it MondAI),&lt;/p&gt;
&lt;p&gt;it allows creation of triples Entity-&amp;gt;Connection-&amp;gt;Another-Entity&lt;/p&gt;
&lt;p&gt;and allows query data&lt;/p&gt;
&lt;p&gt;üé• &lt;a href="http://history.futureofcoding.org/history/msg_files/F06/F06EVNW2U6P.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;üí¨ &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/reading-together.html#2024-01-20T16:06:59.383Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;, in episode 9 of a podcast I can‚Äôt tell if I‚Äôm supposed to know about or not, you asked, ‚ÄúWhere is [data] going when you‚Äôre throwing it away, and when you rewind, how does it come back?‚Äù And I don‚Äôt think it has answers that you‚Äôd want to apply directly to your situation, but  ~&lt;em&gt;&lt;em&gt;Feynman‚Äôs Lectures on Computing&lt;/em&gt;&lt;/em&gt;~  comes back to the idea of reversible computing again and again with various playful metaphorical lenses. I think that at the very least it might be a nice way to take a break and think about the problem from a physicist‚Äôs perspective now and then, if this is still a problem you‚Äôre working on.&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;üêá &lt;a href="https://www.rabbit.tech/keynote"&gt;rabbit.tech/keynote&lt;/a&gt; via &lt;strong&gt;Pietu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/linking-together.html#2024-01-16T15:22:35.112Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rabbit.tech/keynote"&gt;rabbit.tech/keynote&lt;/a&gt; (demo starts at 7:33) shows an un-released portable personal-assistant device. There's a lot going on in the keynote, both in UI-wise, and how they demo and describe this "new kind" of device.&lt;/p&gt;
&lt;p&gt;üìÑ &lt;a href="https://mptc.io"&gt;Modern Plain Text Computing&lt;/a&gt; via &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/linking-together.html#2024-01-21T04:05:28.006Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://mptc.io"&gt;Modern Plain Text Computing&lt;/a&gt; course at Duke has a refreshingly frank description written by Kieran Healy. I can't tell if I should feel positively, negatively &lt;em&gt;,&lt;/em&gt; or  &lt;em&gt;overwhelmingly negatively&lt;/em&gt;  ‚Äî double adverb &lt;em&gt;!!&lt;/em&gt;  ‚Äî about the existence of this course, though.&lt;/p&gt;
&lt;p&gt;üìö &lt;a href="https://micro.alltom.com/2024/01/11/the-cognition-in.html"&gt;Probabilistic Models of Cognition&lt;/a&gt; via &lt;a href="https://twitter.com/alltom"&gt;Tom Lieber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://history.futureofcoding.org/history/weekly/2024/01/W4/present-company.html#2024-01-20T16:32:29.209Z"&gt;üßµ conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve been really into probabilistic programming languages (PPLs) lately. I had a few ‚Äúaha‚Äù moments and I‚Äôm decidedly in the ‚Äúhit everything with this hammer to figure out where the nails are‚Äù phase.&lt;/p&gt;
&lt;p&gt;Anyway, is anybody here in a similar headspace? Or already experienced with PPLs?&lt;/p&gt;
&lt;p&gt;Is anybody curious to enter this headspace with me? I reviewed the (online, free, programmable) book that brought me here: &lt;a href="https://micro.alltom.com/2024/01/11/the-cognition-in.html"&gt;micro.alltom.com/2024/01/11/the-cognition-in.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ‚ÄúCognition‚Äù in Probabilistic Models of Cognition üìö is the hardest part to get across when I recommend this book. Because the book isn‚Äôt ‚ÄúBayes works, yawn.‚Äù It‚Äôs so much more interesting if you, like me, exist primarily in ML circles that focus on curve-fitting:
 What could be going on in our heads when we can‚Äôt tell that the two grid squares in that optical illusion are the same color?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;üë®üèΩ‚Äçüíª By üêò &lt;a href="https://hachyderm.io/@marianoguerra"&gt;@marianoguerra@hachyderm.io&lt;/a&gt; üê¶ &lt;a href="https://twitter.com/warianoguerra"&gt;@warianoguerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üí¨ Not a member yet? Check the &lt;a href="https://futureofcoding.org/"&gt;Future of Coding Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚úâÔ∏è Not subscribed yet? &lt;a href="https://tinyletter.com/marianoguerra/"&gt;Subscribe to the Newsletter&lt;/a&gt; / &lt;a href="https://newsletter.futureofcoding.org/"&gt;Archive&lt;/a&gt; / &lt;a href="https://history.futureofcoding.org/newsletter/rss.xml"&gt;RSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üéôÔ∏è Prefer podcasts? check the &lt;a href="https://futureofcoding.org/episodes/"&gt;Future of Coding Podcast&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202401-week-4/</guid><pubDate>Sun, 21 Jan 2024 22:07:29 GMT</pubDate></item></channel></rss>