<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly (Posts about past)</title><link>http://newsletter.futureofcoding.org/</link><description></description><atom:link href="http://newsletter.futureofcoding.org/categories/past.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Wed, 10 Apr 2024 08:09:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2020/02 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;On the experiment side, this week I started playing with emojis to allow quick scans for content of interest, I will try to be consistent with the emoji usage so people can use them to orient around a previously dry wall of text (the tool I use doesn't excel at promoting creative expression)&lt;/p&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://twitter.com/geoffreylitt/status/1229251217118892032"&gt;New little demo of end user software customization&lt;/a&gt; by &lt;a href="https://twitter.com/geoffreylitt"&gt;Geoffrey Litt&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort Hacker News by total points descending, for a more stable ranking&lt;/li&gt;
&lt;li&gt;Remove the articles I've already read&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üíª" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4bb/32.png"&gt; &lt;a href="https://twitter.com/ccorcos"&gt;Chet Chorcos&lt;/a&gt; shared a &lt;a href="https://github.com/ccorcos/datalog-prototype"&gt;full-stack prototype of collaborate web application backed by a Datalog-inspired database&lt;/a&gt; he built in one day.&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìë" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4d1/32.png"&gt; Useful resources mentioned in the &lt;a href="https://github.com/ccorcos/datalog-prototype#how-does-it-work"&gt;How does it work?&lt;/a&gt; section of the readme.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; A brief walk-through on the steps needed to &lt;a href="https://www.youtube.com/watch?v=6t9VSyyE4to"&gt;create launch visualizations from the SpaceX HTTP JSON API&lt;/a&gt; (cameo of the basket to ease drag and drop of multiple things in targets far apart from the source). Also short demos about &lt;a href="https://www.youtube.com/watch?v=XMzP2KVLRR8"&gt;Premier League Attendance and Goals by Team from CSV File&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=80f_J5goHMo"&gt;Sales KPIs from an Excel Spreadsheet&lt;/a&gt; by &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=0msyWHrw40A"&gt;Beyond Snapping: Persistent, Tweakable Alignment and Distribution with StickyLines&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UIST 2016: Proceedings of the 29th Annual ACM Symposium on User Interface Software &amp;amp; Technology&lt;/p&gt;
&lt;p&gt;Aligning and distributing graphical objects is a common, but cumbersome task. In a preliminary study (six graphic designers, six non-designers), we identified three key problems with current tools: lack of persistence, unpredictability of results, and inability to 'tweak' the layout.&lt;/p&gt;
&lt;p&gt;We created StickyLines, a tool that treats guidelines as first-class objects: Users can create precise, predictable and persistent interactive alignment and distribution relationships, and 'tweaked' positions can be maintained for subsequent interactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=KfxE99eN44c"&gt;Beyond Grids: Interactive Graphical Substrates to Structure Digital Layout&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CHI'17: ACM CHI Conference on Human Factors in Computing Systems Session: Spatial &amp;amp; Temporal Design&lt;/p&gt;
&lt;p&gt;Traditional graphic design tools emphasize the grid for structuring layout. Interviews with professional graphic designers revealed that they use surprisingly sophisticated structures that go beyond the grid, which we call graphical substrates.&lt;/p&gt;
&lt;p&gt;We present a framework to describe how designers establish graphical substrates based on properties extracted from concepts, content and context, and use them to compose layouts in both space and time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=lX1BBMyY1bc"&gt;Project Lincoln: Adobe MAX 2017 (Sneak Peeks)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lincoln is a data visualization tool for designers to link graphics to data without the need to code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="http://data-illustrator.com/"&gt;Data Illustrator: Create infographics and data visualizations without programming&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Augmenting Vector Design Tools with Lazy Data Binding for Expressive Visualization Authoring.&lt;/p&gt;
&lt;p&gt;Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, 2018&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üåê" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f310/32.png"&gt; &lt;a href="https://charticulator.com/"&gt;Charticulator: Create Bespoke Chart Designs without Programming&lt;/a&gt;. ( &lt;a href="https://charticulator.azureedge.net/videos/charticulator-supplemental.mp4"&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; Video&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://www.youtube.com/watch?v=xvoJsymzRkw"&gt;Jennifer Mary Jacobs - Domain Specific Programming Platforms for Creativity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; &lt;a href="http://blog.rfox.eu/en/Programmer_s_critique_of_missing_structure_of_oper.html"&gt;Programmer's critique of missing structure of operating systems&lt;/a&gt; by &lt;a href="https://twitter.com/bystroushaak"&gt;@bystroushaak&lt;/a&gt; who expresses his frustration in using raw text (files, command parameters, environment variables, socket...) as unique way to communicate at the OS level.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üìë" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4d1/32.png"&gt; A &lt;a href="https://github.com/pel-daniel/mind-bicycles"&gt;list of future of programming projects&lt;/a&gt; maintained by &lt;a href="https://pel-daniel.github.io/cv/"&gt;Daniel Garc√≠a Carmona&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üßµ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; A &lt;a href="https://threadreaderapp.com/thread/927593460642615296.html"&gt;twitter thread&lt;/a&gt; by &lt;a href="https://twitter.com/gravislizard"&gt;@gravislizard&lt;/a&gt; argues that keyboard based old text UI was faster and not necessary less intuitive than web UI with mouse: &amp;gt; almost everything on computers is perceptually slower than it was in 1983 amber-screen library computer in 1998: type in two words and hit F3. search results appear instantly. now: type in two words, wait for an AJAX popup. get a throbber for five seconds. oops you pressed a key, your results are erased.&lt;/p&gt;
&lt;p&gt;Follows a &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1582130078216300"&gt;Slack thread&lt;/a&gt; which eventually discusses distributed, interactive, stateful apps/systems.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;img alt="üé•" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f3a5/32.png"&gt; &lt;a href="https://vimeo.com/392454807"&gt;Stamper: An Artboard-Oriented Creative Coding Environment&lt;/a&gt; by &lt;a href="https://twitter.com/supercgeek"&gt;Cameron Burgess&lt;/a&gt; (&lt;img alt="üßµ" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f9f5/32.png"&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1582133029218800"&gt;Slack Thread&lt;/a&gt;, &lt;a href="https://twitter.com/supercgeek/status/1230163240815955968"&gt;Twitter Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stamper is an alternative editor for p5.js, inspired by design software with Artboards (e.g. Sketch, Illustrator)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="üìù" src="https://fonts.gstatic.com/s/e/notoemoji/15.0/1f4dd/32.png"&gt; Read more here: &lt;a href="https://paper.dropbox.com/doc/Stamper-An-Artboard-Oriented-Programming-Environment-QXtfMXshBFBNCu6iCtx2J"&gt;Stamper: An Artboard Oriented Programming Environment&lt;/a&gt;&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/</guid><pubDate>Wed, 10 Apr 2024 08:08:35 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Announcing the awesome program for the &lt;a href="https://2020.programming-conference.org/home/salon-2020#program"&gt;Convivial Computing Salon 2020 - ‚ÄπProgramming‚Ä∫ 2020&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Demos&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Raathi Kugarajan&lt;/strong&gt; shared his project &lt;a href="https://github.com/Raathigesh/JSBubbles"&gt;JSBubbles&lt;/a&gt;: Re-imagining reading and navigating JavaScript codebases in VSCode&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was tinkering with a VSCode extension inspired by Code Bubbles but my effort was mostly focused on navigating and reading JavaScript code bases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrew Reece&lt;/strong&gt; posted a second DevLog for WhiteBox, a live debugger/REPL for C(++) - now with a GUI, a familiar debugger-like data tree, graphing variable value changes across a function.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lZX8I0w7jJ4"&gt;WhiteBox DevLog 2 - GUI, data trees and graphing values over time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/E-l15Re1lUU"&gt;Bloques Web Update&lt;/a&gt; by &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An update to the tool to teach HTML/CSS/JS to non programmers, added new high level blocks, some even for layout, two lower level layers that get closer and closer to textual HTML. Also added import/export.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;From our Community&lt;/h4&gt;
&lt;p&gt;Talk presenting &lt;a href="https://www.youtube.com/watch?v=tX4H_ctggYo"&gt;Geometric Algebra for Computer Graphics&lt;/a&gt; which seems to simplify operations compared to other representations.&lt;/p&gt;
&lt;p&gt;More information on the website &lt;a href="https://bivector.net/"&gt;https://bivector.net/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clifford's Geometric Algebra enables a unified, intuitive and fresh perspective on vector spaces, giving elements of arbitrary dimensionality a natural home.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementations in Javascript, c++, c#, rust and python at the &lt;a href="https://github.com/enkimute/ganja.js/"&gt;ganja.js&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jasonlaster11/status/1226965515144482827"&gt;Jason Laster&lt;/a&gt; shared &lt;a href="https://webreplay.io/"&gt;Web Replay&lt;/a&gt; which supports &lt;a href="https://webreplay.io/features/time-travel-debugging.html"&gt;Time Travel Debugging&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web Replay records your entire application, so you can track bugs down faster, understand your code better, and always get perfect bug reports.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/podcasts/debugging-record-replay-data/"&gt;Greg Law on Debugging, Record &amp;amp; Replay of Data, and Hyper-Observability&lt;/a&gt; by &lt;a href="https://twitter.com/gregthelaw"&gt;Greg Law&lt;/a&gt; via &lt;strong&gt;Karki&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Topics discussed included: the challenges with debugging modern software systems, the need for ‚Äúhyper-observability‚Äù and the benefit of being able to record and replay exact application execution; and the challenges with implementing the capture of nondeterministic system data in Undo‚Äôs LiveRecorder product for JVM-based languages that are Just-In-Time (JIT) compiled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rcn.com/david-moon/Lunar/all_programming_languages_are_wrong.html"&gt;All Programming Languages are Wrong&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/David_A._Moon"&gt;David A. Moon&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581503038102000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most current-day programming languages seem to be based on the idea that computation is slow, so the user and the compiler must work hard to minimize the number of instructions executed.&lt;/p&gt;
&lt;p&gt;Compromises to minimize instructions extend so far as to make familiar-looking operators like + and &amp;lt; behave in unintuitive ways. If as a result a program does not work correctly in some cases, it is considered to be the programmer's fault. But it is really the language designer's fault.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ryanflorence/status/1227629264259801088?s=20"&gt;Ryan Florence&lt;/a&gt; on twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever I talk to teenagers about programming they want to do it on their phone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And an interesting &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581608876136700"&gt;Slack conversation&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/graydon_pub"&gt;Graydon Hoare&lt;/a&gt; on "text is already a highly-structured graphical notation" via &lt;strong&gt;yoshiki&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;many technical innovations are latent in textual notations. Visually unambiguous yet uniform symbol sets, combinatorial-positional word formation, linear spatio-temporal segregation, punctuation and structured page layout .. these are all technologies in writing that we had to laboriously invent, and they have purposes, advantages! Similarly in coding, we had to invent and adapt technologies from verbal and mathematical notations refined over millennia: lines and columns, indentation, block layout, juxtaposition and precedence, scope, evaluation order, comments, grammars, version control, diff and merge algorithms ... the pile of structuring technologies embedded in the textual representation of programs isn't free, and it isn't useless&lt;/p&gt;
&lt;p&gt;So I'm just really cautious when people suggest throwing it all out for some hypothetical reinvention. You need those structures: so you've got an immediate problem of "what are you going to use instead", and a longer-term question of "what makes you think you're not going to wind up right back at the same place ten thousand years of refining graphemes-on-a-page wound up"?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's more where those quotes came from: &lt;a href="https://graydon2.dreamwidth.org/253769.html?thread=692809#cmt692809"&gt;Re: Graphical Editors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chris Knott&lt;/strong&gt; &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1581499317101600"&gt;shares an interesting story about evolving clocks to solve a particular problem in a Slack conversation&lt;/a&gt;. A similar story about the &lt;a href="https://en.wikipedia.org/wiki/MacCready_Gossamer_Albatross"&gt;MacCready Gossamer Albatross&lt;/a&gt; is shared there too.&lt;/p&gt;
&lt;p&gt;Some quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;importance of not confusing incidental problems for fundamental problems&lt;/p&gt;
&lt;p&gt;the entire issue is not solved, but sidestepped&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/</guid><pubDate>Wed, 10 Apr 2024 08:07:20 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;&lt;strong&gt;New Future of Coding Podcast&lt;/strong&gt; &lt;a href="https://futureofcoding.org/episodes/044"&gt;#44 - Making Your Own Tools: Devine Lu Linvega | Future of Coding&lt;/a&gt; by &lt;a href="https://twitter.com/spiralganglion"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Devine Lu Linvega and his partner Rekka live on a sailboat. He makes art, music, software, and other cultural artifacts. When Photoshop‚Äôs DRM required that he maintain a connection to the internet, he wrote his own creative suite. When his MacBook died in the middle of the ocean, he switched to Linux with hardware he could service. His electricity comes from solar panels, and every joule counts ‚Äî so that‚Äôs out with Chrome and Electron and in with Scheme, C, assembly, and maybe someday Forth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.loom.com/share/cab62c8172404c39bebc4c511a60a389"&gt;Customizing Airbnb with a spreadsheet&lt;/a&gt; by &lt;a href="https://twitter.com/geoffreylitt/status/1224094967922073600"&gt;Geoffrey Litt&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At 3:10 in this demo video, I drag select multiple listings on a website, and bulk perform an action on them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction"&gt;Anders Hejlsberg on Modern Compiler Construction&lt;/a&gt;. By &lt;a href="https://twitter.com/ahejlsberg"&gt;Anders Hejlsberg&lt;/a&gt; via &lt;strong&gt;Daniel&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this video Anders a great foundation of compiler construction by describing the traditional methodologies that have been used in the last 30 or so years. He then uses that foundation to describe modern tooling needs and how compilers have adapted to meet increasing demands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;An interesting &lt;a href="https://twitter.com/Polackio/status/1223303212775739392"&gt;Twitter thread on the preservation of digital art&lt;/a&gt;, including comment on how it hurts that digital artists can't fully manage the media they use. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580664092315400"&gt;Long and interesting Slack Thread&lt;/a&gt;). By &lt;a href="https://twitter.com/Polackio"&gt;Matt Popke&lt;/a&gt; via &lt;strong&gt;Konrad Hinsen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://djrobstep.com/posts/programs-are-a-prison"&gt;Programs are a prison: Rethinking the fundamental building blocks of computing interfaces&lt;/a&gt;. By &lt;a href="https://twitter.com/djrobstep"&gt;djrobstep&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580693035409300"&gt;Slack Thread&lt;/a&gt; via &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We often hear that Apple's ecosystem of apps (or Microsoft's, or Google's) are "walled gardens". But what about the individual applications themselves?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arcan-fe.com/about/"&gt;Arcan&lt;/a&gt; is a powerful development framework for creating virtually anything between user interfaces for specialised embedded applications all the way to full-blown standalone desktop environments. Boot splash screen? no problem. Custom Interface for your Home Automation Project? sure thing. Stream media processing? Of course. &lt;a href="https://www.youtube.com/watch?v=3O40cPUqLbU"&gt;AWB "Desktop" concept ~5min video&lt;/a&gt;. By &lt;a href="https://twitter.com/CrazyLogLad"&gt;Bjorn Stahl&lt;/a&gt; via &lt;strong&gt;S.M Mukarram Nainar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Interesting conversation on Slack about &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580751504462400"&gt;the positive benefits of accidental / incidental complexity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;This week on Slack, &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580718026447200"&gt;a fun prompt&lt;/a&gt; from Brandon Hudgeons (via Kartik Agaram):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get to name an assertion the ___ Paradox (fill in your last name). What do you choose?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Come &lt;a href="https://futureofcoding.org/community"&gt;join Slack&lt;/a&gt; and start a new thread about your paradox!&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://roamresearch.com/"&gt;Roam Research&lt;/a&gt; is looking for a &lt;a href="https://cwhitesullivan.acemlnb.com/lt.php?s=5142d0f360d4e0207722dd3e07dc3d46&amp;amp;i=14A158A1A36"&gt;Full Stack Engineer (Leaning Backend)&lt;/a&gt; by &lt;a href="https://twitter.com/Conaw"&gt;Conor White-Sullivan&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should love Clojure, be comfortable with some devops type work, and ideally have experience with Datomic and datalog.&lt;/p&gt;
&lt;p&gt;Big points if you're familiar with the work of Doug Engelbart, Bret Victor, Michael Nielsen, Andy Matuschak, and Alan Kay.&lt;/p&gt;
&lt;p&gt;SF preferred, but we'll consider remote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Operon 0.5.0 is out, find it from &lt;a href="https://operon.io"&gt;https://operon.io&lt;/a&gt; (Java-binary and pdf-booklet) by &lt;a href="https://twitter.com/OperonGuy"&gt;OperonGuy&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1580674741033000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is also the first public release and I'm hoping for feedback on the most rudimentary things; did you get the queries running (if you had a chance to try)? What was your initial impression on the language? Did you encounter anything illogical or that you could consider as possible design flaw?&lt;/p&gt;
&lt;p&gt;I have not yet documented everything, so there's more to come on later releases. Also none of the components were yet released, so it is just the core that is out now. Love to hear back from you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Summary of a paper: &lt;a href="https://instadeq.com/blog/posts/paper-didnt-read-statecharts-a-visual-formalism-for-complex-systems/"&gt;Paper; Didn't Read - Statecharts: A Visual Formalism For Complex Systems&lt;/a&gt; by &lt;a href="https://twitter.com/instadeq"&gt;instadeq&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;statecharts = state-diagrams + orthogonality + depth + broadcast-communication&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ballingt"&gt;Thomas Ballinger&lt;/a&gt; wrote some posts about "Observable for Jupyter Users".&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/b00406054cfb4875"&gt;Differences between Jupyter and Observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/eceaa744227c4fea"&gt;Visualize a data frame with Observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/c4e1459a8a99cdaf"&gt;Interactivity in Observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/d/5e82392bae5fb729"&gt;Bonus: JavaScript for Python Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lively discussion in the &lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1580753303039100"&gt;Slack Thread&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'd be particularly interested in whether you think I'm identifying the differences in workflow in a digestible way. The goal is that these are tutorials, not marketing documents, if there's a difference. I guess they're marketing documents for programmers, not CEOs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;An article about &lt;a href="https://gtoolkit.com/"&gt;Glamorous Toolkit&lt;/a&gt; describing what one rendering tree means and the doors it opens for creating new kinds of 2D interfaces: &lt;a href="https://medium.com/feenk/one-rendering-tree-918eae49bcff"&gt;One rendering tree&lt;/a&gt;. Via &lt;a href="https://twitter.com/girba"&gt;Tudor Girba&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1581166076065600"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/</guid><pubDate>Wed, 10 Apr 2024 08:06:12 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/02 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;&lt;a href="http://www.ppig.org/content/ppig-2020-call-papers"&gt;Psychology of Programming Interest Group Call for Papers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The 31st Annual Meeting of the Psychology of Programming Interest Group will be hosted for the first time in North America, at OCAD University's Inclusive Design Research Centre in Toronto, Canada, during the week of July 29-31, 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/prathyvsh/Visual-Math-Tools/"&gt;Catalog of Visual Math Tools&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580126222205200"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mike Travers&lt;/strong&gt; joins our slack and introduces himself and his work. He worked at MIT MediaLab long time ago on &lt;a href="http://alumni.media.mit.edu/~mt/behave/behave.html"&gt;Behave!&lt;/a&gt; an interesting block based visual language for simple agent programming, that was one of the ancestor of Scratch. He now works on visual programming based on Blockly to help scientist build queries to scientific data (see this &lt;a href="https://www.dropbox.com/s/qabtwa4p6u48gfy/enflame-clojure-meetup.pdf"&gt;presentation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ps3mBPcjySE"&gt;GopherCon Europe 2019: Ivan Daniluk - Rethinking Visual Programming&lt;/a&gt; Presentation. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580180026224700"&gt;Slack Thread&lt;/a&gt;) via &lt;strong&gt;Edward de Jong&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Blog post: &lt;a href="https://divan.dev/posts/visual_programming_go/"&gt;Rethinking Visual Programming with Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.createwithplay.com"&gt;Play: A new approach for creating better mobile apps&lt;/a&gt; via &lt;strong&gt;Achraf Kassioui&lt;/strong&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580357865257500"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Play empowers you to design, build and launch better mobile products, in less time, with fewer barriers - all on your mobile device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mariano Guerra&lt;/strong&gt; shared a &lt;a href="https://www.youtube.com/watch?v=UqTLUAWCM4M"&gt;video&lt;/a&gt; showing an educational prototype to produce HTML pages using Blockly to learn what HTML structure looks like without having to worry about syntax at first. The prototype is &lt;a href="https://marianoguerra.github.io/bloques-web/"&gt;online&lt;/a&gt; (in Spanish) and its sources are on &lt;a href="https://github.com/marianoguerra/bloques-web"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Jonathan Blow talking about his past, of course about games, but also about programming today, open source, C++, Rust, the future of programming, and many other issues people here will be interested in (and/or annoyed by his perspective ;-): &lt;a href="https://oxide.computer/blog/on-the-metal-9-jonathan-blow/"&gt;On the Metal Podcast: Jonathan Blow&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580480732286100"&gt;Slack Thread&lt;/a&gt;) via &lt;strong&gt;Stefan Lesser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ChrisKnott/Algojammer"&gt;Algojammer&lt;/a&gt; is an experimental, proof-of-concept code editor for writing algorithms in Python. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580241505237300"&gt;Slack Thread&lt;/a&gt;) via &lt;strong&gt;Shalabh Chaturvedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://careers.microsoft.com/us/en/job/769490/Internship-Opportunities-Designing-for-spreadsheets-and-programming-languages"&gt;Internship Opportunities: Designing for spreadsheets and programming languages&lt;/a&gt; at Microsoft Research in Cambridge. via &lt;strong&gt;Daniel Garcia&lt;/strong&gt;&lt;/p&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/</guid><pubDate>Wed, 10 Apr 2024 08:02:47 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/01 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Welcome! this week I'm trying a different format for entries, let me know if you notice and what you think about it :)&lt;/p&gt;
&lt;h4&gt;Demos&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=L66Va7FSjWM"&gt;Instadeq No Code Data Science Update: Time Traveling Undo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New feature to undo changes by seeing the different states of an entity through time and picking one to restore.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;From our Community&lt;/h4&gt;
&lt;p&gt;Steve Dekorte started a really interesting conversation about &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579212773252900"&gt;different ways of representing nothingness&lt;/a&gt;, and how that sometimes chaffs against type discipline. The conversation goes deep on data modelling and representation.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://web.eecs.utk.edu/~azh/blog/notebookpainpoints.html"&gt;What's wrong with computational notebooks?&lt;/a&gt; by &lt;a href="https://twitter.com/austinzhenley"&gt;Austin Z. Henley&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579526703208300"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computational notebooks, such as Jupyter Notebooks, Azure Notebooks, and Databricks, are wildly popular with data scientists. But as these notebooks are used for more and more complex tasks, data scientists run into more and more pain points. In this post I will very briefly summarize our method, findings, and some opportunities for tools.&lt;/p&gt;
&lt;p&gt;This post is an informal summary of our recent CHI'20 paper, "What's Wrong with Computational Notebooks? Pain Points, Needs, and Design Opportunities". Check out the &lt;a href="http://web.eecs.utk.edu/~azh/pubs/Chattopadhyay2020CHI_NotebookPainpoints.pdf"&gt;preprint&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sp.cmc.msu.ru/courses/smalltalk/fabrik/Fabrik.html"&gt;Fabrik - A Visual Programming Environment&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/Dan_Ingalls"&gt;Dan Ingalls&lt;/a&gt; and others (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579522204207200"&gt;Slack Thread&lt;/a&gt; and &lt;a href="https://twitter.com/prathyvsh/status/1190222195579994113"&gt;Twitter Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fabrik is a visual programming environment - a kit of computational and user-interface components that can be "wired" together to build new components and useful applications. Fabrik diagrams utilize bidirectional dataflow connections as a shorthand for multiple paths of flow. Built on object-oriented foundations, Fabrik components can compute arbitrary objects as outputs. Music and animation can be programmed in this way and the user interface can even be extended by generating graphical structures that depend on other data. An interactive type system guards against meaningless connections. As with simple dataflow, each Fabrik component can be compiled into an object with access methods corresponding to each of the possible paths of data propagation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://michaelnielsen.org/blog/principles-of-effective-research/"&gt;Principles of Effective Research&lt;/a&gt; by Michael Nielsen has some good tips on conducting research. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579556241220000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A video by Philip Guo &lt;a href="https://www.youtube.com/watch?v=ttTEpgGwsts&amp;amp;feature=youtu.be"&gt;PG Vlog #___ - Nielsen's "Principles of Effective Research": what i find most relevant for students&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Will the future of coding be statically, dynamically typed, both or neither? Alexis King thinks that &lt;a href="https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/"&gt;No, dynamic type systems are not inherently more open&lt;/a&gt;. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579556106218100"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hillelwayne.com/"&gt;Hillel Wayne&lt;/a&gt; has &lt;a href="https://buttondown.email/hillelwayne/archive/a-totally-polished-and-not-at-all-half-baked-take/"&gt;A Totally Polished and not-at-all half-baked Take on Static vs Dynamic Typing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vladimir Gordeev&lt;/strong&gt; shared a presentation he gave at his university: &lt;a href="https://www.youtube.com/watch?v=t8UH3DjvxDE"&gt;Towards efficient development tools&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1579618522012000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In presentation I tried to show the possibility and need for better tools. I did a short overview of existing FoC projects, talked a bit about project I am working on: a generic tree editor (structure editor) that doesn't tied up to any PL. I also talked about idea of designing PL by balancing Order and Chaos, ideas that I got from Jordan Peterson.&lt;/p&gt;
&lt;p&gt;I believe that breakaway from text-based editing towards structure-based is an inevitable event for future of programming.&lt;/p&gt;
&lt;p&gt;I also have some other ideas about programming languages that I would like to build on top of this tree editing platform, but it is not covered in presentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=JQCJCTgzCFo"&gt;Branislav Selic - On the Engineering of Software-Based Systems for the 21 st Century&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579645005241100"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Learning from failed utopias of the recent past: &lt;a href="https://twobithistory.org/2018/05/27/semantic-web.html"&gt;Whatever Happened to the Semantic Web?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web we have today is slowly becoming a glorified app store, just the easiest way among many to download software that communicates with distant servers using closed protocols and schemas, making it functionally identical to the software ecosystem that existed before the web. How did we get here? If the effort to build a Semantic Web had succeeded, would the web have looked different today? Or have there been so many forces working against a decentralized web for so long that the Semantic Web was always going to be stillborn?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.figma.com/blog/how-figmas-multiplayer-technology-works/"&gt;How Figma‚Äôs multiplayer technology works&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our primary goal when designing our multiplayer system was for it to be no more complex than necessary to get the job done. A simpler system is easier to reason about which then makes it easier to implement, debug, test, and maintain. Since Figma isn't a text editor, we didn't need the power of OTs and could get away with something less complicated.&lt;/p&gt;
&lt;p&gt;Figma's tech is instead inspired by something called CRDTs, which stands for Conflict-free Replicated Data Types. CRDTs refer to a collection of different data structures commonly used in distributed systems. All CRDTs satisfy certain mathematical properties which guarantee eventual consistency. If no more updates are made, eventually everyone accessing the data structure will see the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://guidebookgallery.org/"&gt;GUIdebook&lt;/a&gt;: Graphical User Interface gallery, curated videos, books, screenshots, articles, etc. that explore the history and evolution of the graphical user interface.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a website dedicated to preserving and showcasing Graphical User Interfaces, as well as various materials related to them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Past Futures of Coding&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ox5P7QyL774"&gt;Self: The Movie;&lt;/a&gt; an overview of the &lt;a href="http://www.selflanguage.org/"&gt;self programming language&lt;/a&gt; from 1995.&lt;/p&gt;
&lt;p&gt;Another self presentation: &lt;a href="https://www.youtube.com/watch?v=3ka4KY7TMTU"&gt;Self and Self: Whys and Wherefores&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(September 30, 2009) David Unger, from IBM Research, discusses how his experience in computer science has led him to the conclusion that even if your ideas succeed, the real legacy is the people.&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-4/</guid><pubDate>Wed, 03 Apr 2024 13:42:27 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/01 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Welcome! we are slightly over 150 members, let's try the 200 goal for next month :)  &lt;/p&gt;
&lt;p&gt;This time I introduced some simple separators between entries so it's clear where something ends and the next thing starts, let me know what you think.&lt;/p&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Edward de Jong&lt;/strong&gt; posted a new example showing the physical units of measurement feature in the Beads language, which tracks units at runtime (by storing the exponents of the component physical unit terms along with the value). A few languages have included physical units, but it is extremely rare to track the units at runtime.&lt;/p&gt;
&lt;p&gt;For the heat transfer app, see &lt;a href="https://github.com/magicmouse/beads-examples"&gt;https://github.com/magicmouse/beads-examples&lt;/a&gt;, for the SDK go to &lt;a href="http://beadslang.com"&gt;beadslang.com&lt;/a&gt;, for more information check &lt;a href="http://beadslang.org/"&gt;beadslang.org&lt;/a&gt; (which is different from the previous one)&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1579077633036900"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt; shared a demo: &lt;a href="https://www.youtube.com/watch?v=g1LyPBPNJiI"&gt;No Code Data Science Update: Drag &amp;amp; Drop Basket, Workspaces and Search&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1578924156032900"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Easier drag &amp;amp; drop of one or more items across long distances or across screens with the basket.&lt;/p&gt;
&lt;p&gt;Workspaces can be created to work on different tasks and search used to navigate between them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://akkartik.name/"&gt;Kartik Agaram&lt;/a&gt; Shared a really detailed spreadsheet: &lt;a href="https://docs.google.com/spreadsheets/d/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc/edit#gid=0"&gt;Future of Coding or Programming: Project Comparison&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/Westoncb"&gt;westoncb&lt;/a&gt; author of Lucidity introduced himself and presented another project: a slightly better known structure editor project called &lt;a href="http://symbolflux.com/projects/tiledtext"&gt;Tiled Text&lt;/a&gt;. (&lt;a href="https://futureofcoding.slack.com/archives/CC2JRGVLK/p1579054014097800"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nagle5000"&gt;nagle&lt;/a&gt; wrote a blog-post version of a paper submitted to PPIG (Psychology of Programming 2019) &lt;a href="https://blog.coda.io/how-coda-helps-people-overcome-technology-freeze-2132fabd4190"&gt;How Coda helps people overcome technology freeze&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579128538206100"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm sketching out a way to connect recent nervous system breakthroughs to programmable UI design, taking inspiration from how cognitive science breakthroughs anchored original UI design for the Alto.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Paper: &lt;a href="https://pdfhost.io/v/FY@l0Ma3_Winter_is_Coding_On_Programming_The_Freeze_Response.pdf"&gt;Winter is Coding: On Programming &amp;amp; The Freeze Response&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/mdubakov"&gt;Michael Dubakov&lt;/a&gt; shared &lt;a href="https://www.alexhudson.com/2020/01/13/the-no-code-delusion/"&gt;The 'No Code' Delusion&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578924949164800"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Increasingly popular in the last couple of years, I think 2020 is going to be the year of ‚Äúno code‚Äù: the movement that say you can write business logic and even entire applications without having the training of a software developer. I empathise with people doing this, and I think some of the ‚Äúno code‚Äù tools are great. But I also thing it‚Äôs wrong at heart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt; shared &lt;a href="https://medium.com/darklang/compiling-dark-to-sql-bb8918d1acdd"&gt;Compiling Dark to SQL&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do we make programs in Dark fast, while keeping complexity for developers really low?&lt;/p&gt;
&lt;p&gt;We recently shipped a new Dark feature that compiles Dark code to SQL. This post goes into the nitty gritty details of how and why we built it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stefan-lesser.com/"&gt;Stefan Lesser&lt;/a&gt; shared &lt;a href="https://shape.design.gatech.edu/Machine/index2.html"&gt;Visual Calculations in the Shape Machine&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does it mean to have a new modeling software for design that allows scientists, engineers and designers to specify their actions by drawing shapes rather than by writing scripts? What is the difference between a shape you see and the way it is currently recorded in the database of your computer? What does it mean to program with shapes?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ivan Reese&lt;/strong&gt; shared &lt;a href="http://worrydream.com/refs/"&gt;Bret Victor's list of references&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Didn't realize that Bret had directory listings enabled on his server, but it makes sense given other "open for people to view and tinker" things he's done. (My favourite: all his javascript is unminified so you can see how he implemented the dynamic examples in his essays.)&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/</guid><pubDate>Wed, 03 Apr 2024 09:12:29 GMT</pubDate></item></channel></rss>