<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly (Posts about past)</title><link>http://newsletter.futureofcoding.org/</link><description></description><atom:link href="http://newsletter.futureofcoding.org/categories/past.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Wed, 03 Apr 2024 13:43:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2020/01 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Welcome! this week I'm trying a different format for entries, let me know if you notice and what you think about it :)&lt;/p&gt;
&lt;h4&gt;Demos&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=L66Va7FSjWM"&gt;Instadeq No Code Data Science Update: Time Traveling Undo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New feature to undo changes by seeing the different states of an entity through time and picking one to restore.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;From our Community&lt;/h4&gt;
&lt;p&gt;Steve Dekorte started a really interesting conversation about &lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579212773252900"&gt;different ways of representing nothingness&lt;/a&gt;, and how that sometimes chaffs against type discipline. The conversation goes deep on data modelling and representation.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://web.eecs.utk.edu/~azh/blog/notebookpainpoints.html"&gt;What's wrong with computational notebooks?&lt;/a&gt; by &lt;a href="https://twitter.com/austinzhenley"&gt;Austin Z. Henley&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579526703208300"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computational notebooks, such as Jupyter Notebooks, Azure Notebooks, and Databricks, are wildly popular with data scientists. But as these notebooks are used for more and more complex tasks, data scientists run into more and more pain points. In this post I will very briefly summarize our method, findings, and some opportunities for tools.&lt;/p&gt;
&lt;p&gt;This post is an informal summary of our recent CHI'20 paper, "What's Wrong with Computational Notebooks? Pain Points, Needs, and Design Opportunities". Check out the &lt;a href="http://web.eecs.utk.edu/~azh/pubs/Chattopadhyay2020CHI_NotebookPainpoints.pdf"&gt;preprint&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sp.cmc.msu.ru/courses/smalltalk/fabrik/Fabrik.html"&gt;Fabrik - A Visual Programming Environment&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/Dan_Ingalls"&gt;Dan Ingalls&lt;/a&gt; and others (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579522204207200"&gt;Slack Thread&lt;/a&gt; and &lt;a href="https://twitter.com/prathyvsh/status/1190222195579994113"&gt;Twitter Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fabrik is a visual programming environment - a kit of computational and user-interface components that can be "wired" together to build new components and useful applications. Fabrik diagrams utilize bidirectional dataflow connections as a shorthand for multiple paths of flow. Built on object-oriented foundations, Fabrik components can compute arbitrary objects as outputs. Music and animation can be programmed in this way and the user interface can even be extended by generating graphical structures that depend on other data. An interactive type system guards against meaningless connections. As with simple dataflow, each Fabrik component can be compiled into an object with access methods corresponding to each of the possible paths of data propagation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="http://michaelnielsen.org/blog/principles-of-effective-research/"&gt;Principles of Effective Research&lt;/a&gt; by Michael Nielsen has some good tips on conducting research. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579556241220000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A video by Philip Guo &lt;a href="https://www.youtube.com/watch?v=ttTEpgGwsts&amp;amp;feature=youtu.be"&gt;PG Vlog #___ - Nielsen's "Principles of Effective Research": what i find most relevant for students&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Will the future of coding be statically, dynamically typed, both or neither? Alexis King thinks that &lt;a href="https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/"&gt;No, dynamic type systems are not inherently more open&lt;/a&gt;. (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579556106218100"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hillelwayne.com/"&gt;Hillel Wayne&lt;/a&gt; has &lt;a href="https://buttondown.email/hillelwayne/archive/a-totally-polished-and-not-at-all-half-baked-take/"&gt;A Totally Polished and not-at-all half-baked Take on Static vs Dynamic Typing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vladimir Gordeev&lt;/strong&gt; shared a presentation he gave at his university: &lt;a href="https://www.youtube.com/watch?v=t8UH3DjvxDE"&gt;Towards efficient development tools&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1579618522012000"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In presentation I tried to show the possibility and need for better tools. I did a short overview of existing FoC projects, talked a bit about project I am working on: a generic tree editor (structure editor) that doesn't tied up to any PL. I also talked about idea of designing PL by balancing Order and Chaos, ideas that I got from Jordan Peterson.&lt;/p&gt;
&lt;p&gt;I believe that breakaway from text-based editing towards structure-based is an inevitable event for future of programming.&lt;/p&gt;
&lt;p&gt;I also have some other ideas about programming languages that I would like to build on top of this tree editing platform, but it is not covered in presentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=JQCJCTgzCFo"&gt;Branislav Selic - On the Engineering of Software-Based Systems for the 21 st Century&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579645005241100"&gt;Slack Thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Learning from failed utopias of the recent past: &lt;a href="https://twobithistory.org/2018/05/27/semantic-web.html"&gt;Whatever Happened to the Semantic Web?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web we have today is slowly becoming a glorified app store, just the easiest way among many to download software that communicates with distant servers using closed protocols and schemas, making it functionally identical to the software ecosystem that existed before the web. How did we get here? If the effort to build a Semantic Web had succeeded, would the web have looked different today? Or have there been so many forces working against a decentralized web for so long that the Semantic Web was always going to be stillborn?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.figma.com/blog/how-figmas-multiplayer-technology-works/"&gt;How Figma’s multiplayer technology works&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our primary goal when designing our multiplayer system was for it to be no more complex than necessary to get the job done. A simpler system is easier to reason about which then makes it easier to implement, debug, test, and maintain. Since Figma isn't a text editor, we didn't need the power of OTs and could get away with something less complicated.&lt;/p&gt;
&lt;p&gt;Figma's tech is instead inspired by something called CRDTs, which stands for Conflict-free Replicated Data Types. CRDTs refer to a collection of different data structures commonly used in distributed systems. All CRDTs satisfy certain mathematical properties which guarantee eventual consistency. If no more updates are made, eventually everyone accessing the data structure will see the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://guidebookgallery.org/"&gt;GUIdebook&lt;/a&gt;: Graphical User Interface gallery, curated videos, books, screenshots, articles, etc. that explore the history and evolution of the graphical user interface.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a website dedicated to preserving and showcasing Graphical User Interfaces, as well as various materials related to them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Past Futures of Coding&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ox5P7QyL774"&gt;Self: The Movie;&lt;/a&gt; an overview of the &lt;a href="http://www.selflanguage.org/"&gt;self programming language&lt;/a&gt; from 1995.&lt;/p&gt;
&lt;p&gt;Another self presentation: &lt;a href="https://www.youtube.com/watch?v=3ka4KY7TMTU"&gt;Self and Self: Whys and Wherefores&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(September 30, 2009) David Unger, from IBM Research, discusses how his experience in computer science has led him to the conclusion that even if your ideas succeed, the real legacy is the people.&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-4/</guid><pubDate>Wed, 03 Apr 2024 13:42:27 GMT</pubDate></item><item><title>Future of Coding Weekly 2020/01 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;Welcome! we are slightly over 150 members, let's try the 200 goal for next month :)  &lt;/p&gt;
&lt;p&gt;This time I introduced some simple separators between entries so it's clear where something ends and the next thing starts, let me know what you think.&lt;/p&gt;
&lt;h3&gt;Demos&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Edward de Jong&lt;/strong&gt; posted a new example showing the physical units of measurement feature in the Beads language, which tracks units at runtime (by storing the exponents of the component physical unit terms along with the value). A few languages have included physical units, but it is extremely rare to track the units at runtime.&lt;/p&gt;
&lt;p&gt;For the heat transfer app, see &lt;a href="https://github.com/magicmouse/beads-examples"&gt;https://github.com/magicmouse/beads-examples&lt;/a&gt;, for the SDK go to &lt;a href="http://beadslang.com"&gt;beadslang.com&lt;/a&gt;, for more information check &lt;a href="http://beadslang.org/"&gt;beadslang.org&lt;/a&gt; (which is different from the previous one)&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1579077633036900"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt; shared a demo: &lt;a href="https://www.youtube.com/watch?v=g1LyPBPNJiI"&gt;No Code Data Science Update: Drag &amp;amp; Drop Basket, Workspaces and Search&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/CCL5VVBAN/p1578924156032900"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Easier drag &amp;amp; drop of one or more items across long distances or across screens with the basket.&lt;/p&gt;
&lt;p&gt;Workspaces can be created to work on different tasks and search used to navigate between them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;From our Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://akkartik.name/"&gt;Kartik Agaram&lt;/a&gt; Shared a really detailed spreadsheet: &lt;a href="https://docs.google.com/spreadsheets/d/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc/edit#gid=0"&gt;Future of Coding or Programming: Project Comparison&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/Westoncb"&gt;westoncb&lt;/a&gt; author of Lucidity introduced himself and presented another project: a slightly better known structure editor project called &lt;a href="http://symbolflux.com/projects/tiledtext"&gt;Tiled Text&lt;/a&gt;. (&lt;a href="https://futureofcoding.slack.com/archives/CC2JRGVLK/p1579054014097800"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nagle5000"&gt;nagle&lt;/a&gt; wrote a blog-post version of a paper submitted to PPIG (Psychology of Programming 2019) &lt;a href="https://blog.coda.io/how-coda-helps-people-overcome-technology-freeze-2132fabd4190"&gt;How Coda helps people overcome technology freeze&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579128538206100"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm sketching out a way to connect recent nervous system breakthroughs to programmable UI design, taking inspiration from how cognitive science breakthroughs anchored original UI design for the Alto.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Paper: &lt;a href="https://pdfhost.io/v/FY@l0Ma3_Winter_is_Coding_On_Programming_The_Freeze_Response.pdf"&gt;Winter is Coding: On Programming &amp;amp; The Freeze Response&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/mdubakov"&gt;Michael Dubakov&lt;/a&gt; shared &lt;a href="https://www.alexhudson.com/2020/01/13/the-no-code-delusion/"&gt;The 'No Code' Delusion&lt;/a&gt; (&lt;a href="https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578924949164800"&gt;Slack Conversation&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Increasingly popular in the last couple of years, I think 2020 is going to be the year of “no code”: the movement that say you can write business logic and even entire applications without having the training of a software developer. I empathise with people doing this, and I think some of the “no code” tools are great. But I also thing it’s wrong at heart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt; shared &lt;a href="https://medium.com/darklang/compiling-dark-to-sql-bb8918d1acdd"&gt;Compiling Dark to SQL&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do we make programs in Dark fast, while keeping complexity for developers really low?&lt;/p&gt;
&lt;p&gt;We recently shipped a new Dark feature that compiles Dark code to SQL. This post goes into the nitty gritty details of how and why we built it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stefan-lesser.com/"&gt;Stefan Lesser&lt;/a&gt; shared &lt;a href="https://shape.design.gatech.edu/Machine/index2.html"&gt;Visual Calculations in the Shape Machine&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does it mean to have a new modeling software for design that allows scientists, engineers and designers to specify their actions by drawing shapes rather than by writing scripts? What is the difference between a shape you see and the way it is currently recorded in the database of your computer? What does it mean to program with shapes?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ivan Reese&lt;/strong&gt; shared &lt;a href="http://worrydream.com/refs/"&gt;Bret Victor's list of references&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Didn't realize that Bret had directory listings enabled on his server, but it makes sense given other "open for people to view and tinker" things he's done. (My favourite: all his javascript is unminified so you can see how he implemented the dynamic examples in his essays.)&lt;/p&gt;
&lt;/blockquote&gt;</description><category>past</category><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202001-week-3/</guid><pubDate>Wed, 03 Apr 2024 09:12:29 GMT</pubDate></item></channel></rss>