# Two Minute Week

🎥 [visual programming with improved timeline slider](https://youtu.be/ElNTPWdWfFQ) via [Maikel van de Lisdonk](https://www.devhelpr.com/)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/two-minute-week.html#2024-04-14T12:41:22.387Z)

![Youtube Thumbnail](https://img.youtube.com/vi/ElNTPWdWfFQ/hqdefault.jpg)

I've been improving the timeline-slider in my visual programming system code-flow-canvas.. you can try it out here : [demo.codeflowcanvas.io](https://demo.codeflowcanvas.io) (best experience is on desktop since the mobile and touch responsiveness is still lacking). 



Additionally the state-machine node now also shows its transitions when executing a flow or using the timeline slider. 



Also some the nodes that are used to visualize data have been connected to the flow-execution history. Some changes were needed in keeping track of state and updating nodes visually when using the timeline slider. 



In this video I [show some of the examples together with the timeline slider here](https://youtu.be/ElNTPWdWfFQ)

# Our Work

🎥 [Building an everything shell](https://vimeo.com/932149150?share=copy) via [Peter Saxton](https://twitter.com/CrowdHailer)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-09T19:38:16.681Z)

![Vimeo Thumbnail](https://i.vimeocdn.com/video/1829727771-aef54e2cc7a9e469617424036e8a51cd8e778736101a608d414b59390ec3a04b-d_295x166)

I've started building an "everything shell". It uses my language EYG and a structural editor. the whole thing is be hosted with the idea that the resources you can ask about (instead of filesystems and processes) are every cloud system I have.



💬 **Ivan Lugo**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-10T19:55:43.134Z)

“It’s a Unix system… I know this!”



Something from a year or two ago that I built and iterated on since then. Ever wanted to see all your files in 3D to get a mental map? No problem - use  `CherrierView`  - a terminal-style, colorized  `.dae`  blit of arbitrary directories into space.

🎥 [Demo](http://history.futureofcoding.org/history/msg_files/F06/F06TTTR3HTN.mov)



🎥 [Torn Leaf Zero](https://www.youtube.com/watch?v=-FgAHiI3ZNY) via [Lu Wilson](https://twitter.com/TodePond)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/share-your-work.html#2024-04-14T13:17:27.302Z)

![Youtube Thumbnail](https://img.youtube.com/vi/-FgAHiI3ZNY/hqdefault.jpg)

I made a video to introduce an exhibition im making called TORN LEAF ZERO

It features a collaborative artwork with over one hundred participants

# Devlog Together

📝 [exaequos.com](https://www.exaequos.com) via [Kartik Agaram](http://akkartik.name/about)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/devlog-together.html#2024-04-13T18:18:35.754Z)

I've been playing with a new platform that I hope will be quite convivial. Hosted 😬 but no Javascript and seems easy to build and self-host. Created by a single person, so decent chance of staying simple over time. It seems to be a fork of emscripten that's been made habitable. In particular, it includes raylib and some Lua bindings to it, so I'm starting to feel at home.



[exaequos.com](https://www.exaequos.com)



I ported one of my early LÖVE apps to it, for geometric constructions. There's an app store and I've published my app there, so you should be able to run it for yourself and inspect the source code. (All apps on the app store are available right in the file system, under  `/usr/store` !)



Disclaimers. It's slow, like dialing up over a phone line. Still lots of bugs. I had to reboot the VM several times while recording this video. Commands often hang or crash, then completely stop working until I reload. It's never lost my data, though. Data is stored in local storage on the browser until you publish something to the app store.

🎥 [exaequOS](http://history.futureofcoding.org/history/msg_files/F06/F06U6BTNW7M.webm)

# Thinking Together

💬 [Hamish Todd](https://twitter.com/hamish_todd)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-08T10:57:20.034Z)

I'm thinking about spreadsheets. Has anyone ever made a convincing interface for  *defining functions* , using a spreadsheet interface?

(I am aware that you can define functions in most modern spreadsheets, but this requires you to go to a traditional coding interface. This is obviously cheating!)



💬 [Andreas S](https://twitter.com/curious_reader)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-13T09:07:51.756Z)

Hi FoC Community 🙂  I'm looking for something that i found a couple of years ago and apparently my fuzzy descriptions fail my zettelkasten or a search engine for that matter. I think I'm looking for a clojure talk in which someone presented also a tool. This tool used a UI of 2 or Three circles as a kind of number REPL which explained for example how the map function works in clojure. I hope that isn'T too vague if you know the name of the tool, that would be very cool. Thank you!!



📝 [Where does constant data go?](https://medium.com/@bitteldany/where-does-constant-data-go-b650338b2ee9) via **Dany**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/thinking-together.html#2024-04-14T12:34:59.807Z)

I wrote a blog post about constant data in PL. Which is kind of curious in text based PL and a place where more visual approaches can really shine. 


>All of the programming languages I know make an interesting distinction, between two groups of constants, depending on type.


# Content

📝 [Future of Coding Weekly 2020/02 Week 1](https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/) via [Mariano Guerra](https://twitter.com/warianoguerra)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/linking-together.html#2024-04-10T08:15:55.321Z)

📜 Past Futures of Coding February 2020 Edition



- [Future of Coding Weekly 2020/02 Week 1](https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-1/)

- [Future of Coding Weekly 2020/02 Week 2](https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-2/)

- [Future of Coding Weekly 2020/02 Week 3](https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-3/)

- [Future of Coding Weekly 2020/02 Week 4](https://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202002-week-4/)



💬 [Stefan Lesser](https://twitter.com/stefanlesser)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/04/W3/linking-together.html#2024-04-10T12:52:24.771Z)

I’ve been reviewing classic papers about simplicity, complexity, and adjacent topics, both for my current series of essays and an essay I’m writing for Onward!



So far I have reviewed (or downloaded for review):




* Herbert A. Simon, The Architecture of Complexity (1962)
* Melvin E. Conway, How Do Committees Invent? (1968)
* Peter Naur, Programming as Theory Building (1985)
* Frederick P. Brooks, Jr., No Silver Bullet — Essence and Accident in Software Engineering (1986)
* Richard P. Gabriel, Worse is Better (1991)
* Rich Hickey, Simple Made Easy (2011)



What am I missing? What else should be on that list?



----------

👨🏽‍💻 By 🐘 [@marianoguerra@hachyderm.io](https://hachyderm.io/@marianoguerra) 🐦 [@warianoguerra](https://twitter.com/warianoguerra)

💬 Not a member yet? Check the [Future of Coding Community](https://futureofcoding.org/)

✉️ Not subscribed yet? [Subscribe to the Newsletter](https://newsletter.futureofcoding.org/join/) / [Archive](https://newsletter.futureofcoding.org/archive.html) / [RSS](https://history.futureofcoding.org/newsletter/rss.xml)

🎙️ Prefer podcasts? check the [Future of Coding Podcast](https://futureofcoding.org/episodes/)

