📍 Spatial Computing 🧑‍🏫 Future of Kids Coding 

# Our Work

📝 [Structured data. Not too much. Mostly text.](https://merveilles.town/@akkartik/111798602704749628) via [Kartik Agaram](http://akkartik.name/about)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/share-your-work.html#2024-01-22T08:15:50.853Z)

📍 [Spatial Computing with links not apps](https://duncancragg.substack.com/p/spatial-computing-with-links-not?r=1sq2dz&utm_campaign=post&utm_medium=web) via [Duncan Cragg](https://twitter.com/Duncan__Cragg)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/share-your-work.html#2024-01-23T16:45:27.071Z)

My latest article:



 *Spatial Computing with links not apps* 



 _Freedom from the Metal to the Metaverse_ 

# Devlog Together

💬 [Jason Morris](https://twitter.com/RoundTableLaw)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/devlog-together.html#2024-01-23T09:24:08.157Z)

This week I paid off some technical debt, and refactored a single 7500-line file into 134 different JavaScript modules. I did this to myself. No one to blame but me. But it's finished.

# Thinking Together

💬 [Mariano Guerra](https://twitter.com/warianoguerra)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/thinking-together.html#2024-01-25T10:31:23.408Z)

Why aren't you using one of these? What's missing in them? is your use case not covered?






* [gtoolkit.com](https://gtoolkit.com/) is the Moldable Development environment. It empowers you to make systems explainable through experiences tailored for each problem.
* [unison-lang.org](https://www.unison-lang.org/) A new approach to Distributed programming
* [github.com/hyperfiddle/electric](https://github.com/hyperfiddle/electric) A reactive DSL for full-stack web development, with compiler-managed frontend/backend network sync
* [redplanetlabs.com](https://redplanetlabs.com/) a new programming platform that ** reduces the cost of building scalable backends by 100x
* [croquet.io](https://croquet.io/) Multiplayer Platform for Web and Unity
* [enso.org](https://enso.org/) Nodes and wires data manipulation 
* [rvbbit.com](https://www.rvbbit.com/) reactive data boards & flows
* [wolfram.com/language](https://www.wolfram.com/language/) a symbolic language, deliberately designed with the breadth and unity needed to develop powerful programs quickly.

💬 **Jacob Zimmerman**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/thinking-together.html#2024-01-26T02:08:40.563Z)

Just curious for all your thoughts, is being ahead of your time a good thing? I’m thinking of a conversation I had with **@Toby Schachman** in the Cuttle discord a while back where he mentioned that Cuttle aimed certain details at a status-quo of programming style unlike it’s predecessor Apparatus, I thought that was quite profound. I’m thinking also of Fortran vs Lisp (or perhaps Forth). When is it  _not_  worth it to meet people where they are?



📍💬 **Eli Mellen**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/thinking-together.html#2024-01-28T14:06:35.055Z)

I wanted to bounce 2 terms I've been thinking of off of this group:



I dig visual programming, but think the term is like a little bit of a brain poison because it isn't really descriptive of the goals, and, like, almost all textual programming is inherently visual, too...just...in the way text is.



I think [Ivan Reese](http://ivanish.ca/) was the person I first heard float the term "spatial programming," which I dig, but at least for me, it also misses the real value add of what I'm looking for in a "visual" system.



So, the two terms I've been kicking around:






* relational programming
* cartographic programming



Neither are perfect, and both feel exhaustingly pretentious (a good thing, may haps?) but my intention with both terms is to highlight that these sorts of systems, unlike text-based programming, help make the relationships between different elements (classes, data flow, inheritance, etc.) meaningful using information other than similar names.



Useful? Stupid? Prior art?

# Content

🎥 [The Only Unbreakable Law](https://www.youtube.com/watch?v=5IUj1EZwpJY) via [Konrad Hinsen](https://khinsen.net/)

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-22T10:10:01.798Z)

![Youtube Thumbnail](https://img.youtube.com/vi/5IUj1EZwpJY/hqdefault.jpg)

A nice talk about Conway's law

📝 [Visualization of Cultural Heritage Collection Data: State of the Art and Future Challenges](https://ieeexplore.ieee.org/document/8352050) via **Jasmine Otto**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-22T18:55:52.114Z)

Given recent discussion of  _what social scientists need from computing_ (and is it plain-text scripting?), sharing this recent survey of cultural heritage visualization systems (16p). Section 3.4 (Granularity and Interactivity) will be especially interesting; the authors avoid flattening this idea to a 'file system'.

💬 **Eli Mellen**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-22T19:17:34.479Z)

Another one of those developer thriving comics from pluralsight’s research folks. I like that this one hits on contest culture, and its relationship to AI. (also, love that the PDF includes accessible text)

📄 [Brilliant Blobs.pdf](http://history.futureofcoding.org/history/msg_files/F06/F06EUQ0EZU6.pdf)

🧑‍🏫🎥 [Testing a new programming approach with 11 and 12 year-old children by Agustín R.  Martínez](https://youtu.be/dGvG2wCTJK8?si=0JecFvpLgqZX5iLX) via **Beni Cherniavsky-Paskin**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/linking-together.html#2024-01-25T19:55:34.780Z)

![Youtube Thumbnail](https://img.youtube.com/vi/dGvG2wCTJK8/hqdefault.jpg)


Whoa.  Similar to [Lu Wilson](https://twitter.com/TodePond)'s probabilistic rule-driven VMs,

plus a touch of Orca?  (Specifically the way the kid  _built_  a timer out of a character pacing back and forth, see around 11:10-14:30)

I particularly love the use of user-drawn icons in lieu of symbols.  Naming is hard (and requires literacy).

# End User Programming

📝 [Myths and Mythconceptions](https://dl.acm.org/doi/pdf/10.1145/3480947) via **Stephen De Gabrielle**

[🧵 conversation](https://history.futureofcoding.org/history/weekly/2024/01/W5/of-end-user-programming.html#2024-01-25T15:59:50.135Z)

Almost finished listening to the marathon podcast on this paper.


----------

👨🏽‍💻 By 🐘 [@marianoguerra@hachyderm.io](https://hachyderm.io/@marianoguerra) 🐦 [@warianoguerra](https://twitter.com/warianoguerra)

💬 Not a member yet? Check the [Future of Coding Community](https://futureofcoding.org/)

✉️ Not subscribed yet? [Subscribe to the Newsletter](https://tinyletter.com/marianoguerra/) / [Archive](https://newsletter.futureofcoding.org/) / [RSS](https://history.futureofcoding.org/newsletter/rss.xml)

🎙️ Prefer podcasts? check the [Future of Coding Podcast](https://futureofcoding.org/episodes/)

